
// automatically generated by m4 from headers in proto subdir


#ifndef __ESXDOS_H__
#define __ESXDOS_H__

#include <arch.h>
#include <stdint.h>

// Esxdos Drive Shortcuts

#define ESXDOS_DRIVE_CURRENT  __ESXDOS_DRIVE_CURRENT
#define ESXDOS_DRIVE_SYSTEM   __ESXDOS_DRIVE_SYSTEM

// Esxdos File Mode

#define ESXDOS_MODE_R   __ESXDOS_MODE_READ
#define ESXDOS_MODE_W   __ESXDOS_MODE_WRITE

#define ESXDOS_MODE_OE  __ESXDOS_MODE_OPEN_EXIST
#define ESXDOS_MODE_OC  __ESXDOS_MODE_OPEN_CREAT

#define ESXDOS_MODE_CN  __ESXDOS_MODE_CREAT_NOEXIST
#define ESXDOS_MODE_CT  __ESXDOS_MODE_CREAT_TRUNC

#define ESXDOS_MODE_P3  __ESXDOS_MODE_USE_HEADER

// Esxdos Seek Whence

#define ESXDOS_SEEK_SET  __ESXDOS_SEEK_SET   // set file pointer
#define ESXDOS_SEEK_FWD  __ESXDOS_SEEK_FWD   // forward from file pointer
#define ESXDOS_SEEK_BWD  __ESXDOS_SEEK_BWD   // backward from file pointer

// Esxdos Data Structures

struct esx_device
{
	uint8_t  path;    // bits 7..3 = major, bits 2..0 = minor
	uint8_t  flags;
	uint32_t size;    // device size in blocks
};

struct esx_p3_hdr
{
   uint8_t  type;    // 0 = program, 1 = numeric array, 2 = char array, 3 = code
   uint16_t length;
	uint8_t  data[4];
	uint8_t  unused;
};

struct esx_stat
{
   uint8_t  drive;
   uint8_t  device;
	uint8_t  attr;
	uint32_t date;
	uint32_t size;
};

// Raw Disk IO on Specific Device

extern int esxdos_disk_info(unsigned char device,struct esx_device *ed);
extern int esxdos_disk_info_callee(unsigned char device,struct esx_device *ed) __z88dk_callee;
#define esxdos_disk_info(a,b) esxdos_disk_info_callee(a,b)


extern int esxdos_disk_read(unsigned char device,uint32_t position,void *dst);
extern int esxdos_disk_read_callee(unsigned char device,uint32_t position,void *dst) __z88dk_callee;
#define esxdos_disk_read(a,b,c) esxdos_disk_read_callee(a,b,c)


extern int esxdos_disk_write(unsigned char device,uint32_t position,void *src);
extern int esxdos_disk_write_callee(unsigned char device,uint32_t position,void *src) __z88dk_callee;
#define esxdos_disk_write(a,b,c) esxdos_disk_write_callee(a,b,c)



// Miscellaneous

extern unsigned char esxdos_m_getdrv(void);

extern unsigned char esxdos_m_setdrv(unsigned char drive);
extern unsigned char esxdos_m_setdrv_fastcall(unsigned char drive) __z88dk_fastcall;
#define esxdos_m_setdrv(a) esxdos_m_setdrv_fastcall(a)



extern unsigned char esxdos_m_gethandle(void);


extern uint32_t esxdos_m_getdate(void);


// Operations on Directories

extern unsigned char esxdos_f_opendir(void *pathname);
extern unsigned char esxdos_f_opendir_fastcall(void *pathname) __z88dk_fastcall;
#define esxdos_f_opendir(a) esxdos_f_opendir_fastcall(a)


extern unsigned char esxdos_f_opendir_p3(void *pathname);
extern unsigned char esxdos_f_opendir_p3_fastcall(void *pathname) __z88dk_fastcall;
#define esxdos_f_opendir_p3(a) esxdos_f_opendir_p3_fastcall(a)


extern unsigned char esxdos_f_readdir(unsigned char handle,void *dirent);
extern unsigned char esxdos_f_readdir_callee(unsigned char handle,void *dirent) __z88dk_callee;
#define esxdos_f_readdir(a,b) esxdos_f_readdir_callee(a,b)



extern int esxdos_f_getcwd(void *buf);
extern int esxdos_f_getcwd_fastcall(void *buf) __z88dk_fastcall;
#define esxdos_f_getcwd(a) esxdos_f_getcwd_fastcall(a)



extern int esxdos_f_chdir(void *pathname);
extern int esxdos_f_chdir_fastcall(void *pathname) __z88dk_fastcall;
#define esxdos_f_chdir(a) esxdos_f_chdir_fastcall(a)



extern int esxdos_f_unlink(void *filename);
extern int esxdos_f_unlink_fastcall(void *filename) __z88dk_fastcall;
#define esxdos_f_unlink(a) esxdos_f_unlink_fastcall(a)



// Operations on Files

extern unsigned char esxdos_f_open(void *filename,unsigned char mode);
extern unsigned char esxdos_f_open_callee(void *filename,unsigned char mode) __z88dk_callee;
#define esxdos_f_open(a,b) esxdos_f_open_callee(a,b)


extern unsigned char esxdos_f_open_p3(void *filename,unsigned char mode,struct esx_p3_hdr *h);
extern unsigned char esxdos_f_open_p3_callee(void *filename,unsigned char mode,struct esx_p3_hdr *h) __z88dk_callee;
#define esxdos_f_open_p3(a,b,c) esxdos_f_open_p3_callee(a,b,c)


extern int esxdos_f_close(unsigned char handle);
extern int esxdos_f_close_fastcall(unsigned char handle) __z88dk_fastcall;
#define esxdos_f_close(a) esxdos_f_close_fastcall(a)



extern int esxdos_f_sync(unsigned char handle);
extern int esxdos_f_sync_fastcall(unsigned char handle) __z88dk_fastcall;
#define esxdos_f_sync(a) esxdos_f_sync_fastcall(a)


extern int esxdos_f_fstat(unsigned char handle,struct esx_stat *es);
extern int esxdos_f_fstat_callee(unsigned char handle,struct esx_stat *es) __z88dk_callee;
#define esxdos_f_fstat(a,b) esxdos_f_fstat_callee(a,b)


extern uint32_t esxdos_f_fgetpos(unsigned char handle);
extern uint32_t esxdos_f_fgetpos_fastcall(unsigned char handle) __z88dk_fastcall;
#define esxdos_f_fgetpos(a) esxdos_f_fgetpos_fastcall(a)



extern uint32_t esxdos_f_seek(unsigned char handle,uint32_t distance,unsigned char whence);
extern uint32_t esxdos_f_seek_callee(unsigned char handle,uint32_t distance,unsigned char whence) __z88dk_callee;
#define esxdos_f_seek(a,b,c) esxdos_f_seek_callee(a,b,c)


extern int esxdos_f_read(unsigned char handle,void *dst,size_t nbytes);
extern int esxdos_f_read_callee(unsigned char handle,void *dst,size_t nbytes) __z88dk_callee;
#define esxdos_f_read(a,b,c) esxdos_f_read_callee(a,b,c)


extern int esxdos_f_write(unsigned char handle,void *src,size_t nbytes);
extern int esxdos_f_write_callee(unsigned char handle,void *src,size_t nbytes) __z88dk_callee;
#define esxdos_f_write(a,b,c) esxdos_f_write_callee(a,b,c)



#endif
