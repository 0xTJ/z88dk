include(`z88dk.m4')

dnl############################################################
dnl##       ZXN_CRT_799.M4 - RAM MODEL DOTN COMMAND          ##
dnl############################################################
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;          zx spectrum nextos extended dot command          ;;
;;       generated by target/zxn/startup/zxn_crt_799.m4      ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; GLOBAL SYMBOLS ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

include "config_zxn_public.inc"

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CRT AND CLIB CONFIGURATION ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

include "../crt_defaults.inc"
include "crt_config.inc"
include(`../crt_rules.inc')
include(`zxn_rules.inc')

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; SET UP MEMORY MODEL ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

include(`crt_memory_map.inc')

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; INSTANTIATE DRIVERS ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

include(`../clib_instantiate_begin.m4')

ifelse(eval(M4__CRT_INCLUDE_DRIVER_INSTANTIATION == 0), 1,,
`
   include(`crt_driver_instantiation.asm.m4')
')

include(`../clib_instantiate_end.m4')

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; STARTUP ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

SECTION CODE

PUBLIC __Start, __Exit

EXTERN _main

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CRT INIT ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

__Start:

   di

   ;; returning to basic
   
   push iy
   exx
   push hl

   IF __crt_enable_commandline >= 2
   
      exx
      
   ENDIF

   ;; move stack to current divmmc page
   
   ld (__sp_or_ret),sp
   ld sp,DOTN_REGISTER_SP

   ;; command line
   
   IF __crt_enable_commandline = 1
   
      include "../crt_cmdline_empty.inc"
      
   ENDIF

   IF __crt_enable_commandline >= 3
   
      include "crt_cmdline_esxdos.inc"
      
   ENDIF

   IF __crt_enable_commandline >= 1
   
      push hl                  ; argv
      push bc                  ; argc
      
   ENDIF

   ;; save mmu state

   EXTERN asm_zxn_read_mmu_state

   ld hl,__dotn_mmu_state
   call asm_zxn_read_mmu_state

   ;; page in system variables

   IF __USE_ZXN_OPCODES & __USE_ZXN_OPCODES_NEXTREG
   
      nextreg __REG_MMU2,10
      
   ELSE
   
      ld bc,__IO_NEXTREG_REG
      ld a,__REG_MMU2
      out (c),a
      inc b
      ld a,10
      out (c),a
      
   ENDIF

   ;; save last 1ffd, 7ffd

   EXTERN asm_zxn_read_sysvar_bank_state
   EXTERN asm_zxn_write_sysvar_bank_state
   
   call asm_zxn_read_sysvar_bank_state  ; h = BANK678, l = BANKM
   ld (__dotn_sysvar_bank_state),hl
   
   ;; enable +3DOS banking arrangement
   ;; divmmc has priority so OUT is safe
   
   EXTERN asm_zxn_write_bank_state
   
   ; h = BANK678 (1ffd)
   ; l = BANKM (7ffd)
   
   ld a,l
   and $f7                     ; 7ffd, pick rom 2
   or $07                      ; 7ffd, pick bank 7
   ld l,a
   
   ld (__dotn_nextos_bank_state),hl
   call asm_zxn_write_sysvar_bank_state
   call asm_zxn_write_bank_state  ; 1ffd = h, 7ffd = l, dffd = 0

   ;; copy NextOS allocation code to temp stack in bank 5
   
   ld hl,__allocate_pages_end - 1
   ld de,__SYSVAR_TSTACK
   ld bc,__allocate_pages_end - __allocate_pages_begin
   
   lddr

   ; disable divmmc and jump to allocation code in temp stack

   ld a,(__dotn_num_pages)
   ld b,a
   push bc                     ; save num_pages
   
   ld (__dotn_sp),sp
   ld sp,hl                    ; move stack to bank 5

   rst __ESXDOS_ROMCALL
   defw allocate_pages
   
   ld sp,(__dotn_sp)           ; move stack back to divmmc
   
   pop bc                      ; b = num_pages
   jr c, allocation_successful

allocation_failed:

   IF __USE_ZXN_OPCODES & __USE_ZXN_OPCODES_OTHER
   
      push error_memory
   
   ELSE
   
      ld hl,error_memory
      push hl
   
   ENDIF
   
   jp error_exit
   
   error_memory:
   
      defm "4 Out of memor", 'y'+0x80
   
allocation_successful:
   
   ; record allocated pages
   
   EXTERN __DTN_head
   EXTERN asm_zxn_mmu_from_addr
   
   ld hl,__DTN_head
   call asm_zxn_mmu_from_addr  ; a = mmu slot of first byte
   
   add a,__dotn_allocated_pages & 0xff
   ld e,a
   adc a,__dotn_allocated_pages / 256
   sub e
   ld d,a

   ld hl,allocated_pages
   
   ld c,b
   ld b,0
   
   ldir

   ;; restore legacy banking state (enable rom3)
   
   ld hl,(__dotn_sysvar_bank_state)
   call asm_zxn_write_sysvar_bank_state
   call asm_zxn_write_bank_state  ; 1ffd = h, 7ffd = l, dffd = 0

   ;; map allocated pages into the memory map
   
   EXTERN asm_zxn_write_mmu_state
   
   ld hl,__dotn_allocated_pages
   call asm_zxn_write_mmu_state

   ;; load second part of dotn into memory

   include "crt_load_esxdos_dotn.inc"

   ; initialize data section

   include "../clib_init_data.inc"

   ; initialize bss section

   include "../clib_init_bss.inc"

   ; interrupt mode
   
   include "../crt_set_interrupt_mode.inc"

SECTION code_crt_init          ; user and library initialization
SECTION code_crt_main

   include "../crt_start_ei.inc"

   ; call user program
   
   call _main                  ; hl = return status

   ; run exit stack

   IF __clib_exit_stack_size > 0
   
      EXTERN asm_exit
      jp asm_exit              ; exit function jumps to __Exit
   
   ENDIF

__Exit:

   push hl                     ; save return status

SECTION code_crt_exit          ; user and library cleanup
SECTION code_crt_return

   ; close files
   
   include "../clib_close.inc"

   ; terminate
   
   di

error_load:

   ;; page in system variables

   IF __USE_ZXN_OPCODES & __USE_ZXN_OPCODES_NEXTREG
   
      nextreg __REG_MMU2,10
      
   ELSE
   
      ld bc,__IO_NEXTREG_REG
      ld a,__REG_MMU2
      out (c),a
      inc b
      ld a,10
      out (c),a
      
   ENDIF

   ;; enable +3DOS banking arrangement
   
   ld hl,(__dotn_nextos_bank_state)
   call asm_zxn_write_sysvar_bank_state
   call asm_zxn_write_bank_state  ; 1ffd = h, 7ffd = l, dffd = 0

   ;; run NextOS deallocation code in temp stack in bank 5
   
   ld hl,__deallocate_pages_end - 1
   ld de,__SYSVAR_TSTACK
   ld bc,__deallocate_pages_end - __deallocate_pages_begin
   
   lddr
   
   ld (__dotn_sp),sp
   ld sp,hl                    ; move stack to bank 5

   ld hl,__dotn_allocated_pages + 2
   ld de,deallocated_pages
   ld bc,6
   
   ldir                        ; copy allocated pages to temp stack
   
   rst __ESXDOS_ROMCALL
   defw deallocate_pages
   
   ld sp,(__dotn_sp)           ; move stack back to divmmc

error_exit:

   ;; restore last 1ffd, 7ffd
   
   ld hl,(__dotn_sysvar_bank_state)  ; h = BANK678, l = BANKM
   call asm_zxn_write_sysvar_bank_state
   call asm_zxn_write_bank_state     ; 1ffd = h, 7ffd = l, dffd = 0
   
   ;; restore mmu state
   
   ld hl,__dotn_mmu_state
   call asm_zxn_write_mmu_state

   ;; returning to basic
   
   pop hl                      ; hl = return status

   ld sp,(__sp_or_ret)
   
   exx
   pop hl
   exx
   pop iy

   IF (__crt_interrupt_mode = 0) || (__crt_interrupt_mode = 2)
   
      im 1
   
   ENDIF
   
   ei

   ; If you exit with carry set and A<>0, the corresponding error code will be printed in BASIC.
   ; If carry set and A=0, HL should be pointing to a custom error message (with last char +$80 as END marker).
   ; If carry reset, exit cleanly to BASIC
      
   ld a,h
   or l
   ret z                       ; status == 0, no error
      
   scf
   ld a,l
      
   inc h
   dec h
      
   ret z                       ; status < 256, basic error code in status&0xff
      
   ld a,0                      ; status = & custom error message
   ret

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; NEXTOS PAGE ALLOCATION & DEALLOCATION ;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

   include "crt_alloc_esxdos_dotn.inc"

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; RUNTIME VARS ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

SECTION bss_dot_uninitialized

__sp_or_ret             :  defw 0
__dotn_sp               :  defw 0
__dotn_sysvar_bank_state:  defw 0
__dotn_nextos_bank_state:  defw 0

SECTION data_dot

__dotn_num_pages        :  defb 0
__dotn_mmu_state        :  defs 8,0xff
__dotn_allocated_pages  :  defs 8,0xff
__esxdos_dtx_fname      :  defs 18

include "../clib_variables.inc"

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CLIB STUBS ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

include "../clib_stubs.inc"
