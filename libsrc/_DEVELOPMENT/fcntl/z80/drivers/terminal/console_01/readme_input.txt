
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CONSOLE_01_INPUT ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

CONSOLE_01_INPUT is library code that can be inherited to
implement keyboard drivers.  The library code supplies
line editing, echo modes, and caps lock features among
other things.  It communicates to the output terminal via
messaging so the paired output terminal must understand
those messages (the library calls these output terminals
CONSOLE_01_OUTPUT).

The library input terminal driver reserves bytes stored in
the FDSTRUCT following the FDSTRUCT base.

offset_abs   offset_jp   description

  11..16       8..13     mutex
  17..18      14..15     FDSTRUCT *oterm = 0 if no output terminal connected
      19          16     pending char (unget char generated by key state machine)
  20..21      17..18     read_index (next char index from edit buffer)
  22..27      19..24     b_array_t (manages edit buffer)

offset_abs is the absolute offset from the beginning of the
FDSTRUCT.  offset_jp is the offset from & FDSTRUCT.JP which
is the value loaded into ix when the driver runs.

Drivers that further inherit from console_01_input can append
their own reserved state.

The library code generates one additional message that the
derived driver must implement:

; * ITERM_MSG_GETC
;
;   Read the keyboard device and return the char read.
;
;   enter:  ix = & FDSTRUCT.JP
; 
;    exit:  a = char after character set translation
;           carry set on error with hl=0 (err) or -1 (eof)
;
; can use:  af, bc, de, hl

All other messages can be forwarded to console_01_input_terminal.

The library code understands the following IOCTLs:

; * IOCTL_ITERM_TIE
;   Attach input device to a different output terminal (0 to disconnect)
;
; * IOCTL_ITERM_GET_EDITBUF
;   Copies edit buffer details to user program
;
; * IOCTL_ITERM_SET_EDITBUF
;   Writes edit buffer details into driver
;
; * IOCTL_ITERM_ECHO
;   enable / disable echo mode
;
; * IOCTL_ITERM_PASS
;   enable / disable password mode
;
; * IOCTL_ITERM_LINE
;   enable / disable line editing mode
;
; * IOCTL_ITERM_COOK
;   enable / disable cook mode
;
; * IOCTL_ITERM_CAPS
;   set / reset caps lock
;
; * IOCTL_ITERM_CRLF
;   enable / disable crlf processing
;
; * IOCTL_ITERM_CURS
;   enable / disable cursor in line mode

Although non-standard, flushing the terminal will result in clearing
the edit buffer and any pending char read from the keyboard.

Example code:

* target/zx/driver/terminal/console_01_input_kbd_inkey.asm

  Any platform implementing the library function "asm_in_inkey"
  can reuse this driver changing only the character set translation.

* target/zx/driver/terminal/console_01_input_kbd_last.asm

  Any platform that can supply keypresses via a byte written
  to memory independently of the running thread can reuse
  this driver changing only the character set translation.
