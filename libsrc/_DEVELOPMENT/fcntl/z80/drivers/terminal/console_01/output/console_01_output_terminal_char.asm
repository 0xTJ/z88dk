
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; CONSOLE_01_OUTPUT_TERMINAL_CHAR
; library driver for output terminals
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
; Windowed output terminal for fixed width fonts.
;
; Driver class diagram:
;
; CONSOLE_01_OUTPUT_TERMINAL (root, abstract)
; CONSOLE_01_OUTPUT_TERMINAL_CHAR (abstract)
;
; This driver implements most of the functions necessary
; for fixed width font output terminals, including
; messages delivered from the associated CONSOLE_01_INPUT
; terminal.  
;
; Messages consumed from stdio:
;
; * STDIO_MSG_ICTL
;
;   Not forwarded to base class.
;
; Messages consumed from CONSOLE_01_OUTPUT_TERMINAL:
;
; * OTERM_MSG_PUTC
;
; Messages consumed from CONSOLE_01_INPUT_TERMINAL:
;
; * ITERM_MSG_PUTC
; * ITERM_MSG_PRINT_CURSOR
;
;   The input terminal is generating characters.  These are
;   treated differently from characters generated by stdio.
;
; * ITERM_MSG_BS
; * ITERM_MSG_BS_PWD
; * ITERM_MSG_ERASE_CURSOR
;
;   For fixed width fonts these backspace messages do the
;   same thing.
;
; * ITERM_MSG_READLINE_BEGIN
; * ITERM_MSG_READLINE_END
;
;   The input terminal is starting or ending a new edit line.
;   While in editing a line, the output terminal always
;   scrolls the window without pause as necessary.
;
; Messages generated by this driver that must be implemented
; by a deriving driver:
;
; * OTERM_MSG_TTY (optional)
;
;   enter  :  c = char to output
;   exit   :  c = char to output (possibly modified)
;             carry reset if tty emulation absorbs char
;   can use:  af, bc, de, hl
;
;   The driver should call the tty emulation module.
;   If not implemented characters are output without processing.
;
; * OTERM_MSG_PRINTC
;
;   enter  :  c = ascii code >= 32
;             b = 255 if not supplied
;             l = absolute x coordinate
;             h = absolute y coordinate
;   can use:  af, bc, de, hl
;
;   Print the char to screen at given character coordinate.
;
; * OTERM_MSG_BELL (optional)
;
;   can use:  af, bc, de, hl
;
;   Sound the bell.
;
; * OTERM_MSG_SCROLL
;
;   enter  :   c = number of rows to scroll
;   can use:  af, bc, de, hl
;
;   Scroll the window upward 'c' character rows.
;
; * OTERM_MSG_CLS
;
;   can use:  af, bc, de, hl
;
;   Clear the window.
;
; * OTERM_MSG_PAUSE
;
;   can use:  af, bc, de, hl
;
;   The scroll count has reached zero so the driver should
;   pause the output somehow.
;
; * ITERM_MSG_BELL (optional)
;
;   can use:  af, bc, de, hl
;
;   The input terminal generates this message to indicate
;   the edit buffer is either empty or full.  The output
;   terminal generates this message to indicate the
;   output window is full and is being paused.

SECTION seg_code_fcntl

PUBLIC console_01_output_terminal_char

EXTERN console_01_output_terminal
EXTERN console_01_output_char_oterm_msg_putc, console_01_output_char_stdio_msg_ictl
EXTERN console_01_output_char_iterm_msg_putc, console_01_output_char_iterm_msg_bs
EXTERN console_01_output_char_iterm_msg_readline_begin, console_01_output_char_iterm_msg_readline_end

EXTERN OTERM_MSG_PUTC, STDIO_MSG_ICTL, ITERM_MSG_PUTC, ITERM_MSG_BS, ITERM_MSG_READLINE_BEGIN
EXTERN ITERM_MSG_BS_PWD, ITERM_MSG_PRINT_CURSOR, ITERM_MSG_ERASE_CURSOR, ITERM_MSG_READLINE_END

console_01_output_terminal_char:

   ; messages generated by stdio

   cp OTERM_MSG_PUTC
   jp z, console_01_output_char_oterm_msg_putc
   
   cp STDIO_MSG_ICTL
   jp z, console_01_output_char_stdio_msg_ictl
   
   ; messages generated by input terminal
   
   cp ITERM_MSG_PUTC
   jp z, console_01_output_char_iterm_msg_putc
   
   jp c, console_01_output_terminal    ; forward to library
   
   cp ITERM_MSG_BS
   jp z, console_01_output_char_iterm_msg_bs
   
   cp ITERM_MSG_BS_PWD
   jp z, console_01_output_char_iterm_msg_bs
   
   cp ITERM_MSG_PRINT_CURSOR
   jp z, console_01_output_char_iterm_msg_putc
   
   cp ITERM_MSG_ERASE_CURSOR
   jp z, console_01_output_char_iterm_msg_bs
   
   cp ITERM_MSG_READLINE_BEGIN
   jp z, console_01_output_char_iterm_msg_readline_begin
   
   cp ITERM_MSG_READLINE_END
   jp z, console_01_output_char_iterm_msg_readline_end
   
   jp console_01_output_terminal       ; forward to library
