1; (line 68)

list = .
--------------------------------------------------------------------------------
assert( dl_push( head, &nodes[i] ) == &nodes[i] ); (line 73)

list = A.
--------------------------------------------------------------------------------
assert( dl_push( head, &nodes[i] ) == &nodes[i] ); (line 73)

list = AB.
--------------------------------------------------------------------------------
assert( dl_push( head, &nodes[i] ) == &nodes[i] ); (line 73)

list = ABC.
--------------------------------------------------------------------------------
assert( dl_push( head, &nodes[i] ) == &nodes[i] ); (line 73)

list = ABCD.
--------------------------------------------------------------------------------
assert( dl_push( head, &nodes[i] ) == &nodes[i] ); (line 73)

list = ABCDE.
--------------------------------------------------------------------------------
assert( dl_pop( head ) == &nodes[i] ); (line 75)

list = ABCD.
--------------------------------------------------------------------------------
assert( dl_pop( head ) == &nodes[i] ); (line 75)

list = ABC.
--------------------------------------------------------------------------------
assert( dl_pop( head ) == &nodes[i] ); (line 75)

list = AB.
--------------------------------------------------------------------------------
assert( dl_pop( head ) == &nodes[i] ); (line 75)

list = A.
--------------------------------------------------------------------------------
assert( dl_pop( head ) == &nodes[i] ); (line 75)

list = .
--------------------------------------------------------------------------------
assert( dl_unshift( head, &nodes[i] ) == &nodes[i] ); (line 81)

list = A.
--------------------------------------------------------------------------------
assert( dl_unshift( head, &nodes[i] ) == &nodes[i] ); (line 81)

list = BA.
--------------------------------------------------------------------------------
assert( dl_unshift( head, &nodes[i] ) == &nodes[i] ); (line 81)

list = CBA.
--------------------------------------------------------------------------------
assert( dl_unshift( head, &nodes[i] ) == &nodes[i] ); (line 81)

list = DCBA.
--------------------------------------------------------------------------------
assert( dl_unshift( head, &nodes[i] ) == &nodes[i] ); (line 81)

list = EDCBA.
--------------------------------------------------------------------------------
assert( dl_shift( head ) == &nodes[i] ); (line 83)

list = DCBA.
--------------------------------------------------------------------------------
assert( dl_shift( head ) == &nodes[i] ); (line 83)

list = CBA.
--------------------------------------------------------------------------------
assert( dl_shift( head ) == &nodes[i] ); (line 83)

list = BA.
--------------------------------------------------------------------------------
assert( dl_shift( head ) == &nodes[i] ); (line 83)

list = A.
--------------------------------------------------------------------------------
assert( dl_shift( head ) == &nodes[i] ); (line 83)

list = .
--------------------------------------------------------------------------------
assert( dl_push( head, &nodes[i] ) == &nodes[i] ); (line 88)

list = A.
--------------------------------------------------------------------------------
assert( dl_push( head, &nodes[i] ) == &nodes[i] ); (line 88)

list = AB.
--------------------------------------------------------------------------------
assert( dl_push( head, &nodes[i] ) == &nodes[i] ); (line 88)

list = ABC.
--------------------------------------------------------------------------------
assert( dl_push( head, &nodes[i] ) == &nodes[i] ); (line 88)

list = ABCD.
--------------------------------------------------------------------------------
assert( dl_push( head, &nodes[i] ) == &nodes[i] ); (line 88)

list = ABCDE.
--------------------------------------------------------------------------------
assert( dl_remove( head, &nodes[2] ) == &nodes[2] ); (line 89)

list = ABDE.
--------------------------------------------------------------------------------
assert( dl_remove( head, &nodes[0] ) == &nodes[0] ); (line 90)

list = BDE.
--------------------------------------------------------------------------------
assert( dl_remove( head, &nodes[4] ) == &nodes[4] ); (line 91)

list = BD.
--------------------------------------------------------------------------------
assert( dl_remove( head, &nodes[1] ) == &nodes[1] ); (line 92)

list = D.
--------------------------------------------------------------------------------
assert( dl_remove( head, &nodes[3] ) == &nodes[3] ); (line 93)

list = .
--------------------------------------------------------------------------------
assert( dl_push( head, &nodes[0] ) == &nodes[0] ); (line 96)

list = A.
--------------------------------------------------------------------------------
assert( dl_insert_before( &nodes[0], &nodes[1] ) == &nodes[1] ); (line 97)

list = BA.
--------------------------------------------------------------------------------
assert( dl_insert_before( &nodes[0], &nodes[2] ) == &nodes[2] ); (line 98)

list = BCA.
--------------------------------------------------------------------------------
assert( dl_insert_after( &nodes[0], &nodes[3] ) == &nodes[3] ); (line 99)

list = BCAD.
--------------------------------------------------------------------------------
assert( dl_insert_after( &nodes[0], &nodes[4] ) == &nodes[4] ); (line 100)

list = BCAED.
--------------------------------------------------------------------------------
