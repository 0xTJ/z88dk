1; (line 96)

list = .
--------------------------------------------------------------------------------
assert( dl_push( head, &nodes[i] ) == &nodes[i] ); (line 101)

list = A.
--------------------------------------------------------------------------------
assert( dl_push( head, &nodes[i] ) == &nodes[i] ); (line 101)

list = AB.
--------------------------------------------------------------------------------
assert( dl_push( head, &nodes[i] ) == &nodes[i] ); (line 101)

list = ABC.
--------------------------------------------------------------------------------
assert( dl_push( head, &nodes[i] ) == &nodes[i] ); (line 101)

list = ABCD.
--------------------------------------------------------------------------------
assert( dl_push( head, &nodes[i] ) == &nodes[i] ); (line 101)

list = ABCDE.
--------------------------------------------------------------------------------
assert( dl_pop( head ) == &nodes[i] ); (line 103)

list = ABCD.
--------------------------------------------------------------------------------
assert( dl_pop( head ) == &nodes[i] ); (line 103)

list = ABC.
--------------------------------------------------------------------------------
assert( dl_pop( head ) == &nodes[i] ); (line 103)

list = AB.
--------------------------------------------------------------------------------
assert( dl_pop( head ) == &nodes[i] ); (line 103)

list = A.
--------------------------------------------------------------------------------
assert( dl_pop( head ) == &nodes[i] ); (line 103)

list = .
--------------------------------------------------------------------------------
assert( dl_unshift( head, &nodes[i] ) == &nodes[i] ); (line 109)

list = A.
--------------------------------------------------------------------------------
assert( dl_unshift( head, &nodes[i] ) == &nodes[i] ); (line 109)

list = BA.
--------------------------------------------------------------------------------
assert( dl_unshift( head, &nodes[i] ) == &nodes[i] ); (line 109)

list = CBA.
--------------------------------------------------------------------------------
assert( dl_unshift( head, &nodes[i] ) == &nodes[i] ); (line 109)

list = DCBA.
--------------------------------------------------------------------------------
assert( dl_unshift( head, &nodes[i] ) == &nodes[i] ); (line 109)

list = EDCBA.
--------------------------------------------------------------------------------
assert( dl_shift( head ) == &nodes[i] ); (line 111)

list = DCBA.
--------------------------------------------------------------------------------
assert( dl_shift( head ) == &nodes[i] ); (line 111)

list = CBA.
--------------------------------------------------------------------------------
assert( dl_shift( head ) == &nodes[i] ); (line 111)

list = BA.
--------------------------------------------------------------------------------
assert( dl_shift( head ) == &nodes[i] ); (line 111)

list = A.
--------------------------------------------------------------------------------
assert( dl_shift( head ) == &nodes[i] ); (line 111)

list = .
--------------------------------------------------------------------------------
assert( dl_push( head, &nodes[i] ) == &nodes[i] ); (line 116)

list = A.
--------------------------------------------------------------------------------
assert( dl_push( head, &nodes[i] ) == &nodes[i] ); (line 116)

list = AB.
--------------------------------------------------------------------------------
assert( dl_push( head, &nodes[i] ) == &nodes[i] ); (line 116)

list = ABC.
--------------------------------------------------------------------------------
assert( dl_push( head, &nodes[i] ) == &nodes[i] ); (line 116)

list = ABCD.
--------------------------------------------------------------------------------
assert( dl_push( head, &nodes[i] ) == &nodes[i] ); (line 116)

list = ABCDE.
--------------------------------------------------------------------------------
assert( dl_remove( head, &nodes[2] ) == &nodes[2] ); (line 117)

list = ABDE.
--------------------------------------------------------------------------------
assert( dl_remove( head, &nodes[0] ) == &nodes[0] ); (line 118)

list = BDE.
--------------------------------------------------------------------------------
assert( dl_remove( head, &nodes[4] ) == &nodes[4] ); (line 119)

list = BD.
--------------------------------------------------------------------------------
assert( dl_remove( head, &nodes[1] ) == &nodes[1] ); (line 120)

list = D.
--------------------------------------------------------------------------------
assert( dl_remove( head, &nodes[3] ) == &nodes[3] ); (line 121)

list = .
--------------------------------------------------------------------------------
assert( dl_push( head, &nodes[0] ) == &nodes[0] ); (line 124)

list = A.
--------------------------------------------------------------------------------
assert( dl_insert_before( &nodes[0], &nodes[1] ) == &nodes[1] ); (line 125)

list = BA.
--------------------------------------------------------------------------------
assert( dl_insert_before( &nodes[0], &nodes[2] ) == &nodes[2] ); (line 126)

list = BCA.
--------------------------------------------------------------------------------
assert( dl_insert_after( &nodes[0], &nodes[3] ) == &nodes[3] ); (line 127)

list = BCAD.
--------------------------------------------------------------------------------
assert( dl_insert_after( &nodes[0], &nodes[4] ) == &nodes[4] ); (line 128)

list = BCAED.
--------------------------------------------------------------------------------
dl_msort(head, (dl_compare_t) compare_asc); (line 131)

list = ABCDE.
--------------------------------------------------------------------------------
dl_msort(head, (dl_compare_t) compare_asc); (line 132)

list = ABCDE.
--------------------------------------------------------------------------------
dl_msort(head, (dl_compare_t) compare_des); (line 134)

list = EDCBA.
--------------------------------------------------------------------------------
dl_msort(head, (dl_compare_t) compare_des); (line 135)

list = EDCBA.
--------------------------------------------------------------------------------
