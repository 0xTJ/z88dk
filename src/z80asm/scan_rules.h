static const short _lexer_actions[] = {
	0, 1, 0, 1, 1, 1, 2, 1, 
	196, 1, 197, 1, 198, 1, 199, 1, 
	200, 1, 201, 1, 202, 1, 203, 1, 
	204, 1, 205, 1, 206, 1, 207, 1, 
	208, 1, 209, 1, 210, 1, 211, 1, 
	212, 1, 213, 1, 214, 1, 215, 1, 
	216, 1, 217, 1, 218, 1, 219, 1, 
	220, 1, 221, 1, 222, 1, 223, 1, 
	224, 1, 225, 1, 226, 1, 227, 1, 
	228, 1, 229, 1, 230, 1, 231, 1, 
	232, 1, 233, 1, 234, 1, 235, 1, 
	236, 1, 237, 1, 238, 1, 239, 1, 
	240, 1, 241, 1, 242, 1, 243, 1, 
	244, 1, 245, 1, 246, 1, 247, 1, 
	248, 1, 249, 1, 250, 1, 251, 1, 
	252, 1, 253, 1, 254, 1, 255, 1, 
	256, 1, 257, 1, 258, 1, 259, 1, 
	260, 1, 261, 1, 262, 1, 263, 1, 
	264, 1, 265, 1, 266, 1, 267, 1, 
	268, 1, 269, 1, 270, 1, 271, 1, 
	272, 1, 273, 1, 274, 1, 275, 1, 
	276, 1, 277, 1, 278, 1, 279, 1, 
	280, 1, 281, 1, 282, 1, 283, 1, 
	284, 1, 285, 1, 286, 1, 287, 1, 
	288, 1, 289, 1, 290, 1, 291, 1, 
	292, 1, 293, 1, 294, 1, 295, 1, 
	296, 1, 297, 1, 298, 1, 299, 1, 
	300, 1, 301, 1, 302, 1, 303, 1, 
	304, 1, 305, 1, 306, 1, 307, 1, 
	308, 1, 309, 1, 310, 1, 311, 1, 
	312, 1, 313, 1, 314, 1, 315, 1, 
	316, 1, 317, 1, 318, 1, 319, 1, 
	320, 1, 321, 1, 322, 1, 323, 1, 
	324, 1, 325, 1, 326, 1, 327, 1, 
	328, 1, 329, 1, 330, 1, 331, 1, 
	332, 2, 2, 3, 2, 2, 4, 2, 
	2, 5, 2, 2, 6, 2, 2, 7, 
	2, 2, 8, 2, 2, 9, 2, 2, 
	10, 2, 2, 11, 2, 2, 12, 2, 
	2, 13, 2, 2, 14, 2, 2, 15, 
	2, 2, 16, 2, 2, 17, 2, 2, 
	18, 2, 2, 19, 2, 2, 20, 2, 
	2, 21, 2, 2, 22, 2, 2, 23, 
	2, 2, 24, 2, 2, 25, 2, 2, 
	26, 2, 2, 27, 2, 2, 28, 2, 
	2, 29, 2, 2, 30, 2, 2, 31, 
	2, 2, 32, 2, 2, 33, 2, 2, 
	34, 2, 2, 35, 2, 2, 36, 2, 
	2, 37, 2, 2, 38, 2, 2, 39, 
	2, 2, 40, 2, 2, 41, 2, 2, 
	42, 2, 2, 43, 2, 2, 44, 2, 
	2, 45, 2, 2, 46, 2, 2, 47, 
	2, 2, 48, 2, 2, 49, 2, 2, 
	50, 2, 2, 51, 2, 2, 52, 2, 
	2, 53, 2, 2, 54, 2, 2, 55, 
	2, 2, 56, 2, 2, 57, 2, 2, 
	58, 2, 2, 59, 2, 2, 60, 2, 
	2, 61, 2, 2, 62, 2, 2, 63, 
	2, 2, 64, 2, 2, 65, 2, 2, 
	66, 2, 2, 67, 2, 2, 68, 2, 
	2, 69, 2, 2, 70, 2, 2, 71, 
	2, 2, 72, 2, 2, 73, 2, 2, 
	74, 2, 2, 75, 2, 2, 76, 2, 
	2, 77, 2, 2, 78, 2, 2, 79, 
	2, 2, 80, 2, 2, 81, 2, 2, 
	82, 2, 2, 83, 2, 2, 84, 2, 
	2, 85, 2, 2, 86, 2, 2, 87, 
	2, 2, 88, 2, 2, 89, 2, 2, 
	90, 2, 2, 91, 2, 2, 92, 2, 
	2, 93, 2, 2, 94, 2, 2, 95, 
	2, 2, 96, 2, 2, 97, 2, 2, 
	98, 2, 2, 99, 2, 2, 100, 2, 
	2, 101, 2, 2, 102, 2, 2, 103, 
	2, 2, 104, 2, 2, 105, 2, 2, 
	106, 2, 2, 107, 2, 2, 108, 2, 
	2, 109, 2, 2, 110, 2, 2, 111, 
	2, 2, 112, 2, 2, 113, 2, 2, 
	114, 2, 2, 115, 2, 2, 116, 2, 
	2, 117, 2, 2, 118, 2, 2, 119, 
	2, 2, 120, 2, 2, 121, 2, 2, 
	122, 2, 2, 123, 2, 2, 124, 2, 
	2, 125, 2, 2, 126, 2, 2, 127, 
	2, 2, 128, 2, 2, 129, 2, 2, 
	130, 2, 2, 131, 2, 2, 132, 2, 
	2, 133, 2, 2, 134, 2, 2, 135, 
	2, 2, 136, 2, 2, 137, 2, 2, 
	138, 2, 2, 139, 2, 2, 140, 2, 
	2, 141, 2, 2, 142, 2, 2, 143, 
	2, 2, 144, 2, 2, 145, 2, 2, 
	146, 2, 2, 147, 2, 2, 148, 2, 
	2, 149, 2, 2, 150, 2, 2, 151, 
	2, 2, 152, 2, 2, 153, 2, 2, 
	154, 2, 2, 155, 2, 2, 156, 2, 
	2, 157, 2, 2, 158, 2, 2, 159, 
	2, 2, 160, 2, 2, 161, 2, 2, 
	162, 2, 2, 163, 2, 2, 164, 2, 
	2, 165, 2, 2, 166, 2, 2, 167, 
	2, 2, 168, 2, 2, 169, 2, 2, 
	170, 2, 2, 171, 2, 2, 172, 2, 
	2, 173, 2, 2, 174, 2, 2, 175, 
	2, 2, 176, 2, 2, 177, 2, 2, 
	178, 2, 2, 179, 2, 2, 180, 2, 
	2, 181, 2, 2, 182, 2, 2, 183, 
	2, 2, 184, 2, 2, 185, 2, 2, 
	186, 2, 2, 187, 2, 2, 188, 2, 
	2, 189, 2, 2, 190, 2, 2, 191, 
	2, 2, 192, 2, 2, 193, 2, 2, 
	194, 2, 2, 195
};
static const short _lexer_cond_offsets[] = {
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 5, 8, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 17, 21, 28, 35, 42, 49, 56, 
	63, 70, 77, 84, 91, 98, 105, 112, 
	119, 126, 133, 140, 147, 154, 161, 168, 
	175, 182, 189, 196, 203, 210, 217, 224, 
	231, 238, 245, 252, 259, 266, 273, 280, 
	287, 294, 301, 308, 315, 322, 329, 336, 
	343, 350, 357, 364, 371, 378, 385, 392, 
	399, 406, 413, 420, 427, 434, 441, 448, 
	455, 462, 469, 476, 483, 490, 497, 504, 
	511, 518, 525, 532, 539, 546, 553, 560, 
	567, 574, 581, 588, 595, 602, 609, 616, 
	623, 630, 637, 644, 651, 658, 665, 672, 
	679, 686, 693, 700, 707, 714, 721, 728, 
	735, 742, 749, 756, 763, 770, 777, 784, 
	791, 798, 805, 812, 819, 826, 833, 840, 
	847, 854, 861, 868, 875, 882, 889, 896, 
	903, 910, 917, 924, 931, 938, 945, 952, 
	959, 966, 973, 980, 987, 994, 1001, 1008, 
	1015, 1022, 1029, 1036, 1043, 1050, 1057, 1064, 
	1071, 1078, 1085, 1092, 1099, 1106, 1113, 1120, 
	1127, 1134, 1141, 1148, 1155, 1162, 1169, 1176, 
	1183, 1190, 1197, 1204, 1211, 1218, 1225, 1232, 
	1239, 1246, 1253, 1260, 1267, 1274, 1281, 1288, 
	1295, 1302, 1309, 1316, 1323, 1330, 1337, 1344, 
	1351, 1358, 1365, 1372, 1379, 1386, 1393, 1400, 
	1407, 1414, 1421, 1428, 1435, 1442, 1449, 1456, 
	1463, 1470, 1477, 1484, 1491, 1498, 1505, 1512, 
	1519, 1526, 1533, 1540, 1547, 1554, 1561, 1568, 
	1575, 1582
};
static const char _lexer_cond_lengths[] = {
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 5, 3, 4, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	5, 4, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7
};
static const short _lexer_cond_keys[] = {
	9, 9, 32, 32, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 58, 58, 
	46, 46, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 65, 90, 95, 95, 
	97, 122, 48, 57, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 0
};
static const char _lexer_cond_spaces[] = {
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0
};
static const short _lexer_key_offsets[] = {
	0, 0, 2, 5, 19, 21, 26, 31, 
	33, 38, 40, 45, 49, 54, 59, 61, 
	66, 74, 80, 88, 95, 98, 236, 237, 
	243, 246, 248, 249, 263, 264, 278, 290, 
	298, 306, 316, 322, 323, 326, 327, 329, 
	330, 349, 356, 364, 375, 383, 392, 401, 
	410, 419, 428, 437, 451, 459, 470, 479, 
	488, 497, 506, 515, 529, 538, 547, 554, 
	565, 574, 583, 592, 601, 614, 623, 632, 
	650, 659, 673, 698, 707, 716, 725, 734, 
	743, 752, 761, 770, 779, 788, 797, 806, 
	814, 830, 839, 848, 857, 866, 875, 884, 
	895, 904, 913, 922, 934, 943, 952, 961, 
	970, 979, 988, 997, 1006, 1015, 1024, 1036, 
	1045, 1054, 1062, 1087, 1096, 1105, 1116, 1125, 
	1134, 1143, 1152, 1161, 1170, 1186, 1195, 1204, 
	1213, 1222, 1231, 1240, 1249, 1258, 1267, 1278, 
	1289, 1298, 1307, 1316, 1325, 1336, 1347, 1358, 
	1376, 1389, 1402, 1411, 1420, 1433, 1442, 1451, 
	1460, 1469, 1482, 1493, 1502, 1513, 1522, 1531, 
	1542, 1551, 1566, 1575, 1584, 1593, 1602, 1611, 
	1620, 1629, 1638, 1647, 1656, 1673, 1684, 1693, 
	1702, 1711, 1720, 1729, 1742, 1751, 1762, 1773, 
	1782, 1793, 1802, 1811, 1823, 1832, 1841, 1856, 
	1865, 1874, 1883, 1894, 1903, 1912, 1921, 1930, 
	1941, 1950, 1959, 1968, 1977, 1994, 2003, 2012, 
	2021, 2030, 2041, 2052, 2065, 2073, 2082, 2090, 
	2103, 2111, 2120, 2128, 2137, 2162, 2171, 2180, 
	2191, 2200, 2209, 2218, 2227, 2238, 2247, 2256, 
	2265, 2280, 2291, 2302, 2311, 2320, 2329, 2338, 
	2347, 2356, 2365, 2374, 2383, 2392, 2401, 2410, 
	2421, 2430, 2439, 2448, 2457, 2466, 2477, 2488, 
	2497, 2506, 2515, 2524, 2533, 2542, 2553, 2562, 
	2571, 2578, 2585, 2625, 2642, 2661, 2686, 2704, 
	2725, 2746, 2767, 2788, 2809, 2830, 2860, 2878, 
	2903, 2924, 2945, 2966, 2987, 3008, 3038, 3059, 
	3080, 3097, 3122, 3143, 3164, 3185, 3206, 3235, 
	3256, 3277, 3315, 3336, 3366, 3419, 3440, 3461, 
	3482, 3503, 3524, 3545, 3566, 3587, 3608, 3629, 
	3650, 3671, 3689, 3723, 3744, 3765, 3786, 3807, 
	3828, 3849, 3874, 3895, 3916, 3937, 3963, 3984, 
	4005, 4026, 4047, 4068, 4089, 4110, 4131, 4152, 
	4173, 4199, 4220, 4241, 4259, 4312, 4333, 4354, 
	4379, 4400, 4421, 4442, 4463, 4484, 4505, 4540, 
	4561, 4582, 4603, 4624, 4645, 4666, 4687, 4708, 
	4729, 4754, 4779, 4800, 4821, 4842, 4863, 4888, 
	4913, 4938, 4976, 5005, 5034, 5055, 5076, 5105, 
	5126, 5147, 5168, 5189, 5218, 5243, 5264, 5289, 
	5310, 5331, 5356, 5377, 5410, 5431, 5452, 5473, 
	5494, 5515, 5536, 5557, 5578, 5599, 5620, 5657, 
	5682, 5703, 5724, 5745, 5766, 5787, 5816, 5837, 
	5862, 5887, 5908, 5933, 5954, 5975, 6002, 6023, 
	6044, 6077, 6098, 6119, 6140, 6165, 6186, 6207, 
	6228, 6249, 6274, 6295, 6316, 6337, 6358, 6395, 
	6416, 6437, 6458, 6479, 6504, 6529, 6558, 6576, 
	6597, 6615, 6644, 6662, 6683, 6701, 6722, 6775, 
	6796, 6817, 6842, 6863, 6884, 6905, 6926, 6951, 
	6972, 6993, 7014, 7047, 7072, 7097, 7118, 7139, 
	7160, 7181, 7202, 7223, 7244, 7265, 7286, 7307, 
	7328, 7349, 7374, 7395, 7416, 7437, 7458, 7479, 
	7504, 7529, 7550, 7571, 7592, 7613, 7634, 7655, 
	7680, 7701
};
static const short _lexer_trans_keys[] = {
	35, 45, 34, 35, 45, 9, 32, 66, 
	67, 68, 72, 73, 83, 98, 99, 100, 
	104, 105, 115, 67, 99, 9, 32, 41, 
	43, 45, 9, 32, 41, 43, 45, 69, 
	101, 9, 32, 41, 43, 45, 76, 108, 
	9, 32, 41, 43, 45, 88, 89, 120, 
	121, 9, 32, 41, 43, 45, 9, 32, 
	41, 43, 45, 80, 112, 9, 32, 41, 
	43, 45, 72, 104, 48, 57, 65, 70, 
	97, 102, 48, 57, 65, 70, 97, 102, 
	66, 80, 81, 87, 98, 112, 113, 119, 
	521, 544, 607, 577, 602, 609, 634, 521, 
	544, 570, 10, 33, 34, 35, 36, 37, 
	38, 39, 40, 41, 42, 43, 44, 45, 
	47, 48, 49, 58, 59, 60, 61, 62, 
	63, 64, 91, 92, 93, 94, 96, 123, 
	124, 125, 126, 127, 302, 321, 322, 323, 
	324, 325, 326, 327, 328, 329, 330, 332, 
	333, 334, 335, 336, 338, 339, 340, 341, 
	342, 344, 346, 351, 353, 354, 355, 356, 
	357, 358, 359, 360, 361, 362, 364, 365, 
	366, 367, 368, 370, 371, 372, 373, 374, 
	376, 378, 558, 577, 578, 579, 580, 581, 
	582, 583, 584, 585, 586, 588, 589, 590, 
	591, 592, 594, 595, 596, 597, 598, 600, 
	602, 607, 609, 610, 611, 612, 613, 614, 
	615, 616, 617, 618, 620, 621, 622, 623, 
	624, 626, 627, 628, 629, 630, 632, 634, 
	-128, 32, 50, 57, 331, 345, 363, 377, 
	587, 601, 619, 633, 61, 48, 57, 65, 
	70, 97, 102, 34, 48, 49, 48, 49, 
	38, 9, 32, 66, 67, 68, 72, 73, 
	83, 98, 99, 100, 104, 105, 115, 42, 
	66, 72, 88, 98, 104, 120, 48, 49, 
	50, 57, 65, 70, 97, 102, 66, 72, 
	98, 104, 48, 49, 50, 57, 65, 70, 
	97, 102, 72, 104, 48, 57, 65, 70, 
	97, 102, 72, 104, 48, 57, 65, 70, 
	97, 102, 72, 104, 48, 49, 50, 57, 
	65, 70, 97, 102, 48, 57, 65, 70, 
	97, 102, 10, 60, 61, 62, 61, 61, 
	62, 124, 39, 51, 68, 70, 76, 78, 
	83, 95, 100, 102, 108, 110, 115, 48, 
	57, 65, 90, 97, 122, 95, 48, 57, 
	65, 90, 97, 122, 50, 95, 48, 57, 
	65, 90, 97, 122, 67, 68, 95, 99, 
	100, 48, 57, 65, 90, 97, 122, 39, 
	95, 48, 57, 65, 90, 97, 122, 84, 
	95, 116, 48, 57, 65, 90, 97, 122, 
	68, 95, 100, 48, 57, 65, 90, 97, 
	122, 68, 95, 100, 48, 57, 65, 90, 
	97, 122, 77, 95, 109, 48, 57, 65, 
	90, 97, 122, 80, 95, 112, 48, 57, 
	65, 90, 97, 122, 67, 95, 99, 48, 
	57, 65, 90, 97, 122, 39, 67, 73, 
	79, 95, 99, 105, 111, 48, 57, 65, 
	90, 97, 122, 39, 95, 48, 57, 65, 
	90, 97, 122, 78, 84, 95, 110, 116, 
	48, 57, 65, 90, 97, 122, 65, 95, 
	97, 48, 57, 66, 90, 98, 122, 82, 
	95, 114, 48, 57, 65, 90, 97, 122, 
	89, 95, 121, 48, 57, 65, 90, 97, 
	122, 79, 95, 111, 48, 57, 65, 90, 
	97, 122, 76, 95, 108, 48, 57, 65, 
	90, 97, 122, 39, 65, 67, 80, 95, 
	97, 99, 112, 48, 57, 66, 90, 98, 
	122, 76, 95, 108, 48, 57, 65, 90, 
	97, 122, 76, 95, 108, 48, 57, 65, 
	90, 97, 122, 95, 48, 57, 65, 90, 
	97, 122, 79, 80, 95, 111, 112, 48, 
	57, 65, 90, 97, 122, 90, 95, 122, 
	48, 57, 65, 89, 97, 121, 75, 95, 
	107, 48, 57, 65, 90, 97, 122, 71, 
	95, 103, 48, 57, 65, 90, 97, 122, 
	70, 95, 102, 48, 57, 65, 90, 97, 
	122, 68, 73, 76, 95, 100, 105, 108, 
	48, 57, 65, 90, 97, 122, 82, 95, 
	114, 48, 57, 65, 90, 97, 122, 82, 
	95, 114, 48, 57, 65, 90, 97, 122, 
	39, 65, 69, 73, 74, 83, 95, 97, 
	101, 105, 106, 115, 48, 57, 66, 90, 
	98, 122, 65, 95, 97, 48, 57, 66, 
	90, 98, 122, 39, 67, 70, 72, 95, 
	99, 102, 104, 48, 57, 65, 90, 97, 
	122, 66, 67, 71, 73, 77, 81, 83, 
	86, 87, 95, 98, 99, 103, 105, 109, 
	113, 115, 118, 119, 48, 57, 65, 90, 
	97, 122, 82, 95, 114, 48, 57, 65, 
	90, 97, 122, 79, 95, 111, 48, 57, 
	65, 90, 97, 122, 85, 95, 117, 48, 
	57, 65, 90, 97, 122, 80, 95, 112, 
	48, 57, 65, 90, 97, 122, 78, 95, 
	110, 48, 57, 65, 90, 97, 122, 69, 
	95, 101, 48, 57, 65, 90, 97, 122, 
	65, 95, 97, 48, 57, 66, 90, 98, 
	122, 82, 95, 114, 48, 57, 65, 90, 
	97, 122, 83, 95, 115, 48, 57, 65, 
	90, 97, 122, 76, 95, 108, 48, 57, 
	65, 90, 97, 122, 78, 95, 110, 48, 
	57, 65, 90, 97, 122, 90, 95, 122, 
	48, 57, 65, 89, 97, 121, 46, 95, 
	48, 57, 65, 90, 97, 122, 39, 73, 
	76, 78, 88, 95, 105, 108, 110, 120, 
	48, 57, 65, 90, 97, 122, 82, 95, 
	114, 48, 57, 65, 90, 97, 122, 83, 
	95, 115, 48, 57, 65, 90, 97, 122, 
	69, 95, 101, 48, 57, 65, 90, 97, 
	122, 68, 95, 100, 48, 57, 65, 90, 
	97, 122, 73, 95, 105, 48, 57, 65, 
	90, 97, 122, 70, 95, 102, 48, 57, 
	65, 90, 97, 122, 84, 88, 95, 116, 
	120, 48, 57, 65, 90, 97, 122, 69, 
	95, 101, 48, 57, 65, 90, 97, 122, 
	82, 95, 114, 48, 57, 65, 90, 97, 
	122, 78, 95, 110, 48, 57, 65, 90, 
	97, 122, 39, 73, 80, 95, 105, 112, 
	48, 57, 65, 90, 97, 122, 76, 95, 
	108, 48, 57, 65, 90, 97, 122, 76, 
	95, 108, 48, 57, 65, 90, 97, 122, 
	68, 95, 100, 48, 57, 65, 90, 97, 
	122, 69, 95, 101, 48, 57, 65, 90, 
	97, 122, 80, 95, 112, 48, 57, 65, 
	90, 97, 122, 76, 95, 108, 48, 57, 
	65, 90, 97, 122, 79, 95, 111, 48, 
	57, 65, 90, 97, 122, 66, 95, 98, 
	48, 57, 65, 90, 97, 122, 65, 95, 
	97, 48, 57, 66, 90, 98, 122, 76, 
	95, 108, 48, 57, 65, 90, 97, 122, 
	39, 65, 76, 95, 97, 108, 48, 57, 
	66, 90, 98, 122, 76, 95, 108, 48, 
	57, 65, 90, 97, 122, 84, 95, 116, 
	48, 57, 65, 90, 97, 122, 39, 95, 
	48, 57, 65, 90, 97, 122, 68, 70, 
	73, 77, 78, 79, 80, 88, 89, 95, 
	100, 102, 105, 109, 110, 111, 112, 120, 
	121, 48, 57, 65, 90, 97, 122, 69, 
	95, 101, 48, 57, 65, 90, 97, 122, 
	84, 95, 116, 48, 57, 65, 90, 97, 
	122, 68, 78, 95, 100, 110, 48, 57, 
	65, 90, 97, 122, 69, 95, 101, 48, 
	57, 65, 90, 97, 122, 70, 95, 102, 
	48, 57, 65, 90, 97, 122, 68, 95, 
	100, 48, 57, 65, 90, 97, 122, 69, 
	95, 101, 48, 57, 65, 90, 97, 122, 
	70, 95, 102, 48, 57, 65, 90, 97, 
	122, 82, 95, 114, 48, 57, 65, 90, 
	97, 122, 48, 67, 68, 73, 86, 95, 
	99, 100, 105, 118, 49, 57, 65, 90, 
	97, 122, 76, 95, 108, 48, 57, 65, 
	90, 97, 122, 85, 95, 117, 48, 57, 
	65, 90, 97, 122, 68, 95, 100, 48, 
	57, 65, 90, 97, 122, 69, 95, 101, 
	48, 57, 65, 90, 97, 122, 82, 95, 
	114, 48, 57, 65, 90, 97, 122, 82, 
	95, 114, 48, 57, 65, 90, 97, 122, 
	79, 95, 111, 48, 57, 65, 90, 97, 
	122, 75, 95, 107, 48, 57, 65, 90, 
	97, 122, 69, 95, 101, 48, 57, 65, 
	90, 97, 122, 69, 73, 95, 101, 105, 
	48, 57, 65, 90, 97, 122, 82, 83, 
	95, 114, 115, 48, 57, 65, 90, 97, 
	122, 69, 95, 101, 48, 57, 65, 90, 
	97, 122, 83, 95, 115, 48, 57, 65, 
	90, 97, 122, 69, 95, 101, 48, 57, 
	65, 90, 97, 122, 84, 95, 116, 48, 
	57, 65, 90, 97, 122, 72, 76, 95, 
	104, 108, 48, 57, 65, 90, 97, 122, 
	72, 76, 95, 104, 108, 48, 57, 65, 
	90, 97, 122, 80, 82, 95, 112, 114, 
	48, 57, 65, 90, 97, 122, 39, 68, 
	73, 79, 83, 90, 95, 100, 105, 111, 
	115, 122, 48, 57, 65, 89, 97, 121, 
	68, 73, 80, 95, 100, 105, 112, 48, 
	57, 65, 90, 97, 122, 82, 83, 88, 
	95, 114, 115, 120, 48, 57, 65, 90, 
	97, 122, 88, 95, 120, 48, 57, 65, 
	90, 97, 122, 82, 95, 114, 48, 57, 
	65, 90, 97, 122, 82, 83, 88, 95, 
	114, 115, 120, 48, 57, 65, 90, 97, 
	122, 88, 95, 120, 48, 57, 65, 90, 
	97, 122, 82, 95, 114, 48, 57, 65, 
	90, 97, 122, 78, 95, 110, 48, 57, 
	65, 90, 97, 122, 69, 95, 101, 48, 
	57, 65, 90, 97, 122, 68, 73, 84, 
	95, 100, 105, 116, 48, 57, 65, 90, 
	97, 122, 68, 82, 95, 100, 114, 48, 
	57, 65, 90, 97, 122, 82, 95, 114, 
	48, 57, 65, 90, 97, 122, 68, 82, 
	95, 100, 114, 48, 57, 65, 90, 97, 
	122, 82, 95, 114, 48, 57, 65, 90, 
	97, 122, 79, 95, 111, 48, 57, 65, 
	90, 97, 122, 70, 78, 95, 102, 110, 
	48, 57, 65, 90, 97, 122, 70, 95, 
	102, 48, 57, 65, 90, 97, 122, 73, 
	76, 79, 85, 95, 105, 108, 111, 117, 
	48, 57, 65, 90, 97, 122, 82, 95, 
	114, 48, 57, 65, 90, 97, 122, 82, 
	95, 114, 48, 57, 65, 90, 97, 122, 
	79, 95, 111, 48, 57, 65, 90, 97, 
	122, 82, 95, 114, 48, 57, 65, 90, 
	97, 122, 84, 95, 116, 48, 57, 65, 
	90, 97, 122, 68, 95, 100, 48, 57, 
	65, 90, 97, 122, 85, 95, 117, 48, 
	57, 65, 90, 97, 122, 76, 95, 108, 
	48, 57, 65, 90, 97, 122, 69, 95, 
	101, 48, 57, 65, 90, 97, 122, 76, 
	95, 108, 48, 57, 65, 90, 97, 122, 
	67, 69, 79, 86, 90, 95, 99, 101, 
	111, 118, 122, 48, 57, 65, 89, 97, 
	121, 71, 88, 95, 103, 120, 48, 57, 
	65, 90, 97, 122, 84, 95, 116, 48, 
	57, 65, 90, 97, 122, 82, 95, 114, 
	48, 57, 65, 90, 97, 122, 69, 95, 
	101, 48, 57, 65, 90, 97, 122, 71, 
	95, 103, 48, 57, 65, 90, 97, 122, 
	80, 95, 112, 48, 57, 65, 90, 97, 
	122, 82, 84, 85, 95, 114, 116, 117, 
	48, 57, 65, 90, 97, 122, 71, 95, 
	103, 48, 57, 65, 90, 97, 122, 68, 
	73, 95, 100, 105, 48, 57, 65, 90, 
	97, 122, 77, 82, 95, 109, 114, 48, 
	57, 65, 90, 97, 122, 82, 95, 114, 
	48, 57, 65, 90, 97, 122, 77, 82, 
	95, 109, 114, 48, 57, 65, 90, 97, 
	122, 82, 95, 114, 48, 57, 65, 90, 
	97, 122, 84, 95, 116, 48, 57, 65, 
	90, 97, 122, 48, 68, 73, 95, 100, 
	105, 49, 57, 65, 90, 97, 122, 78, 
	95, 110, 48, 57, 65, 90, 97, 122, 
	66, 95, 98, 48, 57, 65, 90, 97, 
	122, 69, 73, 79, 85, 95, 101, 105, 
	111, 117, 48, 57, 65, 90, 97, 122, 
	88, 95, 120, 48, 57, 65, 90, 97, 
	122, 69, 95, 101, 48, 57, 65, 90, 
	97, 122, 76, 95, 108, 48, 57, 65, 
	90, 97, 122, 65, 68, 95, 97, 100, 
	48, 57, 66, 90, 98, 122, 68, 95, 
	100, 48, 57, 65, 90, 97, 122, 78, 
	95, 110, 48, 57, 65, 90, 97, 122, 
	80, 95, 112, 48, 57, 65, 90, 97, 
	122, 88, 95, 120, 48, 57, 65, 90, 
	97, 122, 66, 83, 95, 98, 115, 48, 
	57, 65, 90, 97, 122, 76, 95, 108, 
	48, 57, 65, 90, 97, 122, 73, 95, 
	105, 48, 57, 65, 90, 97, 122, 67, 
	95, 99, 48, 57, 65, 90, 97, 122, 
	72, 95, 104, 48, 57, 65, 90, 97, 
	122, 68, 69, 76, 82, 83, 95, 100, 
	101, 108, 114, 115, 48, 57, 65, 90, 
	97, 122, 77, 95, 109, 48, 57, 65, 
	90, 97, 122, 79, 95, 111, 48, 57, 
	65, 90, 97, 122, 68, 95, 100, 48, 
	57, 65, 90, 97, 122, 69, 95, 101, 
	48, 57, 65, 90, 97, 122, 83, 84, 
	95, 115, 116, 48, 57, 65, 90, 97, 
	122, 73, 78, 95, 105, 110, 48, 57, 
	65, 90, 97, 122, 65, 67, 68, 95, 
	97, 99, 100, 48, 57, 66, 90, 98, 
	122, 39, 95, 48, 57, 65, 90, 97, 
	122, 65, 95, 97, 48, 57, 66, 90, 
	98, 122, 39, 95, 48, 57, 65, 90, 
	97, 122, 65, 67, 68, 95, 97, 99, 
	100, 48, 57, 66, 90, 98, 122, 39, 
	95, 48, 57, 65, 90, 97, 122, 65, 
	95, 97, 48, 57, 66, 90, 98, 122, 
	39, 95, 48, 57, 65, 90, 97, 122, 
	84, 95, 116, 48, 57, 65, 90, 97, 
	122, 66, 67, 69, 76, 80, 82, 85, 
	87, 89, 95, 98, 99, 101, 108, 112, 
	114, 117, 119, 121, 48, 57, 65, 90, 
	97, 122, 67, 95, 99, 48, 57, 65, 
	90, 97, 122, 70, 95, 102, 48, 57, 
	65, 90, 97, 122, 67, 84, 95, 99, 
	116, 48, 57, 65, 90, 97, 122, 84, 
	95, 116, 48, 57, 65, 90, 97, 122, 
	73, 95, 105, 48, 57, 65, 90, 97, 
	122, 79, 95, 111, 48, 57, 65, 90, 
	97, 122, 78, 95, 110, 48, 57, 65, 
	90, 97, 122, 65, 85, 95, 97, 117, 
	48, 57, 66, 90, 98, 122, 69, 95, 
	101, 48, 57, 65, 90, 97, 122, 83, 
	95, 115, 48, 57, 65, 90, 97, 122, 
	82, 95, 114, 48, 57, 65, 90, 97, 
	122, 65, 73, 76, 80, 95, 97, 105, 
	108, 112, 48, 57, 66, 90, 98, 122, 
	65, 76, 95, 97, 108, 48, 57, 66, 
	90, 98, 122, 66, 82, 95, 98, 114, 
	48, 57, 65, 90, 97, 122, 69, 95, 
	101, 48, 57, 65, 90, 97, 122, 83, 
	95, 115, 48, 57, 65, 90, 97, 122, 
	65, 95, 97, 48, 57, 66, 90, 98, 
	122, 80, 95, 112, 48, 57, 65, 90, 
	97, 122, 78, 95, 110, 48, 57, 65, 
	90, 97, 122, 73, 95, 105, 48, 57, 
	65, 90, 97, 122, 66, 95, 98, 48, 
	57, 65, 90, 97, 122, 83, 95, 115, 
	48, 57, 65, 90, 97, 122, 67, 95, 
	99, 48, 57, 65, 90, 97, 122, 65, 
	95, 97, 48, 57, 66, 90, 98, 122, 
	76, 95, 108, 48, 57, 65, 90, 97, 
	122, 76, 95, 108, 48, 57, 65, 90, 
	97, 122, 69, 83, 95, 101, 115, 48, 
	57, 65, 90, 97, 122, 83, 95, 115, 
	48, 57, 65, 90, 97, 122, 84, 95, 
	116, 48, 57, 65, 90, 97, 122, 84, 
	95, 116, 48, 57, 65, 90, 97, 122, 
	73, 95, 105, 48, 57, 65, 90, 97, 
	122, 79, 95, 111, 48, 57, 65, 90, 
	97, 122, 77, 78, 95, 109, 110, 48, 
	57, 65, 90, 97, 122, 65, 83, 95, 
	97, 115, 48, 57, 66, 90, 98, 122, 
	68, 95, 100, 48, 57, 65, 90, 97, 
	122, 69, 95, 101, 48, 57, 65, 90, 
	97, 122, 70, 95, 102, 48, 57, 65, 
	90, 97, 122, 73, 95, 105, 48, 57, 
	65, 90, 97, 122, 78, 95, 110, 48, 
	57, 65, 90, 97, 122, 69, 95, 101, 
	48, 57, 65, 90, 97, 122, 79, 80, 
	95, 111, 112, 48, 57, 65, 90, 97, 
	122, 82, 95, 114, 48, 57, 65, 90, 
	97, 122, 67, 95, 99, 48, 57, 65, 
	90, 97, 122, 521, 544, 607, 577, 602, 
	609, 634, 607, 560, 569, 577, 602, 609, 
	634, 39, 307, 324, 326, 332, 334, 339, 
	351, 356, 358, 364, 366, 371, 521, 544, 
	563, 570, 580, 582, 588, 590, 595, 607, 
	612, 614, 620, 622, 627, 304, 313, 321, 
	346, 353, 378, 560, 569, 577, 602, 609, 
	634, 351, 521, 544, 570, 607, 304, 313, 
	321, 346, 353, 378, 560, 569, 577, 602, 
	609, 634, 306, 351, 521, 544, 562, 570, 
	607, 304, 313, 321, 346, 353, 378, 560, 
	569, 577, 602, 609, 634, 323, 324, 351, 
	355, 356, 521, 544, 570, 579, 580, 607, 
	611, 612, 304, 313, 321, 346, 353, 378, 
	560, 569, 577, 602, 609, 634, 39, 351, 
	521, 544, 570, 607, 304, 313, 321, 346, 
	353, 378, 560, 569, 577, 602, 609, 634, 
	340, 351, 372, 521, 544, 570, 596, 607, 
	628, 304, 313, 321, 346, 353, 378, 560, 
	569, 577, 602, 609, 634, 324, 351, 356, 
	521, 544, 570, 580, 607, 612, 304, 313, 
	321, 346, 353, 378, 560, 569, 577, 602, 
	609, 634, 324, 351, 356, 521, 544, 570, 
	580, 607, 612, 304, 313, 321, 346, 353, 
	378, 560, 569, 577, 602, 609, 634, 333, 
	351, 365, 521, 544, 570, 589, 607, 621, 
	304, 313, 321, 346, 353, 378, 560, 569, 
	577, 602, 609, 634, 336, 351, 368, 521, 
	544, 570, 592, 607, 624, 304, 313, 321, 
	346, 353, 378, 560, 569, 577, 602, 609, 
	634, 323, 351, 355, 521, 544, 570, 579, 
	607, 611, 304, 313, 321, 346, 353, 378, 
	560, 569, 577, 602, 609, 634, 39, 323, 
	329, 335, 351, 355, 361, 367, 521, 544, 
	570, 579, 585, 591, 607, 611, 617, 623, 
	304, 313, 321, 346, 353, 378, 560, 569, 
	577, 602, 609, 634, 39, 351, 521, 544, 
	570, 607, 304, 313, 321, 346, 353, 378, 
	560, 569, 577, 602, 609, 634, 334, 340, 
	351, 366, 372, 521, 544, 570, 590, 596, 
	607, 622, 628, 304, 313, 321, 346, 353, 
	378, 560, 569, 577, 602, 609, 634, 321, 
	351, 353, 521, 544, 570, 577, 607, 609, 
	304, 313, 322, 346, 354, 378, 560, 569, 
	578, 602, 610, 634, 338, 351, 370, 521, 
	544, 570, 594, 607, 626, 304, 313, 321, 
	346, 353, 378, 560, 569, 577, 602, 609, 
	634, 345, 351, 377, 521, 544, 570, 601, 
	607, 633, 304, 313, 321, 346, 353, 378, 
	560, 569, 577, 602, 609, 634, 335, 351, 
	367, 521, 544, 570, 591, 607, 623, 304, 
	313, 321, 346, 353, 378, 560, 569, 577, 
	602, 609, 634, 332, 351, 364, 521, 544, 
	570, 588, 607, 620, 304, 313, 321, 346, 
	353, 378, 560, 569, 577, 602, 609, 634, 
	39, 321, 323, 336, 351, 353, 355, 368, 
	521, 544, 570, 577, 579, 592, 607, 609, 
	611, 624, 304, 313, 322, 346, 354, 378, 
	560, 569, 578, 602, 610, 634, 332, 351, 
	364, 521, 544, 570, 588, 607, 620, 304, 
	313, 321, 346, 353, 378, 560, 569, 577, 
	602, 609, 634, 332, 351, 364, 521, 544, 
	570, 588, 607, 620, 304, 313, 321, 346, 
	353, 378, 560, 569, 577, 602, 609, 634, 
	351, 521, 544, 570, 607, 304, 313, 321, 
	346, 353, 378, 560, 569, 577, 602, 609, 
	634, 335, 336, 351, 367, 368, 521, 544, 
	570, 591, 592, 607, 623, 624, 304, 313, 
	321, 346, 353, 378, 560, 569, 577, 602, 
	609, 634, 346, 351, 378, 521, 544, 570, 
	602, 607, 634, 304, 313, 321, 345, 353, 
	377, 560, 569, 577, 601, 609, 633, 331, 
	351, 363, 521, 544, 570, 587, 607, 619, 
	304, 313, 321, 346, 353, 378, 560, 569, 
	577, 602, 609, 634, 327, 351, 359, 521, 
	544, 570, 583, 607, 615, 304, 313, 321, 
	346, 353, 378, 560, 569, 577, 602, 609, 
	634, 326, 351, 358, 521, 544, 570, 582, 
	607, 614, 304, 313, 321, 346, 353, 378, 
	560, 569, 577, 602, 609, 634, 324, 329, 
	332, 351, 356, 361, 364, 521, 544, 570, 
	580, 585, 588, 607, 612, 617, 620, 304, 
	313, 321, 346, 353, 378, 560, 569, 577, 
	602, 609, 634, 338, 351, 370, 521, 544, 
	570, 594, 607, 626, 304, 313, 321, 346, 
	353, 378, 560, 569, 577, 602, 609, 634, 
	338, 351, 370, 521, 544, 570, 594, 607, 
	626, 304, 313, 321, 346, 353, 378, 560, 
	569, 577, 602, 609, 634, 39, 321, 325, 
	329, 330, 339, 351, 353, 357, 361, 362, 
	371, 521, 544, 570, 577, 581, 585, 586, 
	595, 607, 609, 613, 617, 618, 627, 304, 
	313, 322, 346, 354, 378, 560, 569, 578, 
	602, 610, 634, 321, 351, 353, 521, 544, 
	570, 577, 607, 609, 304, 313, 322, 346, 
	354, 378, 560, 569, 578, 602, 610, 634, 
	39, 323, 326, 328, 351, 355, 358, 360, 
	521, 544, 570, 579, 582, 584, 607, 611, 
	614, 616, 304, 313, 321, 346, 353, 378, 
	560, 569, 577, 602, 609, 634, 322, 323, 
	327, 329, 333, 337, 339, 342, 343, 351, 
	354, 355, 359, 361, 365, 369, 371, 374, 
	375, 521, 544, 570, 578, 579, 583, 585, 
	589, 593, 595, 598, 599, 607, 610, 611, 
	615, 617, 621, 625, 627, 630, 631, 304, 
	313, 321, 346, 353, 378, 560, 569, 577, 
	602, 609, 634, 338, 351, 370, 521, 544, 
	570, 594, 607, 626, 304, 313, 321, 346, 
	353, 378, 560, 569, 577, 602, 609, 634, 
	335, 351, 367, 521, 544, 570, 591, 607, 
	623, 304, 313, 321, 346, 353, 378, 560, 
	569, 577, 602, 609, 634, 341, 351, 373, 
	521, 544, 570, 597, 607, 629, 304, 313, 
	321, 346, 353, 378, 560, 569, 577, 602, 
	609, 634, 336, 351, 368, 521, 544, 570, 
	592, 607, 624, 304, 313, 321, 346, 353, 
	378, 560, 569, 577, 602, 609, 634, 334, 
	351, 366, 521, 544, 570, 590, 607, 622, 
	304, 313, 321, 346, 353, 378, 560, 569, 
	577, 602, 609, 634, 325, 351, 357, 521, 
	544, 570, 581, 607, 613, 304, 313, 321, 
	346, 353, 378, 560, 569, 577, 602, 609, 
	634, 321, 351, 353, 521, 544, 570, 577, 
	607, 609, 304, 313, 322, 346, 354, 378, 
	560, 569, 578, 602, 610, 634, 338, 351, 
	370, 521, 544, 570, 594, 607, 626, 304, 
	313, 321, 346, 353, 378, 560, 569, 577, 
	602, 609, 634, 339, 351, 371, 521, 544, 
	570, 595, 607, 627, 304, 313, 321, 346, 
	353, 378, 560, 569, 577, 602, 609, 634, 
	332, 351, 364, 521, 544, 570, 588, 607, 
	620, 304, 313, 321, 346, 353, 378, 560, 
	569, 577, 602, 609, 634, 334, 351, 366, 
	521, 544, 570, 590, 607, 622, 304, 313, 
	321, 346, 353, 378, 560, 569, 577, 602, 
	609, 634, 346, 351, 378, 521, 544, 570, 
	602, 607, 634, 304, 313, 321, 345, 353, 
	377, 560, 569, 577, 601, 609, 633, 46, 
	351, 521, 544, 570, 607, 304, 313, 321, 
	346, 353, 378, 560, 569, 577, 602, 609, 
	634, 39, 329, 332, 334, 344, 351, 361, 
	364, 366, 376, 521, 544, 570, 585, 588, 
	590, 600, 607, 617, 620, 622, 632, 304, 
	313, 321, 346, 353, 378, 560, 569, 577, 
	602, 609, 634, 338, 351, 370, 521, 544, 
	570, 594, 607, 626, 304, 313, 321, 346, 
	353, 378, 560, 569, 577, 602, 609, 634, 
	339, 351, 371, 521, 544, 570, 595, 607, 
	627, 304, 313, 321, 346, 353, 378, 560, 
	569, 577, 602, 609, 634, 325, 351, 357, 
	521, 544, 570, 581, 607, 613, 304, 313, 
	321, 346, 353, 378, 560, 569, 577, 602, 
	609, 634, 324, 351, 356, 521, 544, 570, 
	580, 607, 612, 304, 313, 321, 346, 353, 
	378, 560, 569, 577, 602, 609, 634, 329, 
	351, 361, 521, 544, 570, 585, 607, 617, 
	304, 313, 321, 346, 353, 378, 560, 569, 
	577, 602, 609, 634, 326, 351, 358, 521, 
	544, 570, 582, 607, 614, 304, 313, 321, 
	346, 353, 378, 560, 569, 577, 602, 609, 
	634, 340, 344, 351, 372, 376, 521, 544, 
	570, 596, 600, 607, 628, 632, 304, 313, 
	321, 346, 353, 378, 560, 569, 577, 602, 
	609, 634, 325, 351, 357, 521, 544, 570, 
	581, 607, 613, 304, 313, 321, 346, 353, 
	378, 560, 569, 577, 602, 609, 634, 338, 
	351, 370, 521, 544, 570, 594, 607, 626, 
	304, 313, 321, 346, 353, 378, 560, 569, 
	577, 602, 609, 634, 334, 351, 366, 521, 
	544, 570, 590, 607, 622, 304, 313, 321, 
	346, 353, 378, 560, 569, 577, 602, 609, 
	634, 39, 329, 336, 351, 361, 368, 521, 
	544, 570, 585, 592, 607, 617, 624, 304, 
	313, 321, 346, 353, 378, 560, 569, 577, 
	602, 609, 634, 332, 351, 364, 521, 544, 
	570, 588, 607, 620, 304, 313, 321, 346, 
	353, 378, 560, 569, 577, 602, 609, 634, 
	332, 351, 364, 521, 544, 570, 588, 607, 
	620, 304, 313, 321, 346, 353, 378, 560, 
	569, 577, 602, 609, 634, 324, 351, 356, 
	521, 544, 570, 580, 607, 612, 304, 313, 
	321, 346, 353, 378, 560, 569, 577, 602, 
	609, 634, 325, 351, 357, 521, 544, 570, 
	581, 607, 613, 304, 313, 321, 346, 353, 
	378, 560, 569, 577, 602, 609, 634, 336, 
	351, 368, 521, 544, 570, 592, 607, 624, 
	304, 313, 321, 346, 353, 378, 560, 569, 
	577, 602, 609, 634, 332, 351, 364, 521, 
	544, 570, 588, 607, 620, 304, 313, 321, 
	346, 353, 378, 560, 569, 577, 602, 609, 
	634, 335, 351, 367, 521, 544, 570, 591, 
	607, 623, 304, 313, 321, 346, 353, 378, 
	560, 569, 577, 602, 609, 634, 322, 351, 
	354, 521, 544, 570, 578, 607, 610, 304, 
	313, 321, 346, 353, 378, 560, 569, 577, 
	602, 609, 634, 321, 351, 353, 521, 544, 
	570, 577, 607, 609, 304, 313, 322, 346, 
	354, 378, 560, 569, 578, 602, 610, 634, 
	332, 351, 364, 521, 544, 570, 588, 607, 
	620, 304, 313, 321, 346, 353, 378, 560, 
	569, 577, 602, 609, 634, 39, 321, 332, 
	351, 353, 364, 521, 544, 570, 577, 588, 
	607, 609, 620, 304, 313, 322, 346, 354, 
	378, 560, 569, 578, 602, 610, 634, 332, 
	351, 364, 521, 544, 570, 588, 607, 620, 
	304, 313, 321, 346, 353, 378, 560, 569, 
	577, 602, 609, 634, 340, 351, 372, 521, 
	544, 570, 596, 607, 628, 304, 313, 321, 
	346, 353, 378, 560, 569, 577, 602, 609, 
	634, 39, 351, 521, 544, 570, 607, 304, 
	313, 321, 346, 353, 378, 560, 569, 577, 
	602, 609, 634, 324, 326, 329, 333, 334, 
	335, 336, 344, 345, 351, 356, 358, 361, 
	365, 366, 367, 368, 376, 377, 521, 544, 
	570, 580, 582, 585, 589, 590, 591, 592, 
	600, 601, 607, 612, 614, 617, 621, 622, 
	623, 624, 632, 633, 304, 313, 321, 346, 
	353, 378, 560, 569, 577, 602, 609, 634, 
	325, 351, 357, 521, 544, 570, 581, 607, 
	613, 304, 313, 321, 346, 353, 378, 560, 
	569, 577, 602, 609, 634, 340, 351, 372, 
	521, 544, 570, 596, 607, 628, 304, 313, 
	321, 346, 353, 378, 560, 569, 577, 602, 
	609, 634, 324, 334, 351, 356, 366, 521, 
	544, 570, 580, 590, 607, 612, 622, 304, 
	313, 321, 346, 353, 378, 560, 569, 577, 
	602, 609, 634, 325, 351, 357, 521, 544, 
	570, 581, 607, 613, 304, 313, 321, 346, 
	353, 378, 560, 569, 577, 602, 609, 634, 
	326, 351, 358, 521, 544, 570, 582, 607, 
	614, 304, 313, 321, 346, 353, 378, 560, 
	569, 577, 602, 609, 634, 324, 351, 356, 
	521, 544, 570, 580, 607, 612, 304, 313, 
	321, 346, 353, 378, 560, 569, 577, 602, 
	609, 634, 325, 351, 357, 521, 544, 570, 
	581, 607, 613, 304, 313, 321, 346, 353, 
	378, 560, 569, 577, 602, 609, 634, 326, 
	351, 358, 521, 544, 570, 582, 607, 614, 
	304, 313, 321, 346, 353, 378, 560, 569, 
	577, 602, 609, 634, 338, 351, 370, 521, 
	544, 570, 594, 607, 626, 304, 313, 321, 
	346, 353, 378, 560, 569, 577, 602, 609, 
	634, 304, 323, 324, 329, 342, 351, 355, 
	356, 361, 374, 521, 544, 560, 570, 579, 
	580, 585, 598, 607, 611, 612, 617, 630, 
	305, 313, 321, 346, 353, 378, 561, 569, 
	577, 602, 609, 634, 332, 351, 364, 521, 
	544, 570, 588, 607, 620, 304, 313, 321, 
	346, 353, 378, 560, 569, 577, 602, 609, 
	634, 341, 351, 373, 521, 544, 570, 597, 
	607, 629, 304, 313, 321, 346, 353, 378, 
	560, 569, 577, 602, 609, 634, 324, 351, 
	356, 521, 544, 570, 580, 607, 612, 304, 
	313, 321, 346, 353, 378, 560, 569, 577, 
	602, 609, 634, 325, 351, 357, 521, 544, 
	570, 581, 607, 613, 304, 313, 321, 346, 
	353, 378, 560, 569, 577, 602, 609, 634, 
	338, 351, 370, 521, 544, 570, 594, 607, 
	626, 304, 313, 321, 346, 353, 378, 560, 
	569, 577, 602, 609, 634, 338, 351, 370, 
	521, 544, 570, 594, 607, 626, 304, 313, 
	321, 346, 353, 378, 560, 569, 577, 602, 
	609, 634, 335, 351, 367, 521, 544, 570, 
	591, 607, 623, 304, 313, 321, 346, 353, 
	378, 560, 569, 577, 602, 609, 634, 331, 
	351, 363, 521, 544, 570, 587, 607, 619, 
	304, 313, 321, 346, 353, 378, 560, 569, 
	577, 602, 609, 634, 325, 351, 357, 521, 
	544, 570, 581, 607, 613, 304, 313, 321, 
	346, 353, 378, 560, 569, 577, 602, 609, 
	634, 325, 329, 351, 357, 361, 521, 544, 
	570, 581, 585, 607, 613, 617, 304, 313, 
	321, 346, 353, 378, 560, 569, 577, 602, 
	609, 634, 338, 339, 351, 370, 371, 521, 
	544, 570, 594, 595, 607, 626, 627, 304, 
	313, 321, 346, 353, 378, 560, 569, 577, 
	602, 609, 634, 325, 351, 357, 521, 544, 
	570, 581, 607, 613, 304, 313, 321, 346, 
	353, 378, 560, 569, 577, 602, 609, 634, 
	339, 351, 371, 521, 544, 570, 595, 607, 
	627, 304, 313, 321, 346, 353, 378, 560, 
	569, 577, 602, 609, 634, 325, 351, 357, 
	521, 544, 570, 581, 607, 613, 304, 313, 
	321, 346, 353, 378, 560, 569, 577, 602, 
	609, 634, 340, 351, 372, 521, 544, 570, 
	596, 607, 628, 304, 313, 321, 346, 353, 
	378, 560, 569, 577, 602, 609, 634, 328, 
	332, 351, 360, 364, 521, 544, 570, 584, 
	588, 607, 616, 620, 304, 313, 321, 346, 
	353, 378, 560, 569, 577, 602, 609, 634, 
	328, 332, 351, 360, 364, 521, 544, 570, 
	584, 588, 607, 616, 620, 304, 313, 321, 
	346, 353, 378, 560, 569, 577, 602, 609, 
	634, 336, 338, 351, 368, 370, 521, 544, 
	570, 592, 594, 607, 624, 626, 304, 313, 
	321, 346, 353, 378, 560, 569, 577, 602, 
	609, 634, 39, 324, 329, 335, 339, 346, 
	351, 356, 361, 367, 371, 378, 521, 544, 
	570, 580, 585, 591, 595, 602, 607, 612, 
	617, 623, 627, 634, 304, 313, 321, 345, 
	353, 377, 560, 569, 577, 601, 609, 633, 
	324, 329, 336, 351, 356, 361, 368, 521, 
	544, 570, 580, 585, 592, 607, 612, 617, 
	624, 304, 313, 321, 346, 353, 378, 560, 
	569, 577, 602, 609, 634, 338, 339, 344, 
	351, 370, 371, 376, 521, 544, 570, 594, 
	595, 600, 607, 626, 627, 632, 304, 313, 
	321, 346, 353, 378, 560, 569, 577, 602, 
	609, 634, 344, 351, 376, 521, 544, 570, 
	600, 607, 632, 304, 313, 321, 346, 353, 
	378, 560, 569, 577, 602, 609, 634, 338, 
	351, 370, 521, 544, 570, 594, 607, 626, 
	304, 313, 321, 346, 353, 378, 560, 569, 
	577, 602, 609, 634, 338, 339, 344, 351, 
	370, 371, 376, 521, 544, 570, 594, 595, 
	600, 607, 626, 627, 632, 304, 313, 321, 
	346, 353, 378, 560, 569, 577, 602, 609, 
	634, 344, 351, 376, 521, 544, 570, 600, 
	607, 632, 304, 313, 321, 346, 353, 378, 
	560, 569, 577, 602, 609, 634, 338, 351, 
	370, 521, 544, 570, 594, 607, 626, 304, 
	313, 321, 346, 353, 378, 560, 569, 577, 
	602, 609, 634, 334, 351, 366, 521, 544, 
	570, 590, 607, 622, 304, 313, 321, 346, 
	353, 378, 560, 569, 577, 602, 609, 634, 
	325, 351, 357, 521, 544, 570, 581, 607, 
	613, 304, 313, 321, 346, 353, 378, 560, 
	569, 577, 602, 609, 634, 324, 329, 340, 
	351, 356, 361, 372, 521, 544, 570, 580, 
	585, 596, 607, 612, 617, 628, 304, 313, 
	321, 346, 353, 378, 560, 569, 577, 602, 
	609, 634, 324, 338, 351, 356, 370, 521, 
	544, 570, 580, 594, 607, 612, 626, 304, 
	313, 321, 346, 353, 378, 560, 569, 577, 
	602, 609, 634, 338, 351, 370, 521, 544, 
	570, 594, 607, 626, 304, 313, 321, 346, 
	353, 378, 560, 569, 577, 602, 609, 634, 
	324, 338, 351, 356, 370, 521, 544, 570, 
	580, 594, 607, 612, 626, 304, 313, 321, 
	346, 353, 378, 560, 569, 577, 602, 609, 
	634, 338, 351, 370, 521, 544, 570, 594, 
	607, 626, 304, 313, 321, 346, 353, 378, 
	560, 569, 577, 602, 609, 634, 335, 351, 
	367, 521, 544, 570, 591, 607, 623, 304, 
	313, 321, 346, 353, 378, 560, 569, 577, 
	602, 609, 634, 326, 334, 351, 358, 366, 
	521, 544, 570, 582, 590, 607, 614, 622, 
	304, 313, 321, 346, 353, 378, 560, 569, 
	577, 602, 609, 634, 326, 351, 358, 521, 
	544, 570, 582, 607, 614, 304, 313, 321, 
	346, 353, 378, 560, 569, 577, 602, 609, 
	634, 329, 332, 335, 341, 351, 361, 364, 
	367, 373, 521, 544, 570, 585, 588, 591, 
	597, 607, 617, 620, 623, 629, 304, 313, 
	321, 346, 353, 378, 560, 569, 577, 602, 
	609, 634, 338, 351, 370, 521, 544, 570, 
	594, 607, 626, 304, 313, 321, 346, 353, 
	378, 560, 569, 577, 602, 609, 634, 338, 
	351, 370, 521, 544, 570, 594, 607, 626, 
	304, 313, 321, 346, 353, 378, 560, 569, 
	577, 602, 609, 634, 335, 351, 367, 521, 
	544, 570, 591, 607, 623, 304, 313, 321, 
	346, 353, 378, 560, 569, 577, 602, 609, 
	634, 338, 351, 370, 521, 544, 570, 594, 
	607, 626, 304, 313, 321, 346, 353, 378, 
	560, 569, 577, 602, 609, 634, 340, 351, 
	372, 521, 544, 570, 596, 607, 628, 304, 
	313, 321, 346, 353, 378, 560, 569, 577, 
	602, 609, 634, 324, 351, 356, 521, 544, 
	570, 580, 607, 612, 304, 313, 321, 346, 
	353, 378, 560, 569, 577, 602, 609, 634, 
	341, 351, 373, 521, 544, 570, 597, 607, 
	629, 304, 313, 321, 346, 353, 378, 560, 
	569, 577, 602, 609, 634, 332, 351, 364, 
	521, 544, 570, 588, 607, 620, 304, 313, 
	321, 346, 353, 378, 560, 569, 577, 602, 
	609, 634, 325, 351, 357, 521, 544, 570, 
	581, 607, 613, 304, 313, 321, 346, 353, 
	378, 560, 569, 577, 602, 609, 634, 332, 
	351, 364, 521, 544, 570, 588, 607, 620, 
	304, 313, 321, 346, 353, 378, 560, 569, 
	577, 602, 609, 634, 323, 325, 335, 342, 
	346, 351, 355, 357, 367, 374, 378, 521, 
	544, 570, 579, 581, 591, 598, 602, 607, 
	611, 613, 623, 630, 634, 304, 313, 321, 
	345, 353, 377, 560, 569, 577, 601, 609, 
	633, 327, 344, 351, 359, 376, 521, 544, 
	570, 583, 600, 607, 615, 632, 304, 313, 
	321, 346, 353, 378, 560, 569, 577, 602, 
	609, 634, 340, 351, 372, 521, 544, 570, 
	596, 607, 628, 304, 313, 321, 346, 353, 
	378, 560, 569, 577, 602, 609, 634, 338, 
	351, 370, 521, 544, 570, 594, 607, 626, 
	304, 313, 321, 346, 353, 378, 560, 569, 
	577, 602, 609, 634, 325, 351, 357, 521, 
	544, 570, 581, 607, 613, 304, 313, 321, 
	346, 353, 378, 560, 569, 577, 602, 609, 
	634, 327, 351, 359, 521, 544, 570, 583, 
	607, 615, 304, 313, 321, 346, 353, 378, 
	560, 569, 577, 602, 609, 634, 336, 351, 
	368, 521, 544, 570, 592, 607, 624, 304, 
	313, 321, 346, 353, 378, 560, 569, 577, 
	602, 609, 634, 338, 340, 341, 351, 370, 
	372, 373, 521, 544, 570, 594, 596, 597, 
	607, 626, 628, 629, 304, 313, 321, 346, 
	353, 378, 560, 569, 577, 602, 609, 634, 
	327, 351, 359, 521, 544, 570, 583, 607, 
	615, 304, 313, 321, 346, 353, 378, 560, 
	569, 577, 602, 609, 634, 324, 329, 351, 
	356, 361, 521, 544, 570, 580, 585, 607, 
	612, 617, 304, 313, 321, 346, 353, 378, 
	560, 569, 577, 602, 609, 634, 333, 338, 
	351, 365, 370, 521, 544, 570, 589, 594, 
	607, 621, 626, 304, 313, 321, 346, 353, 
	378, 560, 569, 577, 602, 609, 634, 338, 
	351, 370, 521, 544, 570, 594, 607, 626, 
	304, 313, 321, 346, 353, 378, 560, 569, 
	577, 602, 609, 634, 333, 338, 351, 365, 
	370, 521, 544, 570, 589, 594, 607, 621, 
	626, 304, 313, 321, 346, 353, 378, 560, 
	569, 577, 602, 609, 634, 338, 351, 370, 
	521, 544, 570, 594, 607, 626, 304, 313, 
	321, 346, 353, 378, 560, 569, 577, 602, 
	609, 634, 340, 351, 372, 521, 544, 570, 
	596, 607, 628, 304, 313, 321, 346, 353, 
	378, 560, 569, 577, 602, 609, 634, 304, 
	324, 329, 351, 356, 361, 521, 544, 560, 
	570, 580, 585, 607, 612, 617, 305, 313, 
	321, 346, 353, 378, 561, 569, 577, 602, 
	609, 634, 334, 351, 366, 521, 544, 570, 
	590, 607, 622, 304, 313, 321, 346, 353, 
	378, 560, 569, 577, 602, 609, 634, 322, 
	351, 354, 521, 544, 570, 578, 607, 610, 
	304, 313, 321, 346, 353, 378, 560, 569, 
	577, 602, 609, 634, 325, 329, 335, 341, 
	351, 357, 361, 367, 373, 521, 544, 570, 
	581, 585, 591, 597, 607, 613, 617, 623, 
	629, 304, 313, 321, 346, 353, 378, 560, 
	569, 577, 602, 609, 634, 344, 351, 376, 
	521, 544, 570, 600, 607, 632, 304, 313, 
	321, 346, 353, 378, 560, 569, 577, 602, 
	609, 634, 325, 351, 357, 521, 544, 570, 
	581, 607, 613, 304, 313, 321, 346, 353, 
	378, 560, 569, 577, 602, 609, 634, 332, 
	351, 364, 521, 544, 570, 588, 607, 620, 
	304, 313, 321, 346, 353, 378, 560, 569, 
	577, 602, 609, 634, 321, 324, 351, 353, 
	356, 521, 544, 570, 577, 580, 607, 609, 
	612, 304, 313, 322, 346, 354, 378, 560, 
	569, 578, 602, 610, 634, 324, 351, 356, 
	521, 544, 570, 580, 607, 612, 304, 313, 
	321, 346, 353, 378, 560, 569, 577, 602, 
	609, 634, 334, 351, 366, 521, 544, 570, 
	590, 607, 622, 304, 313, 321, 346, 353, 
	378, 560, 569, 577, 602, 609, 634, 336, 
	351, 368, 521, 544, 570, 592, 607, 624, 
	304, 313, 321, 346, 353, 378, 560, 569, 
	577, 602, 609, 634, 344, 351, 376, 521, 
	544, 570, 600, 607, 632, 304, 313, 321, 
	346, 353, 378, 560, 569, 577, 602, 609, 
	634, 322, 339, 351, 354, 371, 521, 544, 
	570, 578, 595, 607, 610, 627, 304, 313, 
	321, 346, 353, 378, 560, 569, 577, 602, 
	609, 634, 332, 351, 364, 521, 544, 570, 
	588, 607, 620, 304, 313, 321, 346, 353, 
	378, 560, 569, 577, 602, 609, 634, 329, 
	351, 361, 521, 544, 570, 585, 607, 617, 
	304, 313, 321, 346, 353, 378, 560, 569, 
	577, 602, 609, 634, 323, 351, 355, 521, 
	544, 570, 579, 607, 611, 304, 313, 321, 
	346, 353, 378, 560, 569, 577, 602, 609, 
	634, 328, 351, 360, 521, 544, 570, 584, 
	607, 616, 304, 313, 321, 346, 353, 378, 
	560, 569, 577, 602, 609, 634, 324, 325, 
	332, 338, 339, 351, 356, 357, 364, 370, 
	371, 521, 544, 570, 580, 581, 588, 594, 
	595, 607, 612, 613, 620, 626, 627, 304, 
	313, 321, 346, 353, 378, 560, 569, 577, 
	602, 609, 634, 333, 351, 365, 521, 544, 
	570, 589, 607, 621, 304, 313, 321, 346, 
	353, 378, 560, 569, 577, 602, 609, 634, 
	335, 351, 367, 521, 544, 570, 591, 607, 
	623, 304, 313, 321, 346, 353, 378, 560, 
	569, 577, 602, 609, 634, 324, 351, 356, 
	521, 544, 570, 580, 607, 612, 304, 313, 
	321, 346, 353, 378, 560, 569, 577, 602, 
	609, 634, 325, 351, 357, 521, 544, 570, 
	581, 607, 613, 304, 313, 321, 346, 353, 
	378, 560, 569, 577, 602, 609, 634, 339, 
	340, 351, 371, 372, 521, 544, 570, 595, 
	596, 607, 627, 628, 304, 313, 321, 346, 
	353, 378, 560, 569, 577, 602, 609, 634, 
	329, 334, 351, 361, 366, 521, 544, 570, 
	585, 590, 607, 617, 622, 304, 313, 321, 
	346, 353, 378, 560, 569, 577, 602, 609, 
	634, 321, 323, 324, 351, 353, 355, 356, 
	521, 544, 570, 577, 579, 580, 607, 609, 
	611, 612, 304, 313, 322, 346, 354, 378, 
	560, 569, 578, 602, 610, 634, 39, 351, 
	521, 544, 570, 607, 304, 313, 321, 346, 
	353, 378, 560, 569, 577, 602, 609, 634, 
	321, 351, 353, 521, 544, 570, 577, 607, 
	609, 304, 313, 322, 346, 354, 378, 560, 
	569, 578, 602, 610, 634, 39, 351, 521, 
	544, 570, 607, 304, 313, 321, 346, 353, 
	378, 560, 569, 577, 602, 609, 634, 321, 
	323, 324, 351, 353, 355, 356, 521, 544, 
	570, 577, 579, 580, 607, 609, 611, 612, 
	304, 313, 322, 346, 354, 378, 560, 569, 
	578, 602, 610, 634, 39, 351, 521, 544, 
	570, 607, 304, 313, 321, 346, 353, 378, 
	560, 569, 577, 602, 609, 634, 321, 351, 
	353, 521, 544, 570, 577, 607, 609, 304, 
	313, 322, 346, 354, 378, 560, 569, 578, 
	602, 610, 634, 39, 351, 521, 544, 570, 
	607, 304, 313, 321, 346, 353, 378, 560, 
	569, 577, 602, 609, 634, 340, 351, 372, 
	521, 544, 570, 596, 607, 628, 304, 313, 
	321, 346, 353, 378, 560, 569, 577, 602, 
	609, 634, 322, 323, 325, 332, 336, 338, 
	341, 343, 345, 351, 354, 355, 357, 364, 
	368, 370, 373, 375, 377, 521, 544, 570, 
	578, 579, 581, 588, 592, 594, 597, 599, 
	601, 607, 610, 611, 613, 620, 624, 626, 
	629, 631, 633, 304, 313, 321, 346, 353, 
	378, 560, 569, 577, 602, 609, 634, 323, 
	351, 355, 521, 544, 570, 579, 607, 611, 
	304, 313, 321, 346, 353, 378, 560, 569, 
	577, 602, 609, 634, 326, 351, 358, 521, 
	544, 570, 582, 607, 614, 304, 313, 321, 
	346, 353, 378, 560, 569, 577, 602, 609, 
	634, 323, 340, 351, 355, 372, 521, 544, 
	570, 579, 596, 607, 611, 628, 304, 313, 
	321, 346, 353, 378, 560, 569, 577, 602, 
	609, 634, 340, 351, 372, 521, 544, 570, 
	596, 607, 628, 304, 313, 321, 346, 353, 
	378, 560, 569, 577, 602, 609, 634, 329, 
	351, 361, 521, 544, 570, 585, 607, 617, 
	304, 313, 321, 346, 353, 378, 560, 569, 
	577, 602, 609, 634, 335, 351, 367, 521, 
	544, 570, 591, 607, 623, 304, 313, 321, 
	346, 353, 378, 560, 569, 577, 602, 609, 
	634, 334, 351, 366, 521, 544, 570, 590, 
	607, 622, 304, 313, 321, 346, 353, 378, 
	560, 569, 577, 602, 609, 634, 321, 341, 
	351, 353, 373, 521, 544, 570, 577, 597, 
	607, 609, 629, 304, 313, 322, 346, 354, 
	378, 560, 569, 578, 602, 610, 634, 325, 
	351, 357, 521, 544, 570, 581, 607, 613, 
	304, 313, 321, 346, 353, 378, 560, 569, 
	577, 602, 609, 634, 339, 351, 371, 521, 
	544, 570, 595, 607, 627, 304, 313, 321, 
	346, 353, 378, 560, 569, 577, 602, 609, 
	634, 338, 351, 370, 521, 544, 570, 594, 
	607, 626, 304, 313, 321, 346, 353, 378, 
	560, 569, 577, 602, 609, 634, 321, 329, 
	332, 336, 351, 353, 361, 364, 368, 521, 
	544, 570, 577, 585, 588, 592, 607, 609, 
	617, 620, 624, 304, 313, 322, 346, 354, 
	378, 560, 569, 578, 602, 610, 634, 321, 
	332, 351, 353, 364, 521, 544, 570, 577, 
	588, 607, 609, 620, 304, 313, 322, 346, 
	354, 378, 560, 569, 578, 602, 610, 634, 
	322, 338, 351, 354, 370, 521, 544, 570, 
	578, 594, 607, 610, 626, 304, 313, 321, 
	346, 353, 378, 560, 569, 577, 602, 609, 
	634, 325, 351, 357, 521, 544, 570, 581, 
	607, 613, 304, 313, 321, 346, 353, 378, 
	560, 569, 577, 602, 609, 634, 339, 351, 
	371, 521, 544, 570, 595, 607, 627, 304, 
	313, 321, 346, 353, 378, 560, 569, 577, 
	602, 609, 634, 321, 351, 353, 521, 544, 
	570, 577, 607, 609, 304, 313, 322, 346, 
	354, 378, 560, 569, 578, 602, 610, 634, 
	336, 351, 368, 521, 544, 570, 592, 607, 
	624, 304, 313, 321, 346, 353, 378, 560, 
	569, 577, 602, 609, 634, 334, 351, 366, 
	521, 544, 570, 590, 607, 622, 304, 313, 
	321, 346, 353, 378, 560, 569, 577, 602, 
	609, 634, 329, 351, 361, 521, 544, 570, 
	585, 607, 617, 304, 313, 321, 346, 353, 
	378, 560, 569, 577, 602, 609, 634, 322, 
	351, 354, 521, 544, 570, 578, 607, 610, 
	304, 313, 321, 346, 353, 378, 560, 569, 
	577, 602, 609, 634, 339, 351, 371, 521, 
	544, 570, 595, 607, 627, 304, 313, 321, 
	346, 353, 378, 560, 569, 577, 602, 609, 
	634, 323, 351, 355, 521, 544, 570, 579, 
	607, 611, 304, 313, 321, 346, 353, 378, 
	560, 569, 577, 602, 609, 634, 321, 351, 
	353, 521, 544, 570, 577, 607, 609, 304, 
	313, 322, 346, 354, 378, 560, 569, 578, 
	602, 610, 634, 332, 351, 364, 521, 544, 
	570, 588, 607, 620, 304, 313, 321, 346, 
	353, 378, 560, 569, 577, 602, 609, 634, 
	332, 351, 364, 521, 544, 570, 588, 607, 
	620, 304, 313, 321, 346, 353, 378, 560, 
	569, 577, 602, 609, 634, 325, 339, 351, 
	357, 371, 521, 544, 570, 581, 595, 607, 
	613, 627, 304, 313, 321, 346, 353, 378, 
	560, 569, 577, 602, 609, 634, 339, 351, 
	371, 521, 544, 570, 595, 607, 627, 304, 
	313, 321, 346, 353, 378, 560, 569, 577, 
	602, 609, 634, 340, 351, 372, 521, 544, 
	570, 596, 607, 628, 304, 313, 321, 346, 
	353, 378, 560, 569, 577, 602, 609, 634, 
	340, 351, 372, 521, 544, 570, 596, 607, 
	628, 304, 313, 321, 346, 353, 378, 560, 
	569, 577, 602, 609, 634, 329, 351, 361, 
	521, 544, 570, 585, 607, 617, 304, 313, 
	321, 346, 353, 378, 560, 569, 577, 602, 
	609, 634, 335, 351, 367, 521, 544, 570, 
	591, 607, 623, 304, 313, 321, 346, 353, 
	378, 560, 569, 577, 602, 609, 634, 333, 
	334, 351, 365, 366, 521, 544, 570, 589, 
	590, 607, 621, 622, 304, 313, 321, 346, 
	353, 378, 560, 569, 577, 602, 609, 634, 
	321, 339, 351, 353, 371, 521, 544, 570, 
	577, 595, 607, 609, 627, 304, 313, 322, 
	346, 354, 378, 560, 569, 578, 602, 610, 
	634, 324, 351, 356, 521, 544, 570, 580, 
	607, 612, 304, 313, 321, 346, 353, 378, 
	560, 569, 577, 602, 609, 634, 325, 351, 
	357, 521, 544, 570, 581, 607, 613, 304, 
	313, 321, 346, 353, 378, 560, 569, 577, 
	602, 609, 634, 326, 351, 358, 521, 544, 
	570, 582, 607, 614, 304, 313, 321, 346, 
	353, 378, 560, 569, 577, 602, 609, 634, 
	329, 351, 361, 521, 544, 570, 585, 607, 
	617, 304, 313, 321, 346, 353, 378, 560, 
	569, 577, 602, 609, 634, 334, 351, 366, 
	521, 544, 570, 590, 607, 622, 304, 313, 
	321, 346, 353, 378, 560, 569, 577, 602, 
	609, 634, 325, 351, 357, 521, 544, 570, 
	581, 607, 613, 304, 313, 321, 346, 353, 
	378, 560, 569, 577, 602, 609, 634, 335, 
	336, 351, 367, 368, 521, 544, 570, 591, 
	592, 607, 623, 624, 304, 313, 321, 346, 
	353, 378, 560, 569, 577, 602, 609, 634, 
	338, 351, 370, 521, 544, 570, 594, 607, 
	626, 304, 313, 321, 346, 353, 378, 560, 
	569, 577, 602, 609, 634, 323, 351, 355, 
	521, 544, 570, 579, 607, 611, 304, 313, 
	321, 346, 353, 378, 560, 569, 577, 602, 
	609, 634, 0
};
static const char _lexer_single_lengths[] = {
	0, 2, 3, 14, 2, 5, 5, 2, 
	5, 2, 5, 4, 5, 5, 2, 5, 
	2, 0, 8, 3, 3, 126, 1, 0, 
	1, 0, 1, 14, 1, 6, 4, 2, 
	2, 2, 0, 1, 3, 1, 2, 1, 
	13, 1, 2, 5, 2, 3, 3, 3, 
	3, 3, 3, 8, 2, 5, 3, 3, 
	3, 3, 3, 8, 3, 3, 1, 5, 
	3, 3, 3, 3, 7, 3, 3, 12, 
	3, 8, 19, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 2, 
	10, 3, 3, 3, 3, 3, 3, 5, 
	3, 3, 3, 6, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 6, 3, 
	3, 2, 19, 3, 3, 5, 3, 3, 
	3, 3, 3, 3, 10, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 5, 5, 
	3, 3, 3, 3, 5, 5, 5, 12, 
	7, 7, 3, 3, 7, 3, 3, 3, 
	3, 7, 5, 3, 5, 3, 3, 5, 
	3, 9, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 11, 5, 3, 3, 
	3, 3, 3, 7, 3, 5, 5, 3, 
	5, 3, 3, 6, 3, 3, 9, 3, 
	3, 3, 5, 3, 3, 3, 3, 5, 
	3, 3, 3, 3, 11, 3, 3, 3, 
	3, 5, 5, 7, 2, 3, 2, 7, 
	2, 3, 2, 3, 19, 3, 3, 5, 
	3, 3, 3, 3, 5, 3, 3, 3, 
	9, 5, 5, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 5, 
	3, 3, 3, 3, 3, 5, 5, 3, 
	3, 3, 3, 3, 3, 5, 3, 3, 
	3, 1, 28, 5, 7, 13, 6, 9, 
	9, 9, 9, 9, 9, 18, 6, 13, 
	9, 9, 9, 9, 9, 18, 9, 9, 
	5, 13, 9, 9, 9, 9, 17, 9, 
	9, 26, 9, 18, 41, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 6, 22, 9, 9, 9, 9, 9, 
	9, 13, 9, 9, 9, 14, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	14, 9, 9, 6, 41, 9, 9, 13, 
	9, 9, 9, 9, 9, 9, 23, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	13, 13, 9, 9, 9, 9, 13, 13, 
	13, 26, 17, 17, 9, 9, 17, 9, 
	9, 9, 9, 17, 13, 9, 13, 9, 
	9, 13, 9, 21, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 25, 13, 
	9, 9, 9, 9, 9, 17, 9, 13, 
	13, 9, 13, 9, 9, 15, 9, 9, 
	21, 9, 9, 9, 13, 9, 9, 9, 
	9, 13, 9, 9, 9, 9, 25, 9, 
	9, 9, 9, 13, 13, 17, 6, 9, 
	6, 17, 6, 9, 6, 9, 41, 9, 
	9, 13, 9, 9, 9, 9, 13, 9, 
	9, 9, 21, 13, 13, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 13, 9, 9, 9, 9, 9, 13, 
	13, 9, 9, 9, 9, 9, 9, 13, 
	9, 9
};
static const char _lexer_range_lengths[] = {
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	3, 3, 0, 2, 0, 6, 0, 3, 
	1, 1, 0, 0, 0, 4, 4, 3, 
	3, 4, 3, 0, 0, 0, 0, 0, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	2, 3, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6
};
static const short _lexer_index_offsets[] = {
	0, 0, 3, 7, 22, 25, 31, 37, 
	40, 46, 49, 55, 60, 66, 72, 75, 
	81, 87, 91, 100, 106, 110, 243, 245, 
	249, 252, 254, 256, 271, 273, 284, 293, 
	299, 305, 312, 316, 318, 322, 324, 327, 
	329, 346, 351, 357, 366, 372, 379, 386, 
	393, 400, 407, 414, 426, 432, 441, 448, 
	455, 462, 469, 476, 488, 495, 502, 507, 
	516, 523, 530, 537, 544, 555, 562, 569, 
	585, 592, 604, 627, 634, 641, 648, 655, 
	662, 669, 676, 683, 690, 697, 704, 711, 
	717, 731, 738, 745, 752, 759, 766, 773, 
	782, 789, 796, 803, 813, 820, 827, 834, 
	841, 848, 855, 862, 869, 876, 883, 893, 
	900, 907, 913, 936, 943, 950, 959, 966, 
	973, 980, 987, 994, 1001, 1015, 1022, 1029, 
	1036, 1043, 1050, 1057, 1064, 1071, 1078, 1087, 
	1096, 1103, 1110, 1117, 1124, 1133, 1142, 1151, 
	1167, 1178, 1189, 1196, 1203, 1214, 1221, 1228, 
	1235, 1242, 1253, 1262, 1269, 1278, 1285, 1292, 
	1301, 1308, 1321, 1328, 1335, 1342, 1349, 1356, 
	1363, 1370, 1377, 1384, 1391, 1406, 1415, 1422, 
	1429, 1436, 1443, 1450, 1461, 1468, 1477, 1486, 
	1493, 1502, 1509, 1516, 1526, 1533, 1540, 1553, 
	1560, 1567, 1574, 1583, 1590, 1597, 1604, 1611, 
	1620, 1627, 1634, 1641, 1648, 1663, 1670, 1677, 
	1684, 1691, 1700, 1709, 1720, 1726, 1733, 1739, 
	1750, 1756, 1763, 1769, 1776, 1799, 1806, 1813, 
	1822, 1829, 1836, 1843, 1850, 1859, 1866, 1873, 
	1880, 1893, 1902, 1911, 1918, 1925, 1932, 1939, 
	1946, 1953, 1960, 1967, 1974, 1981, 1988, 1995, 
	2004, 2011, 2018, 2025, 2032, 2039, 2048, 2057, 
	2064, 2071, 2078, 2085, 2092, 2099, 2108, 2115, 
	2122, 2128, 2133, 2168, 2180, 2194, 2214, 2227, 
	2243, 2259, 2275, 2291, 2307, 2323, 2348, 2361, 
	2381, 2397, 2413, 2429, 2445, 2461, 2486, 2502, 
	2518, 2530, 2550, 2566, 2582, 2598, 2614, 2638, 
	2654, 2670, 2703, 2719, 2744, 2792, 2808, 2824, 
	2840, 2856, 2872, 2888, 2904, 2920, 2936, 2952, 
	2968, 2984, 2997, 3026, 3042, 3058, 3074, 3090, 
	3106, 3122, 3142, 3158, 3174, 3190, 3211, 3227, 
	3243, 3259, 3275, 3291, 3307, 3323, 3339, 3355, 
	3371, 3392, 3408, 3424, 3437, 3485, 3501, 3517, 
	3537, 3553, 3569, 3585, 3601, 3617, 3633, 3663, 
	3679, 3695, 3711, 3727, 3743, 3759, 3775, 3791, 
	3807, 3827, 3847, 3863, 3879, 3895, 3911, 3931, 
	3951, 3971, 4004, 4028, 4052, 4068, 4084, 4108, 
	4124, 4140, 4156, 4172, 4196, 4216, 4232, 4252, 
	4268, 4284, 4304, 4320, 4348, 4364, 4380, 4396, 
	4412, 4428, 4444, 4460, 4476, 4492, 4508, 4540, 
	4560, 4576, 4592, 4608, 4624, 4640, 4664, 4680, 
	4700, 4720, 4736, 4756, 4772, 4788, 4810, 4826, 
	4842, 4870, 4886, 4902, 4918, 4938, 4954, 4970, 
	4986, 5002, 5022, 5038, 5054, 5070, 5086, 5118, 
	5134, 5150, 5166, 5182, 5202, 5222, 5246, 5259, 
	5275, 5288, 5312, 5325, 5341, 5354, 5370, 5418, 
	5434, 5450, 5470, 5486, 5502, 5518, 5534, 5554, 
	5570, 5586, 5602, 5630, 5650, 5670, 5686, 5702, 
	5718, 5734, 5750, 5766, 5782, 5798, 5814, 5830, 
	5846, 5862, 5882, 5898, 5914, 5930, 5946, 5962, 
	5982, 6002, 6018, 6034, 6050, 6066, 6082, 6098, 
	6118, 6134
};
static const short _lexer_indicies[] = {
	1, 1, 0, 2, 1, 1, 0, 4, 
	4, 5, 6, 7, 8, 9, 10, 5, 
	6, 7, 8, 9, 10, 3, 11, 11, 
	3, 11, 11, 12, 12, 12, 3, 6, 
	6, 13, 13, 13, 3, 14, 14, 3, 
	14, 14, 15, 15, 15, 3, 16, 16, 
	3, 16, 16, 17, 17, 17, 3, 18, 
	19, 18, 19, 3, 18, 18, 20, 20, 
	20, 3, 19, 19, 21, 21, 21, 3, 
	22, 22, 3, 22, 22, 23, 23, 23, 
	3, 25, 25, 24, 24, 24, 0, 27, 
	27, 27, 26, 29, 30, 31, 32, 29, 
	30, 31, 32, 28, 34, 34, 35, 35, 
	35, 33, 36, 36, 37, 0, 39, 40, 
	41, 42, 43, 44, 45, 46, 47, 48, 
	49, 50, 51, 52, 53, 55, 56, 58, 
	59, 60, 61, 62, 63, 64, 65, 66, 
	67, 68, 66, 69, 70, 71, 72, 38, 
	73, 74, 75, 76, 77, 78, 79, 80, 
	81, 82, 83, 85, 86, 87, 88, 89, 
	90, 91, 92, 93, 94, 95, 96, 84, 
	74, 75, 76, 77, 78, 79, 80, 81, 
	82, 83, 85, 86, 87, 88, 89, 90, 
	91, 92, 93, 94, 95, 96, 97, 98, 
	99, 100, 101, 102, 103, 104, 105, 106, 
	107, 109, 110, 111, 112, 113, 114, 115, 
	116, 117, 118, 119, 120, 108, 98, 99, 
	100, 101, 102, 103, 104, 105, 106, 107, 
	109, 110, 111, 112, 113, 114, 115, 116, 
	117, 118, 119, 120, 38, 57, 84, 84, 
	108, 108, 54, 122, 121, 123, 123, 123, 
	0, 124, 125, 0, 125, 126, 128, 127, 
	4, 4, 5, 6, 7, 8, 9, 10, 
	5, 6, 7, 8, 9, 10, 129, 131, 
	130, 133, 25, 134, 133, 25, 134, 56, 
	57, 24, 24, 132, 135, 25, 135, 25, 
	56, 57, 24, 24, 132, 25, 25, 57, 
	24, 24, 132, 25, 25, 24, 24, 24, 
	136, 25, 25, 137, 24, 24, 24, 0, 
	27, 27, 27, 138, 139, 59, 141, 142, 
	143, 140, 145, 144, 147, 148, 146, 150, 
	149, 152, 153, 154, 155, 156, 157, 158, 
	84, 154, 155, 156, 157, 158, 84, 84, 
	84, 151, 84, 84, 84, 84, 0, 160, 
	84, 84, 84, 84, 159, 161, 162, 84, 
	161, 162, 84, 84, 84, 159, 164, 84, 
	84, 84, 84, 163, 165, 84, 165, 84, 
	84, 84, 159, 166, 84, 166, 84, 84, 
	84, 159, 167, 84, 167, 84, 84, 84, 
	159, 168, 84, 168, 84, 84, 84, 159, 
	169, 84, 169, 84, 84, 84, 159, 170, 
	84, 170, 84, 84, 84, 159, 172, 173, 
	174, 175, 84, 173, 174, 175, 84, 84, 
	84, 171, 177, 84, 84, 84, 84, 176, 
	178, 179, 84, 178, 179, 84, 84, 84, 
	159, 180, 84, 180, 84, 84, 84, 159, 
	181, 84, 181, 84, 84, 84, 159, 182, 
	84, 182, 84, 84, 84, 159, 183, 84, 
	183, 84, 84, 84, 159, 184, 84, 184, 
	84, 84, 84, 159, 186, 187, 188, 189, 
	84, 187, 188, 189, 84, 84, 84, 185, 
	190, 84, 190, 84, 84, 84, 159, 191, 
	84, 191, 84, 84, 84, 159, 193, 84, 
	84, 84, 192, 194, 195, 84, 194, 195, 
	84, 84, 84, 159, 196, 84, 196, 84, 
	84, 84, 159, 197, 84, 197, 84, 84, 
	84, 159, 198, 84, 198, 84, 84, 84, 
	159, 199, 84, 199, 84, 84, 84, 159, 
	201, 202, 203, 84, 201, 202, 203, 84, 
	84, 84, 200, 205, 84, 205, 84, 84, 
	84, 204, 207, 84, 207, 84, 84, 84, 
	206, 209, 210, 211, 212, 213, 214, 84, 
	210, 211, 212, 213, 214, 84, 84, 84, 
	208, 215, 84, 215, 84, 84, 84, 159, 
	217, 218, 219, 220, 84, 218, 219, 220, 
	84, 84, 84, 216, 221, 222, 223, 224, 
	225, 226, 227, 228, 229, 84, 221, 222, 
	223, 224, 225, 226, 227, 228, 229, 84, 
	84, 84, 159, 230, 84, 230, 84, 84, 
	84, 159, 231, 84, 231, 84, 84, 84, 
	159, 232, 84, 232, 84, 84, 84, 159, 
	233, 84, 233, 84, 84, 84, 159, 234, 
	84, 234, 84, 84, 84, 159, 235, 84, 
	235, 84, 84, 84, 159, 236, 84, 236, 
	84, 84, 84, 159, 237, 84, 237, 84, 
	84, 84, 159, 238, 84, 238, 84, 84, 
	84, 159, 239, 84, 239, 84, 84, 84, 
	159, 240, 84, 240, 84, 84, 84, 159, 
	241, 84, 241, 84, 84, 84, 159, 242, 
	84, 84, 84, 84, 159, 244, 245, 246, 
	247, 248, 84, 245, 246, 247, 248, 84, 
	84, 84, 243, 250, 84, 250, 84, 84, 
	84, 249, 251, 84, 251, 84, 84, 84, 
	159, 252, 84, 252, 84, 84, 84, 159, 
	253, 84, 253, 84, 84, 84, 159, 254, 
	84, 254, 84, 84, 84, 159, 255, 84, 
	255, 84, 84, 84, 159, 257, 258, 84, 
	257, 258, 84, 84, 84, 256, 259, 84, 
	259, 84, 84, 84, 159, 260, 84, 260, 
	84, 84, 84, 159, 261, 84, 261, 84, 
	84, 84, 159, 263, 264, 265, 84, 264, 
	265, 84, 84, 84, 262, 266, 84, 266, 
	84, 84, 84, 159, 267, 84, 267, 84, 
	84, 84, 159, 269, 84, 269, 84, 84, 
	84, 268, 270, 84, 270, 84, 84, 84, 
	159, 271, 84, 271, 84, 84, 84, 159, 
	272, 84, 272, 84, 84, 84, 159, 273, 
	84, 273, 84, 84, 84, 159, 274, 84, 
	274, 84, 84, 84, 159, 275, 84, 275, 
	84, 84, 84, 159, 276, 84, 276, 84, 
	84, 84, 159, 278, 279, 280, 84, 279, 
	280, 84, 84, 84, 277, 281, 84, 281, 
	84, 84, 84, 159, 282, 84, 282, 84, 
	84, 84, 159, 284, 84, 84, 84, 84, 
	283, 286, 287, 288, 289, 290, 291, 292, 
	293, 294, 84, 286, 287, 288, 289, 290, 
	291, 292, 293, 294, 84, 84, 84, 285, 
	295, 84, 295, 84, 84, 84, 159, 296, 
	84, 296, 84, 84, 84, 159, 298, 299, 
	84, 298, 299, 84, 84, 84, 297, 300, 
	84, 300, 84, 84, 84, 159, 301, 84, 
	301, 84, 84, 84, 159, 302, 84, 302, 
	84, 84, 84, 159, 303, 84, 303, 84, 
	84, 84, 159, 304, 84, 304, 84, 84, 
	84, 159, 305, 84, 305, 84, 84, 84, 
	159, 307, 308, 309, 310, 311, 84, 308, 
	309, 310, 311, 84, 84, 84, 306, 313, 
	84, 313, 84, 84, 84, 312, 314, 84, 
	314, 84, 84, 84, 159, 315, 84, 315, 
	84, 84, 84, 159, 316, 84, 316, 84, 
	84, 84, 159, 318, 84, 318, 84, 84, 
	84, 317, 320, 84, 320, 84, 84, 84, 
	319, 321, 84, 321, 84, 84, 84, 159, 
	322, 84, 322, 84, 84, 84, 159, 323, 
	84, 323, 84, 84, 84, 159, 324, 325, 
	84, 324, 325, 84, 84, 84, 159, 327, 
	328, 84, 327, 328, 84, 84, 84, 326, 
	329, 84, 329, 84, 84, 84, 159, 330, 
	84, 330, 84, 84, 84, 159, 331, 84, 
	331, 84, 84, 84, 159, 332, 84, 332, 
	84, 84, 84, 159, 334, 335, 84, 334, 
	335, 84, 84, 84, 333, 337, 338, 84, 
	337, 338, 84, 84, 84, 336, 339, 340, 
	84, 339, 340, 84, 84, 84, 159, 342, 
	343, 344, 345, 346, 347, 84, 343, 344, 
	345, 346, 347, 84, 84, 84, 341, 349, 
	350, 351, 84, 349, 350, 351, 84, 84, 
	84, 348, 353, 354, 355, 84, 353, 354, 
	355, 84, 84, 84, 352, 357, 84, 357, 
	84, 84, 84, 356, 358, 84, 358, 84, 
	84, 84, 159, 360, 361, 362, 84, 360, 
	361, 362, 84, 84, 84, 359, 364, 84, 
	364, 84, 84, 84, 363, 365, 84, 365, 
	84, 84, 84, 159, 366, 84, 366, 84, 
	84, 84, 159, 367, 84, 367, 84, 84, 
	84, 159, 368, 369, 370, 84, 368, 369, 
	370, 84, 84, 84, 159, 371, 372, 84, 
	371, 372, 84, 84, 84, 159, 373, 84, 
	373, 84, 84, 84, 159, 374, 375, 84, 
	374, 375, 84, 84, 84, 159, 376, 84, 
	376, 84, 84, 84, 159, 377, 84, 377, 
	84, 84, 84, 159, 378, 379, 84, 378, 
	379, 84, 84, 84, 159, 380, 84, 380, 
	84, 84, 84, 159, 382, 383, 384, 385, 
	84, 382, 383, 384, 385, 84, 84, 84, 
	381, 386, 84, 386, 84, 84, 84, 159, 
	387, 84, 387, 84, 84, 84, 159, 388, 
	84, 388, 84, 84, 84, 159, 389, 84, 
	389, 84, 84, 84, 159, 390, 84, 390, 
	84, 84, 84, 159, 391, 84, 391, 84, 
	84, 84, 159, 392, 84, 392, 84, 84, 
	84, 159, 393, 84, 393, 84, 84, 84, 
	159, 394, 84, 394, 84, 84, 84, 159, 
	395, 84, 395, 84, 84, 84, 159, 396, 
	397, 398, 399, 400, 84, 396, 397, 398, 
	399, 400, 84, 84, 84, 159, 401, 402, 
	84, 401, 402, 84, 84, 84, 159, 403, 
	84, 403, 84, 84, 84, 159, 404, 84, 
	404, 84, 84, 84, 159, 405, 84, 405, 
	84, 84, 84, 159, 406, 84, 406, 84, 
	84, 84, 159, 407, 84, 407, 84, 84, 
	84, 159, 408, 409, 410, 84, 408, 409, 
	410, 84, 84, 84, 159, 412, 84, 412, 
	84, 84, 84, 411, 413, 414, 84, 413, 
	414, 84, 84, 84, 159, 415, 416, 84, 
	415, 416, 84, 84, 84, 159, 418, 84, 
	418, 84, 84, 84, 417, 419, 420, 84, 
	419, 420, 84, 84, 84, 159, 422, 84, 
	422, 84, 84, 84, 421, 423, 84, 423, 
	84, 84, 84, 159, 425, 426, 427, 84, 
	426, 427, 84, 84, 84, 424, 429, 84, 
	429, 84, 84, 84, 428, 430, 84, 430, 
	84, 84, 84, 159, 432, 433, 434, 435, 
	84, 432, 433, 434, 435, 84, 84, 84, 
	431, 436, 84, 436, 84, 84, 84, 159, 
	437, 84, 437, 84, 84, 84, 159, 438, 
	84, 438, 84, 84, 84, 159, 439, 440, 
	84, 439, 440, 84, 84, 84, 159, 441, 
	84, 441, 84, 84, 84, 159, 442, 84, 
	442, 84, 84, 84, 159, 444, 84, 444, 
	84, 84, 84, 443, 446, 84, 446, 84, 
	84, 84, 445, 447, 448, 84, 447, 448, 
	84, 84, 84, 159, 449, 84, 449, 84, 
	84, 84, 159, 450, 84, 450, 84, 84, 
	84, 159, 451, 84, 451, 84, 84, 84, 
	159, 452, 84, 452, 84, 84, 84, 159, 
	454, 455, 456, 457, 458, 84, 454, 455, 
	456, 457, 458, 84, 84, 84, 453, 459, 
	84, 459, 84, 84, 84, 159, 460, 84, 
	460, 84, 84, 84, 159, 461, 84, 461, 
	84, 84, 84, 159, 462, 84, 462, 84, 
	84, 84, 159, 463, 464, 84, 463, 464, 
	84, 84, 84, 159, 466, 467, 84, 466, 
	467, 84, 84, 84, 465, 469, 470, 471, 
	84, 469, 470, 471, 84, 84, 84, 468, 
	473, 84, 84, 84, 84, 472, 475, 84, 
	475, 84, 84, 84, 474, 477, 84, 84, 
	84, 84, 476, 479, 480, 481, 84, 479, 
	480, 481, 84, 84, 84, 478, 483, 84, 
	84, 84, 84, 482, 485, 84, 485, 84, 
	84, 84, 484, 487, 84, 84, 84, 84, 
	486, 488, 84, 488, 84, 84, 84, 159, 
	489, 490, 491, 492, 493, 494, 495, 496, 
	497, 84, 489, 490, 491, 492, 493, 494, 
	495, 496, 497, 84, 84, 84, 159, 498, 
	84, 498, 84, 84, 84, 159, 499, 84, 
	499, 84, 84, 84, 159, 500, 501, 84, 
	500, 501, 84, 84, 84, 159, 502, 84, 
	502, 84, 84, 84, 159, 503, 84, 503, 
	84, 84, 84, 159, 504, 84, 504, 84, 
	84, 84, 159, 505, 84, 505, 84, 84, 
	84, 159, 507, 508, 84, 507, 508, 84, 
	84, 84, 506, 509, 84, 509, 84, 84, 
	84, 159, 510, 84, 510, 84, 84, 84, 
	159, 511, 84, 511, 84, 84, 84, 159, 
	512, 513, 514, 515, 84, 512, 513, 514, 
	515, 84, 84, 84, 159, 516, 517, 84, 
	516, 517, 84, 84, 84, 159, 519, 520, 
	84, 519, 520, 84, 84, 84, 518, 521, 
	84, 521, 84, 84, 84, 159, 522, 84, 
	522, 84, 84, 84, 159, 523, 84, 523, 
	84, 84, 84, 159, 524, 84, 524, 84, 
	84, 84, 159, 526, 84, 526, 84, 84, 
	84, 525, 527, 84, 527, 84, 84, 84, 
	159, 528, 84, 528, 84, 84, 84, 159, 
	529, 84, 529, 84, 84, 84, 159, 530, 
	84, 530, 84, 84, 84, 159, 531, 84, 
	531, 84, 84, 84, 159, 532, 84, 532, 
	84, 84, 84, 159, 533, 84, 533, 84, 
	84, 84, 159, 534, 535, 84, 534, 535, 
	84, 84, 84, 159, 536, 84, 536, 84, 
	84, 84, 159, 537, 84, 537, 84, 84, 
	84, 159, 538, 84, 538, 84, 84, 84, 
	159, 540, 84, 540, 84, 84, 84, 539, 
	541, 84, 541, 84, 84, 84, 159, 542, 
	543, 84, 542, 543, 84, 84, 84, 159, 
	544, 545, 84, 544, 545, 84, 84, 84, 
	159, 546, 84, 546, 84, 84, 84, 159, 
	547, 84, 547, 84, 84, 84, 159, 548, 
	84, 548, 84, 84, 84, 159, 549, 84, 
	549, 84, 84, 84, 159, 550, 84, 550, 
	84, 84, 84, 159, 551, 84, 551, 84, 
	84, 84, 159, 552, 553, 84, 552, 553, 
	84, 84, 84, 159, 554, 84, 554, 84, 
	84, 84, 159, 555, 84, 555, 84, 84, 
	84, 159, 34, 34, 35, 35, 35, 556, 
	35, 35, 35, 35, 557, 152, 153, 154, 
	155, 156, 157, 158, 84, 154, 155, 156, 
	157, 158, 36, 36, 558, 37, 559, 560, 
	561, 562, 563, 108, 559, 560, 561, 562, 
	563, 84, 84, 84, 108, 108, 108, 151, 
	84, 36, 36, 37, 108, 84, 84, 84, 
	108, 108, 108, 0, 160, 84, 36, 36, 
	564, 37, 108, 84, 84, 84, 108, 108, 
	108, 159, 161, 162, 84, 161, 162, 36, 
	36, 37, 565, 566, 108, 565, 566, 84, 
	84, 84, 108, 108, 108, 159, 164, 84, 
	36, 36, 37, 108, 84, 84, 84, 108, 
	108, 108, 163, 165, 84, 165, 36, 36, 
	37, 567, 108, 567, 84, 84, 84, 108, 
	108, 108, 159, 166, 84, 166, 36, 36, 
	37, 568, 108, 568, 84, 84, 84, 108, 
	108, 108, 159, 167, 84, 167, 36, 36, 
	37, 569, 108, 569, 84, 84, 84, 108, 
	108, 108, 159, 168, 84, 168, 36, 36, 
	37, 570, 108, 570, 84, 84, 84, 108, 
	108, 108, 159, 169, 84, 169, 36, 36, 
	37, 571, 108, 571, 84, 84, 84, 108, 
	108, 108, 159, 170, 84, 170, 36, 36, 
	37, 572, 108, 572, 84, 84, 84, 108, 
	108, 108, 159, 172, 173, 174, 175, 84, 
	173, 174, 175, 36, 36, 37, 573, 574, 
	575, 108, 573, 574, 575, 84, 84, 84, 
	108, 108, 108, 171, 177, 84, 36, 36, 
	37, 108, 84, 84, 84, 108, 108, 108, 
	176, 178, 179, 84, 178, 179, 36, 36, 
	37, 576, 577, 108, 576, 577, 84, 84, 
	84, 108, 108, 108, 159, 180, 84, 180, 
	36, 36, 37, 578, 108, 578, 84, 84, 
	84, 108, 108, 108, 159, 181, 84, 181, 
	36, 36, 37, 579, 108, 579, 84, 84, 
	84, 108, 108, 108, 159, 182, 84, 182, 
	36, 36, 37, 580, 108, 580, 84, 84, 
	84, 108, 108, 108, 159, 183, 84, 183, 
	36, 36, 37, 581, 108, 581, 84, 84, 
	84, 108, 108, 108, 159, 184, 84, 184, 
	36, 36, 37, 582, 108, 582, 84, 84, 
	84, 108, 108, 108, 159, 186, 187, 188, 
	189, 84, 187, 188, 189, 36, 36, 37, 
	583, 584, 585, 108, 583, 584, 585, 84, 
	84, 84, 108, 108, 108, 185, 190, 84, 
	190, 36, 36, 37, 586, 108, 586, 84, 
	84, 84, 108, 108, 108, 159, 191, 84, 
	191, 36, 36, 37, 587, 108, 587, 84, 
	84, 84, 108, 108, 108, 159, 193, 36, 
	36, 37, 588, 84, 84, 84, 108, 108, 
	108, 192, 194, 195, 84, 194, 195, 36, 
	36, 37, 589, 590, 108, 589, 590, 84, 
	84, 84, 108, 108, 108, 159, 196, 84, 
	196, 36, 36, 37, 591, 108, 591, 84, 
	84, 84, 108, 108, 108, 159, 197, 84, 
	197, 36, 36, 37, 592, 108, 592, 84, 
	84, 84, 108, 108, 108, 159, 198, 84, 
	198, 36, 36, 37, 593, 108, 593, 84, 
	84, 84, 108, 108, 108, 159, 199, 84, 
	199, 36, 36, 37, 594, 108, 594, 84, 
	84, 84, 108, 108, 108, 159, 201, 202, 
	203, 84, 201, 202, 203, 36, 36, 37, 
	595, 596, 597, 108, 595, 596, 597, 84, 
	84, 84, 108, 108, 108, 200, 205, 84, 
	205, 36, 36, 37, 598, 108, 598, 84, 
	84, 84, 108, 108, 108, 204, 207, 84, 
	207, 36, 36, 37, 599, 108, 599, 84, 
	84, 84, 108, 108, 108, 206, 209, 210, 
	211, 212, 213, 214, 84, 210, 211, 212, 
	213, 214, 36, 36, 37, 600, 601, 602, 
	603, 604, 108, 600, 601, 602, 603, 604, 
	84, 84, 84, 108, 108, 108, 208, 215, 
	84, 215, 36, 36, 37, 605, 108, 605, 
	84, 84, 84, 108, 108, 108, 159, 217, 
	218, 219, 220, 84, 218, 219, 220, 36, 
	36, 37, 606, 607, 608, 108, 606, 607, 
	608, 84, 84, 84, 108, 108, 108, 216, 
	221, 222, 223, 224, 225, 226, 227, 228, 
	229, 84, 221, 222, 223, 224, 225, 226, 
	227, 228, 229, 36, 36, 37, 609, 610, 
	611, 612, 613, 614, 615, 616, 617, 108, 
	609, 610, 611, 612, 613, 614, 615, 616, 
	617, 84, 84, 84, 108, 108, 108, 159, 
	230, 84, 230, 36, 36, 37, 618, 108, 
	618, 84, 84, 84, 108, 108, 108, 159, 
	231, 84, 231, 36, 36, 37, 619, 108, 
	619, 84, 84, 84, 108, 108, 108, 159, 
	232, 84, 232, 36, 36, 37, 620, 108, 
	620, 84, 84, 84, 108, 108, 108, 159, 
	233, 84, 233, 36, 36, 37, 621, 108, 
	621, 84, 84, 84, 108, 108, 108, 159, 
	234, 84, 234, 36, 36, 37, 622, 108, 
	622, 84, 84, 84, 108, 108, 108, 159, 
	235, 84, 235, 36, 36, 37, 623, 108, 
	623, 84, 84, 84, 108, 108, 108, 159, 
	236, 84, 236, 36, 36, 37, 624, 108, 
	624, 84, 84, 84, 108, 108, 108, 159, 
	237, 84, 237, 36, 36, 37, 625, 108, 
	625, 84, 84, 84, 108, 108, 108, 159, 
	238, 84, 238, 36, 36, 37, 626, 108, 
	626, 84, 84, 84, 108, 108, 108, 159, 
	239, 84, 239, 36, 36, 37, 627, 108, 
	627, 84, 84, 84, 108, 108, 108, 159, 
	240, 84, 240, 36, 36, 37, 628, 108, 
	628, 84, 84, 84, 108, 108, 108, 159, 
	241, 84, 241, 36, 36, 37, 629, 108, 
	629, 84, 84, 84, 108, 108, 108, 159, 
	242, 84, 36, 36, 37, 108, 84, 84, 
	84, 108, 108, 108, 159, 244, 245, 246, 
	247, 248, 84, 245, 246, 247, 248, 36, 
	36, 37, 630, 631, 632, 633, 108, 630, 
	631, 632, 633, 84, 84, 84, 108, 108, 
	108, 243, 250, 84, 250, 36, 36, 37, 
	634, 108, 634, 84, 84, 84, 108, 108, 
	108, 249, 251, 84, 251, 36, 36, 37, 
	635, 108, 635, 84, 84, 84, 108, 108, 
	108, 159, 252, 84, 252, 36, 36, 37, 
	636, 108, 636, 84, 84, 84, 108, 108, 
	108, 159, 253, 84, 253, 36, 36, 37, 
	637, 108, 637, 84, 84, 84, 108, 108, 
	108, 159, 254, 84, 254, 36, 36, 37, 
	638, 108, 638, 84, 84, 84, 108, 108, 
	108, 159, 255, 84, 255, 36, 36, 37, 
	639, 108, 639, 84, 84, 84, 108, 108, 
	108, 159, 257, 258, 84, 257, 258, 36, 
	36, 37, 640, 641, 108, 640, 641, 84, 
	84, 84, 108, 108, 108, 256, 259, 84, 
	259, 36, 36, 37, 642, 108, 642, 84, 
	84, 84, 108, 108, 108, 159, 260, 84, 
	260, 36, 36, 37, 643, 108, 643, 84, 
	84, 84, 108, 108, 108, 159, 261, 84, 
	261, 36, 36, 37, 644, 108, 644, 84, 
	84, 84, 108, 108, 108, 159, 263, 264, 
	265, 84, 264, 265, 36, 36, 37, 645, 
	646, 108, 645, 646, 84, 84, 84, 108, 
	108, 108, 262, 266, 84, 266, 36, 36, 
	37, 647, 108, 647, 84, 84, 84, 108, 
	108, 108, 159, 267, 84, 267, 36, 36, 
	37, 648, 108, 648, 84, 84, 84, 108, 
	108, 108, 159, 269, 84, 269, 36, 36, 
	37, 649, 108, 649, 84, 84, 84, 108, 
	108, 108, 268, 270, 84, 270, 36, 36, 
	37, 650, 108, 650, 84, 84, 84, 108, 
	108, 108, 159, 271, 84, 271, 36, 36, 
	37, 651, 108, 651, 84, 84, 84, 108, 
	108, 108, 159, 272, 84, 272, 36, 36, 
	37, 652, 108, 652, 84, 84, 84, 108, 
	108, 108, 159, 273, 84, 273, 36, 36, 
	37, 653, 108, 653, 84, 84, 84, 108, 
	108, 108, 159, 274, 84, 274, 36, 36, 
	37, 654, 108, 654, 84, 84, 84, 108, 
	108, 108, 159, 275, 84, 275, 36, 36, 
	37, 655, 108, 655, 84, 84, 84, 108, 
	108, 108, 159, 276, 84, 276, 36, 36, 
	37, 656, 108, 656, 84, 84, 84, 108, 
	108, 108, 159, 278, 279, 280, 84, 279, 
	280, 36, 36, 37, 657, 658, 108, 657, 
	658, 84, 84, 84, 108, 108, 108, 277, 
	281, 84, 281, 36, 36, 37, 659, 108, 
	659, 84, 84, 84, 108, 108, 108, 159, 
	282, 84, 282, 36, 36, 37, 660, 108, 
	660, 84, 84, 84, 108, 108, 108, 159, 
	284, 84, 36, 36, 37, 108, 84, 84, 
	84, 108, 108, 108, 283, 286, 287, 288, 
	289, 290, 291, 292, 293, 294, 84, 286, 
	287, 288, 289, 290, 291, 292, 293, 294, 
	36, 36, 37, 661, 662, 663, 664, 665, 
	666, 667, 668, 669, 108, 661, 662, 663, 
	664, 665, 666, 667, 668, 669, 84, 84, 
	84, 108, 108, 108, 285, 295, 84, 295, 
	36, 36, 37, 670, 108, 670, 84, 84, 
	84, 108, 108, 108, 159, 296, 84, 296, 
	36, 36, 37, 671, 108, 671, 84, 84, 
	84, 108, 108, 108, 159, 298, 299, 84, 
	298, 299, 36, 36, 37, 672, 673, 108, 
	672, 673, 84, 84, 84, 108, 108, 108, 
	297, 300, 84, 300, 36, 36, 37, 674, 
	108, 674, 84, 84, 84, 108, 108, 108, 
	159, 301, 84, 301, 36, 36, 37, 675, 
	108, 675, 84, 84, 84, 108, 108, 108, 
	159, 302, 84, 302, 36, 36, 37, 676, 
	108, 676, 84, 84, 84, 108, 108, 108, 
	159, 303, 84, 303, 36, 36, 37, 677, 
	108, 677, 84, 84, 84, 108, 108, 108, 
	159, 304, 84, 304, 36, 36, 37, 678, 
	108, 678, 84, 84, 84, 108, 108, 108, 
	159, 305, 84, 305, 36, 36, 37, 679, 
	108, 679, 84, 84, 84, 108, 108, 108, 
	159, 307, 308, 309, 310, 311, 84, 308, 
	309, 310, 311, 36, 36, 680, 37, 681, 
	682, 683, 684, 108, 681, 682, 683, 684, 
	84, 84, 84, 108, 108, 108, 306, 313, 
	84, 313, 36, 36, 37, 685, 108, 685, 
	84, 84, 84, 108, 108, 108, 312, 314, 
	84, 314, 36, 36, 37, 686, 108, 686, 
	84, 84, 84, 108, 108, 108, 159, 315, 
	84, 315, 36, 36, 37, 687, 108, 687, 
	84, 84, 84, 108, 108, 108, 159, 316, 
	84, 316, 36, 36, 37, 688, 108, 688, 
	84, 84, 84, 108, 108, 108, 159, 318, 
	84, 318, 36, 36, 37, 689, 108, 689, 
	84, 84, 84, 108, 108, 108, 317, 320, 
	84, 320, 36, 36, 37, 690, 108, 690, 
	84, 84, 84, 108, 108, 108, 319, 321, 
	84, 321, 36, 36, 37, 691, 108, 691, 
	84, 84, 84, 108, 108, 108, 159, 322, 
	84, 322, 36, 36, 37, 692, 108, 692, 
	84, 84, 84, 108, 108, 108, 159, 323, 
	84, 323, 36, 36, 37, 693, 108, 693, 
	84, 84, 84, 108, 108, 108, 159, 324, 
	325, 84, 324, 325, 36, 36, 37, 694, 
	695, 108, 694, 695, 84, 84, 84, 108, 
	108, 108, 159, 327, 328, 84, 327, 328, 
	36, 36, 37, 696, 697, 108, 696, 697, 
	84, 84, 84, 108, 108, 108, 326, 329, 
	84, 329, 36, 36, 37, 698, 108, 698, 
	84, 84, 84, 108, 108, 108, 159, 330, 
	84, 330, 36, 36, 37, 699, 108, 699, 
	84, 84, 84, 108, 108, 108, 159, 331, 
	84, 331, 36, 36, 37, 700, 108, 700, 
	84, 84, 84, 108, 108, 108, 159, 332, 
	84, 332, 36, 36, 37, 701, 108, 701, 
	84, 84, 84, 108, 108, 108, 159, 334, 
	335, 84, 334, 335, 36, 36, 37, 702, 
	703, 108, 702, 703, 84, 84, 84, 108, 
	108, 108, 333, 337, 338, 84, 337, 338, 
	36, 36, 37, 704, 705, 108, 704, 705, 
	84, 84, 84, 108, 108, 108, 336, 339, 
	340, 84, 339, 340, 36, 36, 37, 706, 
	707, 108, 706, 707, 84, 84, 84, 108, 
	108, 108, 159, 342, 343, 344, 345, 346, 
	347, 84, 343, 344, 345, 346, 347, 36, 
	36, 37, 708, 709, 710, 711, 712, 108, 
	708, 709, 710, 711, 712, 84, 84, 84, 
	108, 108, 108, 341, 349, 350, 351, 84, 
	349, 350, 351, 36, 36, 37, 713, 714, 
	715, 108, 713, 714, 715, 84, 84, 84, 
	108, 108, 108, 348, 353, 354, 355, 84, 
	353, 354, 355, 36, 36, 37, 716, 717, 
	718, 108, 716, 717, 718, 84, 84, 84, 
	108, 108, 108, 352, 357, 84, 357, 36, 
	36, 37, 719, 108, 719, 84, 84, 84, 
	108, 108, 108, 356, 358, 84, 358, 36, 
	36, 37, 720, 108, 720, 84, 84, 84, 
	108, 108, 108, 159, 360, 361, 362, 84, 
	360, 361, 362, 36, 36, 37, 721, 722, 
	723, 108, 721, 722, 723, 84, 84, 84, 
	108, 108, 108, 359, 364, 84, 364, 36, 
	36, 37, 724, 108, 724, 84, 84, 84, 
	108, 108, 108, 363, 365, 84, 365, 36, 
	36, 37, 725, 108, 725, 84, 84, 84, 
	108, 108, 108, 159, 366, 84, 366, 36, 
	36, 37, 726, 108, 726, 84, 84, 84, 
	108, 108, 108, 159, 367, 84, 367, 36, 
	36, 37, 727, 108, 727, 84, 84, 84, 
	108, 108, 108, 159, 368, 369, 370, 84, 
	368, 369, 370, 36, 36, 37, 728, 729, 
	730, 108, 728, 729, 730, 84, 84, 84, 
	108, 108, 108, 159, 371, 372, 84, 371, 
	372, 36, 36, 37, 731, 732, 108, 731, 
	732, 84, 84, 84, 108, 108, 108, 159, 
	373, 84, 373, 36, 36, 37, 733, 108, 
	733, 84, 84, 84, 108, 108, 108, 159, 
	374, 375, 84, 374, 375, 36, 36, 37, 
	734, 735, 108, 734, 735, 84, 84, 84, 
	108, 108, 108, 159, 376, 84, 376, 36, 
	36, 37, 736, 108, 736, 84, 84, 84, 
	108, 108, 108, 159, 377, 84, 377, 36, 
	36, 37, 737, 108, 737, 84, 84, 84, 
	108, 108, 108, 159, 378, 379, 84, 378, 
	379, 36, 36, 37, 738, 739, 108, 738, 
	739, 84, 84, 84, 108, 108, 108, 159, 
	380, 84, 380, 36, 36, 37, 740, 108, 
	740, 84, 84, 84, 108, 108, 108, 159, 
	382, 383, 384, 385, 84, 382, 383, 384, 
	385, 36, 36, 37, 741, 742, 743, 744, 
	108, 741, 742, 743, 744, 84, 84, 84, 
	108, 108, 108, 381, 386, 84, 386, 36, 
	36, 37, 745, 108, 745, 84, 84, 84, 
	108, 108, 108, 159, 387, 84, 387, 36, 
	36, 37, 746, 108, 746, 84, 84, 84, 
	108, 108, 108, 159, 388, 84, 388, 36, 
	36, 37, 747, 108, 747, 84, 84, 84, 
	108, 108, 108, 159, 389, 84, 389, 36, 
	36, 37, 748, 108, 748, 84, 84, 84, 
	108, 108, 108, 159, 390, 84, 390, 36, 
	36, 37, 749, 108, 749, 84, 84, 84, 
	108, 108, 108, 159, 391, 84, 391, 36, 
	36, 37, 750, 108, 750, 84, 84, 84, 
	108, 108, 108, 159, 392, 84, 392, 36, 
	36, 37, 751, 108, 751, 84, 84, 84, 
	108, 108, 108, 159, 393, 84, 393, 36, 
	36, 37, 752, 108, 752, 84, 84, 84, 
	108, 108, 108, 159, 394, 84, 394, 36, 
	36, 37, 753, 108, 753, 84, 84, 84, 
	108, 108, 108, 159, 395, 84, 395, 36, 
	36, 37, 754, 108, 754, 84, 84, 84, 
	108, 108, 108, 159, 396, 397, 398, 399, 
	400, 84, 396, 397, 398, 399, 400, 36, 
	36, 37, 755, 756, 757, 758, 759, 108, 
	755, 756, 757, 758, 759, 84, 84, 84, 
	108, 108, 108, 159, 401, 402, 84, 401, 
	402, 36, 36, 37, 760, 761, 108, 760, 
	761, 84, 84, 84, 108, 108, 108, 159, 
	403, 84, 403, 36, 36, 37, 762, 108, 
	762, 84, 84, 84, 108, 108, 108, 159, 
	404, 84, 404, 36, 36, 37, 763, 108, 
	763, 84, 84, 84, 108, 108, 108, 159, 
	405, 84, 405, 36, 36, 37, 764, 108, 
	764, 84, 84, 84, 108, 108, 108, 159, 
	406, 84, 406, 36, 36, 37, 765, 108, 
	765, 84, 84, 84, 108, 108, 108, 159, 
	407, 84, 407, 36, 36, 37, 766, 108, 
	766, 84, 84, 84, 108, 108, 108, 159, 
	408, 409, 410, 84, 408, 409, 410, 36, 
	36, 37, 767, 768, 769, 108, 767, 768, 
	769, 84, 84, 84, 108, 108, 108, 159, 
	412, 84, 412, 36, 36, 37, 770, 108, 
	770, 84, 84, 84, 108, 108, 108, 411, 
	413, 414, 84, 413, 414, 36, 36, 37, 
	771, 772, 108, 771, 772, 84, 84, 84, 
	108, 108, 108, 159, 415, 416, 84, 415, 
	416, 36, 36, 37, 773, 774, 108, 773, 
	774, 84, 84, 84, 108, 108, 108, 159, 
	418, 84, 418, 36, 36, 37, 775, 108, 
	775, 84, 84, 84, 108, 108, 108, 417, 
	419, 420, 84, 419, 420, 36, 36, 37, 
	776, 777, 108, 776, 777, 84, 84, 84, 
	108, 108, 108, 159, 422, 84, 422, 36, 
	36, 37, 778, 108, 778, 84, 84, 84, 
	108, 108, 108, 421, 423, 84, 423, 36, 
	36, 37, 779, 108, 779, 84, 84, 84, 
	108, 108, 108, 159, 425, 426, 427, 84, 
	426, 427, 36, 36, 780, 37, 781, 782, 
	108, 781, 782, 84, 84, 84, 108, 108, 
	108, 424, 429, 84, 429, 36, 36, 37, 
	783, 108, 783, 84, 84, 84, 108, 108, 
	108, 428, 430, 84, 430, 36, 36, 37, 
	784, 108, 784, 84, 84, 84, 108, 108, 
	108, 159, 432, 433, 434, 435, 84, 432, 
	433, 434, 435, 36, 36, 37, 785, 786, 
	787, 788, 108, 785, 786, 787, 788, 84, 
	84, 84, 108, 108, 108, 431, 436, 84, 
	436, 36, 36, 37, 789, 108, 789, 84, 
	84, 84, 108, 108, 108, 159, 437, 84, 
	437, 36, 36, 37, 790, 108, 790, 84, 
	84, 84, 108, 108, 108, 159, 438, 84, 
	438, 36, 36, 37, 791, 108, 791, 84, 
	84, 84, 108, 108, 108, 159, 439, 440, 
	84, 439, 440, 36, 36, 37, 792, 793, 
	108, 792, 793, 84, 84, 84, 108, 108, 
	108, 159, 441, 84, 441, 36, 36, 37, 
	794, 108, 794, 84, 84, 84, 108, 108, 
	108, 159, 442, 84, 442, 36, 36, 37, 
	795, 108, 795, 84, 84, 84, 108, 108, 
	108, 159, 444, 84, 444, 36, 36, 37, 
	796, 108, 796, 84, 84, 84, 108, 108, 
	108, 443, 446, 84, 446, 36, 36, 37, 
	797, 108, 797, 84, 84, 84, 108, 108, 
	108, 445, 447, 448, 84, 447, 448, 36, 
	36, 37, 798, 799, 108, 798, 799, 84, 
	84, 84, 108, 108, 108, 159, 449, 84, 
	449, 36, 36, 37, 800, 108, 800, 84, 
	84, 84, 108, 108, 108, 159, 450, 84, 
	450, 36, 36, 37, 801, 108, 801, 84, 
	84, 84, 108, 108, 108, 159, 451, 84, 
	451, 36, 36, 37, 802, 108, 802, 84, 
	84, 84, 108, 108, 108, 159, 452, 84, 
	452, 36, 36, 37, 803, 108, 803, 84, 
	84, 84, 108, 108, 108, 159, 454, 455, 
	456, 457, 458, 84, 454, 455, 456, 457, 
	458, 36, 36, 37, 804, 805, 806, 807, 
	808, 108, 804, 805, 806, 807, 808, 84, 
	84, 84, 108, 108, 108, 453, 459, 84, 
	459, 36, 36, 37, 809, 108, 809, 84, 
	84, 84, 108, 108, 108, 159, 460, 84, 
	460, 36, 36, 37, 810, 108, 810, 84, 
	84, 84, 108, 108, 108, 159, 461, 84, 
	461, 36, 36, 37, 811, 108, 811, 84, 
	84, 84, 108, 108, 108, 159, 462, 84, 
	462, 36, 36, 37, 812, 108, 812, 84, 
	84, 84, 108, 108, 108, 159, 463, 464, 
	84, 463, 464, 36, 36, 37, 813, 814, 
	108, 813, 814, 84, 84, 84, 108, 108, 
	108, 159, 466, 467, 84, 466, 467, 36, 
	36, 37, 815, 816, 108, 815, 816, 84, 
	84, 84, 108, 108, 108, 465, 469, 470, 
	471, 84, 469, 470, 471, 36, 36, 37, 
	817, 818, 819, 108, 817, 818, 819, 84, 
	84, 84, 108, 108, 108, 468, 473, 84, 
	36, 36, 37, 108, 84, 84, 84, 108, 
	108, 108, 472, 475, 84, 475, 36, 36, 
	37, 820, 108, 820, 84, 84, 84, 108, 
	108, 108, 474, 477, 84, 36, 36, 37, 
	108, 84, 84, 84, 108, 108, 108, 476, 
	479, 480, 481, 84, 479, 480, 481, 36, 
	36, 37, 821, 822, 823, 108, 821, 822, 
	823, 84, 84, 84, 108, 108, 108, 478, 
	483, 84, 36, 36, 37, 108, 84, 84, 
	84, 108, 108, 108, 482, 485, 84, 485, 
	36, 36, 37, 824, 108, 824, 84, 84, 
	84, 108, 108, 108, 484, 487, 84, 36, 
	36, 37, 108, 84, 84, 84, 108, 108, 
	108, 486, 488, 84, 488, 36, 36, 37, 
	825, 108, 825, 84, 84, 84, 108, 108, 
	108, 159, 489, 490, 491, 492, 493, 494, 
	495, 496, 497, 84, 489, 490, 491, 492, 
	493, 494, 495, 496, 497, 36, 36, 37, 
	826, 827, 828, 829, 830, 831, 832, 833, 
	834, 108, 826, 827, 828, 829, 830, 831, 
	832, 833, 834, 84, 84, 84, 108, 108, 
	108, 159, 498, 84, 498, 36, 36, 37, 
	835, 108, 835, 84, 84, 84, 108, 108, 
	108, 159, 499, 84, 499, 36, 36, 37, 
	836, 108, 836, 84, 84, 84, 108, 108, 
	108, 159, 500, 501, 84, 500, 501, 36, 
	36, 37, 837, 838, 108, 837, 838, 84, 
	84, 84, 108, 108, 108, 159, 502, 84, 
	502, 36, 36, 37, 839, 108, 839, 84, 
	84, 84, 108, 108, 108, 159, 503, 84, 
	503, 36, 36, 37, 840, 108, 840, 84, 
	84, 84, 108, 108, 108, 159, 504, 84, 
	504, 36, 36, 37, 841, 108, 841, 84, 
	84, 84, 108, 108, 108, 159, 505, 84, 
	505, 36, 36, 37, 842, 108, 842, 84, 
	84, 84, 108, 108, 108, 159, 507, 508, 
	84, 507, 508, 36, 36, 37, 843, 844, 
	108, 843, 844, 84, 84, 84, 108, 108, 
	108, 506, 509, 84, 509, 36, 36, 37, 
	845, 108, 845, 84, 84, 84, 108, 108, 
	108, 159, 510, 84, 510, 36, 36, 37, 
	846, 108, 846, 84, 84, 84, 108, 108, 
	108, 159, 511, 84, 511, 36, 36, 37, 
	847, 108, 847, 84, 84, 84, 108, 108, 
	108, 159, 512, 513, 514, 515, 84, 512, 
	513, 514, 515, 36, 36, 37, 848, 849, 
	850, 851, 108, 848, 849, 850, 851, 84, 
	84, 84, 108, 108, 108, 159, 516, 517, 
	84, 516, 517, 36, 36, 37, 852, 853, 
	108, 852, 853, 84, 84, 84, 108, 108, 
	108, 159, 519, 520, 84, 519, 520, 36, 
	36, 37, 854, 855, 108, 854, 855, 84, 
	84, 84, 108, 108, 108, 518, 521, 84, 
	521, 36, 36, 37, 856, 108, 856, 84, 
	84, 84, 108, 108, 108, 159, 522, 84, 
	522, 36, 36, 37, 857, 108, 857, 84, 
	84, 84, 108, 108, 108, 159, 523, 84, 
	523, 36, 36, 37, 858, 108, 858, 84, 
	84, 84, 108, 108, 108, 159, 524, 84, 
	524, 36, 36, 37, 859, 108, 859, 84, 
	84, 84, 108, 108, 108, 159, 526, 84, 
	526, 36, 36, 37, 860, 108, 860, 84, 
	84, 84, 108, 108, 108, 525, 527, 84, 
	527, 36, 36, 37, 861, 108, 861, 84, 
	84, 84, 108, 108, 108, 159, 528, 84, 
	528, 36, 36, 37, 862, 108, 862, 84, 
	84, 84, 108, 108, 108, 159, 529, 84, 
	529, 36, 36, 37, 863, 108, 863, 84, 
	84, 84, 108, 108, 108, 159, 530, 84, 
	530, 36, 36, 37, 864, 108, 864, 84, 
	84, 84, 108, 108, 108, 159, 531, 84, 
	531, 36, 36, 37, 865, 108, 865, 84, 
	84, 84, 108, 108, 108, 159, 532, 84, 
	532, 36, 36, 37, 866, 108, 866, 84, 
	84, 84, 108, 108, 108, 159, 533, 84, 
	533, 36, 36, 37, 867, 108, 867, 84, 
	84, 84, 108, 108, 108, 159, 534, 535, 
	84, 534, 535, 36, 36, 37, 868, 869, 
	108, 868, 869, 84, 84, 84, 108, 108, 
	108, 159, 536, 84, 536, 36, 36, 37, 
	870, 108, 870, 84, 84, 84, 108, 108, 
	108, 159, 537, 84, 537, 36, 36, 37, 
	871, 108, 871, 84, 84, 84, 108, 108, 
	108, 159, 538, 84, 538, 36, 36, 37, 
	872, 108, 872, 84, 84, 84, 108, 108, 
	108, 159, 540, 84, 540, 36, 36, 37, 
	873, 108, 873, 84, 84, 84, 108, 108, 
	108, 539, 541, 84, 541, 36, 36, 37, 
	874, 108, 874, 84, 84, 84, 108, 108, 
	108, 159, 542, 543, 84, 542, 543, 36, 
	36, 37, 875, 876, 108, 875, 876, 84, 
	84, 84, 108, 108, 108, 159, 544, 545, 
	84, 544, 545, 36, 36, 37, 877, 878, 
	108, 877, 878, 84, 84, 84, 108, 108, 
	108, 159, 546, 84, 546, 36, 36, 37, 
	879, 108, 879, 84, 84, 84, 108, 108, 
	108, 159, 547, 84, 547, 36, 36, 37, 
	880, 108, 880, 84, 84, 84, 108, 108, 
	108, 159, 548, 84, 548, 36, 36, 37, 
	881, 108, 881, 84, 84, 84, 108, 108, 
	108, 159, 549, 84, 549, 36, 36, 37, 
	882, 108, 882, 84, 84, 84, 108, 108, 
	108, 159, 550, 84, 550, 36, 36, 37, 
	883, 108, 883, 84, 84, 84, 108, 108, 
	108, 159, 551, 84, 551, 36, 36, 37, 
	884, 108, 884, 84, 84, 84, 108, 108, 
	108, 159, 552, 553, 84, 552, 553, 36, 
	36, 37, 885, 886, 108, 885, 886, 84, 
	84, 84, 108, 108, 108, 159, 554, 84, 
	554, 36, 36, 37, 887, 108, 887, 84, 
	84, 84, 108, 108, 108, 159, 555, 84, 
	555, 36, 36, 37, 888, 108, 888, 84, 
	84, 84, 108, 108, 108, 159, 0
};
static const short _lexer_trans_targs[] = {
	21, 2, 21, 21, 3, 4, 6, 7, 
	9, 11, 14, 5, 21, 21, 8, 21, 
	10, 21, 12, 13, 21, 21, 15, 21, 
	16, 21, 21, 34, 21, 21, 21, 21, 
	21, 21, 19, 265, 20, 21, 21, 21, 
	22, 21, 21, 23, 24, 26, 21, 27, 
	21, 28, 21, 21, 21, 21, 0, 29, 
	30, 31, 21, 35, 36, 37, 38, 21, 
	24, 21, 21, 21, 21, 21, 39, 21, 
	21, 21, 40, 51, 59, 71, 88, 99, 
	105, 110, 114, 142, 41, 143, 161, 172, 
	179, 190, 204, 220, 247, 253, 41, 261, 
	41, 264, 266, 277, 285, 297, 314, 325, 
	331, 336, 340, 368, 267, 369, 387, 398, 
	405, 416, 430, 446, 473, 479, 267, 487, 
	267, 21, 21, 23, 1, 25, 21, 21, 
	21, 21, 21, 21, 21, 33, 17, 32, 
	21, 33, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 42, 43, 44, 45, 47, 48, 21, 
	41, 41, 41, 21, 21, 46, 41, 41, 
	49, 50, 41, 21, 21, 52, 53, 57, 
	21, 21, 54, 41, 55, 56, 41, 58, 
	41, 21, 21, 60, 67, 68, 61, 62, 
	21, 63, 64, 65, 41, 66, 41, 41, 
	21, 69, 70, 41, 21, 41, 21, 41, 
	21, 21, 72, 73, 41, 85, 87, 41, 
	21, 21, 41, 74, 84, 41, 41, 75, 
	79, 41, 41, 41, 81, 41, 76, 77, 
	78, 41, 80, 41, 82, 83, 41, 41, 
	86, 41, 18, 21, 21, 89, 90, 92, 
	95, 21, 41, 91, 41, 93, 94, 41, 
	21, 96, 41, 97, 98, 41, 21, 21, 
	100, 104, 101, 102, 21, 103, 41, 41, 
	106, 107, 108, 109, 41, 21, 21, 111, 
	113, 112, 41, 21, 21, 21, 115, 117, 
	123, 41, 124, 134, 135, 140, 141, 116, 
	41, 21, 118, 120, 119, 41, 121, 122, 
	41, 41, 21, 41, 125, 129, 130, 131, 
	21, 126, 127, 128, 41, 21, 41, 21, 
	41, 132, 133, 41, 41, 41, 21, 136, 
	138, 137, 41, 139, 41, 21, 41, 41, 
	21, 41, 41, 41, 41, 21, 21, 144, 
	151, 41, 153, 41, 21, 145, 148, 41, 
	21, 146, 147, 41, 21, 41, 41, 21, 
	149, 150, 41, 21, 41, 41, 152, 41, 
	154, 156, 158, 155, 41, 41, 157, 41, 
	41, 159, 160, 41, 41, 21, 162, 166, 
	167, 171, 163, 164, 165, 41, 41, 168, 
	169, 170, 41, 41, 41, 173, 178, 41, 
	41, 41, 174, 175, 176, 177, 41, 41, 
	180, 181, 186, 21, 41, 182, 184, 183, 
	41, 21, 41, 185, 41, 21, 41, 187, 
	21, 41, 41, 188, 21, 189, 41, 21, 
	41, 191, 197, 199, 192, 193, 194, 195, 
	196, 41, 41, 21, 198, 21, 41, 200, 
	203, 201, 202, 41, 41, 21, 205, 209, 
	211, 215, 219, 206, 207, 208, 41, 41, 
	210, 21, 41, 41, 21, 212, 213, 41, 
	21, 21, 21, 214, 21, 21, 21, 216, 
	217, 41, 21, 21, 21, 218, 21, 21, 
	41, 221, 222, 223, 232, 41, 233, 234, 
	237, 242, 41, 41, 224, 228, 225, 226, 
	227, 41, 21, 229, 230, 41, 231, 41, 
	41, 41, 41, 41, 41, 41, 21, 41, 
	235, 236, 41, 238, 239, 21, 240, 241, 
	41, 243, 244, 245, 246, 41, 248, 250, 
	249, 41, 251, 21, 252, 41, 254, 255, 
	41, 41, 256, 257, 258, 259, 260, 41, 
	262, 263, 41, 41, 21, 21, 268, 269, 
	270, 271, 273, 274, 267, 267, 267, 272, 
	267, 267, 275, 276, 267, 278, 279, 283, 
	280, 267, 281, 282, 267, 284, 267, 286, 
	293, 294, 287, 288, 289, 290, 291, 267, 
	292, 267, 267, 295, 296, 267, 267, 267, 
	298, 299, 267, 311, 313, 267, 267, 300, 
	310, 267, 267, 301, 305, 267, 267, 267, 
	307, 267, 302, 303, 304, 267, 306, 267, 
	308, 309, 267, 267, 312, 267, 315, 316, 
	318, 321, 267, 317, 267, 319, 320, 267, 
	322, 267, 323, 324, 267, 326, 330, 327, 
	328, 329, 267, 267, 332, 333, 334, 335, 
	267, 337, 339, 338, 267, 341, 343, 349, 
	267, 350, 360, 361, 366, 367, 342, 267, 
	344, 346, 345, 267, 347, 348, 267, 267, 
	267, 351, 355, 356, 357, 352, 353, 354, 
	267, 267, 267, 358, 359, 267, 267, 267, 
	362, 364, 363, 267, 365, 267, 267, 267, 
	267, 267, 267, 267, 370, 377, 267, 379, 
	267, 371, 374, 267, 372, 373, 267, 267, 
	267, 375, 376, 267, 267, 267, 378, 267, 
	380, 382, 384, 381, 267, 267, 383, 267, 
	267, 385, 386, 267, 267, 388, 392, 393, 
	397, 389, 390, 391, 267, 267, 394, 395, 
	396, 267, 267, 267, 399, 404, 267, 267, 
	267, 400, 401, 402, 403, 267, 267, 406, 
	407, 412, 267, 408, 410, 409, 267, 267, 
	411, 267, 267, 413, 267, 267, 414, 415, 
	267, 267, 417, 423, 425, 418, 419, 420, 
	421, 422, 267, 267, 424, 267, 426, 429, 
	427, 428, 267, 267, 431, 435, 437, 441, 
	445, 432, 433, 434, 267, 267, 436, 267, 
	267, 438, 439, 267, 440, 442, 443, 267, 
	444, 267, 447, 448, 449, 458, 267, 459, 
	460, 463, 468, 267, 267, 450, 454, 451, 
	452, 453, 267, 455, 456, 267, 457, 267, 
	267, 267, 267, 267, 267, 267, 267, 461, 
	462, 267, 464, 465, 466, 467, 267, 469, 
	470, 471, 472, 267, 474, 476, 475, 267, 
	477, 478, 267, 480, 481, 267, 267, 482, 
	483, 484, 485, 486, 267, 488, 489, 267, 
	267
};
static const short _lexer_trans_actions[] = {
	279, 0, 119, 271, 0, 0, 0, 0, 
	0, 0, 0, 0, 83, 95, 0, 85, 
	0, 91, 0, 0, 87, 89, 0, 93, 
	0, 117, 277, 0, 275, 97, 101, 103, 
	99, 273, 0, 0, 0, 115, 113, 7, 
	0, 123, 9, 857, 284, 0, 121, 5, 
	13, 0, 15, 17, 19, 23, 0, 845, 
	845, 845, 25, 0, 0, 0, 0, 41, 
	857, 43, 125, 45, 47, 51, 0, 55, 
	57, 21, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 842, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 320, 0, 
	290, 5, 350, 323, 296, 326, 329, 353, 
	842, 332, 356, 842, 842, 341, 308, 842, 
	842, 305, 362, 842, 842, 842, 320, 842, 
	290, 127, 33, 848, 0, 0, 269, 129, 
	11, 131, 133, 49, 263, 851, 0, 851, 
	267, 854, 265, 257, 137, 27, 29, 31, 
	139, 35, 141, 39, 37, 143, 53, 163, 
	71, 0, 0, 0, 0, 0, 0, 259, 
	398, 482, 485, 181, 81, 0, 767, 488, 
	0, 0, 281, 153, 59, 0, 0, 0, 
	171, 75, 0, 491, 0, 0, 404, 0, 
	770, 145, 61, 0, 0, 0, 0, 0, 
	189, 0, 0, 0, 830, 0, 833, 497, 
	191, 0, 0, 515, 193, 506, 195, 512, 
	155, 63, 0, 0, 524, 0, 5, 518, 
	173, 77, 521, 0, 0, 407, 410, 0, 
	0, 422, 419, 425, 0, 431, 0, 0, 
	0, 413, 0, 416, 0, 0, 428, 401, 
	0, 527, 0, 157, 65, 0, 0, 0, 
	0, 197, 365, 0, 434, 0, 0, 437, 
	199, 0, 536, 0, 0, 440, 165, 73, 
	0, 0, 0, 0, 249, 0, 713, 836, 
	0, 0, 0, 0, 443, 159, 67, 0, 
	0, 0, 539, 175, 79, 167, 0, 0, 
	0, 542, 0, 0, 0, 0, 0, 0, 
	773, 187, 0, 0, 0, 449, 0, 0, 
	452, 359, 201, 737, 0, 0, 0, 0, 
	203, 0, 0, 0, 455, 205, 554, 207, 
	560, 0, 0, 839, 776, 779, 183, 0, 
	0, 0, 782, 0, 785, 177, 335, 344, 
	179, 338, 347, 563, 566, 161, 69, 0, 
	0, 314, 0, 311, 209, 0, 0, 794, 
	211, 0, 0, 704, 213, 707, 788, 215, 
	0, 0, 698, 217, 701, 791, 0, 458, 
	0, 0, 0, 0, 797, 803, 0, 800, 
	806, 0, 0, 464, 461, 151, 0, 0, 
	0, 0, 0, 0, 0, 716, 740, 0, 
	0, 0, 467, 809, 293, 0, 0, 317, 
	287, 584, 0, 0, 0, 0, 722, 587, 
	0, 0, 0, 219, 470, 0, 0, 0, 
	593, 251, 746, 0, 596, 253, 752, 0, 
	221, 755, 602, 0, 223, 0, 695, 149, 
	302, 0, 0, 0, 0, 0, 0, 0, 
	0, 728, 725, 147, 0, 225, 719, 0, 
	0, 0, 0, 473, 611, 169, 0, 0, 
	0, 0, 0, 0, 0, 0, 812, 614, 
	0, 227, 620, 623, 229, 0, 0, 638, 
	231, 105, 233, 0, 235, 107, 237, 0, 
	0, 653, 239, 109, 241, 0, 243, 111, 
	656, 0, 0, 0, 0, 386, 0, 0, 
	0, 0, 659, 662, 0, 0, 0, 0, 
	0, 476, 245, 0, 0, 731, 0, 815, 
	668, 674, 671, 758, 677, 680, 185, 683, 
	0, 0, 818, 0, 0, 247, 0, 0, 
	689, 0, 0, 0, 0, 821, 0, 0, 
	0, 734, 0, 255, 0, 764, 0, 0, 
	824, 827, 0, 0, 0, 0, 0, 479, 
	0, 0, 686, 395, 135, 261, 842, 842, 
	383, 842, 842, 842, 398, 482, 485, 842, 
	767, 488, 842, 842, 281, 368, 842, 842, 
	842, 491, 842, 842, 404, 842, 770, 842, 
	842, 500, 842, 494, 842, 842, 842, 830, 
	842, 833, 497, 503, 509, 515, 506, 512, 
	842, 371, 524, 842, 842, 518, 521, 842, 
	842, 407, 410, 842, 842, 422, 419, 425, 
	842, 431, 842, 842, 842, 413, 842, 416, 
	842, 842, 428, 401, 842, 527, 530, 842, 
	842, 533, 365, 842, 434, 842, 842, 437, 
	842, 536, 842, 842, 440, 842, 842, 842, 
	710, 842, 713, 836, 842, 842, 842, 842, 
	443, 842, 374, 842, 539, 842, 446, 842, 
	542, 545, 842, 389, 377, 380, 842, 773, 
	842, 842, 842, 449, 842, 842, 452, 359, 
	737, 548, 551, 557, 842, 842, 842, 842, 
	455, 554, 560, 842, 842, 839, 776, 779, 
	842, 842, 842, 782, 842, 785, 335, 344, 
	338, 347, 563, 566, 569, 842, 314, 842, 
	311, 572, 578, 794, 575, 842, 704, 707, 
	788, 581, 842, 698, 701, 791, 842, 458, 
	842, 842, 842, 842, 797, 803, 842, 800, 
	806, 842, 842, 464, 461, 842, 842, 842, 
	842, 842, 842, 842, 716, 740, 842, 842, 
	842, 467, 809, 293, 842, 842, 317, 287, 
	584, 842, 842, 842, 842, 722, 587, 590, 
	842, 842, 470, 842, 842, 743, 593, 746, 
	749, 596, 752, 599, 755, 602, 605, 842, 
	695, 302, 842, 299, 842, 842, 842, 842, 
	842, 842, 728, 725, 608, 719, 842, 842, 
	842, 842, 473, 611, 842, 842, 626, 641, 
	842, 842, 842, 842, 812, 614, 617, 620, 
	623, 629, 632, 638, 635, 644, 647, 653, 
	650, 656, 842, 842, 842, 842, 386, 842, 
	392, 842, 842, 659, 662, 842, 665, 842, 
	842, 842, 476, 842, 842, 731, 842, 815, 
	668, 674, 671, 758, 677, 680, 683, 842, 
	842, 818, 842, 692, 842, 842, 689, 842, 
	842, 842, 842, 821, 842, 842, 842, 734, 
	761, 842, 764, 842, 842, 824, 827, 842, 
	842, 842, 842, 842, 479, 842, 842, 686, 
	395
};
static const short _lexer_to_state_actions[] = {
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 1, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0
};
static const short _lexer_from_state_actions[] = {
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 3, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0
};
static const short _lexer_eof_trans[] = {
	0, 1, 1, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	1, 27, 29, 34, 1, 0, 122, 1, 
	1, 127, 128, 130, 131, 133, 133, 133, 
	137, 1, 139, 140, 141, 145, 147, 150, 
	152, 1, 160, 160, 164, 160, 160, 160, 
	160, 160, 160, 172, 177, 160, 160, 160, 
	160, 160, 160, 186, 160, 160, 193, 160, 
	160, 160, 160, 160, 201, 205, 207, 209, 
	160, 217, 160, 160, 160, 160, 160, 160, 
	160, 160, 160, 160, 160, 160, 160, 160, 
	244, 250, 160, 160, 160, 160, 160, 257, 
	160, 160, 160, 263, 160, 160, 269, 160, 
	160, 160, 160, 160, 160, 160, 278, 160, 
	160, 284, 286, 160, 160, 298, 160, 160, 
	160, 160, 160, 160, 307, 313, 160, 160, 
	160, 318, 320, 160, 160, 160, 160, 327, 
	160, 160, 160, 160, 334, 337, 160, 342, 
	349, 353, 357, 160, 360, 364, 160, 160, 
	160, 160, 160, 160, 160, 160, 160, 160, 
	160, 382, 160, 160, 160, 160, 160, 160, 
	160, 160, 160, 160, 160, 160, 160, 160, 
	160, 160, 160, 160, 412, 160, 160, 418, 
	160, 422, 160, 425, 429, 160, 432, 160, 
	160, 160, 160, 160, 160, 444, 446, 160, 
	160, 160, 160, 160, 454, 160, 160, 160, 
	160, 160, 466, 469, 473, 475, 477, 479, 
	483, 485, 487, 160, 160, 160, 160, 160, 
	160, 160, 160, 160, 507, 160, 160, 160, 
	160, 160, 519, 160, 160, 160, 160, 526, 
	160, 160, 160, 160, 160, 160, 160, 160, 
	160, 160, 160, 540, 160, 160, 160, 160, 
	160, 160, 160, 160, 160, 160, 160, 160, 
	557, 558, 152, 1, 160, 160, 164, 160, 
	160, 160, 160, 160, 160, 172, 177, 160, 
	160, 160, 160, 160, 160, 186, 160, 160, 
	193, 160, 160, 160, 160, 160, 201, 205, 
	207, 209, 160, 217, 160, 160, 160, 160, 
	160, 160, 160, 160, 160, 160, 160, 160, 
	160, 160, 244, 250, 160, 160, 160, 160, 
	160, 257, 160, 160, 160, 263, 160, 160, 
	269, 160, 160, 160, 160, 160, 160, 160, 
	278, 160, 160, 284, 286, 160, 160, 298, 
	160, 160, 160, 160, 160, 160, 307, 313, 
	160, 160, 160, 318, 320, 160, 160, 160, 
	160, 327, 160, 160, 160, 160, 334, 337, 
	160, 342, 349, 353, 357, 160, 360, 364, 
	160, 160, 160, 160, 160, 160, 160, 160, 
	160, 160, 160, 382, 160, 160, 160, 160, 
	160, 160, 160, 160, 160, 160, 160, 160, 
	160, 160, 160, 160, 160, 160, 412, 160, 
	160, 418, 160, 422, 160, 425, 429, 160, 
	432, 160, 160, 160, 160, 160, 160, 444, 
	446, 160, 160, 160, 160, 160, 454, 160, 
	160, 160, 160, 160, 466, 469, 473, 475, 
	477, 479, 483, 485, 487, 160, 160, 160, 
	160, 160, 160, 160, 160, 160, 507, 160, 
	160, 160, 160, 160, 519, 160, 160, 160, 
	160, 526, 160, 160, 160, 160, 160, 160, 
	160, 160, 160, 160, 160, 540, 160, 160, 
	160, 160, 160, 160, 160, 160, 160, 160, 
	160, 160
};
static const int lexer_start = 21;
static const int lexer_error = 0;
static const int lexer_en_main = 21;
static void set_scan_buf( char *text, Bool _at_bol )
{
 str_set( input_buf, text );
 p = str_data(input_buf);
 at_bol = _at_bol;
 pe = str_data(input_buf) + str_len(input_buf);
 eof = pe;
	{
	cs = lexer_start;
	ts = 0;
	te = 0;
	act = 0;
	}
}
static tokid_t _scan_get( void )
{
	{
	int _klen;
	unsigned int _trans;
	short _widec;
	const short *_acts;
	unsigned int _nacts;
	const short *_keys;
	if ( p == pe )
		goto _test_eof;
	if ( cs == 0 )
		goto _out;
_resume:
	_acts = _lexer_actions + _lexer_from_state_actions[cs];
	_nacts = (unsigned int) *_acts++;
	while ( _nacts-- > 0 ) {
		switch ( *_acts++ ) {
	case 1:
	{ts = p;}
	break;
		}
	}
	_widec = (*p);
	_klen = _lexer_cond_lengths[cs];
	_keys = _lexer_cond_keys + (_lexer_cond_offsets[cs]*2);
	if ( _klen > 0 ) {
		const short *_lower = _keys;
		const short *_mid;
		const short *_upper = _keys + (_klen<<1) - 2;
		while (1) {
			if ( _upper < _lower )
				break;
			_mid = _lower + (((_upper-_lower) >> 1) & ~1);
			if ( _widec < _mid[0] )
				_upper = _mid - 2;
			else if ( _widec > _mid[1] )
				_lower = _mid + 2;
			else {
				switch ( _lexer_cond_spaces[_lexer_cond_offsets[cs] + ((_mid - _keys)>>1)] ) {
	case 0: {
		_widec = (short)(128 + ((*p) - -128));
		if ( 
 at_bol  ) _widec += 256;
		break;
	}
				}
				break;
			}
		}
	}
	_keys = _lexer_trans_keys + _lexer_key_offsets[cs];
	_trans = _lexer_index_offsets[cs];
	_klen = _lexer_single_lengths[cs];
	if ( _klen > 0 ) {
		const short *_lower = _keys;
		const short *_mid;
		const short *_upper = _keys + _klen - 1;
		while (1) {
			if ( _upper < _lower )
				break;
			_mid = _lower + ((_upper-_lower) >> 1);
			if ( _widec < *_mid )
				_upper = _mid - 1;
			else if ( _widec > *_mid )
				_lower = _mid + 1;
			else {
				_trans += (unsigned int)(_mid - _keys);
				goto _match;
			}
		}
		_keys += _klen;
		_trans += _klen;
	}
	_klen = _lexer_range_lengths[cs];
	if ( _klen > 0 ) {
		const short *_lower = _keys;
		const short *_mid;
		const short *_upper = _keys + (_klen<<1) - 2;
		while (1) {
			if ( _upper < _lower )
				break;
			_mid = _lower + (((_upper-_lower) >> 1) & ~1);
			if ( _widec < _mid[0] )
				_upper = _mid - 2;
			else if ( _widec > _mid[1] )
				_lower = _mid + 2;
			else {
				_trans += (unsigned int)((_mid - _keys)>>1);
				goto _match;
			}
		}
		_trans += _klen;
	}
_match:
	_trans = _lexer_indicies[_trans];
_eof_trans:
	cs = _lexer_trans_targs[_trans];
	if ( _lexer_trans_actions[_trans] == 0 )
		goto _again;
	_acts = _lexer_actions + _lexer_trans_actions[_trans];
	_nacts = (unsigned int) *_acts++;
	while ( _nacts-- > 0 )
	{
		switch ( *_acts++ )
		{
	case 2:
	{te = p+1;}
	break;
	case 3:
	{act = 1;}
	break;
	case 4:
	{act = 5;}
	break;
	case 5:
	{act = 37;}
	break;
	case 6:
	{act = 38;}
	break;
	case 7:
	{act = 39;}
	break;
	case 8:
	{act = 40;}
	break;
	case 9:
	{act = 41;}
	break;
	case 10:
	{act = 42;}
	break;
	case 11:
	{act = 43;}
	break;
	case 12:
	{act = 44;}
	break;
	case 13:
	{act = 45;}
	break;
	case 14:
	{act = 46;}
	break;
	case 15:
	{act = 47;}
	break;
	case 16:
	{act = 48;}
	break;
	case 17:
	{act = 49;}
	break;
	case 18:
	{act = 50;}
	break;
	case 19:
	{act = 51;}
	break;
	case 20:
	{act = 52;}
	break;
	case 21:
	{act = 53;}
	break;
	case 22:
	{act = 54;}
	break;
	case 23:
	{act = 55;}
	break;
	case 24:
	{act = 56;}
	break;
	case 25:
	{act = 57;}
	break;
	case 26:
	{act = 58;}
	break;
	case 27:
	{act = 59;}
	break;
	case 28:
	{act = 60;}
	break;
	case 29:
	{act = 61;}
	break;
	case 30:
	{act = 62;}
	break;
	case 31:
	{act = 63;}
	break;
	case 32:
	{act = 64;}
	break;
	case 33:
	{act = 65;}
	break;
	case 34:
	{act = 66;}
	break;
	case 35:
	{act = 67;}
	break;
	case 36:
	{act = 68;}
	break;
	case 37:
	{act = 69;}
	break;
	case 38:
	{act = 70;}
	break;
	case 39:
	{act = 71;}
	break;
	case 40:
	{act = 72;}
	break;
	case 41:
	{act = 73;}
	break;
	case 42:
	{act = 93;}
	break;
	case 43:
	{act = 94;}
	break;
	case 44:
	{act = 95;}
	break;
	case 45:
	{act = 96;}
	break;
	case 46:
	{act = 97;}
	break;
	case 47:
	{act = 98;}
	break;
	case 48:
	{act = 99;}
	break;
	case 49:
	{act = 100;}
	break;
	case 50:
	{act = 101;}
	break;
	case 51:
	{act = 102;}
	break;
	case 52:
	{act = 103;}
	break;
	case 53:
	{act = 104;}
	break;
	case 54:
	{act = 105;}
	break;
	case 55:
	{act = 106;}
	break;
	case 56:
	{act = 107;}
	break;
	case 57:
	{act = 108;}
	break;
	case 58:
	{act = 109;}
	break;
	case 59:
	{act = 110;}
	break;
	case 60:
	{act = 111;}
	break;
	case 61:
	{act = 112;}
	break;
	case 62:
	{act = 113;}
	break;
	case 63:
	{act = 114;}
	break;
	case 64:
	{act = 115;}
	break;
	case 65:
	{act = 116;}
	break;
	case 66:
	{act = 117;}
	break;
	case 67:
	{act = 118;}
	break;
	case 68:
	{act = 119;}
	break;
	case 69:
	{act = 120;}
	break;
	case 70:
	{act = 125;}
	break;
	case 71:
	{act = 126;}
	break;
	case 72:
	{act = 127;}
	break;
	case 73:
	{act = 128;}
	break;
	case 74:
	{act = 129;}
	break;
	case 75:
	{act = 130;}
	break;
	case 76:
	{act = 131;}
	break;
	case 77:
	{act = 132;}
	break;
	case 78:
	{act = 133;}
	break;
	case 79:
	{act = 134;}
	break;
	case 80:
	{act = 135;}
	break;
	case 81:
	{act = 136;}
	break;
	case 82:
	{act = 137;}
	break;
	case 83:
	{act = 138;}
	break;
	case 84:
	{act = 139;}
	break;
	case 85:
	{act = 140;}
	break;
	case 86:
	{act = 141;}
	break;
	case 87:
	{act = 142;}
	break;
	case 88:
	{act = 143;}
	break;
	case 89:
	{act = 144;}
	break;
	case 90:
	{act = 145;}
	break;
	case 91:
	{act = 146;}
	break;
	case 92:
	{act = 147;}
	break;
	case 93:
	{act = 148;}
	break;
	case 94:
	{act = 149;}
	break;
	case 95:
	{act = 150;}
	break;
	case 96:
	{act = 151;}
	break;
	case 97:
	{act = 152;}
	break;
	case 98:
	{act = 153;}
	break;
	case 99:
	{act = 154;}
	break;
	case 100:
	{act = 155;}
	break;
	case 101:
	{act = 156;}
	break;
	case 102:
	{act = 157;}
	break;
	case 103:
	{act = 158;}
	break;
	case 104:
	{act = 159;}
	break;
	case 105:
	{act = 160;}
	break;
	case 106:
	{act = 161;}
	break;
	case 107:
	{act = 162;}
	break;
	case 108:
	{act = 163;}
	break;
	case 109:
	{act = 164;}
	break;
	case 110:
	{act = 165;}
	break;
	case 111:
	{act = 166;}
	break;
	case 112:
	{act = 167;}
	break;
	case 113:
	{act = 168;}
	break;
	case 114:
	{act = 169;}
	break;
	case 115:
	{act = 170;}
	break;
	case 116:
	{act = 171;}
	break;
	case 117:
	{act = 172;}
	break;
	case 118:
	{act = 173;}
	break;
	case 119:
	{act = 174;}
	break;
	case 120:
	{act = 176;}
	break;
	case 121:
	{act = 177;}
	break;
	case 122:
	{act = 179;}
	break;
	case 123:
	{act = 180;}
	break;
	case 124:
	{act = 181;}
	break;
	case 125:
	{act = 183;}
	break;
	case 126:
	{act = 184;}
	break;
	case 127:
	{act = 186;}
	break;
	case 128:
	{act = 187;}
	break;
	case 129:
	{act = 188;}
	break;
	case 130:
	{act = 189;}
	break;
	case 131:
	{act = 190;}
	break;
	case 132:
	{act = 191;}
	break;
	case 133:
	{act = 192;}
	break;
	case 134:
	{act = 193;}
	break;
	case 135:
	{act = 194;}
	break;
	case 136:
	{act = 195;}
	break;
	case 137:
	{act = 196;}
	break;
	case 138:
	{act = 197;}
	break;
	case 139:
	{act = 198;}
	break;
	case 140:
	{act = 199;}
	break;
	case 141:
	{act = 200;}
	break;
	case 142:
	{act = 201;}
	break;
	case 143:
	{act = 202;}
	break;
	case 144:
	{act = 203;}
	break;
	case 145:
	{act = 204;}
	break;
	case 146:
	{act = 205;}
	break;
	case 147:
	{act = 206;}
	break;
	case 148:
	{act = 207;}
	break;
	case 149:
	{act = 208;}
	break;
	case 150:
	{act = 209;}
	break;
	case 151:
	{act = 210;}
	break;
	case 152:
	{act = 211;}
	break;
	case 153:
	{act = 212;}
	break;
	case 154:
	{act = 213;}
	break;
	case 155:
	{act = 214;}
	break;
	case 156:
	{act = 215;}
	break;
	case 157:
	{act = 216;}
	break;
	case 158:
	{act = 217;}
	break;
	case 159:
	{act = 218;}
	break;
	case 160:
	{act = 219;}
	break;
	case 161:
	{act = 220;}
	break;
	case 162:
	{act = 221;}
	break;
	case 163:
	{act = 222;}
	break;
	case 164:
	{act = 223;}
	break;
	case 165:
	{act = 224;}
	break;
	case 166:
	{act = 225;}
	break;
	case 167:
	{act = 226;}
	break;
	case 168:
	{act = 227;}
	break;
	case 169:
	{act = 228;}
	break;
	case 170:
	{act = 229;}
	break;
	case 171:
	{act = 230;}
	break;
	case 172:
	{act = 231;}
	break;
	case 173:
	{act = 232;}
	break;
	case 174:
	{act = 233;}
	break;
	case 175:
	{act = 234;}
	break;
	case 176:
	{act = 235;}
	break;
	case 177:
	{act = 236;}
	break;
	case 178:
	{act = 237;}
	break;
	case 179:
	{act = 238;}
	break;
	case 180:
	{act = 239;}
	break;
	case 181:
	{act = 240;}
	break;
	case 182:
	{act = 241;}
	break;
	case 183:
	{act = 242;}
	break;
	case 184:
	{act = 243;}
	break;
	case 185:
	{act = 244;}
	break;
	case 186:
	{act = 245;}
	break;
	case 187:
	{act = 246;}
	break;
	case 188:
	{act = 247;}
	break;
	case 189:
	{act = 248;}
	break;
	case 190:
	{act = 251;}
	break;
	case 191:
	{act = 253;}
	break;
	case 192:
	{act = 255;}
	break;
	case 193:
	{act = 257;}
	break;
	case 194:
	{act = 259;}
	break;
	case 195:
	{act = 263;}
	break;
	case 196:
	{te = p+1;{
	sym.tok = TK_NEWLINE;
	;
	{p++; goto _out; }
}}
	break;
	case 197:
	{te = p+1;{
	sym.tok = TK_CONST_EXPR;
	;
	{p++; goto _out; }
}}
	break;
	case 198:
	{te = p+1;{
	sym.tok = TK_LOG_AND;
	;
	{p++; goto _out; }
}}
	break;
	case 199:
	{te = p+1;{
	sym.tok = TK_RPAREN;
	;
	{p++; goto _out; }
}}
	break;
	case 200:
	{te = p+1;{
	sym.tok = TK_PLUS;
	;
	{p++; goto _out; }
}}
	break;
	case 201:
	{te = p+1;{
	sym.tok = TK_COMMA;
	;
	{p++; goto _out; }
}}
	break;
	case 202:
	{te = p+1;{
	sym.tok = TK_MINUS;
	;
	{p++; goto _out; }
}}
	break;
	case 203:
	{te = p+1;{
	sym.tok = TK_DOT;
	;
	{p++; goto _out; }
}}
	break;
	case 204:
	{te = p+1;{
	sym.tok = TK_DIVIDE;
	;
	{p++; goto _out; }
}}
	break;
	case 205:
	{te = p+1;{
	sym.tok = TK_COLON;
	;
	{p++; goto _out; }
}}
	break;
	case 206:
	{te = p+1;{
	sym.tok = TK_LEFT_SHIFT;
	;
	{p++; goto _out; }
}}
	break;
	case 207:
	{te = p+1;{
	sym.tok = TK_LESS_EQ;
	;
	{p++; goto _out; }
}}
	break;
	case 208:
	{te = p+1;{
	sym.tok = TK_NOT_EQ;
	;
	{p++; goto _out; }
}}
	break;
	case 209:
	{te = p+1;{
	sym.tok = TK_NOT_EQ;
	;
	{p++; goto _out; }
}}
	break;
	case 210:
	{te = p+1;{
	sym.tok = TK_EQUAL;
	;
	{p++; goto _out; }
}}
	break;
	case 211:
	{te = p+1;{
	sym.tok = TK_RIGHT_SHIFT;
	;
	{p++; goto _out; }
}}
	break;
	case 212:
	{te = p+1;{
	sym.tok = TK_GREATER_EQ;
	;
	{p++; goto _out; }
}}
	break;
	case 213:
	{te = p+1;{
	sym.tok = TK_QUESTION;
	;
	{p++; goto _out; }
}}
	break;
	case 214:
	{te = p+1;{
	sym.tok = TK_LSQUARE;
	;
	{p++; goto _out; }
}}
	break;
	case 215:
	{te = p+1;{
	sym.tok = TK_RSQUARE;
	;
	{p++; goto _out; }
}}
	break;
	case 216:
	{te = p+1;{
	sym.tok = TK_BIN_XOR;
	;
	{p++; goto _out; }
}}
	break;
	case 217:
	{te = p+1;{
	sym.tok = TK_POWER;
	;
	{p++; goto _out; }
}}
	break;
	case 218:
	{te = p+1;{
	sym.tok = TK_LCURLY;
	;
	{p++; goto _out; }
}}
	break;
	case 219:
	{te = p+1;{
	sym.tok = TK_LOG_OR;
	;
	{p++; goto _out; }
}}
	break;
	case 220:
	{te = p+1;{
	sym.tok = TK_RCURLY;
	;
	{p++; goto _out; }
}}
	break;
	case 221:
	{te = p+1;{
	sym.tok = TK_BIN_NOT;
	;
	{p++; goto _out; }
}}
	break;
	case 222:
	{te = p+1;{
	sym.tok = TK_B1;
	;
	{p++; goto _out; }
}}
	break;
	case 223:
	{te = p+1;{
	sym.tok = TK_C1;
	;
	{p++; goto _out; }
}}
	break;
	case 224:
	{te = p+1;{
	sym.tok = TK_D1;
	;
	{p++; goto _out; }
}}
	break;
	case 225:
	{te = p+1;{
	sym.tok = TK_E1;
	;
	{p++; goto _out; }
}}
	break;
	case 226:
	{te = p+1;{
	sym.tok = TK_H1;
	;
	{p++; goto _out; }
}}
	break;
	case 227:
	{te = p+1;{
	sym.tok = TK_L1;
	;
	{p++; goto _out; }
}}
	break;
	case 228:
	{te = p+1;{
	sym.tok = TK_A1;
	;
	{p++; goto _out; }
}}
	break;
	case 229:
	{te = p+1;{
	sym.tok = TK_F1;
	;
	{p++; goto _out; }
}}
	break;
	case 230:
	{te = p+1;{
	sym.tok = TK_BC1;
	;
	{p++; goto _out; }
}}
	break;
	case 231:
	{te = p+1;{
	sym.tok = TK_DE1;
	;
	{p++; goto _out; }
}}
	break;
	case 232:
	{te = p+1;{
	sym.tok = TK_HL1;
	;
	{p++; goto _out; }
}}
	break;
	case 233:
	{te = p+1;{
	sym.tok = TK_AF1;
	;
	{p++; goto _out; }
}}
	break;
	case 234:
	{te = p+1;{
	sym.tok = TK_IND_BC;
	p--; te--;
	{p++; goto _out; }
}}
	break;
	case 235:
	{te = p+1;{
	sym.tok = TK_IND_DE;
	p--; te--;
	{p++; goto _out; }
}}
	break;
	case 236:
	{te = p+1;{
	sym.tok = TK_IND_IX;
	p--; te--;
	{p++; goto _out; }
}}
	break;
	case 237:
	{te = p+1;{
	sym.tok = TK_IND_IY;
	p--; te--;
	{p++; goto _out; }
}}
	break;
	case 238:
	{te = p+1;{
	sym.tok = TK_IND_HL;
	p--; te--;
	{p++; goto _out; }
}}
	break;
	case 239:
	{te = p+1;{
	sym.tok = TK_IND_SP;
	p--; te--;
	{p++; goto _out; }
}}
	break;
	case 240:
	{te = p+1;{
	sym.tok = TK_IND_C;
	p--; te--;
	{p++; goto _out; }
}}
	break;
	case 241:
	{te = p+1;{
	sym.tok = TK_DS_B;
	;
	{p++; goto _out; }
}}
	break;
	case 242:
	{te = p+1;{
	sym.tok = TK_DS_W;
	;
	{p++; goto _out; }
}}
	break;
	case 243:
	{te = p+1;{
	sym.tok = TK_DS_P;
	;
	{p++; goto _out; }
}}
	break;
	case 244:
	{te = p+1;{
	sym.tok = TK_DS_Q;
	;
	{p++; goto _out; }
}}
	break;
	case 245:
	{te = p+1;{
	if (expect_opcode) {
		sym.tok = TK_RLA1;
		sym.tok_opcode = TK_RLA1;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_RLA1;
	}
	{p++; goto _out; }
}}
	break;
	case 246:
	{te = p+1;{
	if (expect_opcode) {
		sym.tok = TK_RLCA1;
		sym.tok_opcode = TK_RLCA1;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_RLCA1;
	}
	{p++; goto _out; }
}}
	break;
	case 247:
	{te = p+1;{
	if (expect_opcode) {
		sym.tok = TK_RRA1;
		sym.tok_opcode = TK_RRA1;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_RRA1;
	}
	{p++; goto _out; }
}}
	break;
	case 248:
	{te = p+1;{
	if (expect_opcode) {
		sym.tok = TK_RRCA1;
		sym.tok_opcode = TK_RRCA1;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_RRCA1;
	}
	{p++; goto _out; }
}}
	break;
	case 249:
	{te = p+1;}
	break;
	case 250:
	{te = p+1;{
  while ( ts[ 0] == '.' || isspace(ts[ 0]) ) ts++;
  while ( te[-1] == ':' || isspace(te[-1]) ) te--;
  sym.tok = TK_LABEL;
  {p++; goto _out; }
 }}
	break;
	case 251:
	{te = p+1;{
  sym.tok = TK_NUMBER;
  sym.number = scan_num( ts, te - ts - 1, 16 );
  ts = te = p;
  {p++; goto _out; }
 }}
	break;
	case 252:
	{te = p+1;{
  sym.tok = TK_NUMBER;
  sym.number = scan_num( ts + 2, te - ts - 3, 2 );
  ts = te = p;
  {p++; goto _out; }
 }}
	break;
	case 253:
	{te = p+1;{
  sym.tok = TK_NUMBER;
  if ( get_sym_string() &&
                             te - ts == 1 )
  {
   sym.number = *ts;
  }
  else
  {
   sym.number = 0;
   error_invalid_squoted_string();
  }
  ts = te = p;
  {p++; goto _out; }
 }}
	break;
	case 254:
	{te = p+1;{
  sym.tok = TK_STRING;
  if ( ! get_sym_string() )
   error_unclosed_string();
  {p++; goto _out; }
 }}
	break;
	case 255:
	{te = p+1;{
  sym.tok = TK_NIL;
  skip_to_newline();
  ts = te = p;
  {p++; goto _out; }
 }}
	break;
	case 256:
	{te = p;p--;{
	sym.tok = TK_LOG_NOT;
	;
	{p++; goto _out; }
}}
	break;
	case 257:
	{te = p;p--;{
	sym.tok = TK_BIN_AND;
	;
	{p++; goto _out; }
}}
	break;
	case 258:
	{te = p;p--;{
	sym.tok = TK_LPAREN;
	;
	{p++; goto _out; }
}}
	break;
	case 259:
	{te = p;p--;{
	sym.tok = TK_MULTIPLY;
	;
	{p++; goto _out; }
}}
	break;
	case 260:
	{te = p;p--;{
	sym.tok = TK_DOT;
	;
	{p++; goto _out; }
}}
	break;
	case 261:
	{te = p;p--;{
	sym.tok = TK_LESS;
	;
	{p++; goto _out; }
}}
	break;
	case 262:
	{te = p;p--;{
	sym.tok = TK_EQUAL;
	;
	{p++; goto _out; }
}}
	break;
	case 263:
	{te = p;p--;{
	sym.tok = TK_GREATER;
	;
	{p++; goto _out; }
}}
	break;
	case 264:
	{te = p;p--;{
	sym.tok = TK_BIN_OR;
	;
	{p++; goto _out; }
}}
	break;
	case 265:
	{te = p;p--;{
	sym.tok = TK_C;
	;
	{p++; goto _out; }
}}
	break;
	case 266:
	{te = p;p--;{
	sym.tok = TK_PO;
	;
	{p++; goto _out; }
}}
	break;
	case 267:
	{te = p;p--;{
	sym.tok = TK_P;
	;
	{p++; goto _out; }
}}
	break;
	case 268:
	{te = p;p--;{
	sym.tok = TK_M;
	;
	{p++; goto _out; }
}}
	break;
	case 269:
	{te = p;p--;{
	sym.tok = TK_B;
	;
	{p++; goto _out; }
}}
	break;
	case 270:
	{te = p;p--;{
	sym.tok = TK_D;
	;
	{p++; goto _out; }
}}
	break;
	case 271:
	{te = p;p--;{
	sym.tok = TK_E;
	;
	{p++; goto _out; }
}}
	break;
	case 272:
	{te = p;p--;{
	sym.tok = TK_H;
	;
	{p++; goto _out; }
}}
	break;
	case 273:
	{te = p;p--;{
	sym.tok = TK_L;
	;
	{p++; goto _out; }
}}
	break;
	case 274:
	{te = p;p--;{
	sym.tok = TK_A;
	;
	{p++; goto _out; }
}}
	break;
	case 275:
	{te = p;p--;{
	sym.tok = TK_F;
	;
	{p++; goto _out; }
}}
	break;
	case 276:
	{te = p;p--;{
	sym.tok = TK_I;
	;
	{p++; goto _out; }
}}
	break;
	case 277:
	{te = p;p--;{
	sym.tok = TK_R;
	;
	{p++; goto _out; }
}}
	break;
	case 278:
	{te = p;p--;{
	sym.tok = TK_BC;
	;
	{p++; goto _out; }
}}
	break;
	case 279:
	{te = p;p--;{
	sym.tok = TK_DE;
	;
	{p++; goto _out; }
}}
	break;
	case 280:
	{te = p;p--;{
	sym.tok = TK_HL;
	;
	{p++; goto _out; }
}}
	break;
	case 281:
	{te = p;p--;{
	sym.tok = TK_IX;
	;
	{p++; goto _out; }
}}
	break;
	case 282:
	{te = p;p--;{
	sym.tok = TK_IY;
	;
	{p++; goto _out; }
}}
	break;
	case 283:
	{te = p;p--;{
	sym.tok = TK_AF;
	;
	{p++; goto _out; }
}}
	break;
	case 284:
	{te = p;p--;{
	sym.tok = TK_IP;
	;
	{p++; goto _out; }
}}
	break;
	case 285:
	{te = p;p--;{
	sym.tok = TK_SU;
	;
	{p++; goto _out; }
}}
	break;
	case 286:
	{te = p;p--;{
	if (expect_opcode) {
		sym.tok = TK_IF;
		sym.tok_opcode = TK_IF;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_IF;
	}
	{p++; goto _out; }
}}
	break;
	case 287:
	{te = p;p--;{
	if (expect_opcode) {
		sym.tok = TK_CALL;
		sym.tok_opcode = TK_CALL;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_CALL;
	}
	{p++; goto _out; }
}}
	break;
	case 288:
	{te = p;p--;{
	if (expect_opcode) {
		sym.tok = TK_CP;
		sym.tok_opcode = TK_CP;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_CP;
	}
	{p++; goto _out; }
}}
	break;
	case 289:
	{te = p;p--;{
	if (expect_opcode) {
		sym.tok = TK_CPD;
		sym.tok_opcode = TK_CPD;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_CPD;
	}
	{p++; goto _out; }
}}
	break;
	case 290:
	{te = p;p--;{
	if (expect_opcode) {
		sym.tok = TK_CPI;
		sym.tok_opcode = TK_CPI;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_CPI;
	}
	{p++; goto _out; }
}}
	break;
	case 291:
	{te = p;p--;{
	if (expect_opcode) {
		sym.tok = TK_EI;
		sym.tok_opcode = TK_EI;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_EI;
	}
	{p++; goto _out; }
}}
	break;
	case 292:
	{te = p;p--;{
	if (expect_opcode) {
		sym.tok = TK_EX;
		sym.tok_opcode = TK_EX;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_EX;
	}
	{p++; goto _out; }
}}
	break;
	case 293:
	{te = p;p--;{
	if (expect_opcode) {
		sym.tok = TK_IN;
		sym.tok_opcode = TK_IN;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_IN;
	}
	{p++; goto _out; }
}}
	break;
	case 294:
	{te = p;p--;{
	if (expect_opcode) {
		sym.tok = TK_INC;
		sym.tok_opcode = TK_INC;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_INC;
	}
	{p++; goto _out; }
}}
	break;
	case 295:
	{te = p;p--;{
	if (expect_opcode) {
		sym.tok = TK_IND;
		sym.tok_opcode = TK_IND;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_IND;
	}
	{p++; goto _out; }
}}
	break;
	case 296:
	{te = p;p--;{
	if (expect_opcode) {
		sym.tok = TK_INI;
		sym.tok_opcode = TK_INI;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_INI;
	}
	{p++; goto _out; }
}}
	break;
	case 297:
	{te = p;p--;{
	if (expect_opcode) {
		sym.tok = TK_LD;
		sym.tok_opcode = TK_LD;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_LD;
	}
	{p++; goto _out; }
}}
	break;
	case 298:
	{te = p;p--;{
	if (expect_opcode) {
		sym.tok = TK_LDD;
		sym.tok_opcode = TK_LDD;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_LDD;
	}
	{p++; goto _out; }
}}
	break;
	case 299:
	{te = p;p--;{
	if (expect_opcode) {
		sym.tok = TK_LDDR;
		sym.tok_opcode = TK_LDDR;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_LDDR;
	}
	{p++; goto _out; }
}}
	break;
	case 300:
	{te = p;p--;{
	if (expect_opcode) {
		sym.tok = TK_LDI;
		sym.tok_opcode = TK_LDI;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_LDI;
	}
	{p++; goto _out; }
}}
	break;
	case 301:
	{te = p;p--;{
	if (expect_opcode) {
		sym.tok = TK_LDIR;
		sym.tok_opcode = TK_LDIR;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_LDIR;
	}
	{p++; goto _out; }
}}
	break;
	case 302:
	{te = p;p--;{
	if (expect_opcode) {
		sym.tok = TK_OR;
		sym.tok_opcode = TK_OR;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_OR;
	}
	{p++; goto _out; }
}}
	break;
	case 303:
	{te = p;p--;{
	if (expect_opcode) {
		sym.tok = TK_OUT;
		sym.tok_opcode = TK_OUT;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_OUT;
	}
	{p++; goto _out; }
}}
	break;
	case 304:
	{te = p;p--;{
	if (expect_opcode) {
		sym.tok = TK_OUTI;
		sym.tok_opcode = TK_OUTI;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_OUTI;
	}
	{p++; goto _out; }
}}
	break;
	case 305:
	{te = p;p--;{
	if (expect_opcode) {
		sym.tok = TK_POP;
		sym.tok_opcode = TK_POP;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_POP;
	}
	{p++; goto _out; }
}}
	break;
	case 306:
	{te = p;p--;{
	if (expect_opcode) {
		sym.tok = TK_RET;
		sym.tok_opcode = TK_RET;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_RET;
	}
	{p++; goto _out; }
}}
	break;
	case 307:
	{te = p;p--;{
	if (expect_opcode) {
		sym.tok = TK_RL;
		sym.tok_opcode = TK_RL;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_RL;
	}
	{p++; goto _out; }
}}
	break;
	case 308:
	{te = p;p--;{
	if (expect_opcode) {
		sym.tok = TK_RLA;
		sym.tok_opcode = TK_RLA;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_RLA;
	}
	{p++; goto _out; }
}}
	break;
	case 309:
	{te = p;p--;{
	if (expect_opcode) {
		sym.tok = TK_RLC;
		sym.tok_opcode = TK_RLC;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_RLC;
	}
	{p++; goto _out; }
}}
	break;
	case 310:
	{te = p;p--;{
	if (expect_opcode) {
		sym.tok = TK_RLCA;
		sym.tok_opcode = TK_RLCA;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_RLCA;
	}
	{p++; goto _out; }
}}
	break;
	case 311:
	{te = p;p--;{
	if (expect_opcode) {
		sym.tok = TK_RR;
		sym.tok_opcode = TK_RR;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_RR;
	}
	{p++; goto _out; }
}}
	break;
	case 312:
	{te = p;p--;{
	if (expect_opcode) {
		sym.tok = TK_RRA;
		sym.tok_opcode = TK_RRA;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_RRA;
	}
	{p++; goto _out; }
}}
	break;
	case 313:
	{te = p;p--;{
	if (expect_opcode) {
		sym.tok = TK_RRC;
		sym.tok_opcode = TK_RRC;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_RRC;
	}
	{p++; goto _out; }
}}
	break;
	case 314:
	{te = p;p--;{
	if (expect_opcode) {
		sym.tok = TK_RRCA;
		sym.tok_opcode = TK_RRCA;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_RRCA;
	}
	{p++; goto _out; }
}}
	break;
	case 315:
	{te = p;p--;{
	if (expect_opcode) {
		sym.tok = TK_SET;
		sym.tok_opcode = TK_SET;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_SET;
	}
	{p++; goto _out; }
}}
	break;
	case 316:
	{te = p;p--;{
	if (expect_opcode) {
		sym.tok = TK_SWAP;
		sym.tok_opcode = TK_SWAP;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_SWAP;
	}
	{p++; goto _out; }
}}
	break;
	case 317:
	{te = p;p--;{
	if (expect_opcode) {
		sym.tok = TK_FILL;
		sym.tok_opcode = TK_FILL;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_FILL;
	}
	{p++; goto _out; }
}}
	break;
	case 318:
	{te = p;p--;{
	if (expect_opcode) {
		sym.tok = TK_OTDM;
		sym.tok_opcode = TK_OTDM;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_OTDM;
	}
	{p++; goto _out; }
}}
	break;
	case 319:
	{te = p;p--;{
	if (expect_opcode) {
		sym.tok = TK_OTIM;
		sym.tok_opcode = TK_OTIM;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_OTIM;
	}
	{p++; goto _out; }
}}
	break;
	case 320:
	{te = p;p--;{
	if (expect_opcode) {
		sym.tok = TK_TST;
		sym.tok_opcode = TK_TST;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_TST;
	}
	{p++; goto _out; }
}}
	break;
	case 321:
	{te = p;p--;}
	break;
	case 322:
	{te = p;p--;{
  sym.tok = TK_NAME;
  {p++; goto _out; }
 }}
	break;
	case 323:
	{te = p;p--;{
  while ( ts[ 0] == '.' || isspace(ts[ 0]) ) ts++;
  while ( te[-1] == ':' || isspace(te[-1]) ) te--;
  sym.tok = TK_LABEL;
  {p++; goto _out; }
 }}
	break;
	case 324:
	{te = p;p--;{
  sym.tok = TK_NUMBER;
  sym.number = scan_num( ts, te - ts, 10 );
  ts = te = p;
  {p++; goto _out; }
 }}
	break;
	case 325:
	{te = p;p--;{
  sym.tok = TK_NUMBER;
  sym.number = scan_num( ts + 2, te - ts - 2, 16 );
  ts = te = p;
  {p++; goto _out; }
 }}
	break;
	case 326:
	{te = p;p--;{
  sym.tok = TK_NUMBER;
  sym.number = scan_num( ts, te - ts - 1, 2 );
  ts = te = p;
  {p++; goto _out; }
 }}
	break;
	case 327:
	{te = p;p--;{
  sym.tok = TK_NUMBER;
  sym.number = scan_num( ts + 1, te - ts - 1, 2 );
  ts = te = p;
  {p++; goto _out; }
 }}
	break;
	case 328:
	{{p = ((te))-1;}{
	sym.tok = TK_LPAREN;
	;
	{p++; goto _out; }
}}
	break;
	case 329:
	{{p = ((te))-1;}{
	sym.tok = TK_DOT;
	;
	{p++; goto _out; }
}}
	break;
	case 330:
	{{p = ((te))-1;}{
  sym.tok = TK_NAME;
  {p++; goto _out; }
 }}
	break;
	case 331:
	{{p = ((te))-1;}{
  sym.tok = TK_NUMBER;
  sym.number = scan_num( ts, te - ts, 10 );
  ts = te = p;
  {p++; goto _out; }
 }}
	break;
	case 332:
	{	switch( act ) {
	case 1:
	{{p = ((te))-1;}
	sym.tok = TK_ASMPC;
	;
	{p++; goto _out; }
}
	break;
	case 5:
	{{p = ((te))-1;}
	sym.tok = TK_MOD;
	;
	{p++; goto _out; }
}
	break;
	case 37:
	{{p = ((te))-1;}
	sym.tok = TK_NZ;
	;
	{p++; goto _out; }
}
	break;
	case 38:
	{{p = ((te))-1;}
	sym.tok = TK_Z;
	;
	{p++; goto _out; }
}
	break;
	case 39:
	{{p = ((te))-1;}
	sym.tok = TK_NC;
	;
	{p++; goto _out; }
}
	break;
	case 40:
	{{p = ((te))-1;}
	sym.tok = TK_C;
	;
	{p++; goto _out; }
}
	break;
	case 41:
	{{p = ((te))-1;}
	sym.tok = TK_PO;
	;
	{p++; goto _out; }
}
	break;
	case 42:
	{{p = ((te))-1;}
	sym.tok = TK_PE;
	;
	{p++; goto _out; }
}
	break;
	case 43:
	{{p = ((te))-1;}
	sym.tok = TK_P;
	;
	{p++; goto _out; }
}
	break;
	case 44:
	{{p = ((te))-1;}
	sym.tok = TK_M;
	;
	{p++; goto _out; }
}
	break;
	case 45:
	{{p = ((te))-1;}
	sym.tok = TK_LZ;
	;
	{p++; goto _out; }
}
	break;
	case 46:
	{{p = ((te))-1;}
	sym.tok = TK_LO;
	;
	{p++; goto _out; }
}
	break;
	case 47:
	{{p = ((te))-1;}
	sym.tok = TK_NV;
	;
	{p++; goto _out; }
}
	break;
	case 48:
	{{p = ((te))-1;}
	sym.tok = TK_V;
	;
	{p++; goto _out; }
}
	break;
	case 49:
	{{p = ((te))-1;}
	sym.tok = TK_B;
	;
	{p++; goto _out; }
}
	break;
	case 50:
	{{p = ((te))-1;}
	sym.tok = TK_D;
	;
	{p++; goto _out; }
}
	break;
	case 51:
	{{p = ((te))-1;}
	sym.tok = TK_E;
	;
	{p++; goto _out; }
}
	break;
	case 52:
	{{p = ((te))-1;}
	sym.tok = TK_H;
	;
	{p++; goto _out; }
}
	break;
	case 53:
	{{p = ((te))-1;}
	sym.tok = TK_IXH;
	;
	{p++; goto _out; }
}
	break;
	case 54:
	{{p = ((te))-1;}
	sym.tok = TK_IYH;
	;
	{p++; goto _out; }
}
	break;
	case 55:
	{{p = ((te))-1;}
	sym.tok = TK_L;
	;
	{p++; goto _out; }
}
	break;
	case 56:
	{{p = ((te))-1;}
	sym.tok = TK_IXL;
	;
	{p++; goto _out; }
}
	break;
	case 57:
	{{p = ((te))-1;}
	sym.tok = TK_IYL;
	;
	{p++; goto _out; }
}
	break;
	case 58:
	{{p = ((te))-1;}
	sym.tok = TK_A;
	;
	{p++; goto _out; }
}
	break;
	case 59:
	{{p = ((te))-1;}
	sym.tok = TK_F;
	;
	{p++; goto _out; }
}
	break;
	case 60:
	{{p = ((te))-1;}
	sym.tok = TK_I;
	;
	{p++; goto _out; }
}
	break;
	case 61:
	{{p = ((te))-1;}
	sym.tok = TK_IIR;
	;
	{p++; goto _out; }
}
	break;
	case 62:
	{{p = ((te))-1;}
	sym.tok = TK_R;
	;
	{p++; goto _out; }
}
	break;
	case 63:
	{{p = ((te))-1;}
	sym.tok = TK_EIR;
	;
	{p++; goto _out; }
}
	break;
	case 64:
	{{p = ((te))-1;}
	sym.tok = TK_BC;
	;
	{p++; goto _out; }
}
	break;
	case 65:
	{{p = ((te))-1;}
	sym.tok = TK_DE;
	;
	{p++; goto _out; }
}
	break;
	case 66:
	{{p = ((te))-1;}
	sym.tok = TK_HL;
	;
	{p++; goto _out; }
}
	break;
	case 67:
	{{p = ((te))-1;}
	sym.tok = TK_IX;
	;
	{p++; goto _out; }
}
	break;
	case 68:
	{{p = ((te))-1;}
	sym.tok = TK_IY;
	;
	{p++; goto _out; }
}
	break;
	case 69:
	{{p = ((te))-1;}
	sym.tok = TK_AF;
	;
	{p++; goto _out; }
}
	break;
	case 70:
	{{p = ((te))-1;}
	sym.tok = TK_SP;
	;
	{p++; goto _out; }
}
	break;
	case 71:
	{{p = ((te))-1;}
	sym.tok = TK_IP;
	;
	{p++; goto _out; }
}
	break;
	case 72:
	{{p = ((te))-1;}
	sym.tok = TK_SU;
	;
	{p++; goto _out; }
}
	break;
	case 73:
	{{p = ((te))-1;}
	sym.tok = TK_XPC;
	;
	{p++; goto _out; }
}
	break;
	case 93:
	{{p = ((te))-1;}
	sym.tok = TK_A32;
	;
	{p++; goto _out; }
}
	break;
	case 94:
	{{p = ((te))-1;}
	sym.tok = TK_DEHL;
	;
	{p++; goto _out; }
}
	break;
	case 95:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_BINARY;
		sym.tok_opcode = TK_BINARY;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_BINARY;
	}
	{p++; goto _out; }
}
	break;
	case 96:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_DEFB;
		sym.tok_opcode = TK_DEFB;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_DEFB;
	}
	{p++; goto _out; }
}
	break;
	case 97:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_DEFC;
		sym.tok_opcode = TK_DEFC;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_DEFC;
	}
	{p++; goto _out; }
}
	break;
	case 98:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_DEFGROUP;
		sym.tok_opcode = TK_DEFGROUP;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_DEFGROUP;
	}
	{p++; goto _out; }
}
	break;
	case 99:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_DEFINE;
		sym.tok_opcode = TK_DEFINE;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_DEFINE;
	}
	{p++; goto _out; }
}
	break;
	case 100:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_DEFQ;
		sym.tok_opcode = TK_DEFQ;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_DEFQ;
	}
	{p++; goto _out; }
}
	break;
	case 101:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_DEFM;
		sym.tok_opcode = TK_DEFM;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_DEFM;
	}
	{p++; goto _out; }
}
	break;
	case 102:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_DEFS;
		sym.tok_opcode = TK_DEFS;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_DEFS;
	}
	{p++; goto _out; }
}
	break;
	case 103:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_DEFVARS;
		sym.tok_opcode = TK_DEFVARS;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_DEFVARS;
	}
	{p++; goto _out; }
}
	break;
	case 104:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_DEFW;
		sym.tok_opcode = TK_DEFW;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_DEFW;
	}
	{p++; goto _out; }
}
	break;
	case 105:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_ELSE;
		sym.tok_opcode = TK_ELSE;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_ELSE;
	}
	{p++; goto _out; }
}
	break;
	case 106:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_ENDIF;
		sym.tok_opcode = TK_ENDIF;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_ENDIF;
	}
	{p++; goto _out; }
}
	break;
	case 107:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_EXTERN;
		sym.tok_opcode = TK_EXTERN;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_EXTERN;
	}
	{p++; goto _out; }
}
	break;
	case 108:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_GLOBAL;
		sym.tok_opcode = TK_GLOBAL;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_GLOBAL;
	}
	{p++; goto _out; }
}
	break;
	case 109:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_IF;
		sym.tok_opcode = TK_IF;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_IF;
	}
	{p++; goto _out; }
}
	break;
	case 110:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_IFDEF;
		sym.tok_opcode = TK_IFDEF;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_IFDEF;
	}
	{p++; goto _out; }
}
	break;
	case 111:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_IFNDEF;
		sym.tok_opcode = TK_IFNDEF;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_IFNDEF;
	}
	{p++; goto _out; }
}
	break;
	case 112:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_INCLUDE;
		sym.tok_opcode = TK_INCLUDE;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_INCLUDE;
	}
	{p++; goto _out; }
}
	break;
	case 113:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_LINE;
		sym.tok_opcode = TK_LINE;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_LINE;
	}
	{p++; goto _out; }
}
	break;
	case 114:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_LSTOFF;
		sym.tok_opcode = TK_LSTOFF;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_LSTOFF;
	}
	{p++; goto _out; }
}
	break;
	case 115:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_LSTON;
		sym.tok_opcode = TK_LSTON;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_LSTON;
	}
	{p++; goto _out; }
}
	break;
	case 116:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_MODULE;
		sym.tok_opcode = TK_MODULE;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_MODULE;
	}
	{p++; goto _out; }
}
	break;
	case 117:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_ORG;
		sym.tok_opcode = TK_ORG;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_ORG;
	}
	{p++; goto _out; }
}
	break;
	case 118:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_PUBLIC;
		sym.tok_opcode = TK_PUBLIC;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_PUBLIC;
	}
	{p++; goto _out; }
}
	break;
	case 119:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_SECTION;
		sym.tok_opcode = TK_SECTION;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_SECTION;
	}
	{p++; goto _out; }
}
	break;
	case 120:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_UNDEFINE;
		sym.tok_opcode = TK_UNDEFINE;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_UNDEFINE;
	}
	{p++; goto _out; }
}
	break;
	case 125:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_ADC;
		sym.tok_opcode = TK_ADC;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_ADC;
	}
	{p++; goto _out; }
}
	break;
	case 126:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_ADD;
		sym.tok_opcode = TK_ADD;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_ADD;
	}
	{p++; goto _out; }
}
	break;
	case 127:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_AND;
		sym.tok_opcode = TK_AND;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_AND;
	}
	{p++; goto _out; }
}
	break;
	case 128:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_BIT;
		sym.tok_opcode = TK_BIT;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_BIT;
	}
	{p++; goto _out; }
}
	break;
	case 129:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_CALL;
		sym.tok_opcode = TK_CALL;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_CALL;
	}
	{p++; goto _out; }
}
	break;
	case 130:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_CCF;
		sym.tok_opcode = TK_CCF;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_CCF;
	}
	{p++; goto _out; }
}
	break;
	case 131:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_CP;
		sym.tok_opcode = TK_CP;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_CP;
	}
	{p++; goto _out; }
}
	break;
	case 132:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_CPD;
		sym.tok_opcode = TK_CPD;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_CPD;
	}
	{p++; goto _out; }
}
	break;
	case 133:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_CPDR;
		sym.tok_opcode = TK_CPDR;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_CPDR;
	}
	{p++; goto _out; }
}
	break;
	case 134:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_CPI;
		sym.tok_opcode = TK_CPI;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_CPI;
	}
	{p++; goto _out; }
}
	break;
	case 135:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_CPIR;
		sym.tok_opcode = TK_CPIR;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_CPIR;
	}
	{p++; goto _out; }
}
	break;
	case 136:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_CPL;
		sym.tok_opcode = TK_CPL;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_CPL;
	}
	{p++; goto _out; }
}
	break;
	case 137:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_DAA;
		sym.tok_opcode = TK_DAA;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_DAA;
	}
	{p++; goto _out; }
}
	break;
	case 138:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_DEC;
		sym.tok_opcode = TK_DEC;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_DEC;
	}
	{p++; goto _out; }
}
	break;
	case 139:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_DI;
		sym.tok_opcode = TK_DI;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_DI;
	}
	{p++; goto _out; }
}
	break;
	case 140:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_DJNZ;
		sym.tok_opcode = TK_DJNZ;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_DJNZ;
	}
	{p++; goto _out; }
}
	break;
	case 141:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_EI;
		sym.tok_opcode = TK_EI;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_EI;
	}
	{p++; goto _out; }
}
	break;
	case 142:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_EX;
		sym.tok_opcode = TK_EX;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_EX;
	}
	{p++; goto _out; }
}
	break;
	case 143:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_EXX;
		sym.tok_opcode = TK_EXX;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_EXX;
	}
	{p++; goto _out; }
}
	break;
	case 144:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_HALT;
		sym.tok_opcode = TK_HALT;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_HALT;
	}
	{p++; goto _out; }
}
	break;
	case 145:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_IM;
		sym.tok_opcode = TK_IM;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_IM;
	}
	{p++; goto _out; }
}
	break;
	case 146:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_IN;
		sym.tok_opcode = TK_IN;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_IN;
	}
	{p++; goto _out; }
}
	break;
	case 147:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_INC;
		sym.tok_opcode = TK_INC;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_INC;
	}
	{p++; goto _out; }
}
	break;
	case 148:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_IND;
		sym.tok_opcode = TK_IND;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_IND;
	}
	{p++; goto _out; }
}
	break;
	case 149:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_INDR;
		sym.tok_opcode = TK_INDR;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_INDR;
	}
	{p++; goto _out; }
}
	break;
	case 150:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_INI;
		sym.tok_opcode = TK_INI;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_INI;
	}
	{p++; goto _out; }
}
	break;
	case 151:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_INIR;
		sym.tok_opcode = TK_INIR;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_INIR;
	}
	{p++; goto _out; }
}
	break;
	case 152:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_JP;
		sym.tok_opcode = TK_JP;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_JP;
	}
	{p++; goto _out; }
}
	break;
	case 153:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_JR;
		sym.tok_opcode = TK_JR;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_JR;
	}
	{p++; goto _out; }
}
	break;
	case 154:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_LD;
		sym.tok_opcode = TK_LD;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_LD;
	}
	{p++; goto _out; }
}
	break;
	case 155:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_LDD;
		sym.tok_opcode = TK_LDD;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_LDD;
	}
	{p++; goto _out; }
}
	break;
	case 156:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_LDDR;
		sym.tok_opcode = TK_LDDR;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_LDDR;
	}
	{p++; goto _out; }
}
	break;
	case 157:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_LDI;
		sym.tok_opcode = TK_LDI;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_LDI;
	}
	{p++; goto _out; }
}
	break;
	case 158:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_LDIR;
		sym.tok_opcode = TK_LDIR;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_LDIR;
	}
	{p++; goto _out; }
}
	break;
	case 159:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_NEG;
		sym.tok_opcode = TK_NEG;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_NEG;
	}
	{p++; goto _out; }
}
	break;
	case 160:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_NOP;
		sym.tok_opcode = TK_NOP;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_NOP;
	}
	{p++; goto _out; }
}
	break;
	case 161:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_OR;
		sym.tok_opcode = TK_OR;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_OR;
	}
	{p++; goto _out; }
}
	break;
	case 162:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_OTDR;
		sym.tok_opcode = TK_OTDR;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_OTDR;
	}
	{p++; goto _out; }
}
	break;
	case 163:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_OTIR;
		sym.tok_opcode = TK_OTIR;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_OTIR;
	}
	{p++; goto _out; }
}
	break;
	case 164:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_OUT;
		sym.tok_opcode = TK_OUT;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_OUT;
	}
	{p++; goto _out; }
}
	break;
	case 165:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_OUTD;
		sym.tok_opcode = TK_OUTD;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_OUTD;
	}
	{p++; goto _out; }
}
	break;
	case 166:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_OUTI;
		sym.tok_opcode = TK_OUTI;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_OUTI;
	}
	{p++; goto _out; }
}
	break;
	case 167:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_POP;
		sym.tok_opcode = TK_POP;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_POP;
	}
	{p++; goto _out; }
}
	break;
	case 168:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_PUSH;
		sym.tok_opcode = TK_PUSH;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_PUSH;
	}
	{p++; goto _out; }
}
	break;
	case 169:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_RES;
		sym.tok_opcode = TK_RES;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_RES;
	}
	{p++; goto _out; }
}
	break;
	case 170:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_RET;
		sym.tok_opcode = TK_RET;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_RET;
	}
	{p++; goto _out; }
}
	break;
	case 171:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_RETI;
		sym.tok_opcode = TK_RETI;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_RETI;
	}
	{p++; goto _out; }
}
	break;
	case 172:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_RETN;
		sym.tok_opcode = TK_RETN;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_RETN;
	}
	{p++; goto _out; }
}
	break;
	case 173:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_RL;
		sym.tok_opcode = TK_RL;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_RL;
	}
	{p++; goto _out; }
}
	break;
	case 174:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_RLA;
		sym.tok_opcode = TK_RLA;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_RLA;
	}
	{p++; goto _out; }
}
	break;
	case 176:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_RLC;
		sym.tok_opcode = TK_RLC;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_RLC;
	}
	{p++; goto _out; }
}
	break;
	case 177:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_RLCA;
		sym.tok_opcode = TK_RLCA;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_RLCA;
	}
	{p++; goto _out; }
}
	break;
	case 179:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_RLD;
		sym.tok_opcode = TK_RLD;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_RLD;
	}
	{p++; goto _out; }
}
	break;
	case 180:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_RR;
		sym.tok_opcode = TK_RR;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_RR;
	}
	{p++; goto _out; }
}
	break;
	case 181:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_RRA;
		sym.tok_opcode = TK_RRA;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_RRA;
	}
	{p++; goto _out; }
}
	break;
	case 183:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_RRC;
		sym.tok_opcode = TK_RRC;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_RRC;
	}
	{p++; goto _out; }
}
	break;
	case 184:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_RRCA;
		sym.tok_opcode = TK_RRCA;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_RRCA;
	}
	{p++; goto _out; }
}
	break;
	case 186:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_RRD;
		sym.tok_opcode = TK_RRD;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_RRD;
	}
	{p++; goto _out; }
}
	break;
	case 187:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_RST;
		sym.tok_opcode = TK_RST;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_RST;
	}
	{p++; goto _out; }
}
	break;
	case 188:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_SBC;
		sym.tok_opcode = TK_SBC;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_SBC;
	}
	{p++; goto _out; }
}
	break;
	case 189:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_SCF;
		sym.tok_opcode = TK_SCF;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_SCF;
	}
	{p++; goto _out; }
}
	break;
	case 190:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_SET;
		sym.tok_opcode = TK_SET;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_SET;
	}
	{p++; goto _out; }
}
	break;
	case 191:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_SLA;
		sym.tok_opcode = TK_SLA;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_SLA;
	}
	{p++; goto _out; }
}
	break;
	case 192:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_SLL;
		sym.tok_opcode = TK_SLL;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_SLL;
	}
	{p++; goto _out; }
}
	break;
	case 193:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_SLI;
		sym.tok_opcode = TK_SLI;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_SLI;
	}
	{p++; goto _out; }
}
	break;
	case 194:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_SRA;
		sym.tok_opcode = TK_SRA;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_SRA;
	}
	{p++; goto _out; }
}
	break;
	case 195:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_SRL;
		sym.tok_opcode = TK_SRL;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_SRL;
	}
	{p++; goto _out; }
}
	break;
	case 196:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_SUB;
		sym.tok_opcode = TK_SUB;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_SUB;
	}
	{p++; goto _out; }
}
	break;
	case 197:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_XOR;
		sym.tok_opcode = TK_XOR;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_XOR;
	}
	{p++; goto _out; }
}
	break;
	case 198:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_SWAPNIB;
		sym.tok_opcode = TK_SWAPNIB;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_SWAPNIB;
	}
	{p++; goto _out; }
}
	break;
	case 199:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_SWAP;
		sym.tok_opcode = TK_SWAP;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_SWAP;
	}
	{p++; goto _out; }
}
	break;
	case 200:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_OUTINB;
		sym.tok_opcode = TK_OUTINB;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_OUTINB;
	}
	{p++; goto _out; }
}
	break;
	case 201:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_LDIX;
		sym.tok_opcode = TK_LDIX;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_LDIX;
	}
	{p++; goto _out; }
}
	break;
	case 202:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_LDIRX;
		sym.tok_opcode = TK_LDIRX;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_LDIRX;
	}
	{p++; goto _out; }
}
	break;
	case 203:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_LDDX;
		sym.tok_opcode = TK_LDDX;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_LDDX;
	}
	{p++; goto _out; }
}
	break;
	case 204:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_LDDRX;
		sym.tok_opcode = TK_LDDRX;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_LDDRX;
	}
	{p++; goto _out; }
}
	break;
	case 205:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_FILL;
		sym.tok_opcode = TK_FILL;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_FILL;
	}
	{p++; goto _out; }
}
	break;
	case 206:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_FILLDE;
		sym.tok_opcode = TK_FILLDE;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_FILLDE;
	}
	{p++; goto _out; }
}
	break;
	case 207:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_MIRROR;
		sym.tok_opcode = TK_MIRROR;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_MIRROR;
	}
	{p++; goto _out; }
}
	break;
	case 208:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_POPX;
		sym.tok_opcode = TK_POPX;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_POPX;
	}
	{p++; goto _out; }
}
	break;
	case 209:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_NEXTREG;
		sym.tok_opcode = TK_NEXTREG;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_NEXTREG;
	}
	{p++; goto _out; }
}
	break;
	case 210:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_PIXELDN;
		sym.tok_opcode = TK_PIXELDN;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_PIXELDN;
	}
	{p++; goto _out; }
}
	break;
	case 211:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_PIXELAD;
		sym.tok_opcode = TK_PIXELAD;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_PIXELAD;
	}
	{p++; goto _out; }
}
	break;
	case 212:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_SETAE;
		sym.tok_opcode = TK_SETAE;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_SETAE;
	}
	{p++; goto _out; }
}
	break;
	case 213:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_TEST;
		sym.tok_opcode = TK_TEST;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_TEST;
	}
	{p++; goto _out; }
}
	break;
	case 214:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_IN0;
		sym.tok_opcode = TK_IN0;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_IN0;
	}
	{p++; goto _out; }
}
	break;
	case 215:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_MLT;
		sym.tok_opcode = TK_MLT;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_MLT;
	}
	{p++; goto _out; }
}
	break;
	case 216:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_OTDM;
		sym.tok_opcode = TK_OTDM;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_OTDM;
	}
	{p++; goto _out; }
}
	break;
	case 217:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_OTDMR;
		sym.tok_opcode = TK_OTDMR;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_OTDMR;
	}
	{p++; goto _out; }
}
	break;
	case 218:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_OTIM;
		sym.tok_opcode = TK_OTIM;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_OTIM;
	}
	{p++; goto _out; }
}
	break;
	case 219:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_OTIMR;
		sym.tok_opcode = TK_OTIMR;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_OTIMR;
	}
	{p++; goto _out; }
}
	break;
	case 220:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_OUT0;
		sym.tok_opcode = TK_OUT0;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_OUT0;
	}
	{p++; goto _out; }
}
	break;
	case 221:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_SLP;
		sym.tok_opcode = TK_SLP;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_SLP;
	}
	{p++; goto _out; }
}
	break;
	case 222:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_TST;
		sym.tok_opcode = TK_TST;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_TST;
	}
	{p++; goto _out; }
}
	break;
	case 223:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_TSTIO;
		sym.tok_opcode = TK_TSTIO;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_TSTIO;
	}
	{p++; goto _out; }
}
	break;
	case 224:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_ALTD;
		sym.tok_opcode = TK_ALTD;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_ALTD;
	}
	{p++; goto _out; }
}
	break;
	case 225:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_BOOL;
		sym.tok_opcode = TK_BOOL;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_BOOL;
	}
	{p++; goto _out; }
}
	break;
	case 226:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_IDET;
		sym.tok_opcode = TK_IDET;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_IDET;
	}
	{p++; goto _out; }
}
	break;
	case 227:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_IOE;
		sym.tok_opcode = TK_IOE;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_IOE;
	}
	{p++; goto _out; }
}
	break;
	case 228:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_IOI;
		sym.tok_opcode = TK_IOI;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_IOI;
	}
	{p++; goto _out; }
}
	break;
	case 229:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_IPRES;
		sym.tok_opcode = TK_IPRES;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_IPRES;
	}
	{p++; goto _out; }
}
	break;
	case 230:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_IPSET;
		sym.tok_opcode = TK_IPSET;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_IPSET;
	}
	{p++; goto _out; }
}
	break;
	case 231:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_LDDSR;
		sym.tok_opcode = TK_LDDSR;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_LDDSR;
	}
	{p++; goto _out; }
}
	break;
	case 232:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_LDISR;
		sym.tok_opcode = TK_LDISR;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_LDISR;
	}
	{p++; goto _out; }
}
	break;
	case 233:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_LDP;
		sym.tok_opcode = TK_LDP;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_LDP;
	}
	{p++; goto _out; }
}
	break;
	case 234:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_LSDR;
		sym.tok_opcode = TK_LSDR;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_LSDR;
	}
	{p++; goto _out; }
}
	break;
	case 235:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_LSIR;
		sym.tok_opcode = TK_LSIR;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_LSIR;
	}
	{p++; goto _out; }
}
	break;
	case 236:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_LSDDR;
		sym.tok_opcode = TK_LSDDR;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_LSDDR;
	}
	{p++; goto _out; }
}
	break;
	case 237:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_LSIDR;
		sym.tok_opcode = TK_LSIDR;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_LSIDR;
	}
	{p++; goto _out; }
}
	break;
	case 238:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_MUL;
		sym.tok_opcode = TK_MUL;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_MUL;
	}
	{p++; goto _out; }
}
	break;
	case 239:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_RDMODE;
		sym.tok_opcode = TK_RDMODE;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_RDMODE;
	}
	{p++; goto _out; }
}
	break;
	case 240:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_SETUSR;
		sym.tok_opcode = TK_SETUSR;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_SETUSR;
	}
	{p++; goto _out; }
}
	break;
	case 241:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_SURES;
		sym.tok_opcode = TK_SURES;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_SURES;
	}
	{p++; goto _out; }
}
	break;
	case 242:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_SYSCALL;
		sym.tok_opcode = TK_SYSCALL;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_SYSCALL;
	}
	{p++; goto _out; }
}
	break;
	case 243:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_UMA;
		sym.tok_opcode = TK_UMA;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_UMA;
	}
	{p++; goto _out; }
}
	break;
	case 244:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_UMS;
		sym.tok_opcode = TK_UMS;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_UMS;
	}
	{p++; goto _out; }
}
	break;
	case 245:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_CALL_OZ;
		sym.tok_opcode = TK_CALL_OZ;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_CALL_OZ;
	}
	{p++; goto _out; }
}
	break;
	case 246:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_CALL_PKG;
		sym.tok_opcode = TK_CALL_PKG;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_CALL_PKG;
	}
	{p++; goto _out; }
}
	break;
	case 247:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_FPP;
		sym.tok_opcode = TK_FPP;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_FPP;
	}
	{p++; goto _out; }
}
	break;
	case 248:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_INVOKE;
		sym.tok_opcode = TK_INVOKE;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_INVOKE;
	}
	{p++; goto _out; }
}
	break;
	case 251:
	{{p = ((te))-1;}
  sym.tok = TK_NAME;
  {p++; goto _out; }
 }
	break;
	case 253:
	{{p = ((te))-1;}
  sym.tok = TK_NUMBER;
  sym.number = scan_num( ts, te - ts, 10 );
  ts = te = p;
  {p++; goto _out; }
 }
	break;
	case 255:
	{{p = ((te))-1;}
  sym.tok = TK_NUMBER;
  sym.number = scan_num( ts + 1, te - ts - 1, 16 );
  ts = te = p;
  {p++; goto _out; }
 }
	break;
	case 257:
	{{p = ((te))-1;}
  sym.tok = TK_NUMBER;
  sym.number = scan_num( ts, te - ts - 1, 2 );
  ts = te = p;
  {p++; goto _out; }
 }
	break;
	case 259:
	{{p = ((te))-1;}
  sym.tok = TK_NUMBER;
  sym.number = scan_num( ts + 2, te - ts - 2, 2 );
  ts = te = p;
  {p++; goto _out; }
 }
	break;
	case 263:
	{{p = ((te))-1;}
  sym.tok = TK_NIL;
  skip_to_newline();
  ts = te = p;
  {p++; goto _out; }
 }
	break;
	}
	}
	break;
		}
	}
_again:
	_acts = _lexer_actions + _lexer_to_state_actions[cs];
	_nacts = (unsigned int) *_acts++;
	while ( _nacts-- > 0 ) {
		switch ( *_acts++ ) {
	case 0:
	{ts = 0;}
	break;
		}
	}
	if ( cs == 0 )
		goto _out;
	if ( ++p != pe )
		goto _resume;
	_test_eof: {}
	if ( p == eof )
	{
	if ( _lexer_eof_trans[cs] > 0 ) {
		_trans = _lexer_eof_trans[cs] - 1;
		goto _eof_trans;
	}
	}
	_out: {}
	}
 return sym.tok;
}
