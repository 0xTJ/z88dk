static const short _lexer_actions[] = {
	0, 1, 0, 1, 1, 1, 2, 1, 
	196, 1, 197, 1, 198, 1, 199, 1, 
	200, 1, 201, 1, 202, 1, 203, 1, 
	204, 1, 205, 1, 206, 1, 207, 1, 
	208, 1, 209, 1, 210, 1, 211, 1, 
	212, 1, 213, 1, 214, 1, 215, 1, 
	216, 1, 217, 1, 218, 1, 219, 1, 
	220, 1, 221, 1, 222, 1, 223, 1, 
	224, 1, 225, 1, 226, 1, 227, 1, 
	228, 1, 229, 1, 230, 1, 231, 1, 
	232, 1, 233, 1, 234, 1, 235, 1, 
	236, 1, 237, 1, 238, 1, 239, 1, 
	240, 1, 241, 1, 242, 1, 243, 1, 
	244, 1, 245, 1, 246, 1, 247, 1, 
	248, 1, 249, 1, 250, 1, 251, 1, 
	252, 1, 253, 1, 254, 1, 255, 1, 
	256, 1, 257, 1, 258, 1, 259, 1, 
	260, 1, 261, 1, 262, 1, 263, 1, 
	264, 1, 265, 1, 266, 1, 267, 1, 
	268, 1, 269, 1, 270, 1, 271, 1, 
	272, 1, 273, 1, 274, 1, 275, 1, 
	276, 1, 277, 1, 278, 1, 279, 1, 
	280, 1, 281, 1, 282, 1, 283, 1, 
	284, 1, 285, 1, 286, 1, 287, 1, 
	288, 1, 289, 1, 290, 1, 291, 1, 
	292, 1, 293, 1, 294, 1, 295, 1, 
	296, 1, 297, 1, 298, 1, 299, 1, 
	300, 1, 301, 1, 302, 1, 303, 1, 
	304, 1, 305, 1, 306, 1, 307, 1, 
	308, 1, 309, 1, 310, 1, 311, 1, 
	312, 1, 313, 1, 314, 1, 315, 1, 
	316, 1, 317, 1, 318, 1, 319, 1, 
	320, 1, 321, 1, 322, 1, 323, 1, 
	324, 2, 2, 3, 2, 2, 4, 2, 
	2, 5, 2, 2, 6, 2, 2, 7, 
	2, 2, 8, 2, 2, 9, 2, 2, 
	10, 2, 2, 11, 2, 2, 12, 2, 
	2, 13, 2, 2, 14, 2, 2, 15, 
	2, 2, 16, 2, 2, 17, 2, 2, 
	18, 2, 2, 19, 2, 2, 20, 2, 
	2, 21, 2, 2, 22, 2, 2, 23, 
	2, 2, 24, 2, 2, 25, 2, 2, 
	26, 2, 2, 27, 2, 2, 28, 2, 
	2, 29, 2, 2, 30, 2, 2, 31, 
	2, 2, 32, 2, 2, 33, 2, 2, 
	34, 2, 2, 35, 2, 2, 36, 2, 
	2, 37, 2, 2, 38, 2, 2, 39, 
	2, 2, 40, 2, 2, 41, 2, 2, 
	42, 2, 2, 43, 2, 2, 44, 2, 
	2, 45, 2, 2, 46, 2, 2, 47, 
	2, 2, 48, 2, 2, 49, 2, 2, 
	50, 2, 2, 51, 2, 2, 52, 2, 
	2, 53, 2, 2, 54, 2, 2, 55, 
	2, 2, 56, 2, 2, 57, 2, 2, 
	58, 2, 2, 59, 2, 2, 60, 2, 
	2, 61, 2, 2, 62, 2, 2, 63, 
	2, 2, 64, 2, 2, 65, 2, 2, 
	66, 2, 2, 67, 2, 2, 68, 2, 
	2, 69, 2, 2, 70, 2, 2, 71, 
	2, 2, 72, 2, 2, 73, 2, 2, 
	74, 2, 2, 75, 2, 2, 76, 2, 
	2, 77, 2, 2, 78, 2, 2, 79, 
	2, 2, 80, 2, 2, 81, 2, 2, 
	82, 2, 2, 83, 2, 2, 84, 2, 
	2, 85, 2, 2, 86, 2, 2, 87, 
	2, 2, 88, 2, 2, 89, 2, 2, 
	90, 2, 2, 91, 2, 2, 92, 2, 
	2, 93, 2, 2, 94, 2, 2, 95, 
	2, 2, 96, 2, 2, 97, 2, 2, 
	98, 2, 2, 99, 2, 2, 100, 2, 
	2, 101, 2, 2, 102, 2, 2, 103, 
	2, 2, 104, 2, 2, 105, 2, 2, 
	106, 2, 2, 107, 2, 2, 108, 2, 
	2, 109, 2, 2, 110, 2, 2, 111, 
	2, 2, 112, 2, 2, 113, 2, 2, 
	114, 2, 2, 115, 2, 2, 116, 2, 
	2, 117, 2, 2, 118, 2, 2, 119, 
	2, 2, 120, 2, 2, 121, 2, 2, 
	122, 2, 2, 123, 2, 2, 124, 2, 
	2, 125, 2, 2, 126, 2, 2, 127, 
	2, 2, 128, 2, 2, 129, 2, 2, 
	130, 2, 2, 131, 2, 2, 132, 2, 
	2, 133, 2, 2, 134, 2, 2, 135, 
	2, 2, 136, 2, 2, 137, 2, 2, 
	138, 2, 2, 139, 2, 2, 140, 2, 
	2, 141, 2, 2, 142, 2, 2, 143, 
	2, 2, 144, 2, 2, 145, 2, 2, 
	146, 2, 2, 147, 2, 2, 148, 2, 
	2, 149, 2, 2, 150, 2, 2, 151, 
	2, 2, 152, 2, 2, 153, 2, 2, 
	154, 2, 2, 155, 2, 2, 156, 2, 
	2, 157, 2, 2, 158, 2, 2, 159, 
	2, 2, 160, 2, 2, 161, 2, 2, 
	162, 2, 2, 163, 2, 2, 164, 2, 
	2, 165, 2, 2, 166, 2, 2, 167, 
	2, 2, 168, 2, 2, 169, 2, 2, 
	170, 2, 2, 171, 2, 2, 172, 2, 
	2, 173, 2, 2, 174, 2, 2, 175, 
	2, 2, 176, 2, 2, 177, 2, 2, 
	178, 2, 2, 179, 2, 2, 180, 2, 
	2, 181, 2, 2, 182, 2, 2, 183, 
	2, 2, 184, 2, 2, 185, 2, 2, 
	186, 2, 2, 187, 2, 2, 188, 2, 
	2, 189, 2, 2, 190, 2, 2, 191, 
	2, 2, 192, 2, 2, 193, 2, 2, 
	194, 2, 2, 195
};
static const short _lexer_cond_offsets[] = {
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 5, 8, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 17, 21, 28, 
	35, 42, 49, 56, 63, 70, 77, 84, 
	91, 98, 105, 112, 119, 126, 133, 140, 
	147, 154, 161, 168, 175, 182, 189, 196, 
	203, 210, 217, 224, 231, 238, 245, 252, 
	259, 266, 273, 280, 287, 294, 301, 308, 
	315, 322, 329, 336, 343, 350, 357, 364, 
	371, 378, 385, 392, 399, 406, 413, 420, 
	427, 434, 441, 448, 455, 462, 469, 476, 
	483, 490, 497, 504, 511, 518, 525, 532, 
	539, 546, 553, 560, 567, 574, 581, 588, 
	595, 602, 609, 616, 623, 630, 637, 644, 
	651, 658, 665, 672, 679, 686, 693, 700, 
	707, 714, 721, 728, 735, 742, 749, 756, 
	763, 770, 777, 784, 791, 798, 805, 812, 
	819, 826, 833, 840, 847, 854, 861, 868, 
	875, 882, 889, 896, 903, 910, 917, 924, 
	931, 938, 945, 952, 959, 966, 973, 980, 
	987, 994, 1001, 1008, 1015, 1022, 1029, 1036, 
	1043, 1050, 1057, 1064, 1071, 1078, 1085, 1092, 
	1099, 1106, 1113, 1120, 1127, 1134, 1141, 1148, 
	1155, 1162, 1169, 1176, 1183, 1190, 1197, 1204, 
	1211, 1218, 1225, 1232, 1239, 1246, 1253, 1260, 
	1267, 1274, 1281, 1288, 1295, 1302, 1309, 1316, 
	1323, 1330, 1337, 1344, 1351, 1358, 1365, 1372, 
	1379, 1386, 1393, 1400, 1407, 1414, 1421, 1428, 
	1435, 1442, 1449, 1456, 1463, 1470, 1477, 1484, 
	1491, 1498, 1505, 1512, 1519, 1526, 1533, 1540, 
	1547, 1554
};
static const char _lexer_cond_lengths[] = {
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 5, 3, 4, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 5, 4, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7
};
static const short _lexer_cond_keys[] = {
	9, 9, 32, 32, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 58, 58, 
	46, 46, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 65, 90, 95, 95, 
	97, 122, 48, 57, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 0
};
static const char _lexer_cond_spaces[] = {
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0
};
static const short _lexer_key_offsets[] = {
	0, 0, 2, 5, 19, 21, 26, 31, 
	33, 38, 40, 45, 49, 54, 59, 61, 
	66, 74, 80, 88, 95, 98, 236, 237, 
	243, 246, 248, 249, 263, 264, 278, 290, 
	298, 306, 316, 322, 323, 326, 327, 329, 
	330, 349, 356, 364, 375, 383, 392, 401, 
	410, 419, 428, 437, 451, 459, 470, 479, 
	488, 497, 506, 515, 529, 538, 547, 554, 
	565, 574, 583, 592, 601, 614, 623, 632, 
	650, 659, 673, 698, 707, 716, 725, 734, 
	743, 752, 761, 770, 779, 788, 797, 806, 
	814, 830, 839, 848, 857, 866, 875, 884, 
	895, 904, 913, 922, 934, 943, 952, 961, 
	970, 979, 988, 997, 1006, 1015, 1024, 1036, 
	1045, 1054, 1062, 1087, 1096, 1105, 1116, 1125, 
	1134, 1143, 1152, 1161, 1170, 1186, 1195, 1204, 
	1213, 1222, 1231, 1240, 1249, 1258, 1267, 1278, 
	1289, 1298, 1307, 1316, 1325, 1336, 1347, 1358, 
	1376, 1389, 1402, 1411, 1420, 1433, 1442, 1451, 
	1460, 1469, 1482, 1493, 1502, 1513, 1522, 1531, 
	1542, 1551, 1566, 1575, 1584, 1593, 1602, 1611, 
	1620, 1629, 1638, 1647, 1656, 1673, 1684, 1693, 
	1702, 1711, 1720, 1729, 1742, 1751, 1762, 1773, 
	1782, 1793, 1802, 1811, 1823, 1832, 1841, 1856, 
	1865, 1874, 1883, 1894, 1903, 1912, 1921, 1930, 
	1941, 1950, 1959, 1968, 1977, 1994, 2003, 2012, 
	2021, 2030, 2041, 2052, 2065, 2074, 2087, 2096, 
	2105, 2130, 2139, 2148, 2159, 2168, 2177, 2186, 
	2195, 2206, 2215, 2224, 2233, 2248, 2259, 2270, 
	2279, 2288, 2297, 2306, 2315, 2324, 2333, 2342, 
	2351, 2360, 2369, 2378, 2389, 2398, 2407, 2416, 
	2425, 2434, 2445, 2456, 2465, 2474, 2483, 2492, 
	2501, 2510, 2521, 2530, 2539, 2546, 2553, 2593, 
	2610, 2629, 2654, 2672, 2693, 2714, 2735, 2756, 
	2777, 2798, 2828, 2846, 2871, 2892, 2913, 2934, 
	2955, 2976, 3006, 3027, 3048, 3065, 3090, 3111, 
	3132, 3153, 3174, 3203, 3224, 3245, 3283, 3304, 
	3334, 3387, 3408, 3429, 3450, 3471, 3492, 3513, 
	3534, 3555, 3576, 3597, 3618, 3639, 3657, 3691, 
	3712, 3733, 3754, 3775, 3796, 3817, 3842, 3863, 
	3884, 3905, 3931, 3952, 3973, 3994, 4015, 4036, 
	4057, 4078, 4099, 4120, 4141, 4167, 4188, 4209, 
	4227, 4280, 4301, 4322, 4347, 4368, 4389, 4410, 
	4431, 4452, 4473, 4508, 4529, 4550, 4571, 4592, 
	4613, 4634, 4655, 4676, 4697, 4722, 4747, 4768, 
	4789, 4810, 4831, 4856, 4881, 4906, 4944, 4973, 
	5002, 5023, 5044, 5073, 5094, 5115, 5136, 5157, 
	5186, 5211, 5232, 5257, 5278, 5299, 5324, 5345, 
	5378, 5399, 5420, 5441, 5462, 5483, 5504, 5525, 
	5546, 5567, 5588, 5625, 5650, 5671, 5692, 5713, 
	5734, 5755, 5784, 5805, 5830, 5855, 5876, 5901, 
	5922, 5943, 5970, 5991, 6012, 6045, 6066, 6087, 
	6108, 6133, 6154, 6175, 6196, 6217, 6242, 6263, 
	6284, 6305, 6326, 6363, 6384, 6405, 6426, 6447, 
	6472, 6497, 6526, 6547, 6576, 6597, 6618, 6671, 
	6692, 6713, 6738, 6759, 6780, 6801, 6822, 6847, 
	6868, 6889, 6910, 6943, 6968, 6993, 7014, 7035, 
	7056, 7077, 7098, 7119, 7140, 7161, 7182, 7203, 
	7224, 7245, 7270, 7291, 7312, 7333, 7354, 7375, 
	7400, 7425, 7446, 7467, 7488, 7509, 7530, 7551, 
	7576, 7597
};
static const short _lexer_trans_keys[] = {
	35, 45, 34, 35, 45, 9, 32, 66, 
	67, 68, 72, 73, 83, 98, 99, 100, 
	104, 105, 115, 67, 99, 9, 32, 41, 
	43, 45, 9, 32, 41, 43, 45, 69, 
	101, 9, 32, 41, 43, 45, 76, 108, 
	9, 32, 41, 43, 45, 88, 89, 120, 
	121, 9, 32, 41, 43, 45, 9, 32, 
	41, 43, 45, 80, 112, 9, 32, 41, 
	43, 45, 72, 104, 48, 57, 65, 70, 
	97, 102, 48, 57, 65, 70, 97, 102, 
	66, 80, 81, 87, 98, 112, 113, 119, 
	521, 544, 607, 577, 602, 609, 634, 521, 
	544, 570, 10, 33, 34, 35, 36, 37, 
	38, 39, 40, 41, 42, 43, 44, 45, 
	47, 48, 49, 58, 59, 60, 61, 62, 
	63, 64, 91, 92, 93, 94, 96, 123, 
	124, 125, 126, 127, 302, 321, 322, 323, 
	324, 325, 326, 327, 328, 329, 330, 332, 
	333, 334, 335, 336, 338, 339, 340, 341, 
	342, 344, 346, 351, 353, 354, 355, 356, 
	357, 358, 359, 360, 361, 362, 364, 365, 
	366, 367, 368, 370, 371, 372, 373, 374, 
	376, 378, 558, 577, 578, 579, 580, 581, 
	582, 583, 584, 585, 586, 588, 589, 590, 
	591, 592, 594, 595, 596, 597, 598, 600, 
	602, 607, 609, 610, 611, 612, 613, 614, 
	615, 616, 617, 618, 620, 621, 622, 623, 
	624, 626, 627, 628, 629, 630, 632, 634, 
	-128, 32, 50, 57, 331, 345, 363, 377, 
	587, 601, 619, 633, 61, 48, 57, 65, 
	70, 97, 102, 34, 48, 49, 48, 49, 
	38, 9, 32, 66, 67, 68, 72, 73, 
	83, 98, 99, 100, 104, 105, 115, 42, 
	66, 72, 88, 98, 104, 120, 48, 49, 
	50, 57, 65, 70, 97, 102, 66, 72, 
	98, 104, 48, 49, 50, 57, 65, 70, 
	97, 102, 72, 104, 48, 57, 65, 70, 
	97, 102, 72, 104, 48, 57, 65, 70, 
	97, 102, 72, 104, 48, 49, 50, 57, 
	65, 70, 97, 102, 48, 57, 65, 70, 
	97, 102, 10, 60, 61, 62, 61, 61, 
	62, 124, 39, 51, 68, 70, 76, 78, 
	83, 95, 100, 102, 108, 110, 115, 48, 
	57, 65, 90, 97, 122, 95, 48, 57, 
	65, 90, 97, 122, 50, 95, 48, 57, 
	65, 90, 97, 122, 67, 68, 95, 99, 
	100, 48, 57, 65, 90, 97, 122, 39, 
	95, 48, 57, 65, 90, 97, 122, 84, 
	95, 116, 48, 57, 65, 90, 97, 122, 
	68, 95, 100, 48, 57, 65, 90, 97, 
	122, 68, 95, 100, 48, 57, 65, 90, 
	97, 122, 77, 95, 109, 48, 57, 65, 
	90, 97, 122, 80, 95, 112, 48, 57, 
	65, 90, 97, 122, 67, 95, 99, 48, 
	57, 65, 90, 97, 122, 39, 67, 73, 
	79, 95, 99, 105, 111, 48, 57, 65, 
	90, 97, 122, 39, 95, 48, 57, 65, 
	90, 97, 122, 78, 84, 95, 110, 116, 
	48, 57, 65, 90, 97, 122, 65, 95, 
	97, 48, 57, 66, 90, 98, 122, 82, 
	95, 114, 48, 57, 65, 90, 97, 122, 
	89, 95, 121, 48, 57, 65, 90, 97, 
	122, 79, 95, 111, 48, 57, 65, 90, 
	97, 122, 76, 95, 108, 48, 57, 65, 
	90, 97, 122, 39, 65, 67, 80, 95, 
	97, 99, 112, 48, 57, 66, 90, 98, 
	122, 76, 95, 108, 48, 57, 65, 90, 
	97, 122, 76, 95, 108, 48, 57, 65, 
	90, 97, 122, 95, 48, 57, 65, 90, 
	97, 122, 79, 80, 95, 111, 112, 48, 
	57, 65, 90, 97, 122, 90, 95, 122, 
	48, 57, 65, 89, 97, 121, 75, 95, 
	107, 48, 57, 65, 90, 97, 122, 71, 
	95, 103, 48, 57, 65, 90, 97, 122, 
	70, 95, 102, 48, 57, 65, 90, 97, 
	122, 68, 73, 76, 95, 100, 105, 108, 
	48, 57, 65, 90, 97, 122, 82, 95, 
	114, 48, 57, 65, 90, 97, 122, 82, 
	95, 114, 48, 57, 65, 90, 97, 122, 
	39, 65, 69, 73, 74, 83, 95, 97, 
	101, 105, 106, 115, 48, 57, 66, 90, 
	98, 122, 65, 95, 97, 48, 57, 66, 
	90, 98, 122, 39, 67, 70, 72, 95, 
	99, 102, 104, 48, 57, 65, 90, 97, 
	122, 66, 67, 71, 73, 77, 81, 83, 
	86, 87, 95, 98, 99, 103, 105, 109, 
	113, 115, 118, 119, 48, 57, 65, 90, 
	97, 122, 82, 95, 114, 48, 57, 65, 
	90, 97, 122, 79, 95, 111, 48, 57, 
	65, 90, 97, 122, 85, 95, 117, 48, 
	57, 65, 90, 97, 122, 80, 95, 112, 
	48, 57, 65, 90, 97, 122, 78, 95, 
	110, 48, 57, 65, 90, 97, 122, 69, 
	95, 101, 48, 57, 65, 90, 97, 122, 
	65, 95, 97, 48, 57, 66, 90, 98, 
	122, 82, 95, 114, 48, 57, 65, 90, 
	97, 122, 83, 95, 115, 48, 57, 65, 
	90, 97, 122, 76, 95, 108, 48, 57, 
	65, 90, 97, 122, 78, 95, 110, 48, 
	57, 65, 90, 97, 122, 90, 95, 122, 
	48, 57, 65, 89, 97, 121, 46, 95, 
	48, 57, 65, 90, 97, 122, 39, 73, 
	76, 78, 88, 95, 105, 108, 110, 120, 
	48, 57, 65, 90, 97, 122, 82, 95, 
	114, 48, 57, 65, 90, 97, 122, 83, 
	95, 115, 48, 57, 65, 90, 97, 122, 
	69, 95, 101, 48, 57, 65, 90, 97, 
	122, 68, 95, 100, 48, 57, 65, 90, 
	97, 122, 73, 95, 105, 48, 57, 65, 
	90, 97, 122, 70, 95, 102, 48, 57, 
	65, 90, 97, 122, 84, 88, 95, 116, 
	120, 48, 57, 65, 90, 97, 122, 69, 
	95, 101, 48, 57, 65, 90, 97, 122, 
	82, 95, 114, 48, 57, 65, 90, 97, 
	122, 78, 95, 110, 48, 57, 65, 90, 
	97, 122, 39, 73, 80, 95, 105, 112, 
	48, 57, 65, 90, 97, 122, 76, 95, 
	108, 48, 57, 65, 90, 97, 122, 76, 
	95, 108, 48, 57, 65, 90, 97, 122, 
	68, 95, 100, 48, 57, 65, 90, 97, 
	122, 69, 95, 101, 48, 57, 65, 90, 
	97, 122, 80, 95, 112, 48, 57, 65, 
	90, 97, 122, 76, 95, 108, 48, 57, 
	65, 90, 97, 122, 79, 95, 111, 48, 
	57, 65, 90, 97, 122, 66, 95, 98, 
	48, 57, 65, 90, 97, 122, 65, 95, 
	97, 48, 57, 66, 90, 98, 122, 76, 
	95, 108, 48, 57, 65, 90, 97, 122, 
	39, 65, 76, 95, 97, 108, 48, 57, 
	66, 90, 98, 122, 76, 95, 108, 48, 
	57, 65, 90, 97, 122, 84, 95, 116, 
	48, 57, 65, 90, 97, 122, 39, 95, 
	48, 57, 65, 90, 97, 122, 68, 70, 
	73, 77, 78, 79, 80, 88, 89, 95, 
	100, 102, 105, 109, 110, 111, 112, 120, 
	121, 48, 57, 65, 90, 97, 122, 69, 
	95, 101, 48, 57, 65, 90, 97, 122, 
	84, 95, 116, 48, 57, 65, 90, 97, 
	122, 68, 78, 95, 100, 110, 48, 57, 
	65, 90, 97, 122, 69, 95, 101, 48, 
	57, 65, 90, 97, 122, 70, 95, 102, 
	48, 57, 65, 90, 97, 122, 68, 95, 
	100, 48, 57, 65, 90, 97, 122, 69, 
	95, 101, 48, 57, 65, 90, 97, 122, 
	70, 95, 102, 48, 57, 65, 90, 97, 
	122, 82, 95, 114, 48, 57, 65, 90, 
	97, 122, 48, 67, 68, 73, 86, 95, 
	99, 100, 105, 118, 49, 57, 65, 90, 
	97, 122, 76, 95, 108, 48, 57, 65, 
	90, 97, 122, 85, 95, 117, 48, 57, 
	65, 90, 97, 122, 68, 95, 100, 48, 
	57, 65, 90, 97, 122, 69, 95, 101, 
	48, 57, 65, 90, 97, 122, 82, 95, 
	114, 48, 57, 65, 90, 97, 122, 82, 
	95, 114, 48, 57, 65, 90, 97, 122, 
	79, 95, 111, 48, 57, 65, 90, 97, 
	122, 75, 95, 107, 48, 57, 65, 90, 
	97, 122, 69, 95, 101, 48, 57, 65, 
	90, 97, 122, 69, 73, 95, 101, 105, 
	48, 57, 65, 90, 97, 122, 82, 83, 
	95, 114, 115, 48, 57, 65, 90, 97, 
	122, 69, 95, 101, 48, 57, 65, 90, 
	97, 122, 83, 95, 115, 48, 57, 65, 
	90, 97, 122, 69, 95, 101, 48, 57, 
	65, 90, 97, 122, 84, 95, 116, 48, 
	57, 65, 90, 97, 122, 72, 76, 95, 
	104, 108, 48, 57, 65, 90, 97, 122, 
	72, 76, 95, 104, 108, 48, 57, 65, 
	90, 97, 122, 80, 82, 95, 112, 114, 
	48, 57, 65, 90, 97, 122, 39, 68, 
	73, 79, 83, 90, 95, 100, 105, 111, 
	115, 122, 48, 57, 65, 89, 97, 121, 
	68, 73, 80, 95, 100, 105, 112, 48, 
	57, 65, 90, 97, 122, 82, 83, 88, 
	95, 114, 115, 120, 48, 57, 65, 90, 
	97, 122, 88, 95, 120, 48, 57, 65, 
	90, 97, 122, 82, 95, 114, 48, 57, 
	65, 90, 97, 122, 82, 83, 88, 95, 
	114, 115, 120, 48, 57, 65, 90, 97, 
	122, 88, 95, 120, 48, 57, 65, 90, 
	97, 122, 82, 95, 114, 48, 57, 65, 
	90, 97, 122, 78, 95, 110, 48, 57, 
	65, 90, 97, 122, 69, 95, 101, 48, 
	57, 65, 90, 97, 122, 68, 73, 84, 
	95, 100, 105, 116, 48, 57, 65, 90, 
	97, 122, 68, 82, 95, 100, 114, 48, 
	57, 65, 90, 97, 122, 82, 95, 114, 
	48, 57, 65, 90, 97, 122, 68, 82, 
	95, 100, 114, 48, 57, 65, 90, 97, 
	122, 82, 95, 114, 48, 57, 65, 90, 
	97, 122, 79, 95, 111, 48, 57, 65, 
	90, 97, 122, 70, 78, 95, 102, 110, 
	48, 57, 65, 90, 97, 122, 70, 95, 
	102, 48, 57, 65, 90, 97, 122, 73, 
	76, 79, 85, 95, 105, 108, 111, 117, 
	48, 57, 65, 90, 97, 122, 82, 95, 
	114, 48, 57, 65, 90, 97, 122, 82, 
	95, 114, 48, 57, 65, 90, 97, 122, 
	79, 95, 111, 48, 57, 65, 90, 97, 
	122, 82, 95, 114, 48, 57, 65, 90, 
	97, 122, 84, 95, 116, 48, 57, 65, 
	90, 97, 122, 68, 95, 100, 48, 57, 
	65, 90, 97, 122, 85, 95, 117, 48, 
	57, 65, 90, 97, 122, 76, 95, 108, 
	48, 57, 65, 90, 97, 122, 69, 95, 
	101, 48, 57, 65, 90, 97, 122, 76, 
	95, 108, 48, 57, 65, 90, 97, 122, 
	67, 69, 79, 86, 90, 95, 99, 101, 
	111, 118, 122, 48, 57, 65, 89, 97, 
	121, 71, 88, 95, 103, 120, 48, 57, 
	65, 90, 97, 122, 84, 95, 116, 48, 
	57, 65, 90, 97, 122, 82, 95, 114, 
	48, 57, 65, 90, 97, 122, 69, 95, 
	101, 48, 57, 65, 90, 97, 122, 71, 
	95, 103, 48, 57, 65, 90, 97, 122, 
	80, 95, 112, 48, 57, 65, 90, 97, 
	122, 82, 84, 85, 95, 114, 116, 117, 
	48, 57, 65, 90, 97, 122, 71, 95, 
	103, 48, 57, 65, 90, 97, 122, 68, 
	73, 95, 100, 105, 48, 57, 65, 90, 
	97, 122, 77, 82, 95, 109, 114, 48, 
	57, 65, 90, 97, 122, 82, 95, 114, 
	48, 57, 65, 90, 97, 122, 77, 82, 
	95, 109, 114, 48, 57, 65, 90, 97, 
	122, 82, 95, 114, 48, 57, 65, 90, 
	97, 122, 84, 95, 116, 48, 57, 65, 
	90, 97, 122, 48, 68, 73, 95, 100, 
	105, 49, 57, 65, 90, 97, 122, 78, 
	95, 110, 48, 57, 65, 90, 97, 122, 
	66, 95, 98, 48, 57, 65, 90, 97, 
	122, 69, 73, 79, 85, 95, 101, 105, 
	111, 117, 48, 57, 65, 90, 97, 122, 
	88, 95, 120, 48, 57, 65, 90, 97, 
	122, 69, 95, 101, 48, 57, 65, 90, 
	97, 122, 76, 95, 108, 48, 57, 65, 
	90, 97, 122, 65, 68, 95, 97, 100, 
	48, 57, 66, 90, 98, 122, 68, 95, 
	100, 48, 57, 65, 90, 97, 122, 78, 
	95, 110, 48, 57, 65, 90, 97, 122, 
	80, 95, 112, 48, 57, 65, 90, 97, 
	122, 88, 95, 120, 48, 57, 65, 90, 
	97, 122, 66, 83, 95, 98, 115, 48, 
	57, 65, 90, 97, 122, 76, 95, 108, 
	48, 57, 65, 90, 97, 122, 73, 95, 
	105, 48, 57, 65, 90, 97, 122, 67, 
	95, 99, 48, 57, 65, 90, 97, 122, 
	72, 95, 104, 48, 57, 65, 90, 97, 
	122, 68, 69, 76, 82, 83, 95, 100, 
	101, 108, 114, 115, 48, 57, 65, 90, 
	97, 122, 77, 95, 109, 48, 57, 65, 
	90, 97, 122, 79, 95, 111, 48, 57, 
	65, 90, 97, 122, 68, 95, 100, 48, 
	57, 65, 90, 97, 122, 69, 95, 101, 
	48, 57, 65, 90, 97, 122, 83, 84, 
	95, 115, 116, 48, 57, 65, 90, 97, 
	122, 73, 78, 95, 105, 110, 48, 57, 
	65, 90, 97, 122, 65, 67, 68, 95, 
	97, 99, 100, 48, 57, 66, 90, 98, 
	122, 65, 95, 97, 48, 57, 66, 90, 
	98, 122, 65, 67, 68, 95, 97, 99, 
	100, 48, 57, 66, 90, 98, 122, 65, 
	95, 97, 48, 57, 66, 90, 98, 122, 
	84, 95, 116, 48, 57, 65, 90, 97, 
	122, 66, 67, 69, 76, 80, 82, 85, 
	87, 89, 95, 98, 99, 101, 108, 112, 
	114, 117, 119, 121, 48, 57, 65, 90, 
	97, 122, 67, 95, 99, 48, 57, 65, 
	90, 97, 122, 70, 95, 102, 48, 57, 
	65, 90, 97, 122, 67, 84, 95, 99, 
	116, 48, 57, 65, 90, 97, 122, 84, 
	95, 116, 48, 57, 65, 90, 97, 122, 
	73, 95, 105, 48, 57, 65, 90, 97, 
	122, 79, 95, 111, 48, 57, 65, 90, 
	97, 122, 78, 95, 110, 48, 57, 65, 
	90, 97, 122, 65, 85, 95, 97, 117, 
	48, 57, 66, 90, 98, 122, 69, 95, 
	101, 48, 57, 65, 90, 97, 122, 83, 
	95, 115, 48, 57, 65, 90, 97, 122, 
	82, 95, 114, 48, 57, 65, 90, 97, 
	122, 65, 73, 76, 80, 95, 97, 105, 
	108, 112, 48, 57, 66, 90, 98, 122, 
	65, 76, 95, 97, 108, 48, 57, 66, 
	90, 98, 122, 66, 82, 95, 98, 114, 
	48, 57, 65, 90, 97, 122, 69, 95, 
	101, 48, 57, 65, 90, 97, 122, 83, 
	95, 115, 48, 57, 65, 90, 97, 122, 
	65, 95, 97, 48, 57, 66, 90, 98, 
	122, 80, 95, 112, 48, 57, 65, 90, 
	97, 122, 78, 95, 110, 48, 57, 65, 
	90, 97, 122, 73, 95, 105, 48, 57, 
	65, 90, 97, 122, 66, 95, 98, 48, 
	57, 65, 90, 97, 122, 83, 95, 115, 
	48, 57, 65, 90, 97, 122, 67, 95, 
	99, 48, 57, 65, 90, 97, 122, 65, 
	95, 97, 48, 57, 66, 90, 98, 122, 
	76, 95, 108, 48, 57, 65, 90, 97, 
	122, 76, 95, 108, 48, 57, 65, 90, 
	97, 122, 69, 83, 95, 101, 115, 48, 
	57, 65, 90, 97, 122, 83, 95, 115, 
	48, 57, 65, 90, 97, 122, 84, 95, 
	116, 48, 57, 65, 90, 97, 122, 84, 
	95, 116, 48, 57, 65, 90, 97, 122, 
	73, 95, 105, 48, 57, 65, 90, 97, 
	122, 79, 95, 111, 48, 57, 65, 90, 
	97, 122, 77, 78, 95, 109, 110, 48, 
	57, 65, 90, 97, 122, 65, 83, 95, 
	97, 115, 48, 57, 66, 90, 98, 122, 
	68, 95, 100, 48, 57, 65, 90, 97, 
	122, 69, 95, 101, 48, 57, 65, 90, 
	97, 122, 70, 95, 102, 48, 57, 65, 
	90, 97, 122, 73, 95, 105, 48, 57, 
	65, 90, 97, 122, 78, 95, 110, 48, 
	57, 65, 90, 97, 122, 69, 95, 101, 
	48, 57, 65, 90, 97, 122, 79, 80, 
	95, 111, 112, 48, 57, 65, 90, 97, 
	122, 82, 95, 114, 48, 57, 65, 90, 
	97, 122, 67, 95, 99, 48, 57, 65, 
	90, 97, 122, 521, 544, 607, 577, 602, 
	609, 634, 607, 560, 569, 577, 602, 609, 
	634, 39, 307, 324, 326, 332, 334, 339, 
	351, 356, 358, 364, 366, 371, 521, 544, 
	563, 570, 580, 582, 588, 590, 595, 607, 
	612, 614, 620, 622, 627, 304, 313, 321, 
	346, 353, 378, 560, 569, 577, 602, 609, 
	634, 351, 521, 544, 570, 607, 304, 313, 
	321, 346, 353, 378, 560, 569, 577, 602, 
	609, 634, 306, 351, 521, 544, 562, 570, 
	607, 304, 313, 321, 346, 353, 378, 560, 
	569, 577, 602, 609, 634, 323, 324, 351, 
	355, 356, 521, 544, 570, 579, 580, 607, 
	611, 612, 304, 313, 321, 346, 353, 378, 
	560, 569, 577, 602, 609, 634, 39, 351, 
	521, 544, 570, 607, 304, 313, 321, 346, 
	353, 378, 560, 569, 577, 602, 609, 634, 
	340, 351, 372, 521, 544, 570, 596, 607, 
	628, 304, 313, 321, 346, 353, 378, 560, 
	569, 577, 602, 609, 634, 324, 351, 356, 
	521, 544, 570, 580, 607, 612, 304, 313, 
	321, 346, 353, 378, 560, 569, 577, 602, 
	609, 634, 324, 351, 356, 521, 544, 570, 
	580, 607, 612, 304, 313, 321, 346, 353, 
	378, 560, 569, 577, 602, 609, 634, 333, 
	351, 365, 521, 544, 570, 589, 607, 621, 
	304, 313, 321, 346, 353, 378, 560, 569, 
	577, 602, 609, 634, 336, 351, 368, 521, 
	544, 570, 592, 607, 624, 304, 313, 321, 
	346, 353, 378, 560, 569, 577, 602, 609, 
	634, 323, 351, 355, 521, 544, 570, 579, 
	607, 611, 304, 313, 321, 346, 353, 378, 
	560, 569, 577, 602, 609, 634, 39, 323, 
	329, 335, 351, 355, 361, 367, 521, 544, 
	570, 579, 585, 591, 607, 611, 617, 623, 
	304, 313, 321, 346, 353, 378, 560, 569, 
	577, 602, 609, 634, 39, 351, 521, 544, 
	570, 607, 304, 313, 321, 346, 353, 378, 
	560, 569, 577, 602, 609, 634, 334, 340, 
	351, 366, 372, 521, 544, 570, 590, 596, 
	607, 622, 628, 304, 313, 321, 346, 353, 
	378, 560, 569, 577, 602, 609, 634, 321, 
	351, 353, 521, 544, 570, 577, 607, 609, 
	304, 313, 322, 346, 354, 378, 560, 569, 
	578, 602, 610, 634, 338, 351, 370, 521, 
	544, 570, 594, 607, 626, 304, 313, 321, 
	346, 353, 378, 560, 569, 577, 602, 609, 
	634, 345, 351, 377, 521, 544, 570, 601, 
	607, 633, 304, 313, 321, 346, 353, 378, 
	560, 569, 577, 602, 609, 634, 335, 351, 
	367, 521, 544, 570, 591, 607, 623, 304, 
	313, 321, 346, 353, 378, 560, 569, 577, 
	602, 609, 634, 332, 351, 364, 521, 544, 
	570, 588, 607, 620, 304, 313, 321, 346, 
	353, 378, 560, 569, 577, 602, 609, 634, 
	39, 321, 323, 336, 351, 353, 355, 368, 
	521, 544, 570, 577, 579, 592, 607, 609, 
	611, 624, 304, 313, 322, 346, 354, 378, 
	560, 569, 578, 602, 610, 634, 332, 351, 
	364, 521, 544, 570, 588, 607, 620, 304, 
	313, 321, 346, 353, 378, 560, 569, 577, 
	602, 609, 634, 332, 351, 364, 521, 544, 
	570, 588, 607, 620, 304, 313, 321, 346, 
	353, 378, 560, 569, 577, 602, 609, 634, 
	351, 521, 544, 570, 607, 304, 313, 321, 
	346, 353, 378, 560, 569, 577, 602, 609, 
	634, 335, 336, 351, 367, 368, 521, 544, 
	570, 591, 592, 607, 623, 624, 304, 313, 
	321, 346, 353, 378, 560, 569, 577, 602, 
	609, 634, 346, 351, 378, 521, 544, 570, 
	602, 607, 634, 304, 313, 321, 345, 353, 
	377, 560, 569, 577, 601, 609, 633, 331, 
	351, 363, 521, 544, 570, 587, 607, 619, 
	304, 313, 321, 346, 353, 378, 560, 569, 
	577, 602, 609, 634, 327, 351, 359, 521, 
	544, 570, 583, 607, 615, 304, 313, 321, 
	346, 353, 378, 560, 569, 577, 602, 609, 
	634, 326, 351, 358, 521, 544, 570, 582, 
	607, 614, 304, 313, 321, 346, 353, 378, 
	560, 569, 577, 602, 609, 634, 324, 329, 
	332, 351, 356, 361, 364, 521, 544, 570, 
	580, 585, 588, 607, 612, 617, 620, 304, 
	313, 321, 346, 353, 378, 560, 569, 577, 
	602, 609, 634, 338, 351, 370, 521, 544, 
	570, 594, 607, 626, 304, 313, 321, 346, 
	353, 378, 560, 569, 577, 602, 609, 634, 
	338, 351, 370, 521, 544, 570, 594, 607, 
	626, 304, 313, 321, 346, 353, 378, 560, 
	569, 577, 602, 609, 634, 39, 321, 325, 
	329, 330, 339, 351, 353, 357, 361, 362, 
	371, 521, 544, 570, 577, 581, 585, 586, 
	595, 607, 609, 613, 617, 618, 627, 304, 
	313, 322, 346, 354, 378, 560, 569, 578, 
	602, 610, 634, 321, 351, 353, 521, 544, 
	570, 577, 607, 609, 304, 313, 322, 346, 
	354, 378, 560, 569, 578, 602, 610, 634, 
	39, 323, 326, 328, 351, 355, 358, 360, 
	521, 544, 570, 579, 582, 584, 607, 611, 
	614, 616, 304, 313, 321, 346, 353, 378, 
	560, 569, 577, 602, 609, 634, 322, 323, 
	327, 329, 333, 337, 339, 342, 343, 351, 
	354, 355, 359, 361, 365, 369, 371, 374, 
	375, 521, 544, 570, 578, 579, 583, 585, 
	589, 593, 595, 598, 599, 607, 610, 611, 
	615, 617, 621, 625, 627, 630, 631, 304, 
	313, 321, 346, 353, 378, 560, 569, 577, 
	602, 609, 634, 338, 351, 370, 521, 544, 
	570, 594, 607, 626, 304, 313, 321, 346, 
	353, 378, 560, 569, 577, 602, 609, 634, 
	335, 351, 367, 521, 544, 570, 591, 607, 
	623, 304, 313, 321, 346, 353, 378, 560, 
	569, 577, 602, 609, 634, 341, 351, 373, 
	521, 544, 570, 597, 607, 629, 304, 313, 
	321, 346, 353, 378, 560, 569, 577, 602, 
	609, 634, 336, 351, 368, 521, 544, 570, 
	592, 607, 624, 304, 313, 321, 346, 353, 
	378, 560, 569, 577, 602, 609, 634, 334, 
	351, 366, 521, 544, 570, 590, 607, 622, 
	304, 313, 321, 346, 353, 378, 560, 569, 
	577, 602, 609, 634, 325, 351, 357, 521, 
	544, 570, 581, 607, 613, 304, 313, 321, 
	346, 353, 378, 560, 569, 577, 602, 609, 
	634, 321, 351, 353, 521, 544, 570, 577, 
	607, 609, 304, 313, 322, 346, 354, 378, 
	560, 569, 578, 602, 610, 634, 338, 351, 
	370, 521, 544, 570, 594, 607, 626, 304, 
	313, 321, 346, 353, 378, 560, 569, 577, 
	602, 609, 634, 339, 351, 371, 521, 544, 
	570, 595, 607, 627, 304, 313, 321, 346, 
	353, 378, 560, 569, 577, 602, 609, 634, 
	332, 351, 364, 521, 544, 570, 588, 607, 
	620, 304, 313, 321, 346, 353, 378, 560, 
	569, 577, 602, 609, 634, 334, 351, 366, 
	521, 544, 570, 590, 607, 622, 304, 313, 
	321, 346, 353, 378, 560, 569, 577, 602, 
	609, 634, 346, 351, 378, 521, 544, 570, 
	602, 607, 634, 304, 313, 321, 345, 353, 
	377, 560, 569, 577, 601, 609, 633, 46, 
	351, 521, 544, 570, 607, 304, 313, 321, 
	346, 353, 378, 560, 569, 577, 602, 609, 
	634, 39, 329, 332, 334, 344, 351, 361, 
	364, 366, 376, 521, 544, 570, 585, 588, 
	590, 600, 607, 617, 620, 622, 632, 304, 
	313, 321, 346, 353, 378, 560, 569, 577, 
	602, 609, 634, 338, 351, 370, 521, 544, 
	570, 594, 607, 626, 304, 313, 321, 346, 
	353, 378, 560, 569, 577, 602, 609, 634, 
	339, 351, 371, 521, 544, 570, 595, 607, 
	627, 304, 313, 321, 346, 353, 378, 560, 
	569, 577, 602, 609, 634, 325, 351, 357, 
	521, 544, 570, 581, 607, 613, 304, 313, 
	321, 346, 353, 378, 560, 569, 577, 602, 
	609, 634, 324, 351, 356, 521, 544, 570, 
	580, 607, 612, 304, 313, 321, 346, 353, 
	378, 560, 569, 577, 602, 609, 634, 329, 
	351, 361, 521, 544, 570, 585, 607, 617, 
	304, 313, 321, 346, 353, 378, 560, 569, 
	577, 602, 609, 634, 326, 351, 358, 521, 
	544, 570, 582, 607, 614, 304, 313, 321, 
	346, 353, 378, 560, 569, 577, 602, 609, 
	634, 340, 344, 351, 372, 376, 521, 544, 
	570, 596, 600, 607, 628, 632, 304, 313, 
	321, 346, 353, 378, 560, 569, 577, 602, 
	609, 634, 325, 351, 357, 521, 544, 570, 
	581, 607, 613, 304, 313, 321, 346, 353, 
	378, 560, 569, 577, 602, 609, 634, 338, 
	351, 370, 521, 544, 570, 594, 607, 626, 
	304, 313, 321, 346, 353, 378, 560, 569, 
	577, 602, 609, 634, 334, 351, 366, 521, 
	544, 570, 590, 607, 622, 304, 313, 321, 
	346, 353, 378, 560, 569, 577, 602, 609, 
	634, 39, 329, 336, 351, 361, 368, 521, 
	544, 570, 585, 592, 607, 617, 624, 304, 
	313, 321, 346, 353, 378, 560, 569, 577, 
	602, 609, 634, 332, 351, 364, 521, 544, 
	570, 588, 607, 620, 304, 313, 321, 346, 
	353, 378, 560, 569, 577, 602, 609, 634, 
	332, 351, 364, 521, 544, 570, 588, 607, 
	620, 304, 313, 321, 346, 353, 378, 560, 
	569, 577, 602, 609, 634, 324, 351, 356, 
	521, 544, 570, 580, 607, 612, 304, 313, 
	321, 346, 353, 378, 560, 569, 577, 602, 
	609, 634, 325, 351, 357, 521, 544, 570, 
	581, 607, 613, 304, 313, 321, 346, 353, 
	378, 560, 569, 577, 602, 609, 634, 336, 
	351, 368, 521, 544, 570, 592, 607, 624, 
	304, 313, 321, 346, 353, 378, 560, 569, 
	577, 602, 609, 634, 332, 351, 364, 521, 
	544, 570, 588, 607, 620, 304, 313, 321, 
	346, 353, 378, 560, 569, 577, 602, 609, 
	634, 335, 351, 367, 521, 544, 570, 591, 
	607, 623, 304, 313, 321, 346, 353, 378, 
	560, 569, 577, 602, 609, 634, 322, 351, 
	354, 521, 544, 570, 578, 607, 610, 304, 
	313, 321, 346, 353, 378, 560, 569, 577, 
	602, 609, 634, 321, 351, 353, 521, 544, 
	570, 577, 607, 609, 304, 313, 322, 346, 
	354, 378, 560, 569, 578, 602, 610, 634, 
	332, 351, 364, 521, 544, 570, 588, 607, 
	620, 304, 313, 321, 346, 353, 378, 560, 
	569, 577, 602, 609, 634, 39, 321, 332, 
	351, 353, 364, 521, 544, 570, 577, 588, 
	607, 609, 620, 304, 313, 322, 346, 354, 
	378, 560, 569, 578, 602, 610, 634, 332, 
	351, 364, 521, 544, 570, 588, 607, 620, 
	304, 313, 321, 346, 353, 378, 560, 569, 
	577, 602, 609, 634, 340, 351, 372, 521, 
	544, 570, 596, 607, 628, 304, 313, 321, 
	346, 353, 378, 560, 569, 577, 602, 609, 
	634, 39, 351, 521, 544, 570, 607, 304, 
	313, 321, 346, 353, 378, 560, 569, 577, 
	602, 609, 634, 324, 326, 329, 333, 334, 
	335, 336, 344, 345, 351, 356, 358, 361, 
	365, 366, 367, 368, 376, 377, 521, 544, 
	570, 580, 582, 585, 589, 590, 591, 592, 
	600, 601, 607, 612, 614, 617, 621, 622, 
	623, 624, 632, 633, 304, 313, 321, 346, 
	353, 378, 560, 569, 577, 602, 609, 634, 
	325, 351, 357, 521, 544, 570, 581, 607, 
	613, 304, 313, 321, 346, 353, 378, 560, 
	569, 577, 602, 609, 634, 340, 351, 372, 
	521, 544, 570, 596, 607, 628, 304, 313, 
	321, 346, 353, 378, 560, 569, 577, 602, 
	609, 634, 324, 334, 351, 356, 366, 521, 
	544, 570, 580, 590, 607, 612, 622, 304, 
	313, 321, 346, 353, 378, 560, 569, 577, 
	602, 609, 634, 325, 351, 357, 521, 544, 
	570, 581, 607, 613, 304, 313, 321, 346, 
	353, 378, 560, 569, 577, 602, 609, 634, 
	326, 351, 358, 521, 544, 570, 582, 607, 
	614, 304, 313, 321, 346, 353, 378, 560, 
	569, 577, 602, 609, 634, 324, 351, 356, 
	521, 544, 570, 580, 607, 612, 304, 313, 
	321, 346, 353, 378, 560, 569, 577, 602, 
	609, 634, 325, 351, 357, 521, 544, 570, 
	581, 607, 613, 304, 313, 321, 346, 353, 
	378, 560, 569, 577, 602, 609, 634, 326, 
	351, 358, 521, 544, 570, 582, 607, 614, 
	304, 313, 321, 346, 353, 378, 560, 569, 
	577, 602, 609, 634, 338, 351, 370, 521, 
	544, 570, 594, 607, 626, 304, 313, 321, 
	346, 353, 378, 560, 569, 577, 602, 609, 
	634, 304, 323, 324, 329, 342, 351, 355, 
	356, 361, 374, 521, 544, 560, 570, 579, 
	580, 585, 598, 607, 611, 612, 617, 630, 
	305, 313, 321, 346, 353, 378, 561, 569, 
	577, 602, 609, 634, 332, 351, 364, 521, 
	544, 570, 588, 607, 620, 304, 313, 321, 
	346, 353, 378, 560, 569, 577, 602, 609, 
	634, 341, 351, 373, 521, 544, 570, 597, 
	607, 629, 304, 313, 321, 346, 353, 378, 
	560, 569, 577, 602, 609, 634, 324, 351, 
	356, 521, 544, 570, 580, 607, 612, 304, 
	313, 321, 346, 353, 378, 560, 569, 577, 
	602, 609, 634, 325, 351, 357, 521, 544, 
	570, 581, 607, 613, 304, 313, 321, 346, 
	353, 378, 560, 569, 577, 602, 609, 634, 
	338, 351, 370, 521, 544, 570, 594, 607, 
	626, 304, 313, 321, 346, 353, 378, 560, 
	569, 577, 602, 609, 634, 338, 351, 370, 
	521, 544, 570, 594, 607, 626, 304, 313, 
	321, 346, 353, 378, 560, 569, 577, 602, 
	609, 634, 335, 351, 367, 521, 544, 570, 
	591, 607, 623, 304, 313, 321, 346, 353, 
	378, 560, 569, 577, 602, 609, 634, 331, 
	351, 363, 521, 544, 570, 587, 607, 619, 
	304, 313, 321, 346, 353, 378, 560, 569, 
	577, 602, 609, 634, 325, 351, 357, 521, 
	544, 570, 581, 607, 613, 304, 313, 321, 
	346, 353, 378, 560, 569, 577, 602, 609, 
	634, 325, 329, 351, 357, 361, 521, 544, 
	570, 581, 585, 607, 613, 617, 304, 313, 
	321, 346, 353, 378, 560, 569, 577, 602, 
	609, 634, 338, 339, 351, 370, 371, 521, 
	544, 570, 594, 595, 607, 626, 627, 304, 
	313, 321, 346, 353, 378, 560, 569, 577, 
	602, 609, 634, 325, 351, 357, 521, 544, 
	570, 581, 607, 613, 304, 313, 321, 346, 
	353, 378, 560, 569, 577, 602, 609, 634, 
	339, 351, 371, 521, 544, 570, 595, 607, 
	627, 304, 313, 321, 346, 353, 378, 560, 
	569, 577, 602, 609, 634, 325, 351, 357, 
	521, 544, 570, 581, 607, 613, 304, 313, 
	321, 346, 353, 378, 560, 569, 577, 602, 
	609, 634, 340, 351, 372, 521, 544, 570, 
	596, 607, 628, 304, 313, 321, 346, 353, 
	378, 560, 569, 577, 602, 609, 634, 328, 
	332, 351, 360, 364, 521, 544, 570, 584, 
	588, 607, 616, 620, 304, 313, 321, 346, 
	353, 378, 560, 569, 577, 602, 609, 634, 
	328, 332, 351, 360, 364, 521, 544, 570, 
	584, 588, 607, 616, 620, 304, 313, 321, 
	346, 353, 378, 560, 569, 577, 602, 609, 
	634, 336, 338, 351, 368, 370, 521, 544, 
	570, 592, 594, 607, 624, 626, 304, 313, 
	321, 346, 353, 378, 560, 569, 577, 602, 
	609, 634, 39, 324, 329, 335, 339, 346, 
	351, 356, 361, 367, 371, 378, 521, 544, 
	570, 580, 585, 591, 595, 602, 607, 612, 
	617, 623, 627, 634, 304, 313, 321, 345, 
	353, 377, 560, 569, 577, 601, 609, 633, 
	324, 329, 336, 351, 356, 361, 368, 521, 
	544, 570, 580, 585, 592, 607, 612, 617, 
	624, 304, 313, 321, 346, 353, 378, 560, 
	569, 577, 602, 609, 634, 338, 339, 344, 
	351, 370, 371, 376, 521, 544, 570, 594, 
	595, 600, 607, 626, 627, 632, 304, 313, 
	321, 346, 353, 378, 560, 569, 577, 602, 
	609, 634, 344, 351, 376, 521, 544, 570, 
	600, 607, 632, 304, 313, 321, 346, 353, 
	378, 560, 569, 577, 602, 609, 634, 338, 
	351, 370, 521, 544, 570, 594, 607, 626, 
	304, 313, 321, 346, 353, 378, 560, 569, 
	577, 602, 609, 634, 338, 339, 344, 351, 
	370, 371, 376, 521, 544, 570, 594, 595, 
	600, 607, 626, 627, 632, 304, 313, 321, 
	346, 353, 378, 560, 569, 577, 602, 609, 
	634, 344, 351, 376, 521, 544, 570, 600, 
	607, 632, 304, 313, 321, 346, 353, 378, 
	560, 569, 577, 602, 609, 634, 338, 351, 
	370, 521, 544, 570, 594, 607, 626, 304, 
	313, 321, 346, 353, 378, 560, 569, 577, 
	602, 609, 634, 334, 351, 366, 521, 544, 
	570, 590, 607, 622, 304, 313, 321, 346, 
	353, 378, 560, 569, 577, 602, 609, 634, 
	325, 351, 357, 521, 544, 570, 581, 607, 
	613, 304, 313, 321, 346, 353, 378, 560, 
	569, 577, 602, 609, 634, 324, 329, 340, 
	351, 356, 361, 372, 521, 544, 570, 580, 
	585, 596, 607, 612, 617, 628, 304, 313, 
	321, 346, 353, 378, 560, 569, 577, 602, 
	609, 634, 324, 338, 351, 356, 370, 521, 
	544, 570, 580, 594, 607, 612, 626, 304, 
	313, 321, 346, 353, 378, 560, 569, 577, 
	602, 609, 634, 338, 351, 370, 521, 544, 
	570, 594, 607, 626, 304, 313, 321, 346, 
	353, 378, 560, 569, 577, 602, 609, 634, 
	324, 338, 351, 356, 370, 521, 544, 570, 
	580, 594, 607, 612, 626, 304, 313, 321, 
	346, 353, 378, 560, 569, 577, 602, 609, 
	634, 338, 351, 370, 521, 544, 570, 594, 
	607, 626, 304, 313, 321, 346, 353, 378, 
	560, 569, 577, 602, 609, 634, 335, 351, 
	367, 521, 544, 570, 591, 607, 623, 304, 
	313, 321, 346, 353, 378, 560, 569, 577, 
	602, 609, 634, 326, 334, 351, 358, 366, 
	521, 544, 570, 582, 590, 607, 614, 622, 
	304, 313, 321, 346, 353, 378, 560, 569, 
	577, 602, 609, 634, 326, 351, 358, 521, 
	544, 570, 582, 607, 614, 304, 313, 321, 
	346, 353, 378, 560, 569, 577, 602, 609, 
	634, 329, 332, 335, 341, 351, 361, 364, 
	367, 373, 521, 544, 570, 585, 588, 591, 
	597, 607, 617, 620, 623, 629, 304, 313, 
	321, 346, 353, 378, 560, 569, 577, 602, 
	609, 634, 338, 351, 370, 521, 544, 570, 
	594, 607, 626, 304, 313, 321, 346, 353, 
	378, 560, 569, 577, 602, 609, 634, 338, 
	351, 370, 521, 544, 570, 594, 607, 626, 
	304, 313, 321, 346, 353, 378, 560, 569, 
	577, 602, 609, 634, 335, 351, 367, 521, 
	544, 570, 591, 607, 623, 304, 313, 321, 
	346, 353, 378, 560, 569, 577, 602, 609, 
	634, 338, 351, 370, 521, 544, 570, 594, 
	607, 626, 304, 313, 321, 346, 353, 378, 
	560, 569, 577, 602, 609, 634, 340, 351, 
	372, 521, 544, 570, 596, 607, 628, 304, 
	313, 321, 346, 353, 378, 560, 569, 577, 
	602, 609, 634, 324, 351, 356, 521, 544, 
	570, 580, 607, 612, 304, 313, 321, 346, 
	353, 378, 560, 569, 577, 602, 609, 634, 
	341, 351, 373, 521, 544, 570, 597, 607, 
	629, 304, 313, 321, 346, 353, 378, 560, 
	569, 577, 602, 609, 634, 332, 351, 364, 
	521, 544, 570, 588, 607, 620, 304, 313, 
	321, 346, 353, 378, 560, 569, 577, 602, 
	609, 634, 325, 351, 357, 521, 544, 570, 
	581, 607, 613, 304, 313, 321, 346, 353, 
	378, 560, 569, 577, 602, 609, 634, 332, 
	351, 364, 521, 544, 570, 588, 607, 620, 
	304, 313, 321, 346, 353, 378, 560, 569, 
	577, 602, 609, 634, 323, 325, 335, 342, 
	346, 351, 355, 357, 367, 374, 378, 521, 
	544, 570, 579, 581, 591, 598, 602, 607, 
	611, 613, 623, 630, 634, 304, 313, 321, 
	345, 353, 377, 560, 569, 577, 601, 609, 
	633, 327, 344, 351, 359, 376, 521, 544, 
	570, 583, 600, 607, 615, 632, 304, 313, 
	321, 346, 353, 378, 560, 569, 577, 602, 
	609, 634, 340, 351, 372, 521, 544, 570, 
	596, 607, 628, 304, 313, 321, 346, 353, 
	378, 560, 569, 577, 602, 609, 634, 338, 
	351, 370, 521, 544, 570, 594, 607, 626, 
	304, 313, 321, 346, 353, 378, 560, 569, 
	577, 602, 609, 634, 325, 351, 357, 521, 
	544, 570, 581, 607, 613, 304, 313, 321, 
	346, 353, 378, 560, 569, 577, 602, 609, 
	634, 327, 351, 359, 521, 544, 570, 583, 
	607, 615, 304, 313, 321, 346, 353, 378, 
	560, 569, 577, 602, 609, 634, 336, 351, 
	368, 521, 544, 570, 592, 607, 624, 304, 
	313, 321, 346, 353, 378, 560, 569, 577, 
	602, 609, 634, 338, 340, 341, 351, 370, 
	372, 373, 521, 544, 570, 594, 596, 597, 
	607, 626, 628, 629, 304, 313, 321, 346, 
	353, 378, 560, 569, 577, 602, 609, 634, 
	327, 351, 359, 521, 544, 570, 583, 607, 
	615, 304, 313, 321, 346, 353, 378, 560, 
	569, 577, 602, 609, 634, 324, 329, 351, 
	356, 361, 521, 544, 570, 580, 585, 607, 
	612, 617, 304, 313, 321, 346, 353, 378, 
	560, 569, 577, 602, 609, 634, 333, 338, 
	351, 365, 370, 521, 544, 570, 589, 594, 
	607, 621, 626, 304, 313, 321, 346, 353, 
	378, 560, 569, 577, 602, 609, 634, 338, 
	351, 370, 521, 544, 570, 594, 607, 626, 
	304, 313, 321, 346, 353, 378, 560, 569, 
	577, 602, 609, 634, 333, 338, 351, 365, 
	370, 521, 544, 570, 589, 594, 607, 621, 
	626, 304, 313, 321, 346, 353, 378, 560, 
	569, 577, 602, 609, 634, 338, 351, 370, 
	521, 544, 570, 594, 607, 626, 304, 313, 
	321, 346, 353, 378, 560, 569, 577, 602, 
	609, 634, 340, 351, 372, 521, 544, 570, 
	596, 607, 628, 304, 313, 321, 346, 353, 
	378, 560, 569, 577, 602, 609, 634, 304, 
	324, 329, 351, 356, 361, 521, 544, 560, 
	570, 580, 585, 607, 612, 617, 305, 313, 
	321, 346, 353, 378, 561, 569, 577, 602, 
	609, 634, 334, 351, 366, 521, 544, 570, 
	590, 607, 622, 304, 313, 321, 346, 353, 
	378, 560, 569, 577, 602, 609, 634, 322, 
	351, 354, 521, 544, 570, 578, 607, 610, 
	304, 313, 321, 346, 353, 378, 560, 569, 
	577, 602, 609, 634, 325, 329, 335, 341, 
	351, 357, 361, 367, 373, 521, 544, 570, 
	581, 585, 591, 597, 607, 613, 617, 623, 
	629, 304, 313, 321, 346, 353, 378, 560, 
	569, 577, 602, 609, 634, 344, 351, 376, 
	521, 544, 570, 600, 607, 632, 304, 313, 
	321, 346, 353, 378, 560, 569, 577, 602, 
	609, 634, 325, 351, 357, 521, 544, 570, 
	581, 607, 613, 304, 313, 321, 346, 353, 
	378, 560, 569, 577, 602, 609, 634, 332, 
	351, 364, 521, 544, 570, 588, 607, 620, 
	304, 313, 321, 346, 353, 378, 560, 569, 
	577, 602, 609, 634, 321, 324, 351, 353, 
	356, 521, 544, 570, 577, 580, 607, 609, 
	612, 304, 313, 322, 346, 354, 378, 560, 
	569, 578, 602, 610, 634, 324, 351, 356, 
	521, 544, 570, 580, 607, 612, 304, 313, 
	321, 346, 353, 378, 560, 569, 577, 602, 
	609, 634, 334, 351, 366, 521, 544, 570, 
	590, 607, 622, 304, 313, 321, 346, 353, 
	378, 560, 569, 577, 602, 609, 634, 336, 
	351, 368, 521, 544, 570, 592, 607, 624, 
	304, 313, 321, 346, 353, 378, 560, 569, 
	577, 602, 609, 634, 344, 351, 376, 521, 
	544, 570, 600, 607, 632, 304, 313, 321, 
	346, 353, 378, 560, 569, 577, 602, 609, 
	634, 322, 339, 351, 354, 371, 521, 544, 
	570, 578, 595, 607, 610, 627, 304, 313, 
	321, 346, 353, 378, 560, 569, 577, 602, 
	609, 634, 332, 351, 364, 521, 544, 570, 
	588, 607, 620, 304, 313, 321, 346, 353, 
	378, 560, 569, 577, 602, 609, 634, 329, 
	351, 361, 521, 544, 570, 585, 607, 617, 
	304, 313, 321, 346, 353, 378, 560, 569, 
	577, 602, 609, 634, 323, 351, 355, 521, 
	544, 570, 579, 607, 611, 304, 313, 321, 
	346, 353, 378, 560, 569, 577, 602, 609, 
	634, 328, 351, 360, 521, 544, 570, 584, 
	607, 616, 304, 313, 321, 346, 353, 378, 
	560, 569, 577, 602, 609, 634, 324, 325, 
	332, 338, 339, 351, 356, 357, 364, 370, 
	371, 521, 544, 570, 580, 581, 588, 594, 
	595, 607, 612, 613, 620, 626, 627, 304, 
	313, 321, 346, 353, 378, 560, 569, 577, 
	602, 609, 634, 333, 351, 365, 521, 544, 
	570, 589, 607, 621, 304, 313, 321, 346, 
	353, 378, 560, 569, 577, 602, 609, 634, 
	335, 351, 367, 521, 544, 570, 591, 607, 
	623, 304, 313, 321, 346, 353, 378, 560, 
	569, 577, 602, 609, 634, 324, 351, 356, 
	521, 544, 570, 580, 607, 612, 304, 313, 
	321, 346, 353, 378, 560, 569, 577, 602, 
	609, 634, 325, 351, 357, 521, 544, 570, 
	581, 607, 613, 304, 313, 321, 346, 353, 
	378, 560, 569, 577, 602, 609, 634, 339, 
	340, 351, 371, 372, 521, 544, 570, 595, 
	596, 607, 627, 628, 304, 313, 321, 346, 
	353, 378, 560, 569, 577, 602, 609, 634, 
	329, 334, 351, 361, 366, 521, 544, 570, 
	585, 590, 607, 617, 622, 304, 313, 321, 
	346, 353, 378, 560, 569, 577, 602, 609, 
	634, 321, 323, 324, 351, 353, 355, 356, 
	521, 544, 570, 577, 579, 580, 607, 609, 
	611, 612, 304, 313, 322, 346, 354, 378, 
	560, 569, 578, 602, 610, 634, 321, 351, 
	353, 521, 544, 570, 577, 607, 609, 304, 
	313, 322, 346, 354, 378, 560, 569, 578, 
	602, 610, 634, 321, 323, 324, 351, 353, 
	355, 356, 521, 544, 570, 577, 579, 580, 
	607, 609, 611, 612, 304, 313, 322, 346, 
	354, 378, 560, 569, 578, 602, 610, 634, 
	321, 351, 353, 521, 544, 570, 577, 607, 
	609, 304, 313, 322, 346, 354, 378, 560, 
	569, 578, 602, 610, 634, 340, 351, 372, 
	521, 544, 570, 596, 607, 628, 304, 313, 
	321, 346, 353, 378, 560, 569, 577, 602, 
	609, 634, 322, 323, 325, 332, 336, 338, 
	341, 343, 345, 351, 354, 355, 357, 364, 
	368, 370, 373, 375, 377, 521, 544, 570, 
	578, 579, 581, 588, 592, 594, 597, 599, 
	601, 607, 610, 611, 613, 620, 624, 626, 
	629, 631, 633, 304, 313, 321, 346, 353, 
	378, 560, 569, 577, 602, 609, 634, 323, 
	351, 355, 521, 544, 570, 579, 607, 611, 
	304, 313, 321, 346, 353, 378, 560, 569, 
	577, 602, 609, 634, 326, 351, 358, 521, 
	544, 570, 582, 607, 614, 304, 313, 321, 
	346, 353, 378, 560, 569, 577, 602, 609, 
	634, 323, 340, 351, 355, 372, 521, 544, 
	570, 579, 596, 607, 611, 628, 304, 313, 
	321, 346, 353, 378, 560, 569, 577, 602, 
	609, 634, 340, 351, 372, 521, 544, 570, 
	596, 607, 628, 304, 313, 321, 346, 353, 
	378, 560, 569, 577, 602, 609, 634, 329, 
	351, 361, 521, 544, 570, 585, 607, 617, 
	304, 313, 321, 346, 353, 378, 560, 569, 
	577, 602, 609, 634, 335, 351, 367, 521, 
	544, 570, 591, 607, 623, 304, 313, 321, 
	346, 353, 378, 560, 569, 577, 602, 609, 
	634, 334, 351, 366, 521, 544, 570, 590, 
	607, 622, 304, 313, 321, 346, 353, 378, 
	560, 569, 577, 602, 609, 634, 321, 341, 
	351, 353, 373, 521, 544, 570, 577, 597, 
	607, 609, 629, 304, 313, 322, 346, 354, 
	378, 560, 569, 578, 602, 610, 634, 325, 
	351, 357, 521, 544, 570, 581, 607, 613, 
	304, 313, 321, 346, 353, 378, 560, 569, 
	577, 602, 609, 634, 339, 351, 371, 521, 
	544, 570, 595, 607, 627, 304, 313, 321, 
	346, 353, 378, 560, 569, 577, 602, 609, 
	634, 338, 351, 370, 521, 544, 570, 594, 
	607, 626, 304, 313, 321, 346, 353, 378, 
	560, 569, 577, 602, 609, 634, 321, 329, 
	332, 336, 351, 353, 361, 364, 368, 521, 
	544, 570, 577, 585, 588, 592, 607, 609, 
	617, 620, 624, 304, 313, 322, 346, 354, 
	378, 560, 569, 578, 602, 610, 634, 321, 
	332, 351, 353, 364, 521, 544, 570, 577, 
	588, 607, 609, 620, 304, 313, 322, 346, 
	354, 378, 560, 569, 578, 602, 610, 634, 
	322, 338, 351, 354, 370, 521, 544, 570, 
	578, 594, 607, 610, 626, 304, 313, 321, 
	346, 353, 378, 560, 569, 577, 602, 609, 
	634, 325, 351, 357, 521, 544, 570, 581, 
	607, 613, 304, 313, 321, 346, 353, 378, 
	560, 569, 577, 602, 609, 634, 339, 351, 
	371, 521, 544, 570, 595, 607, 627, 304, 
	313, 321, 346, 353, 378, 560, 569, 577, 
	602, 609, 634, 321, 351, 353, 521, 544, 
	570, 577, 607, 609, 304, 313, 322, 346, 
	354, 378, 560, 569, 578, 602, 610, 634, 
	336, 351, 368, 521, 544, 570, 592, 607, 
	624, 304, 313, 321, 346, 353, 378, 560, 
	569, 577, 602, 609, 634, 334, 351, 366, 
	521, 544, 570, 590, 607, 622, 304, 313, 
	321, 346, 353, 378, 560, 569, 577, 602, 
	609, 634, 329, 351, 361, 521, 544, 570, 
	585, 607, 617, 304, 313, 321, 346, 353, 
	378, 560, 569, 577, 602, 609, 634, 322, 
	351, 354, 521, 544, 570, 578, 607, 610, 
	304, 313, 321, 346, 353, 378, 560, 569, 
	577, 602, 609, 634, 339, 351, 371, 521, 
	544, 570, 595, 607, 627, 304, 313, 321, 
	346, 353, 378, 560, 569, 577, 602, 609, 
	634, 323, 351, 355, 521, 544, 570, 579, 
	607, 611, 304, 313, 321, 346, 353, 378, 
	560, 569, 577, 602, 609, 634, 321, 351, 
	353, 521, 544, 570, 577, 607, 609, 304, 
	313, 322, 346, 354, 378, 560, 569, 578, 
	602, 610, 634, 332, 351, 364, 521, 544, 
	570, 588, 607, 620, 304, 313, 321, 346, 
	353, 378, 560, 569, 577, 602, 609, 634, 
	332, 351, 364, 521, 544, 570, 588, 607, 
	620, 304, 313, 321, 346, 353, 378, 560, 
	569, 577, 602, 609, 634, 325, 339, 351, 
	357, 371, 521, 544, 570, 581, 595, 607, 
	613, 627, 304, 313, 321, 346, 353, 378, 
	560, 569, 577, 602, 609, 634, 339, 351, 
	371, 521, 544, 570, 595, 607, 627, 304, 
	313, 321, 346, 353, 378, 560, 569, 577, 
	602, 609, 634, 340, 351, 372, 521, 544, 
	570, 596, 607, 628, 304, 313, 321, 346, 
	353, 378, 560, 569, 577, 602, 609, 634, 
	340, 351, 372, 521, 544, 570, 596, 607, 
	628, 304, 313, 321, 346, 353, 378, 560, 
	569, 577, 602, 609, 634, 329, 351, 361, 
	521, 544, 570, 585, 607, 617, 304, 313, 
	321, 346, 353, 378, 560, 569, 577, 602, 
	609, 634, 335, 351, 367, 521, 544, 570, 
	591, 607, 623, 304, 313, 321, 346, 353, 
	378, 560, 569, 577, 602, 609, 634, 333, 
	334, 351, 365, 366, 521, 544, 570, 589, 
	590, 607, 621, 622, 304, 313, 321, 346, 
	353, 378, 560, 569, 577, 602, 609, 634, 
	321, 339, 351, 353, 371, 521, 544, 570, 
	577, 595, 607, 609, 627, 304, 313, 322, 
	346, 354, 378, 560, 569, 578, 602, 610, 
	634, 324, 351, 356, 521, 544, 570, 580, 
	607, 612, 304, 313, 321, 346, 353, 378, 
	560, 569, 577, 602, 609, 634, 325, 351, 
	357, 521, 544, 570, 581, 607, 613, 304, 
	313, 321, 346, 353, 378, 560, 569, 577, 
	602, 609, 634, 326, 351, 358, 521, 544, 
	570, 582, 607, 614, 304, 313, 321, 346, 
	353, 378, 560, 569, 577, 602, 609, 634, 
	329, 351, 361, 521, 544, 570, 585, 607, 
	617, 304, 313, 321, 346, 353, 378, 560, 
	569, 577, 602, 609, 634, 334, 351, 366, 
	521, 544, 570, 590, 607, 622, 304, 313, 
	321, 346, 353, 378, 560, 569, 577, 602, 
	609, 634, 325, 351, 357, 521, 544, 570, 
	581, 607, 613, 304, 313, 321, 346, 353, 
	378, 560, 569, 577, 602, 609, 634, 335, 
	336, 351, 367, 368, 521, 544, 570, 591, 
	592, 607, 623, 624, 304, 313, 321, 346, 
	353, 378, 560, 569, 577, 602, 609, 634, 
	338, 351, 370, 521, 544, 570, 594, 607, 
	626, 304, 313, 321, 346, 353, 378, 560, 
	569, 577, 602, 609, 634, 323, 351, 355, 
	521, 544, 570, 579, 607, 611, 304, 313, 
	321, 346, 353, 378, 560, 569, 577, 602, 
	609, 634, 0
};
static const char _lexer_single_lengths[] = {
	0, 2, 3, 14, 2, 5, 5, 2, 
	5, 2, 5, 4, 5, 5, 2, 5, 
	2, 0, 8, 3, 3, 126, 1, 0, 
	1, 0, 1, 14, 1, 6, 4, 2, 
	2, 2, 0, 1, 3, 1, 2, 1, 
	13, 1, 2, 5, 2, 3, 3, 3, 
	3, 3, 3, 8, 2, 5, 3, 3, 
	3, 3, 3, 8, 3, 3, 1, 5, 
	3, 3, 3, 3, 7, 3, 3, 12, 
	3, 8, 19, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 2, 
	10, 3, 3, 3, 3, 3, 3, 5, 
	3, 3, 3, 6, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 6, 3, 
	3, 2, 19, 3, 3, 5, 3, 3, 
	3, 3, 3, 3, 10, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 5, 5, 
	3, 3, 3, 3, 5, 5, 5, 12, 
	7, 7, 3, 3, 7, 3, 3, 3, 
	3, 7, 5, 3, 5, 3, 3, 5, 
	3, 9, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 11, 5, 3, 3, 
	3, 3, 3, 7, 3, 5, 5, 3, 
	5, 3, 3, 6, 3, 3, 9, 3, 
	3, 3, 5, 3, 3, 3, 3, 5, 
	3, 3, 3, 3, 11, 3, 3, 3, 
	3, 5, 5, 7, 3, 7, 3, 3, 
	19, 3, 3, 5, 3, 3, 3, 3, 
	5, 3, 3, 3, 9, 5, 5, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 5, 3, 3, 3, 3, 
	3, 5, 5, 3, 3, 3, 3, 3, 
	3, 5, 3, 3, 3, 1, 28, 5, 
	7, 13, 6, 9, 9, 9, 9, 9, 
	9, 18, 6, 13, 9, 9, 9, 9, 
	9, 18, 9, 9, 5, 13, 9, 9, 
	9, 9, 17, 9, 9, 26, 9, 18, 
	41, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 6, 22, 9, 
	9, 9, 9, 9, 9, 13, 9, 9, 
	9, 14, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 14, 9, 9, 6, 
	41, 9, 9, 13, 9, 9, 9, 9, 
	9, 9, 23, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 13, 13, 9, 9, 
	9, 9, 13, 13, 13, 26, 17, 17, 
	9, 9, 17, 9, 9, 9, 9, 17, 
	13, 9, 13, 9, 9, 13, 9, 21, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 25, 13, 9, 9, 9, 9, 
	9, 17, 9, 13, 13, 9, 13, 9, 
	9, 15, 9, 9, 21, 9, 9, 9, 
	13, 9, 9, 9, 9, 13, 9, 9, 
	9, 9, 25, 9, 9, 9, 9, 13, 
	13, 17, 9, 17, 9, 9, 41, 9, 
	9, 13, 9, 9, 9, 9, 13, 9, 
	9, 9, 21, 13, 13, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 13, 9, 9, 9, 9, 9, 13, 
	13, 9, 9, 9, 9, 9, 9, 13, 
	9, 9
};
static const char _lexer_range_lengths[] = {
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	3, 3, 0, 2, 0, 6, 0, 3, 
	1, 1, 0, 0, 0, 4, 4, 3, 
	3, 4, 3, 0, 0, 0, 0, 0, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 2, 3, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6
};
static const short _lexer_index_offsets[] = {
	0, 0, 3, 7, 22, 25, 31, 37, 
	40, 46, 49, 55, 60, 66, 72, 75, 
	81, 87, 91, 100, 106, 110, 243, 245, 
	249, 252, 254, 256, 271, 273, 284, 293, 
	299, 305, 312, 316, 318, 322, 324, 327, 
	329, 346, 351, 357, 366, 372, 379, 386, 
	393, 400, 407, 414, 426, 432, 441, 448, 
	455, 462, 469, 476, 488, 495, 502, 507, 
	516, 523, 530, 537, 544, 555, 562, 569, 
	585, 592, 604, 627, 634, 641, 648, 655, 
	662, 669, 676, 683, 690, 697, 704, 711, 
	717, 731, 738, 745, 752, 759, 766, 773, 
	782, 789, 796, 803, 813, 820, 827, 834, 
	841, 848, 855, 862, 869, 876, 883, 893, 
	900, 907, 913, 936, 943, 950, 959, 966, 
	973, 980, 987, 994, 1001, 1015, 1022, 1029, 
	1036, 1043, 1050, 1057, 1064, 1071, 1078, 1087, 
	1096, 1103, 1110, 1117, 1124, 1133, 1142, 1151, 
	1167, 1178, 1189, 1196, 1203, 1214, 1221, 1228, 
	1235, 1242, 1253, 1262, 1269, 1278, 1285, 1292, 
	1301, 1308, 1321, 1328, 1335, 1342, 1349, 1356, 
	1363, 1370, 1377, 1384, 1391, 1406, 1415, 1422, 
	1429, 1436, 1443, 1450, 1461, 1468, 1477, 1486, 
	1493, 1502, 1509, 1516, 1526, 1533, 1540, 1553, 
	1560, 1567, 1574, 1583, 1590, 1597, 1604, 1611, 
	1620, 1627, 1634, 1641, 1648, 1663, 1670, 1677, 
	1684, 1691, 1700, 1709, 1720, 1727, 1738, 1745, 
	1752, 1775, 1782, 1789, 1798, 1805, 1812, 1819, 
	1826, 1835, 1842, 1849, 1856, 1869, 1878, 1887, 
	1894, 1901, 1908, 1915, 1922, 1929, 1936, 1943, 
	1950, 1957, 1964, 1971, 1980, 1987, 1994, 2001, 
	2008, 2015, 2024, 2033, 2040, 2047, 2054, 2061, 
	2068, 2075, 2084, 2091, 2098, 2104, 2109, 2144, 
	2156, 2170, 2190, 2203, 2219, 2235, 2251, 2267, 
	2283, 2299, 2324, 2337, 2357, 2373, 2389, 2405, 
	2421, 2437, 2462, 2478, 2494, 2506, 2526, 2542, 
	2558, 2574, 2590, 2614, 2630, 2646, 2679, 2695, 
	2720, 2768, 2784, 2800, 2816, 2832, 2848, 2864, 
	2880, 2896, 2912, 2928, 2944, 2960, 2973, 3002, 
	3018, 3034, 3050, 3066, 3082, 3098, 3118, 3134, 
	3150, 3166, 3187, 3203, 3219, 3235, 3251, 3267, 
	3283, 3299, 3315, 3331, 3347, 3368, 3384, 3400, 
	3413, 3461, 3477, 3493, 3513, 3529, 3545, 3561, 
	3577, 3593, 3609, 3639, 3655, 3671, 3687, 3703, 
	3719, 3735, 3751, 3767, 3783, 3803, 3823, 3839, 
	3855, 3871, 3887, 3907, 3927, 3947, 3980, 4004, 
	4028, 4044, 4060, 4084, 4100, 4116, 4132, 4148, 
	4172, 4192, 4208, 4228, 4244, 4260, 4280, 4296, 
	4324, 4340, 4356, 4372, 4388, 4404, 4420, 4436, 
	4452, 4468, 4484, 4516, 4536, 4552, 4568, 4584, 
	4600, 4616, 4640, 4656, 4676, 4696, 4712, 4732, 
	4748, 4764, 4786, 4802, 4818, 4846, 4862, 4878, 
	4894, 4914, 4930, 4946, 4962, 4978, 4998, 5014, 
	5030, 5046, 5062, 5094, 5110, 5126, 5142, 5158, 
	5178, 5198, 5222, 5238, 5262, 5278, 5294, 5342, 
	5358, 5374, 5394, 5410, 5426, 5442, 5458, 5478, 
	5494, 5510, 5526, 5554, 5574, 5594, 5610, 5626, 
	5642, 5658, 5674, 5690, 5706, 5722, 5738, 5754, 
	5770, 5786, 5806, 5822, 5838, 5854, 5870, 5886, 
	5906, 5926, 5942, 5958, 5974, 5990, 6006, 6022, 
	6042, 6058
};
static const short _lexer_indicies[] = {
	1, 1, 0, 2, 1, 1, 0, 4, 
	4, 5, 6, 7, 8, 9, 10, 5, 
	6, 7, 8, 9, 10, 3, 11, 11, 
	3, 11, 11, 12, 12, 12, 3, 6, 
	6, 13, 13, 13, 3, 14, 14, 3, 
	14, 14, 15, 15, 15, 3, 16, 16, 
	3, 16, 16, 17, 17, 17, 3, 18, 
	19, 18, 19, 3, 18, 18, 20, 20, 
	20, 3, 19, 19, 21, 21, 21, 3, 
	22, 22, 3, 22, 22, 23, 23, 23, 
	3, 25, 25, 24, 24, 24, 0, 27, 
	27, 27, 26, 29, 30, 31, 32, 29, 
	30, 31, 32, 28, 34, 34, 35, 35, 
	35, 33, 36, 36, 37, 0, 39, 40, 
	41, 42, 43, 44, 45, 46, 47, 48, 
	49, 50, 51, 52, 53, 55, 56, 58, 
	59, 60, 61, 62, 63, 64, 65, 66, 
	67, 68, 66, 69, 70, 71, 72, 38, 
	73, 74, 75, 76, 77, 78, 79, 80, 
	81, 82, 83, 85, 86, 87, 88, 89, 
	90, 91, 92, 93, 94, 95, 96, 84, 
	74, 75, 76, 77, 78, 79, 80, 81, 
	82, 83, 85, 86, 87, 88, 89, 90, 
	91, 92, 93, 94, 95, 96, 97, 98, 
	99, 100, 101, 102, 103, 104, 105, 106, 
	107, 109, 110, 111, 112, 113, 114, 115, 
	116, 117, 118, 119, 120, 108, 98, 99, 
	100, 101, 102, 103, 104, 105, 106, 107, 
	109, 110, 111, 112, 113, 114, 115, 116, 
	117, 118, 119, 120, 38, 57, 84, 84, 
	108, 108, 54, 122, 121, 123, 123, 123, 
	0, 124, 125, 0, 125, 126, 128, 127, 
	4, 4, 5, 6, 7, 8, 9, 10, 
	5, 6, 7, 8, 9, 10, 129, 131, 
	130, 133, 25, 134, 133, 25, 134, 56, 
	57, 24, 24, 132, 135, 25, 135, 25, 
	56, 57, 24, 24, 132, 25, 25, 57, 
	24, 24, 132, 25, 25, 24, 24, 24, 
	136, 25, 25, 137, 24, 24, 24, 0, 
	27, 27, 27, 138, 139, 59, 141, 142, 
	143, 140, 145, 144, 147, 148, 146, 150, 
	149, 152, 153, 154, 155, 156, 157, 158, 
	84, 154, 155, 156, 157, 158, 84, 84, 
	84, 151, 84, 84, 84, 84, 0, 160, 
	84, 84, 84, 84, 159, 161, 162, 84, 
	161, 162, 84, 84, 84, 159, 164, 84, 
	84, 84, 84, 163, 165, 84, 165, 84, 
	84, 84, 159, 166, 84, 166, 84, 84, 
	84, 159, 167, 84, 167, 84, 84, 84, 
	159, 168, 84, 168, 84, 84, 84, 159, 
	169, 84, 169, 84, 84, 84, 159, 170, 
	84, 170, 84, 84, 84, 159, 172, 173, 
	174, 175, 84, 173, 174, 175, 84, 84, 
	84, 171, 177, 84, 84, 84, 84, 176, 
	178, 179, 84, 178, 179, 84, 84, 84, 
	159, 180, 84, 180, 84, 84, 84, 159, 
	181, 84, 181, 84, 84, 84, 159, 182, 
	84, 182, 84, 84, 84, 159, 183, 84, 
	183, 84, 84, 84, 159, 184, 84, 184, 
	84, 84, 84, 159, 186, 187, 188, 189, 
	84, 187, 188, 189, 84, 84, 84, 185, 
	190, 84, 190, 84, 84, 84, 159, 191, 
	84, 191, 84, 84, 84, 159, 193, 84, 
	84, 84, 192, 194, 195, 84, 194, 195, 
	84, 84, 84, 159, 196, 84, 196, 84, 
	84, 84, 159, 197, 84, 197, 84, 84, 
	84, 159, 198, 84, 198, 84, 84, 84, 
	159, 199, 84, 199, 84, 84, 84, 159, 
	201, 202, 203, 84, 201, 202, 203, 84, 
	84, 84, 200, 205, 84, 205, 84, 84, 
	84, 204, 207, 84, 207, 84, 84, 84, 
	206, 209, 210, 211, 212, 213, 214, 84, 
	210, 211, 212, 213, 214, 84, 84, 84, 
	208, 215, 84, 215, 84, 84, 84, 159, 
	217, 218, 219, 220, 84, 218, 219, 220, 
	84, 84, 84, 216, 221, 222, 223, 224, 
	225, 226, 227, 228, 229, 84, 221, 222, 
	223, 224, 225, 226, 227, 228, 229, 84, 
	84, 84, 159, 230, 84, 230, 84, 84, 
	84, 159, 231, 84, 231, 84, 84, 84, 
	159, 232, 84, 232, 84, 84, 84, 159, 
	233, 84, 233, 84, 84, 84, 159, 234, 
	84, 234, 84, 84, 84, 159, 235, 84, 
	235, 84, 84, 84, 159, 236, 84, 236, 
	84, 84, 84, 159, 237, 84, 237, 84, 
	84, 84, 159, 238, 84, 238, 84, 84, 
	84, 159, 239, 84, 239, 84, 84, 84, 
	159, 240, 84, 240, 84, 84, 84, 159, 
	241, 84, 241, 84, 84, 84, 159, 242, 
	84, 84, 84, 84, 159, 244, 245, 246, 
	247, 248, 84, 245, 246, 247, 248, 84, 
	84, 84, 243, 250, 84, 250, 84, 84, 
	84, 249, 251, 84, 251, 84, 84, 84, 
	159, 252, 84, 252, 84, 84, 84, 159, 
	253, 84, 253, 84, 84, 84, 159, 254, 
	84, 254, 84, 84, 84, 159, 255, 84, 
	255, 84, 84, 84, 159, 257, 258, 84, 
	257, 258, 84, 84, 84, 256, 259, 84, 
	259, 84, 84, 84, 159, 260, 84, 260, 
	84, 84, 84, 159, 261, 84, 261, 84, 
	84, 84, 159, 263, 264, 265, 84, 264, 
	265, 84, 84, 84, 262, 266, 84, 266, 
	84, 84, 84, 159, 267, 84, 267, 84, 
	84, 84, 159, 269, 84, 269, 84, 84, 
	84, 268, 270, 84, 270, 84, 84, 84, 
	159, 271, 84, 271, 84, 84, 84, 159, 
	272, 84, 272, 84, 84, 84, 159, 273, 
	84, 273, 84, 84, 84, 159, 274, 84, 
	274, 84, 84, 84, 159, 275, 84, 275, 
	84, 84, 84, 159, 276, 84, 276, 84, 
	84, 84, 159, 278, 279, 280, 84, 279, 
	280, 84, 84, 84, 277, 281, 84, 281, 
	84, 84, 84, 159, 282, 84, 282, 84, 
	84, 84, 159, 284, 84, 84, 84, 84, 
	283, 286, 287, 288, 289, 290, 291, 292, 
	293, 294, 84, 286, 287, 288, 289, 290, 
	291, 292, 293, 294, 84, 84, 84, 285, 
	295, 84, 295, 84, 84, 84, 159, 296, 
	84, 296, 84, 84, 84, 159, 298, 299, 
	84, 298, 299, 84, 84, 84, 297, 300, 
	84, 300, 84, 84, 84, 159, 301, 84, 
	301, 84, 84, 84, 159, 302, 84, 302, 
	84, 84, 84, 159, 303, 84, 303, 84, 
	84, 84, 159, 304, 84, 304, 84, 84, 
	84, 159, 305, 84, 305, 84, 84, 84, 
	159, 307, 308, 309, 310, 311, 84, 308, 
	309, 310, 311, 84, 84, 84, 306, 313, 
	84, 313, 84, 84, 84, 312, 314, 84, 
	314, 84, 84, 84, 159, 315, 84, 315, 
	84, 84, 84, 159, 316, 84, 316, 84, 
	84, 84, 159, 318, 84, 318, 84, 84, 
	84, 317, 320, 84, 320, 84, 84, 84, 
	319, 321, 84, 321, 84, 84, 84, 159, 
	322, 84, 322, 84, 84, 84, 159, 323, 
	84, 323, 84, 84, 84, 159, 324, 325, 
	84, 324, 325, 84, 84, 84, 159, 327, 
	328, 84, 327, 328, 84, 84, 84, 326, 
	329, 84, 329, 84, 84, 84, 159, 330, 
	84, 330, 84, 84, 84, 159, 331, 84, 
	331, 84, 84, 84, 159, 332, 84, 332, 
	84, 84, 84, 159, 334, 335, 84, 334, 
	335, 84, 84, 84, 333, 337, 338, 84, 
	337, 338, 84, 84, 84, 336, 339, 340, 
	84, 339, 340, 84, 84, 84, 159, 342, 
	343, 344, 345, 346, 347, 84, 343, 344, 
	345, 346, 347, 84, 84, 84, 341, 349, 
	350, 351, 84, 349, 350, 351, 84, 84, 
	84, 348, 353, 354, 355, 84, 353, 354, 
	355, 84, 84, 84, 352, 357, 84, 357, 
	84, 84, 84, 356, 358, 84, 358, 84, 
	84, 84, 159, 360, 361, 362, 84, 360, 
	361, 362, 84, 84, 84, 359, 364, 84, 
	364, 84, 84, 84, 363, 365, 84, 365, 
	84, 84, 84, 159, 366, 84, 366, 84, 
	84, 84, 159, 367, 84, 367, 84, 84, 
	84, 159, 368, 369, 370, 84, 368, 369, 
	370, 84, 84, 84, 159, 371, 372, 84, 
	371, 372, 84, 84, 84, 159, 373, 84, 
	373, 84, 84, 84, 159, 374, 375, 84, 
	374, 375, 84, 84, 84, 159, 376, 84, 
	376, 84, 84, 84, 159, 377, 84, 377, 
	84, 84, 84, 159, 378, 379, 84, 378, 
	379, 84, 84, 84, 159, 380, 84, 380, 
	84, 84, 84, 159, 382, 383, 384, 385, 
	84, 382, 383, 384, 385, 84, 84, 84, 
	381, 386, 84, 386, 84, 84, 84, 159, 
	387, 84, 387, 84, 84, 84, 159, 388, 
	84, 388, 84, 84, 84, 159, 389, 84, 
	389, 84, 84, 84, 159, 390, 84, 390, 
	84, 84, 84, 159, 391, 84, 391, 84, 
	84, 84, 159, 392, 84, 392, 84, 84, 
	84, 159, 393, 84, 393, 84, 84, 84, 
	159, 394, 84, 394, 84, 84, 84, 159, 
	395, 84, 395, 84, 84, 84, 159, 396, 
	397, 398, 399, 400, 84, 396, 397, 398, 
	399, 400, 84, 84, 84, 159, 401, 402, 
	84, 401, 402, 84, 84, 84, 159, 403, 
	84, 403, 84, 84, 84, 159, 404, 84, 
	404, 84, 84, 84, 159, 405, 84, 405, 
	84, 84, 84, 159, 406, 84, 406, 84, 
	84, 84, 159, 407, 84, 407, 84, 84, 
	84, 159, 408, 409, 410, 84, 408, 409, 
	410, 84, 84, 84, 159, 412, 84, 412, 
	84, 84, 84, 411, 413, 414, 84, 413, 
	414, 84, 84, 84, 159, 415, 416, 84, 
	415, 416, 84, 84, 84, 159, 418, 84, 
	418, 84, 84, 84, 417, 419, 420, 84, 
	419, 420, 84, 84, 84, 159, 422, 84, 
	422, 84, 84, 84, 421, 423, 84, 423, 
	84, 84, 84, 159, 425, 426, 427, 84, 
	426, 427, 84, 84, 84, 424, 429, 84, 
	429, 84, 84, 84, 428, 430, 84, 430, 
	84, 84, 84, 159, 432, 433, 434, 435, 
	84, 432, 433, 434, 435, 84, 84, 84, 
	431, 436, 84, 436, 84, 84, 84, 159, 
	437, 84, 437, 84, 84, 84, 159, 438, 
	84, 438, 84, 84, 84, 159, 439, 440, 
	84, 439, 440, 84, 84, 84, 159, 441, 
	84, 441, 84, 84, 84, 159, 442, 84, 
	442, 84, 84, 84, 159, 444, 84, 444, 
	84, 84, 84, 443, 446, 84, 446, 84, 
	84, 84, 445, 447, 448, 84, 447, 448, 
	84, 84, 84, 159, 449, 84, 449, 84, 
	84, 84, 159, 450, 84, 450, 84, 84, 
	84, 159, 451, 84, 451, 84, 84, 84, 
	159, 452, 84, 452, 84, 84, 84, 159, 
	454, 455, 456, 457, 458, 84, 454, 455, 
	456, 457, 458, 84, 84, 84, 453, 459, 
	84, 459, 84, 84, 84, 159, 460, 84, 
	460, 84, 84, 84, 159, 461, 84, 461, 
	84, 84, 84, 159, 462, 84, 462, 84, 
	84, 84, 159, 463, 464, 84, 463, 464, 
	84, 84, 84, 159, 466, 467, 84, 466, 
	467, 84, 84, 84, 465, 469, 470, 471, 
	84, 469, 470, 471, 84, 84, 84, 468, 
	473, 84, 473, 84, 84, 84, 472, 475, 
	476, 477, 84, 475, 476, 477, 84, 84, 
	84, 474, 479, 84, 479, 84, 84, 84, 
	478, 480, 84, 480, 84, 84, 84, 159, 
	481, 482, 483, 484, 485, 486, 487, 488, 
	489, 84, 481, 482, 483, 484, 485, 486, 
	487, 488, 489, 84, 84, 84, 159, 490, 
	84, 490, 84, 84, 84, 159, 491, 84, 
	491, 84, 84, 84, 159, 492, 493, 84, 
	492, 493, 84, 84, 84, 159, 494, 84, 
	494, 84, 84, 84, 159, 495, 84, 495, 
	84, 84, 84, 159, 496, 84, 496, 84, 
	84, 84, 159, 497, 84, 497, 84, 84, 
	84, 159, 499, 500, 84, 499, 500, 84, 
	84, 84, 498, 501, 84, 501, 84, 84, 
	84, 159, 502, 84, 502, 84, 84, 84, 
	159, 503, 84, 503, 84, 84, 84, 159, 
	504, 505, 506, 507, 84, 504, 505, 506, 
	507, 84, 84, 84, 159, 508, 509, 84, 
	508, 509, 84, 84, 84, 159, 511, 512, 
	84, 511, 512, 84, 84, 84, 510, 513, 
	84, 513, 84, 84, 84, 159, 514, 84, 
	514, 84, 84, 84, 159, 515, 84, 515, 
	84, 84, 84, 159, 516, 84, 516, 84, 
	84, 84, 159, 518, 84, 518, 84, 84, 
	84, 517, 519, 84, 519, 84, 84, 84, 
	159, 520, 84, 520, 84, 84, 84, 159, 
	521, 84, 521, 84, 84, 84, 159, 522, 
	84, 522, 84, 84, 84, 159, 523, 84, 
	523, 84, 84, 84, 159, 524, 84, 524, 
	84, 84, 84, 159, 525, 84, 525, 84, 
	84, 84, 159, 526, 527, 84, 526, 527, 
	84, 84, 84, 159, 528, 84, 528, 84, 
	84, 84, 159, 529, 84, 529, 84, 84, 
	84, 159, 530, 84, 530, 84, 84, 84, 
	159, 532, 84, 532, 84, 84, 84, 531, 
	533, 84, 533, 84, 84, 84, 159, 534, 
	535, 84, 534, 535, 84, 84, 84, 159, 
	536, 537, 84, 536, 537, 84, 84, 84, 
	159, 538, 84, 538, 84, 84, 84, 159, 
	539, 84, 539, 84, 84, 84, 159, 540, 
	84, 540, 84, 84, 84, 159, 541, 84, 
	541, 84, 84, 84, 159, 542, 84, 542, 
	84, 84, 84, 159, 543, 84, 543, 84, 
	84, 84, 159, 544, 545, 84, 544, 545, 
	84, 84, 84, 159, 546, 84, 546, 84, 
	84, 84, 159, 547, 84, 547, 84, 84, 
	84, 159, 34, 34, 35, 35, 35, 548, 
	35, 35, 35, 35, 549, 152, 153, 154, 
	155, 156, 157, 158, 84, 154, 155, 156, 
	157, 158, 36, 36, 550, 37, 551, 552, 
	553, 554, 555, 108, 551, 552, 553, 554, 
	555, 84, 84, 84, 108, 108, 108, 151, 
	84, 36, 36, 37, 108, 84, 84, 84, 
	108, 108, 108, 0, 160, 84, 36, 36, 
	556, 37, 108, 84, 84, 84, 108, 108, 
	108, 159, 161, 162, 84, 161, 162, 36, 
	36, 37, 557, 558, 108, 557, 558, 84, 
	84, 84, 108, 108, 108, 159, 164, 84, 
	36, 36, 37, 108, 84, 84, 84, 108, 
	108, 108, 163, 165, 84, 165, 36, 36, 
	37, 559, 108, 559, 84, 84, 84, 108, 
	108, 108, 159, 166, 84, 166, 36, 36, 
	37, 560, 108, 560, 84, 84, 84, 108, 
	108, 108, 159, 167, 84, 167, 36, 36, 
	37, 561, 108, 561, 84, 84, 84, 108, 
	108, 108, 159, 168, 84, 168, 36, 36, 
	37, 562, 108, 562, 84, 84, 84, 108, 
	108, 108, 159, 169, 84, 169, 36, 36, 
	37, 563, 108, 563, 84, 84, 84, 108, 
	108, 108, 159, 170, 84, 170, 36, 36, 
	37, 564, 108, 564, 84, 84, 84, 108, 
	108, 108, 159, 172, 173, 174, 175, 84, 
	173, 174, 175, 36, 36, 37, 565, 566, 
	567, 108, 565, 566, 567, 84, 84, 84, 
	108, 108, 108, 171, 177, 84, 36, 36, 
	37, 108, 84, 84, 84, 108, 108, 108, 
	176, 178, 179, 84, 178, 179, 36, 36, 
	37, 568, 569, 108, 568, 569, 84, 84, 
	84, 108, 108, 108, 159, 180, 84, 180, 
	36, 36, 37, 570, 108, 570, 84, 84, 
	84, 108, 108, 108, 159, 181, 84, 181, 
	36, 36, 37, 571, 108, 571, 84, 84, 
	84, 108, 108, 108, 159, 182, 84, 182, 
	36, 36, 37, 572, 108, 572, 84, 84, 
	84, 108, 108, 108, 159, 183, 84, 183, 
	36, 36, 37, 573, 108, 573, 84, 84, 
	84, 108, 108, 108, 159, 184, 84, 184, 
	36, 36, 37, 574, 108, 574, 84, 84, 
	84, 108, 108, 108, 159, 186, 187, 188, 
	189, 84, 187, 188, 189, 36, 36, 37, 
	575, 576, 577, 108, 575, 576, 577, 84, 
	84, 84, 108, 108, 108, 185, 190, 84, 
	190, 36, 36, 37, 578, 108, 578, 84, 
	84, 84, 108, 108, 108, 159, 191, 84, 
	191, 36, 36, 37, 579, 108, 579, 84, 
	84, 84, 108, 108, 108, 159, 193, 36, 
	36, 37, 580, 84, 84, 84, 108, 108, 
	108, 192, 194, 195, 84, 194, 195, 36, 
	36, 37, 581, 582, 108, 581, 582, 84, 
	84, 84, 108, 108, 108, 159, 196, 84, 
	196, 36, 36, 37, 583, 108, 583, 84, 
	84, 84, 108, 108, 108, 159, 197, 84, 
	197, 36, 36, 37, 584, 108, 584, 84, 
	84, 84, 108, 108, 108, 159, 198, 84, 
	198, 36, 36, 37, 585, 108, 585, 84, 
	84, 84, 108, 108, 108, 159, 199, 84, 
	199, 36, 36, 37, 586, 108, 586, 84, 
	84, 84, 108, 108, 108, 159, 201, 202, 
	203, 84, 201, 202, 203, 36, 36, 37, 
	587, 588, 589, 108, 587, 588, 589, 84, 
	84, 84, 108, 108, 108, 200, 205, 84, 
	205, 36, 36, 37, 590, 108, 590, 84, 
	84, 84, 108, 108, 108, 204, 207, 84, 
	207, 36, 36, 37, 591, 108, 591, 84, 
	84, 84, 108, 108, 108, 206, 209, 210, 
	211, 212, 213, 214, 84, 210, 211, 212, 
	213, 214, 36, 36, 37, 592, 593, 594, 
	595, 596, 108, 592, 593, 594, 595, 596, 
	84, 84, 84, 108, 108, 108, 208, 215, 
	84, 215, 36, 36, 37, 597, 108, 597, 
	84, 84, 84, 108, 108, 108, 159, 217, 
	218, 219, 220, 84, 218, 219, 220, 36, 
	36, 37, 598, 599, 600, 108, 598, 599, 
	600, 84, 84, 84, 108, 108, 108, 216, 
	221, 222, 223, 224, 225, 226, 227, 228, 
	229, 84, 221, 222, 223, 224, 225, 226, 
	227, 228, 229, 36, 36, 37, 601, 602, 
	603, 604, 605, 606, 607, 608, 609, 108, 
	601, 602, 603, 604, 605, 606, 607, 608, 
	609, 84, 84, 84, 108, 108, 108, 159, 
	230, 84, 230, 36, 36, 37, 610, 108, 
	610, 84, 84, 84, 108, 108, 108, 159, 
	231, 84, 231, 36, 36, 37, 611, 108, 
	611, 84, 84, 84, 108, 108, 108, 159, 
	232, 84, 232, 36, 36, 37, 612, 108, 
	612, 84, 84, 84, 108, 108, 108, 159, 
	233, 84, 233, 36, 36, 37, 613, 108, 
	613, 84, 84, 84, 108, 108, 108, 159, 
	234, 84, 234, 36, 36, 37, 614, 108, 
	614, 84, 84, 84, 108, 108, 108, 159, 
	235, 84, 235, 36, 36, 37, 615, 108, 
	615, 84, 84, 84, 108, 108, 108, 159, 
	236, 84, 236, 36, 36, 37, 616, 108, 
	616, 84, 84, 84, 108, 108, 108, 159, 
	237, 84, 237, 36, 36, 37, 617, 108, 
	617, 84, 84, 84, 108, 108, 108, 159, 
	238, 84, 238, 36, 36, 37, 618, 108, 
	618, 84, 84, 84, 108, 108, 108, 159, 
	239, 84, 239, 36, 36, 37, 619, 108, 
	619, 84, 84, 84, 108, 108, 108, 159, 
	240, 84, 240, 36, 36, 37, 620, 108, 
	620, 84, 84, 84, 108, 108, 108, 159, 
	241, 84, 241, 36, 36, 37, 621, 108, 
	621, 84, 84, 84, 108, 108, 108, 159, 
	242, 84, 36, 36, 37, 108, 84, 84, 
	84, 108, 108, 108, 159, 244, 245, 246, 
	247, 248, 84, 245, 246, 247, 248, 36, 
	36, 37, 622, 623, 624, 625, 108, 622, 
	623, 624, 625, 84, 84, 84, 108, 108, 
	108, 243, 250, 84, 250, 36, 36, 37, 
	626, 108, 626, 84, 84, 84, 108, 108, 
	108, 249, 251, 84, 251, 36, 36, 37, 
	627, 108, 627, 84, 84, 84, 108, 108, 
	108, 159, 252, 84, 252, 36, 36, 37, 
	628, 108, 628, 84, 84, 84, 108, 108, 
	108, 159, 253, 84, 253, 36, 36, 37, 
	629, 108, 629, 84, 84, 84, 108, 108, 
	108, 159, 254, 84, 254, 36, 36, 37, 
	630, 108, 630, 84, 84, 84, 108, 108, 
	108, 159, 255, 84, 255, 36, 36, 37, 
	631, 108, 631, 84, 84, 84, 108, 108, 
	108, 159, 257, 258, 84, 257, 258, 36, 
	36, 37, 632, 633, 108, 632, 633, 84, 
	84, 84, 108, 108, 108, 256, 259, 84, 
	259, 36, 36, 37, 634, 108, 634, 84, 
	84, 84, 108, 108, 108, 159, 260, 84, 
	260, 36, 36, 37, 635, 108, 635, 84, 
	84, 84, 108, 108, 108, 159, 261, 84, 
	261, 36, 36, 37, 636, 108, 636, 84, 
	84, 84, 108, 108, 108, 159, 263, 264, 
	265, 84, 264, 265, 36, 36, 37, 637, 
	638, 108, 637, 638, 84, 84, 84, 108, 
	108, 108, 262, 266, 84, 266, 36, 36, 
	37, 639, 108, 639, 84, 84, 84, 108, 
	108, 108, 159, 267, 84, 267, 36, 36, 
	37, 640, 108, 640, 84, 84, 84, 108, 
	108, 108, 159, 269, 84, 269, 36, 36, 
	37, 641, 108, 641, 84, 84, 84, 108, 
	108, 108, 268, 270, 84, 270, 36, 36, 
	37, 642, 108, 642, 84, 84, 84, 108, 
	108, 108, 159, 271, 84, 271, 36, 36, 
	37, 643, 108, 643, 84, 84, 84, 108, 
	108, 108, 159, 272, 84, 272, 36, 36, 
	37, 644, 108, 644, 84, 84, 84, 108, 
	108, 108, 159, 273, 84, 273, 36, 36, 
	37, 645, 108, 645, 84, 84, 84, 108, 
	108, 108, 159, 274, 84, 274, 36, 36, 
	37, 646, 108, 646, 84, 84, 84, 108, 
	108, 108, 159, 275, 84, 275, 36, 36, 
	37, 647, 108, 647, 84, 84, 84, 108, 
	108, 108, 159, 276, 84, 276, 36, 36, 
	37, 648, 108, 648, 84, 84, 84, 108, 
	108, 108, 159, 278, 279, 280, 84, 279, 
	280, 36, 36, 37, 649, 650, 108, 649, 
	650, 84, 84, 84, 108, 108, 108, 277, 
	281, 84, 281, 36, 36, 37, 651, 108, 
	651, 84, 84, 84, 108, 108, 108, 159, 
	282, 84, 282, 36, 36, 37, 652, 108, 
	652, 84, 84, 84, 108, 108, 108, 159, 
	284, 84, 36, 36, 37, 108, 84, 84, 
	84, 108, 108, 108, 283, 286, 287, 288, 
	289, 290, 291, 292, 293, 294, 84, 286, 
	287, 288, 289, 290, 291, 292, 293, 294, 
	36, 36, 37, 653, 654, 655, 656, 657, 
	658, 659, 660, 661, 108, 653, 654, 655, 
	656, 657, 658, 659, 660, 661, 84, 84, 
	84, 108, 108, 108, 285, 295, 84, 295, 
	36, 36, 37, 662, 108, 662, 84, 84, 
	84, 108, 108, 108, 159, 296, 84, 296, 
	36, 36, 37, 663, 108, 663, 84, 84, 
	84, 108, 108, 108, 159, 298, 299, 84, 
	298, 299, 36, 36, 37, 664, 665, 108, 
	664, 665, 84, 84, 84, 108, 108, 108, 
	297, 300, 84, 300, 36, 36, 37, 666, 
	108, 666, 84, 84, 84, 108, 108, 108, 
	159, 301, 84, 301, 36, 36, 37, 667, 
	108, 667, 84, 84, 84, 108, 108, 108, 
	159, 302, 84, 302, 36, 36, 37, 668, 
	108, 668, 84, 84, 84, 108, 108, 108, 
	159, 303, 84, 303, 36, 36, 37, 669, 
	108, 669, 84, 84, 84, 108, 108, 108, 
	159, 304, 84, 304, 36, 36, 37, 670, 
	108, 670, 84, 84, 84, 108, 108, 108, 
	159, 305, 84, 305, 36, 36, 37, 671, 
	108, 671, 84, 84, 84, 108, 108, 108, 
	159, 307, 308, 309, 310, 311, 84, 308, 
	309, 310, 311, 36, 36, 672, 37, 673, 
	674, 675, 676, 108, 673, 674, 675, 676, 
	84, 84, 84, 108, 108, 108, 306, 313, 
	84, 313, 36, 36, 37, 677, 108, 677, 
	84, 84, 84, 108, 108, 108, 312, 314, 
	84, 314, 36, 36, 37, 678, 108, 678, 
	84, 84, 84, 108, 108, 108, 159, 315, 
	84, 315, 36, 36, 37, 679, 108, 679, 
	84, 84, 84, 108, 108, 108, 159, 316, 
	84, 316, 36, 36, 37, 680, 108, 680, 
	84, 84, 84, 108, 108, 108, 159, 318, 
	84, 318, 36, 36, 37, 681, 108, 681, 
	84, 84, 84, 108, 108, 108, 317, 320, 
	84, 320, 36, 36, 37, 682, 108, 682, 
	84, 84, 84, 108, 108, 108, 319, 321, 
	84, 321, 36, 36, 37, 683, 108, 683, 
	84, 84, 84, 108, 108, 108, 159, 322, 
	84, 322, 36, 36, 37, 684, 108, 684, 
	84, 84, 84, 108, 108, 108, 159, 323, 
	84, 323, 36, 36, 37, 685, 108, 685, 
	84, 84, 84, 108, 108, 108, 159, 324, 
	325, 84, 324, 325, 36, 36, 37, 686, 
	687, 108, 686, 687, 84, 84, 84, 108, 
	108, 108, 159, 327, 328, 84, 327, 328, 
	36, 36, 37, 688, 689, 108, 688, 689, 
	84, 84, 84, 108, 108, 108, 326, 329, 
	84, 329, 36, 36, 37, 690, 108, 690, 
	84, 84, 84, 108, 108, 108, 159, 330, 
	84, 330, 36, 36, 37, 691, 108, 691, 
	84, 84, 84, 108, 108, 108, 159, 331, 
	84, 331, 36, 36, 37, 692, 108, 692, 
	84, 84, 84, 108, 108, 108, 159, 332, 
	84, 332, 36, 36, 37, 693, 108, 693, 
	84, 84, 84, 108, 108, 108, 159, 334, 
	335, 84, 334, 335, 36, 36, 37, 694, 
	695, 108, 694, 695, 84, 84, 84, 108, 
	108, 108, 333, 337, 338, 84, 337, 338, 
	36, 36, 37, 696, 697, 108, 696, 697, 
	84, 84, 84, 108, 108, 108, 336, 339, 
	340, 84, 339, 340, 36, 36, 37, 698, 
	699, 108, 698, 699, 84, 84, 84, 108, 
	108, 108, 159, 342, 343, 344, 345, 346, 
	347, 84, 343, 344, 345, 346, 347, 36, 
	36, 37, 700, 701, 702, 703, 704, 108, 
	700, 701, 702, 703, 704, 84, 84, 84, 
	108, 108, 108, 341, 349, 350, 351, 84, 
	349, 350, 351, 36, 36, 37, 705, 706, 
	707, 108, 705, 706, 707, 84, 84, 84, 
	108, 108, 108, 348, 353, 354, 355, 84, 
	353, 354, 355, 36, 36, 37, 708, 709, 
	710, 108, 708, 709, 710, 84, 84, 84, 
	108, 108, 108, 352, 357, 84, 357, 36, 
	36, 37, 711, 108, 711, 84, 84, 84, 
	108, 108, 108, 356, 358, 84, 358, 36, 
	36, 37, 712, 108, 712, 84, 84, 84, 
	108, 108, 108, 159, 360, 361, 362, 84, 
	360, 361, 362, 36, 36, 37, 713, 714, 
	715, 108, 713, 714, 715, 84, 84, 84, 
	108, 108, 108, 359, 364, 84, 364, 36, 
	36, 37, 716, 108, 716, 84, 84, 84, 
	108, 108, 108, 363, 365, 84, 365, 36, 
	36, 37, 717, 108, 717, 84, 84, 84, 
	108, 108, 108, 159, 366, 84, 366, 36, 
	36, 37, 718, 108, 718, 84, 84, 84, 
	108, 108, 108, 159, 367, 84, 367, 36, 
	36, 37, 719, 108, 719, 84, 84, 84, 
	108, 108, 108, 159, 368, 369, 370, 84, 
	368, 369, 370, 36, 36, 37, 720, 721, 
	722, 108, 720, 721, 722, 84, 84, 84, 
	108, 108, 108, 159, 371, 372, 84, 371, 
	372, 36, 36, 37, 723, 724, 108, 723, 
	724, 84, 84, 84, 108, 108, 108, 159, 
	373, 84, 373, 36, 36, 37, 725, 108, 
	725, 84, 84, 84, 108, 108, 108, 159, 
	374, 375, 84, 374, 375, 36, 36, 37, 
	726, 727, 108, 726, 727, 84, 84, 84, 
	108, 108, 108, 159, 376, 84, 376, 36, 
	36, 37, 728, 108, 728, 84, 84, 84, 
	108, 108, 108, 159, 377, 84, 377, 36, 
	36, 37, 729, 108, 729, 84, 84, 84, 
	108, 108, 108, 159, 378, 379, 84, 378, 
	379, 36, 36, 37, 730, 731, 108, 730, 
	731, 84, 84, 84, 108, 108, 108, 159, 
	380, 84, 380, 36, 36, 37, 732, 108, 
	732, 84, 84, 84, 108, 108, 108, 159, 
	382, 383, 384, 385, 84, 382, 383, 384, 
	385, 36, 36, 37, 733, 734, 735, 736, 
	108, 733, 734, 735, 736, 84, 84, 84, 
	108, 108, 108, 381, 386, 84, 386, 36, 
	36, 37, 737, 108, 737, 84, 84, 84, 
	108, 108, 108, 159, 387, 84, 387, 36, 
	36, 37, 738, 108, 738, 84, 84, 84, 
	108, 108, 108, 159, 388, 84, 388, 36, 
	36, 37, 739, 108, 739, 84, 84, 84, 
	108, 108, 108, 159, 389, 84, 389, 36, 
	36, 37, 740, 108, 740, 84, 84, 84, 
	108, 108, 108, 159, 390, 84, 390, 36, 
	36, 37, 741, 108, 741, 84, 84, 84, 
	108, 108, 108, 159, 391, 84, 391, 36, 
	36, 37, 742, 108, 742, 84, 84, 84, 
	108, 108, 108, 159, 392, 84, 392, 36, 
	36, 37, 743, 108, 743, 84, 84, 84, 
	108, 108, 108, 159, 393, 84, 393, 36, 
	36, 37, 744, 108, 744, 84, 84, 84, 
	108, 108, 108, 159, 394, 84, 394, 36, 
	36, 37, 745, 108, 745, 84, 84, 84, 
	108, 108, 108, 159, 395, 84, 395, 36, 
	36, 37, 746, 108, 746, 84, 84, 84, 
	108, 108, 108, 159, 396, 397, 398, 399, 
	400, 84, 396, 397, 398, 399, 400, 36, 
	36, 37, 747, 748, 749, 750, 751, 108, 
	747, 748, 749, 750, 751, 84, 84, 84, 
	108, 108, 108, 159, 401, 402, 84, 401, 
	402, 36, 36, 37, 752, 753, 108, 752, 
	753, 84, 84, 84, 108, 108, 108, 159, 
	403, 84, 403, 36, 36, 37, 754, 108, 
	754, 84, 84, 84, 108, 108, 108, 159, 
	404, 84, 404, 36, 36, 37, 755, 108, 
	755, 84, 84, 84, 108, 108, 108, 159, 
	405, 84, 405, 36, 36, 37, 756, 108, 
	756, 84, 84, 84, 108, 108, 108, 159, 
	406, 84, 406, 36, 36, 37, 757, 108, 
	757, 84, 84, 84, 108, 108, 108, 159, 
	407, 84, 407, 36, 36, 37, 758, 108, 
	758, 84, 84, 84, 108, 108, 108, 159, 
	408, 409, 410, 84, 408, 409, 410, 36, 
	36, 37, 759, 760, 761, 108, 759, 760, 
	761, 84, 84, 84, 108, 108, 108, 159, 
	412, 84, 412, 36, 36, 37, 762, 108, 
	762, 84, 84, 84, 108, 108, 108, 411, 
	413, 414, 84, 413, 414, 36, 36, 37, 
	763, 764, 108, 763, 764, 84, 84, 84, 
	108, 108, 108, 159, 415, 416, 84, 415, 
	416, 36, 36, 37, 765, 766, 108, 765, 
	766, 84, 84, 84, 108, 108, 108, 159, 
	418, 84, 418, 36, 36, 37, 767, 108, 
	767, 84, 84, 84, 108, 108, 108, 417, 
	419, 420, 84, 419, 420, 36, 36, 37, 
	768, 769, 108, 768, 769, 84, 84, 84, 
	108, 108, 108, 159, 422, 84, 422, 36, 
	36, 37, 770, 108, 770, 84, 84, 84, 
	108, 108, 108, 421, 423, 84, 423, 36, 
	36, 37, 771, 108, 771, 84, 84, 84, 
	108, 108, 108, 159, 425, 426, 427, 84, 
	426, 427, 36, 36, 772, 37, 773, 774, 
	108, 773, 774, 84, 84, 84, 108, 108, 
	108, 424, 429, 84, 429, 36, 36, 37, 
	775, 108, 775, 84, 84, 84, 108, 108, 
	108, 428, 430, 84, 430, 36, 36, 37, 
	776, 108, 776, 84, 84, 84, 108, 108, 
	108, 159, 432, 433, 434, 435, 84, 432, 
	433, 434, 435, 36, 36, 37, 777, 778, 
	779, 780, 108, 777, 778, 779, 780, 84, 
	84, 84, 108, 108, 108, 431, 436, 84, 
	436, 36, 36, 37, 781, 108, 781, 84, 
	84, 84, 108, 108, 108, 159, 437, 84, 
	437, 36, 36, 37, 782, 108, 782, 84, 
	84, 84, 108, 108, 108, 159, 438, 84, 
	438, 36, 36, 37, 783, 108, 783, 84, 
	84, 84, 108, 108, 108, 159, 439, 440, 
	84, 439, 440, 36, 36, 37, 784, 785, 
	108, 784, 785, 84, 84, 84, 108, 108, 
	108, 159, 441, 84, 441, 36, 36, 37, 
	786, 108, 786, 84, 84, 84, 108, 108, 
	108, 159, 442, 84, 442, 36, 36, 37, 
	787, 108, 787, 84, 84, 84, 108, 108, 
	108, 159, 444, 84, 444, 36, 36, 37, 
	788, 108, 788, 84, 84, 84, 108, 108, 
	108, 443, 446, 84, 446, 36, 36, 37, 
	789, 108, 789, 84, 84, 84, 108, 108, 
	108, 445, 447, 448, 84, 447, 448, 36, 
	36, 37, 790, 791, 108, 790, 791, 84, 
	84, 84, 108, 108, 108, 159, 449, 84, 
	449, 36, 36, 37, 792, 108, 792, 84, 
	84, 84, 108, 108, 108, 159, 450, 84, 
	450, 36, 36, 37, 793, 108, 793, 84, 
	84, 84, 108, 108, 108, 159, 451, 84, 
	451, 36, 36, 37, 794, 108, 794, 84, 
	84, 84, 108, 108, 108, 159, 452, 84, 
	452, 36, 36, 37, 795, 108, 795, 84, 
	84, 84, 108, 108, 108, 159, 454, 455, 
	456, 457, 458, 84, 454, 455, 456, 457, 
	458, 36, 36, 37, 796, 797, 798, 799, 
	800, 108, 796, 797, 798, 799, 800, 84, 
	84, 84, 108, 108, 108, 453, 459, 84, 
	459, 36, 36, 37, 801, 108, 801, 84, 
	84, 84, 108, 108, 108, 159, 460, 84, 
	460, 36, 36, 37, 802, 108, 802, 84, 
	84, 84, 108, 108, 108, 159, 461, 84, 
	461, 36, 36, 37, 803, 108, 803, 84, 
	84, 84, 108, 108, 108, 159, 462, 84, 
	462, 36, 36, 37, 804, 108, 804, 84, 
	84, 84, 108, 108, 108, 159, 463, 464, 
	84, 463, 464, 36, 36, 37, 805, 806, 
	108, 805, 806, 84, 84, 84, 108, 108, 
	108, 159, 466, 467, 84, 466, 467, 36, 
	36, 37, 807, 808, 108, 807, 808, 84, 
	84, 84, 108, 108, 108, 465, 469, 470, 
	471, 84, 469, 470, 471, 36, 36, 37, 
	809, 810, 811, 108, 809, 810, 811, 84, 
	84, 84, 108, 108, 108, 468, 473, 84, 
	473, 36, 36, 37, 812, 108, 812, 84, 
	84, 84, 108, 108, 108, 472, 475, 476, 
	477, 84, 475, 476, 477, 36, 36, 37, 
	813, 814, 815, 108, 813, 814, 815, 84, 
	84, 84, 108, 108, 108, 474, 479, 84, 
	479, 36, 36, 37, 816, 108, 816, 84, 
	84, 84, 108, 108, 108, 478, 480, 84, 
	480, 36, 36, 37, 817, 108, 817, 84, 
	84, 84, 108, 108, 108, 159, 481, 482, 
	483, 484, 485, 486, 487, 488, 489, 84, 
	481, 482, 483, 484, 485, 486, 487, 488, 
	489, 36, 36, 37, 818, 819, 820, 821, 
	822, 823, 824, 825, 826, 108, 818, 819, 
	820, 821, 822, 823, 824, 825, 826, 84, 
	84, 84, 108, 108, 108, 159, 490, 84, 
	490, 36, 36, 37, 827, 108, 827, 84, 
	84, 84, 108, 108, 108, 159, 491, 84, 
	491, 36, 36, 37, 828, 108, 828, 84, 
	84, 84, 108, 108, 108, 159, 492, 493, 
	84, 492, 493, 36, 36, 37, 829, 830, 
	108, 829, 830, 84, 84, 84, 108, 108, 
	108, 159, 494, 84, 494, 36, 36, 37, 
	831, 108, 831, 84, 84, 84, 108, 108, 
	108, 159, 495, 84, 495, 36, 36, 37, 
	832, 108, 832, 84, 84, 84, 108, 108, 
	108, 159, 496, 84, 496, 36, 36, 37, 
	833, 108, 833, 84, 84, 84, 108, 108, 
	108, 159, 497, 84, 497, 36, 36, 37, 
	834, 108, 834, 84, 84, 84, 108, 108, 
	108, 159, 499, 500, 84, 499, 500, 36, 
	36, 37, 835, 836, 108, 835, 836, 84, 
	84, 84, 108, 108, 108, 498, 501, 84, 
	501, 36, 36, 37, 837, 108, 837, 84, 
	84, 84, 108, 108, 108, 159, 502, 84, 
	502, 36, 36, 37, 838, 108, 838, 84, 
	84, 84, 108, 108, 108, 159, 503, 84, 
	503, 36, 36, 37, 839, 108, 839, 84, 
	84, 84, 108, 108, 108, 159, 504, 505, 
	506, 507, 84, 504, 505, 506, 507, 36, 
	36, 37, 840, 841, 842, 843, 108, 840, 
	841, 842, 843, 84, 84, 84, 108, 108, 
	108, 159, 508, 509, 84, 508, 509, 36, 
	36, 37, 844, 845, 108, 844, 845, 84, 
	84, 84, 108, 108, 108, 159, 511, 512, 
	84, 511, 512, 36, 36, 37, 846, 847, 
	108, 846, 847, 84, 84, 84, 108, 108, 
	108, 510, 513, 84, 513, 36, 36, 37, 
	848, 108, 848, 84, 84, 84, 108, 108, 
	108, 159, 514, 84, 514, 36, 36, 37, 
	849, 108, 849, 84, 84, 84, 108, 108, 
	108, 159, 515, 84, 515, 36, 36, 37, 
	850, 108, 850, 84, 84, 84, 108, 108, 
	108, 159, 516, 84, 516, 36, 36, 37, 
	851, 108, 851, 84, 84, 84, 108, 108, 
	108, 159, 518, 84, 518, 36, 36, 37, 
	852, 108, 852, 84, 84, 84, 108, 108, 
	108, 517, 519, 84, 519, 36, 36, 37, 
	853, 108, 853, 84, 84, 84, 108, 108, 
	108, 159, 520, 84, 520, 36, 36, 37, 
	854, 108, 854, 84, 84, 84, 108, 108, 
	108, 159, 521, 84, 521, 36, 36, 37, 
	855, 108, 855, 84, 84, 84, 108, 108, 
	108, 159, 522, 84, 522, 36, 36, 37, 
	856, 108, 856, 84, 84, 84, 108, 108, 
	108, 159, 523, 84, 523, 36, 36, 37, 
	857, 108, 857, 84, 84, 84, 108, 108, 
	108, 159, 524, 84, 524, 36, 36, 37, 
	858, 108, 858, 84, 84, 84, 108, 108, 
	108, 159, 525, 84, 525, 36, 36, 37, 
	859, 108, 859, 84, 84, 84, 108, 108, 
	108, 159, 526, 527, 84, 526, 527, 36, 
	36, 37, 860, 861, 108, 860, 861, 84, 
	84, 84, 108, 108, 108, 159, 528, 84, 
	528, 36, 36, 37, 862, 108, 862, 84, 
	84, 84, 108, 108, 108, 159, 529, 84, 
	529, 36, 36, 37, 863, 108, 863, 84, 
	84, 84, 108, 108, 108, 159, 530, 84, 
	530, 36, 36, 37, 864, 108, 864, 84, 
	84, 84, 108, 108, 108, 159, 532, 84, 
	532, 36, 36, 37, 865, 108, 865, 84, 
	84, 84, 108, 108, 108, 531, 533, 84, 
	533, 36, 36, 37, 866, 108, 866, 84, 
	84, 84, 108, 108, 108, 159, 534, 535, 
	84, 534, 535, 36, 36, 37, 867, 868, 
	108, 867, 868, 84, 84, 84, 108, 108, 
	108, 159, 536, 537, 84, 536, 537, 36, 
	36, 37, 869, 870, 108, 869, 870, 84, 
	84, 84, 108, 108, 108, 159, 538, 84, 
	538, 36, 36, 37, 871, 108, 871, 84, 
	84, 84, 108, 108, 108, 159, 539, 84, 
	539, 36, 36, 37, 872, 108, 872, 84, 
	84, 84, 108, 108, 108, 159, 540, 84, 
	540, 36, 36, 37, 873, 108, 873, 84, 
	84, 84, 108, 108, 108, 159, 541, 84, 
	541, 36, 36, 37, 874, 108, 874, 84, 
	84, 84, 108, 108, 108, 159, 542, 84, 
	542, 36, 36, 37, 875, 108, 875, 84, 
	84, 84, 108, 108, 108, 159, 543, 84, 
	543, 36, 36, 37, 876, 108, 876, 84, 
	84, 84, 108, 108, 108, 159, 544, 545, 
	84, 544, 545, 36, 36, 37, 877, 878, 
	108, 877, 878, 84, 84, 84, 108, 108, 
	108, 159, 546, 84, 546, 36, 36, 37, 
	879, 108, 879, 84, 84, 84, 108, 108, 
	108, 159, 547, 84, 547, 36, 36, 37, 
	880, 108, 880, 84, 84, 84, 108, 108, 
	108, 159, 0
};
static const short _lexer_trans_targs[] = {
	21, 2, 21, 21, 3, 4, 6, 7, 
	9, 11, 14, 5, 21, 21, 8, 21, 
	10, 21, 12, 13, 21, 21, 15, 21, 
	16, 21, 21, 34, 21, 21, 21, 21, 
	21, 21, 19, 261, 20, 21, 21, 21, 
	22, 21, 21, 23, 24, 26, 21, 27, 
	21, 28, 21, 21, 21, 21, 0, 29, 
	30, 31, 21, 35, 36, 37, 38, 21, 
	24, 21, 21, 21, 21, 21, 39, 21, 
	21, 21, 40, 51, 59, 71, 88, 99, 
	105, 110, 114, 142, 41, 143, 161, 172, 
	179, 190, 204, 216, 243, 249, 41, 257, 
	41, 260, 262, 273, 281, 293, 310, 321, 
	327, 332, 336, 364, 263, 365, 383, 394, 
	401, 412, 426, 438, 465, 471, 263, 479, 
	263, 21, 21, 23, 1, 25, 21, 21, 
	21, 21, 21, 21, 21, 33, 17, 32, 
	21, 33, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 42, 43, 44, 45, 47, 48, 21, 
	41, 41, 41, 21, 21, 46, 41, 41, 
	49, 50, 41, 21, 21, 52, 53, 57, 
	21, 21, 54, 41, 55, 56, 41, 58, 
	41, 21, 21, 60, 67, 68, 61, 62, 
	21, 63, 64, 65, 41, 66, 41, 41, 
	21, 69, 70, 41, 21, 41, 21, 41, 
	21, 21, 72, 73, 41, 85, 87, 41, 
	21, 21, 41, 74, 84, 41, 41, 75, 
	79, 41, 41, 41, 81, 41, 76, 77, 
	78, 41, 80, 41, 82, 83, 41, 41, 
	86, 41, 18, 21, 21, 89, 90, 92, 
	95, 21, 41, 91, 41, 93, 94, 41, 
	21, 96, 41, 97, 98, 41, 21, 21, 
	100, 104, 101, 102, 21, 103, 41, 41, 
	106, 107, 108, 109, 41, 21, 21, 111, 
	113, 112, 41, 21, 21, 21, 115, 117, 
	123, 41, 124, 134, 135, 140, 141, 116, 
	41, 21, 118, 120, 119, 41, 121, 122, 
	41, 41, 21, 41, 125, 129, 130, 131, 
	21, 126, 127, 128, 41, 21, 41, 21, 
	41, 132, 133, 41, 41, 41, 21, 136, 
	138, 137, 41, 139, 41, 21, 41, 41, 
	21, 41, 41, 41, 41, 21, 21, 144, 
	151, 41, 153, 41, 21, 145, 148, 41, 
	21, 146, 147, 41, 21, 41, 41, 21, 
	149, 150, 41, 21, 41, 41, 152, 41, 
	154, 156, 158, 155, 41, 41, 157, 41, 
	41, 159, 160, 41, 41, 21, 162, 166, 
	167, 171, 163, 164, 165, 41, 41, 168, 
	169, 170, 41, 41, 41, 173, 178, 41, 
	41, 41, 174, 175, 176, 177, 41, 41, 
	180, 181, 186, 21, 41, 182, 184, 183, 
	41, 21, 41, 185, 41, 21, 41, 187, 
	21, 41, 41, 188, 21, 189, 41, 21, 
	41, 191, 197, 199, 192, 193, 194, 195, 
	196, 41, 41, 21, 198, 21, 41, 200, 
	203, 201, 202, 41, 41, 21, 205, 209, 
	211, 213, 215, 206, 207, 208, 41, 41, 
	210, 21, 41, 41, 21, 41, 212, 41, 
	21, 41, 21, 41, 214, 41, 21, 41, 
	41, 217, 218, 219, 228, 41, 229, 230, 
	233, 238, 41, 41, 220, 224, 221, 222, 
	223, 41, 21, 225, 226, 41, 227, 41, 
	41, 41, 41, 41, 41, 41, 21, 41, 
	231, 232, 41, 234, 235, 21, 236, 237, 
	41, 239, 240, 241, 242, 41, 244, 246, 
	245, 41, 247, 21, 248, 41, 250, 251, 
	41, 41, 252, 253, 254, 255, 256, 41, 
	258, 259, 41, 41, 21, 21, 264, 265, 
	266, 267, 269, 270, 263, 263, 263, 268, 
	263, 263, 271, 272, 263, 274, 275, 279, 
	276, 263, 277, 278, 263, 280, 263, 282, 
	289, 290, 283, 284, 285, 286, 287, 263, 
	288, 263, 263, 291, 292, 263, 263, 263, 
	294, 295, 263, 307, 309, 263, 263, 296, 
	306, 263, 263, 297, 301, 263, 263, 263, 
	303, 263, 298, 299, 300, 263, 302, 263, 
	304, 305, 263, 263, 308, 263, 311, 312, 
	314, 317, 263, 313, 263, 315, 316, 263, 
	318, 263, 319, 320, 263, 322, 326, 323, 
	324, 325, 263, 263, 328, 329, 330, 331, 
	263, 333, 335, 334, 263, 337, 339, 345, 
	263, 346, 356, 357, 362, 363, 338, 263, 
	340, 342, 341, 263, 343, 344, 263, 263, 
	263, 347, 351, 352, 353, 348, 349, 350, 
	263, 263, 263, 354, 355, 263, 263, 263, 
	358, 360, 359, 263, 361, 263, 263, 263, 
	263, 263, 263, 263, 366, 373, 263, 375, 
	263, 367, 370, 263, 368, 369, 263, 263, 
	263, 371, 372, 263, 263, 263, 374, 263, 
	376, 378, 380, 377, 263, 263, 379, 263, 
	263, 381, 382, 263, 263, 384, 388, 389, 
	393, 385, 386, 387, 263, 263, 390, 391, 
	392, 263, 263, 263, 395, 400, 263, 263, 
	263, 396, 397, 398, 399, 263, 263, 402, 
	403, 408, 263, 404, 406, 405, 263, 263, 
	407, 263, 263, 409, 263, 263, 410, 411, 
	263, 263, 413, 419, 421, 414, 415, 416, 
	417, 418, 263, 263, 420, 263, 422, 425, 
	423, 424, 263, 263, 427, 431, 433, 435, 
	437, 428, 429, 430, 263, 263, 432, 263, 
	263, 263, 434, 263, 263, 263, 436, 263, 
	263, 263, 439, 440, 441, 450, 263, 451, 
	452, 455, 460, 263, 263, 442, 446, 443, 
	444, 445, 263, 447, 448, 263, 449, 263, 
	263, 263, 263, 263, 263, 263, 263, 453, 
	454, 263, 456, 457, 458, 459, 263, 461, 
	462, 463, 464, 263, 466, 468, 467, 263, 
	469, 470, 263, 472, 473, 263, 263, 474, 
	475, 476, 477, 478, 263, 480, 481, 263, 
	263
};
static const short _lexer_trans_actions[] = {
	263, 0, 111, 255, 0, 0, 0, 0, 
	0, 0, 0, 0, 83, 95, 0, 85, 
	0, 91, 0, 0, 87, 89, 0, 93, 
	0, 109, 261, 0, 259, 97, 101, 103, 
	99, 257, 0, 0, 0, 107, 105, 7, 
	0, 115, 9, 841, 268, 0, 113, 5, 
	13, 0, 15, 17, 19, 23, 0, 829, 
	829, 829, 25, 0, 0, 0, 0, 41, 
	841, 43, 117, 45, 47, 51, 0, 55, 
	57, 21, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 826, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 304, 0, 
	274, 5, 334, 307, 280, 310, 313, 337, 
	826, 316, 340, 826, 826, 325, 292, 826, 
	826, 289, 346, 826, 826, 826, 304, 826, 
	274, 119, 33, 832, 0, 0, 253, 121, 
	11, 123, 125, 49, 247, 835, 0, 835, 
	251, 838, 249, 241, 129, 27, 29, 31, 
	131, 35, 133, 39, 37, 135, 53, 155, 
	71, 0, 0, 0, 0, 0, 0, 243, 
	382, 466, 469, 173, 81, 0, 751, 472, 
	0, 0, 265, 145, 59, 0, 0, 0, 
	163, 75, 0, 475, 0, 0, 388, 0, 
	754, 137, 61, 0, 0, 0, 0, 0, 
	181, 0, 0, 0, 814, 0, 817, 481, 
	183, 0, 0, 499, 185, 490, 187, 496, 
	147, 63, 0, 0, 508, 0, 5, 502, 
	165, 77, 505, 0, 0, 391, 394, 0, 
	0, 406, 403, 409, 0, 415, 0, 0, 
	0, 397, 0, 400, 0, 0, 412, 385, 
	0, 511, 0, 149, 65, 0, 0, 0, 
	0, 189, 349, 0, 418, 0, 0, 421, 
	191, 0, 520, 0, 0, 424, 157, 73, 
	0, 0, 0, 0, 233, 0, 697, 820, 
	0, 0, 0, 0, 427, 151, 67, 0, 
	0, 0, 523, 167, 79, 159, 0, 0, 
	0, 526, 0, 0, 0, 0, 0, 0, 
	757, 179, 0, 0, 0, 433, 0, 0, 
	436, 343, 193, 721, 0, 0, 0, 0, 
	195, 0, 0, 0, 439, 197, 538, 199, 
	544, 0, 0, 823, 760, 763, 175, 0, 
	0, 0, 766, 0, 769, 169, 319, 328, 
	171, 322, 331, 547, 550, 153, 69, 0, 
	0, 298, 0, 295, 201, 0, 0, 778, 
	203, 0, 0, 688, 205, 691, 772, 207, 
	0, 0, 682, 209, 685, 775, 0, 442, 
	0, 0, 0, 0, 781, 787, 0, 784, 
	790, 0, 0, 448, 445, 143, 0, 0, 
	0, 0, 0, 0, 0, 700, 724, 0, 
	0, 0, 451, 793, 277, 0, 0, 301, 
	271, 568, 0, 0, 0, 0, 706, 571, 
	0, 0, 0, 211, 454, 0, 0, 0, 
	577, 235, 730, 0, 580, 237, 736, 0, 
	213, 739, 586, 0, 215, 0, 679, 141, 
	286, 0, 0, 0, 0, 0, 0, 0, 
	0, 712, 709, 139, 0, 217, 703, 0, 
	0, 0, 0, 457, 595, 161, 0, 0, 
	0, 0, 0, 0, 0, 0, 796, 598, 
	0, 219, 604, 607, 221, 613, 0, 622, 
	223, 619, 225, 628, 0, 637, 227, 634, 
	640, 0, 0, 0, 0, 370, 0, 0, 
	0, 0, 643, 646, 0, 0, 0, 0, 
	0, 460, 229, 0, 0, 715, 0, 799, 
	652, 658, 655, 742, 661, 664, 177, 667, 
	0, 0, 802, 0, 0, 231, 0, 0, 
	673, 0, 0, 0, 0, 805, 0, 0, 
	0, 718, 0, 239, 0, 748, 0, 0, 
	808, 811, 0, 0, 0, 0, 0, 463, 
	0, 0, 670, 379, 127, 245, 826, 826, 
	367, 826, 826, 826, 382, 466, 469, 826, 
	751, 472, 826, 826, 265, 352, 826, 826, 
	826, 475, 826, 826, 388, 826, 754, 826, 
	826, 484, 826, 478, 826, 826, 826, 814, 
	826, 817, 481, 487, 493, 499, 490, 496, 
	826, 355, 508, 826, 826, 502, 505, 826, 
	826, 391, 394, 826, 826, 406, 403, 409, 
	826, 415, 826, 826, 826, 397, 826, 400, 
	826, 826, 412, 385, 826, 511, 514, 826, 
	826, 517, 349, 826, 418, 826, 826, 421, 
	826, 520, 826, 826, 424, 826, 826, 826, 
	694, 826, 697, 820, 826, 826, 826, 826, 
	427, 826, 358, 826, 523, 826, 430, 826, 
	526, 529, 826, 373, 361, 364, 826, 757, 
	826, 826, 826, 433, 826, 826, 436, 343, 
	721, 532, 535, 541, 826, 826, 826, 826, 
	439, 538, 544, 826, 826, 823, 760, 763, 
	826, 826, 826, 766, 826, 769, 319, 328, 
	322, 331, 547, 550, 553, 826, 298, 826, 
	295, 556, 562, 778, 559, 826, 688, 691, 
	772, 565, 826, 682, 685, 775, 826, 442, 
	826, 826, 826, 826, 781, 787, 826, 784, 
	790, 826, 826, 448, 445, 826, 826, 826, 
	826, 826, 826, 826, 700, 724, 826, 826, 
	826, 451, 793, 277, 826, 826, 301, 271, 
	568, 826, 826, 826, 826, 706, 571, 574, 
	826, 826, 454, 826, 826, 727, 577, 730, 
	733, 580, 736, 583, 739, 586, 589, 826, 
	679, 286, 826, 283, 826, 826, 826, 826, 
	826, 826, 712, 709, 592, 703, 826, 826, 
	826, 826, 457, 595, 826, 826, 610, 625, 
	826, 826, 826, 826, 796, 598, 601, 604, 
	607, 613, 616, 622, 619, 628, 631, 637, 
	634, 640, 826, 826, 826, 826, 370, 826, 
	376, 826, 826, 643, 646, 826, 649, 826, 
	826, 826, 460, 826, 826, 715, 826, 799, 
	652, 658, 655, 742, 661, 664, 667, 826, 
	826, 802, 826, 676, 826, 826, 673, 826, 
	826, 826, 826, 805, 826, 826, 826, 718, 
	745, 826, 748, 826, 826, 808, 811, 826, 
	826, 826, 826, 826, 463, 826, 826, 670, 
	379
};
static const short _lexer_to_state_actions[] = {
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 1, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0
};
static const short _lexer_from_state_actions[] = {
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 3, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0
};
static const short _lexer_eof_trans[] = {
	0, 1, 1, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	1, 27, 29, 34, 1, 0, 122, 1, 
	1, 127, 128, 130, 131, 133, 133, 133, 
	137, 1, 139, 140, 141, 145, 147, 150, 
	152, 1, 160, 160, 164, 160, 160, 160, 
	160, 160, 160, 172, 177, 160, 160, 160, 
	160, 160, 160, 186, 160, 160, 193, 160, 
	160, 160, 160, 160, 201, 205, 207, 209, 
	160, 217, 160, 160, 160, 160, 160, 160, 
	160, 160, 160, 160, 160, 160, 160, 160, 
	244, 250, 160, 160, 160, 160, 160, 257, 
	160, 160, 160, 263, 160, 160, 269, 160, 
	160, 160, 160, 160, 160, 160, 278, 160, 
	160, 284, 286, 160, 160, 298, 160, 160, 
	160, 160, 160, 160, 307, 313, 160, 160, 
	160, 318, 320, 160, 160, 160, 160, 327, 
	160, 160, 160, 160, 334, 337, 160, 342, 
	349, 353, 357, 160, 360, 364, 160, 160, 
	160, 160, 160, 160, 160, 160, 160, 160, 
	160, 382, 160, 160, 160, 160, 160, 160, 
	160, 160, 160, 160, 160, 160, 160, 160, 
	160, 160, 160, 160, 412, 160, 160, 418, 
	160, 422, 160, 425, 429, 160, 432, 160, 
	160, 160, 160, 160, 160, 444, 446, 160, 
	160, 160, 160, 160, 454, 160, 160, 160, 
	160, 160, 466, 469, 473, 475, 479, 160, 
	160, 160, 160, 160, 160, 160, 160, 160, 
	499, 160, 160, 160, 160, 160, 511, 160, 
	160, 160, 160, 518, 160, 160, 160, 160, 
	160, 160, 160, 160, 160, 160, 160, 532, 
	160, 160, 160, 160, 160, 160, 160, 160, 
	160, 160, 160, 160, 549, 550, 152, 1, 
	160, 160, 164, 160, 160, 160, 160, 160, 
	160, 172, 177, 160, 160, 160, 160, 160, 
	160, 186, 160, 160, 193, 160, 160, 160, 
	160, 160, 201, 205, 207, 209, 160, 217, 
	160, 160, 160, 160, 160, 160, 160, 160, 
	160, 160, 160, 160, 160, 160, 244, 250, 
	160, 160, 160, 160, 160, 257, 160, 160, 
	160, 263, 160, 160, 269, 160, 160, 160, 
	160, 160, 160, 160, 278, 160, 160, 284, 
	286, 160, 160, 298, 160, 160, 160, 160, 
	160, 160, 307, 313, 160, 160, 160, 318, 
	320, 160, 160, 160, 160, 327, 160, 160, 
	160, 160, 334, 337, 160, 342, 349, 353, 
	357, 160, 360, 364, 160, 160, 160, 160, 
	160, 160, 160, 160, 160, 160, 160, 382, 
	160, 160, 160, 160, 160, 160, 160, 160, 
	160, 160, 160, 160, 160, 160, 160, 160, 
	160, 160, 412, 160, 160, 418, 160, 422, 
	160, 425, 429, 160, 432, 160, 160, 160, 
	160, 160, 160, 444, 446, 160, 160, 160, 
	160, 160, 454, 160, 160, 160, 160, 160, 
	466, 469, 473, 475, 479, 160, 160, 160, 
	160, 160, 160, 160, 160, 160, 499, 160, 
	160, 160, 160, 160, 511, 160, 160, 160, 
	160, 518, 160, 160, 160, 160, 160, 160, 
	160, 160, 160, 160, 160, 532, 160, 160, 
	160, 160, 160, 160, 160, 160, 160, 160, 
	160, 160
};
static const int lexer_start = 21;
static const int lexer_error = 0;
static const int lexer_en_main = 21;
static void set_scan_buf( char *text, Bool _at_bol )
{
 str_set( input_buf, text );
 p = str_data(input_buf);
 at_bol = _at_bol;
 pe = str_data(input_buf) + str_len(input_buf);
 eof = pe;
	{
	cs = lexer_start;
	ts = 0;
	te = 0;
	act = 0;
	}
}
static tokid_t _scan_get( void )
{
	{
	int _klen;
	unsigned int _trans;
	short _widec;
	const short *_acts;
	unsigned int _nacts;
	const short *_keys;
	if ( p == pe )
		goto _test_eof;
	if ( cs == 0 )
		goto _out;
_resume:
	_acts = _lexer_actions + _lexer_from_state_actions[cs];
	_nacts = (unsigned int) *_acts++;
	while ( _nacts-- > 0 ) {
		switch ( *_acts++ ) {
	case 1:
	{ts = p;}
	break;
		}
	}
	_widec = (*p);
	_klen = _lexer_cond_lengths[cs];
	_keys = _lexer_cond_keys + (_lexer_cond_offsets[cs]*2);
	if ( _klen > 0 ) {
		const short *_lower = _keys;
		const short *_mid;
		const short *_upper = _keys + (_klen<<1) - 2;
		while (1) {
			if ( _upper < _lower )
				break;
			_mid = _lower + (((_upper-_lower) >> 1) & ~1);
			if ( _widec < _mid[0] )
				_upper = _mid - 2;
			else if ( _widec > _mid[1] )
				_lower = _mid + 2;
			else {
				switch ( _lexer_cond_spaces[_lexer_cond_offsets[cs] + ((_mid - _keys)>>1)] ) {
	case 0: {
		_widec = (short)(128 + ((*p) - -128));
		if ( 
 at_bol  ) _widec += 256;
		break;
	}
				}
				break;
			}
		}
	}
	_keys = _lexer_trans_keys + _lexer_key_offsets[cs];
	_trans = _lexer_index_offsets[cs];
	_klen = _lexer_single_lengths[cs];
	if ( _klen > 0 ) {
		const short *_lower = _keys;
		const short *_mid;
		const short *_upper = _keys + _klen - 1;
		while (1) {
			if ( _upper < _lower )
				break;
			_mid = _lower + ((_upper-_lower) >> 1);
			if ( _widec < *_mid )
				_upper = _mid - 1;
			else if ( _widec > *_mid )
				_lower = _mid + 1;
			else {
				_trans += (unsigned int)(_mid - _keys);
				goto _match;
			}
		}
		_keys += _klen;
		_trans += _klen;
	}
	_klen = _lexer_range_lengths[cs];
	if ( _klen > 0 ) {
		const short *_lower = _keys;
		const short *_mid;
		const short *_upper = _keys + (_klen<<1) - 2;
		while (1) {
			if ( _upper < _lower )
				break;
			_mid = _lower + (((_upper-_lower) >> 1) & ~1);
			if ( _widec < _mid[0] )
				_upper = _mid - 2;
			else if ( _widec > _mid[1] )
				_lower = _mid + 2;
			else {
				_trans += (unsigned int)((_mid - _keys)>>1);
				goto _match;
			}
		}
		_trans += _klen;
	}
_match:
	_trans = _lexer_indicies[_trans];
_eof_trans:
	cs = _lexer_trans_targs[_trans];
	if ( _lexer_trans_actions[_trans] == 0 )
		goto _again;
	_acts = _lexer_actions + _lexer_trans_actions[_trans];
	_nacts = (unsigned int) *_acts++;
	while ( _nacts-- > 0 )
	{
		switch ( *_acts++ )
		{
	case 2:
	{te = p+1;}
	break;
	case 3:
	{act = 1;}
	break;
	case 4:
	{act = 5;}
	break;
	case 5:
	{act = 37;}
	break;
	case 6:
	{act = 38;}
	break;
	case 7:
	{act = 39;}
	break;
	case 8:
	{act = 40;}
	break;
	case 9:
	{act = 41;}
	break;
	case 10:
	{act = 42;}
	break;
	case 11:
	{act = 43;}
	break;
	case 12:
	{act = 44;}
	break;
	case 13:
	{act = 45;}
	break;
	case 14:
	{act = 46;}
	break;
	case 15:
	{act = 47;}
	break;
	case 16:
	{act = 48;}
	break;
	case 17:
	{act = 49;}
	break;
	case 18:
	{act = 50;}
	break;
	case 19:
	{act = 51;}
	break;
	case 20:
	{act = 52;}
	break;
	case 21:
	{act = 53;}
	break;
	case 22:
	{act = 54;}
	break;
	case 23:
	{act = 55;}
	break;
	case 24:
	{act = 56;}
	break;
	case 25:
	{act = 57;}
	break;
	case 26:
	{act = 58;}
	break;
	case 27:
	{act = 59;}
	break;
	case 28:
	{act = 60;}
	break;
	case 29:
	{act = 61;}
	break;
	case 30:
	{act = 62;}
	break;
	case 31:
	{act = 63;}
	break;
	case 32:
	{act = 64;}
	break;
	case 33:
	{act = 65;}
	break;
	case 34:
	{act = 66;}
	break;
	case 35:
	{act = 67;}
	break;
	case 36:
	{act = 68;}
	break;
	case 37:
	{act = 69;}
	break;
	case 38:
	{act = 70;}
	break;
	case 39:
	{act = 71;}
	break;
	case 40:
	{act = 72;}
	break;
	case 41:
	{act = 73;}
	break;
	case 42:
	{act = 93;}
	break;
	case 43:
	{act = 94;}
	break;
	case 44:
	{act = 95;}
	break;
	case 45:
	{act = 96;}
	break;
	case 46:
	{act = 97;}
	break;
	case 47:
	{act = 98;}
	break;
	case 48:
	{act = 99;}
	break;
	case 49:
	{act = 100;}
	break;
	case 50:
	{act = 101;}
	break;
	case 51:
	{act = 102;}
	break;
	case 52:
	{act = 103;}
	break;
	case 53:
	{act = 104;}
	break;
	case 54:
	{act = 105;}
	break;
	case 55:
	{act = 106;}
	break;
	case 56:
	{act = 107;}
	break;
	case 57:
	{act = 108;}
	break;
	case 58:
	{act = 109;}
	break;
	case 59:
	{act = 110;}
	break;
	case 60:
	{act = 111;}
	break;
	case 61:
	{act = 112;}
	break;
	case 62:
	{act = 113;}
	break;
	case 63:
	{act = 114;}
	break;
	case 64:
	{act = 115;}
	break;
	case 65:
	{act = 116;}
	break;
	case 66:
	{act = 117;}
	break;
	case 67:
	{act = 118;}
	break;
	case 68:
	{act = 119;}
	break;
	case 69:
	{act = 120;}
	break;
	case 70:
	{act = 125;}
	break;
	case 71:
	{act = 126;}
	break;
	case 72:
	{act = 127;}
	break;
	case 73:
	{act = 128;}
	break;
	case 74:
	{act = 129;}
	break;
	case 75:
	{act = 130;}
	break;
	case 76:
	{act = 131;}
	break;
	case 77:
	{act = 132;}
	break;
	case 78:
	{act = 133;}
	break;
	case 79:
	{act = 134;}
	break;
	case 80:
	{act = 135;}
	break;
	case 81:
	{act = 136;}
	break;
	case 82:
	{act = 137;}
	break;
	case 83:
	{act = 138;}
	break;
	case 84:
	{act = 139;}
	break;
	case 85:
	{act = 140;}
	break;
	case 86:
	{act = 141;}
	break;
	case 87:
	{act = 142;}
	break;
	case 88:
	{act = 143;}
	break;
	case 89:
	{act = 144;}
	break;
	case 90:
	{act = 145;}
	break;
	case 91:
	{act = 146;}
	break;
	case 92:
	{act = 147;}
	break;
	case 93:
	{act = 148;}
	break;
	case 94:
	{act = 149;}
	break;
	case 95:
	{act = 150;}
	break;
	case 96:
	{act = 151;}
	break;
	case 97:
	{act = 152;}
	break;
	case 98:
	{act = 153;}
	break;
	case 99:
	{act = 154;}
	break;
	case 100:
	{act = 155;}
	break;
	case 101:
	{act = 156;}
	break;
	case 102:
	{act = 157;}
	break;
	case 103:
	{act = 158;}
	break;
	case 104:
	{act = 159;}
	break;
	case 105:
	{act = 160;}
	break;
	case 106:
	{act = 161;}
	break;
	case 107:
	{act = 162;}
	break;
	case 108:
	{act = 163;}
	break;
	case 109:
	{act = 164;}
	break;
	case 110:
	{act = 165;}
	break;
	case 111:
	{act = 166;}
	break;
	case 112:
	{act = 167;}
	break;
	case 113:
	{act = 168;}
	break;
	case 114:
	{act = 169;}
	break;
	case 115:
	{act = 170;}
	break;
	case 116:
	{act = 171;}
	break;
	case 117:
	{act = 172;}
	break;
	case 118:
	{act = 173;}
	break;
	case 119:
	{act = 174;}
	break;
	case 120:
	{act = 175;}
	break;
	case 121:
	{act = 176;}
	break;
	case 122:
	{act = 177;}
	break;
	case 123:
	{act = 178;}
	break;
	case 124:
	{act = 179;}
	break;
	case 125:
	{act = 180;}
	break;
	case 126:
	{act = 181;}
	break;
	case 127:
	{act = 182;}
	break;
	case 128:
	{act = 183;}
	break;
	case 129:
	{act = 184;}
	break;
	case 130:
	{act = 185;}
	break;
	case 131:
	{act = 186;}
	break;
	case 132:
	{act = 187;}
	break;
	case 133:
	{act = 188;}
	break;
	case 134:
	{act = 189;}
	break;
	case 135:
	{act = 190;}
	break;
	case 136:
	{act = 191;}
	break;
	case 137:
	{act = 192;}
	break;
	case 138:
	{act = 193;}
	break;
	case 139:
	{act = 194;}
	break;
	case 140:
	{act = 195;}
	break;
	case 141:
	{act = 196;}
	break;
	case 142:
	{act = 197;}
	break;
	case 143:
	{act = 198;}
	break;
	case 144:
	{act = 199;}
	break;
	case 145:
	{act = 200;}
	break;
	case 146:
	{act = 201;}
	break;
	case 147:
	{act = 202;}
	break;
	case 148:
	{act = 203;}
	break;
	case 149:
	{act = 204;}
	break;
	case 150:
	{act = 205;}
	break;
	case 151:
	{act = 206;}
	break;
	case 152:
	{act = 207;}
	break;
	case 153:
	{act = 208;}
	break;
	case 154:
	{act = 209;}
	break;
	case 155:
	{act = 210;}
	break;
	case 156:
	{act = 211;}
	break;
	case 157:
	{act = 212;}
	break;
	case 158:
	{act = 213;}
	break;
	case 159:
	{act = 214;}
	break;
	case 160:
	{act = 215;}
	break;
	case 161:
	{act = 216;}
	break;
	case 162:
	{act = 217;}
	break;
	case 163:
	{act = 218;}
	break;
	case 164:
	{act = 219;}
	break;
	case 165:
	{act = 220;}
	break;
	case 166:
	{act = 221;}
	break;
	case 167:
	{act = 222;}
	break;
	case 168:
	{act = 223;}
	break;
	case 169:
	{act = 224;}
	break;
	case 170:
	{act = 225;}
	break;
	case 171:
	{act = 226;}
	break;
	case 172:
	{act = 227;}
	break;
	case 173:
	{act = 228;}
	break;
	case 174:
	{act = 229;}
	break;
	case 175:
	{act = 230;}
	break;
	case 176:
	{act = 231;}
	break;
	case 177:
	{act = 232;}
	break;
	case 178:
	{act = 233;}
	break;
	case 179:
	{act = 234;}
	break;
	case 180:
	{act = 235;}
	break;
	case 181:
	{act = 236;}
	break;
	case 182:
	{act = 237;}
	break;
	case 183:
	{act = 238;}
	break;
	case 184:
	{act = 239;}
	break;
	case 185:
	{act = 240;}
	break;
	case 186:
	{act = 241;}
	break;
	case 187:
	{act = 242;}
	break;
	case 188:
	{act = 243;}
	break;
	case 189:
	{act = 244;}
	break;
	case 190:
	{act = 247;}
	break;
	case 191:
	{act = 249;}
	break;
	case 192:
	{act = 251;}
	break;
	case 193:
	{act = 253;}
	break;
	case 194:
	{act = 255;}
	break;
	case 195:
	{act = 259;}
	break;
	case 196:
	{te = p+1;{
	sym.tok = TK_NEWLINE;
	;
	{p++; goto _out; }
}}
	break;
	case 197:
	{te = p+1;{
	sym.tok = TK_CONST_EXPR;
	;
	{p++; goto _out; }
}}
	break;
	case 198:
	{te = p+1;{
	sym.tok = TK_LOG_AND;
	;
	{p++; goto _out; }
}}
	break;
	case 199:
	{te = p+1;{
	sym.tok = TK_RPAREN;
	;
	{p++; goto _out; }
}}
	break;
	case 200:
	{te = p+1;{
	sym.tok = TK_PLUS;
	;
	{p++; goto _out; }
}}
	break;
	case 201:
	{te = p+1;{
	sym.tok = TK_COMMA;
	;
	{p++; goto _out; }
}}
	break;
	case 202:
	{te = p+1;{
	sym.tok = TK_MINUS;
	;
	{p++; goto _out; }
}}
	break;
	case 203:
	{te = p+1;{
	sym.tok = TK_DOT;
	;
	{p++; goto _out; }
}}
	break;
	case 204:
	{te = p+1;{
	sym.tok = TK_DIVIDE;
	;
	{p++; goto _out; }
}}
	break;
	case 205:
	{te = p+1;{
	sym.tok = TK_COLON;
	;
	{p++; goto _out; }
}}
	break;
	case 206:
	{te = p+1;{
	sym.tok = TK_LEFT_SHIFT;
	;
	{p++; goto _out; }
}}
	break;
	case 207:
	{te = p+1;{
	sym.tok = TK_LESS_EQ;
	;
	{p++; goto _out; }
}}
	break;
	case 208:
	{te = p+1;{
	sym.tok = TK_NOT_EQ;
	;
	{p++; goto _out; }
}}
	break;
	case 209:
	{te = p+1;{
	sym.tok = TK_NOT_EQ;
	;
	{p++; goto _out; }
}}
	break;
	case 210:
	{te = p+1;{
	sym.tok = TK_EQUAL;
	;
	{p++; goto _out; }
}}
	break;
	case 211:
	{te = p+1;{
	sym.tok = TK_RIGHT_SHIFT;
	;
	{p++; goto _out; }
}}
	break;
	case 212:
	{te = p+1;{
	sym.tok = TK_GREATER_EQ;
	;
	{p++; goto _out; }
}}
	break;
	case 213:
	{te = p+1;{
	sym.tok = TK_QUESTION;
	;
	{p++; goto _out; }
}}
	break;
	case 214:
	{te = p+1;{
	sym.tok = TK_LSQUARE;
	;
	{p++; goto _out; }
}}
	break;
	case 215:
	{te = p+1;{
	sym.tok = TK_RSQUARE;
	;
	{p++; goto _out; }
}}
	break;
	case 216:
	{te = p+1;{
	sym.tok = TK_BIN_XOR;
	;
	{p++; goto _out; }
}}
	break;
	case 217:
	{te = p+1;{
	sym.tok = TK_POWER;
	;
	{p++; goto _out; }
}}
	break;
	case 218:
	{te = p+1;{
	sym.tok = TK_LCURLY;
	;
	{p++; goto _out; }
}}
	break;
	case 219:
	{te = p+1;{
	sym.tok = TK_LOG_OR;
	;
	{p++; goto _out; }
}}
	break;
	case 220:
	{te = p+1;{
	sym.tok = TK_RCURLY;
	;
	{p++; goto _out; }
}}
	break;
	case 221:
	{te = p+1;{
	sym.tok = TK_BIN_NOT;
	;
	{p++; goto _out; }
}}
	break;
	case 222:
	{te = p+1;{
	sym.tok = TK_B1;
	;
	{p++; goto _out; }
}}
	break;
	case 223:
	{te = p+1;{
	sym.tok = TK_C1;
	;
	{p++; goto _out; }
}}
	break;
	case 224:
	{te = p+1;{
	sym.tok = TK_D1;
	;
	{p++; goto _out; }
}}
	break;
	case 225:
	{te = p+1;{
	sym.tok = TK_E1;
	;
	{p++; goto _out; }
}}
	break;
	case 226:
	{te = p+1;{
	sym.tok = TK_H1;
	;
	{p++; goto _out; }
}}
	break;
	case 227:
	{te = p+1;{
	sym.tok = TK_L1;
	;
	{p++; goto _out; }
}}
	break;
	case 228:
	{te = p+1;{
	sym.tok = TK_A1;
	;
	{p++; goto _out; }
}}
	break;
	case 229:
	{te = p+1;{
	sym.tok = TK_F1;
	;
	{p++; goto _out; }
}}
	break;
	case 230:
	{te = p+1;{
	sym.tok = TK_BC1;
	;
	{p++; goto _out; }
}}
	break;
	case 231:
	{te = p+1;{
	sym.tok = TK_DE1;
	;
	{p++; goto _out; }
}}
	break;
	case 232:
	{te = p+1;{
	sym.tok = TK_HL1;
	;
	{p++; goto _out; }
}}
	break;
	case 233:
	{te = p+1;{
	sym.tok = TK_AF1;
	;
	{p++; goto _out; }
}}
	break;
	case 234:
	{te = p+1;{
	sym.tok = TK_IND_BC;
	p--; te--;
	{p++; goto _out; }
}}
	break;
	case 235:
	{te = p+1;{
	sym.tok = TK_IND_DE;
	p--; te--;
	{p++; goto _out; }
}}
	break;
	case 236:
	{te = p+1;{
	sym.tok = TK_IND_IX;
	p--; te--;
	{p++; goto _out; }
}}
	break;
	case 237:
	{te = p+1;{
	sym.tok = TK_IND_IY;
	p--; te--;
	{p++; goto _out; }
}}
	break;
	case 238:
	{te = p+1;{
	sym.tok = TK_IND_HL;
	p--; te--;
	{p++; goto _out; }
}}
	break;
	case 239:
	{te = p+1;{
	sym.tok = TK_IND_SP;
	p--; te--;
	{p++; goto _out; }
}}
	break;
	case 240:
	{te = p+1;{
	sym.tok = TK_IND_C;
	p--; te--;
	{p++; goto _out; }
}}
	break;
	case 241:
	{te = p+1;{
	sym.tok = TK_DS_B;
	;
	{p++; goto _out; }
}}
	break;
	case 242:
	{te = p+1;{
	sym.tok = TK_DS_W;
	;
	{p++; goto _out; }
}}
	break;
	case 243:
	{te = p+1;{
	sym.tok = TK_DS_P;
	;
	{p++; goto _out; }
}}
	break;
	case 244:
	{te = p+1;{
	sym.tok = TK_DS_Q;
	;
	{p++; goto _out; }
}}
	break;
	case 245:
	{te = p+1;}
	break;
	case 246:
	{te = p+1;{
  while ( ts[ 0] == '.' || isspace(ts[ 0]) ) ts++;
  while ( te[-1] == ':' || isspace(te[-1]) ) te--;
  sym.tok = TK_LABEL;
  {p++; goto _out; }
 }}
	break;
	case 247:
	{te = p+1;{
  sym.tok = TK_NUMBER;
  sym.number = scan_num( ts, te - ts - 1, 16 );
  ts = te = p;
  {p++; goto _out; }
 }}
	break;
	case 248:
	{te = p+1;{
  sym.tok = TK_NUMBER;
  sym.number = scan_num( ts + 2, te - ts - 3, 2 );
  ts = te = p;
  {p++; goto _out; }
 }}
	break;
	case 249:
	{te = p+1;{
  sym.tok = TK_NUMBER;
  if ( get_sym_string() &&
                             te - ts == 1 )
  {
   sym.number = *ts;
  }
  else
  {
   sym.number = 0;
   error_invalid_squoted_string();
  }
  ts = te = p;
  {p++; goto _out; }
 }}
	break;
	case 250:
	{te = p+1;{
  sym.tok = TK_STRING;
  if ( ! get_sym_string() )
   error_unclosed_string();
  {p++; goto _out; }
 }}
	break;
	case 251:
	{te = p+1;{
  sym.tok = TK_NIL;
  skip_to_newline();
  ts = te = p;
  {p++; goto _out; }
 }}
	break;
	case 252:
	{te = p;p--;{
	sym.tok = TK_LOG_NOT;
	;
	{p++; goto _out; }
}}
	break;
	case 253:
	{te = p;p--;{
	sym.tok = TK_BIN_AND;
	;
	{p++; goto _out; }
}}
	break;
	case 254:
	{te = p;p--;{
	sym.tok = TK_LPAREN;
	;
	{p++; goto _out; }
}}
	break;
	case 255:
	{te = p;p--;{
	sym.tok = TK_MULTIPLY;
	;
	{p++; goto _out; }
}}
	break;
	case 256:
	{te = p;p--;{
	sym.tok = TK_DOT;
	;
	{p++; goto _out; }
}}
	break;
	case 257:
	{te = p;p--;{
	sym.tok = TK_LESS;
	;
	{p++; goto _out; }
}}
	break;
	case 258:
	{te = p;p--;{
	sym.tok = TK_EQUAL;
	;
	{p++; goto _out; }
}}
	break;
	case 259:
	{te = p;p--;{
	sym.tok = TK_GREATER;
	;
	{p++; goto _out; }
}}
	break;
	case 260:
	{te = p;p--;{
	sym.tok = TK_BIN_OR;
	;
	{p++; goto _out; }
}}
	break;
	case 261:
	{te = p;p--;{
	sym.tok = TK_C;
	;
	{p++; goto _out; }
}}
	break;
	case 262:
	{te = p;p--;{
	sym.tok = TK_PO;
	;
	{p++; goto _out; }
}}
	break;
	case 263:
	{te = p;p--;{
	sym.tok = TK_P;
	;
	{p++; goto _out; }
}}
	break;
	case 264:
	{te = p;p--;{
	sym.tok = TK_M;
	;
	{p++; goto _out; }
}}
	break;
	case 265:
	{te = p;p--;{
	sym.tok = TK_B;
	;
	{p++; goto _out; }
}}
	break;
	case 266:
	{te = p;p--;{
	sym.tok = TK_D;
	;
	{p++; goto _out; }
}}
	break;
	case 267:
	{te = p;p--;{
	sym.tok = TK_E;
	;
	{p++; goto _out; }
}}
	break;
	case 268:
	{te = p;p--;{
	sym.tok = TK_H;
	;
	{p++; goto _out; }
}}
	break;
	case 269:
	{te = p;p--;{
	sym.tok = TK_L;
	;
	{p++; goto _out; }
}}
	break;
	case 270:
	{te = p;p--;{
	sym.tok = TK_A;
	;
	{p++; goto _out; }
}}
	break;
	case 271:
	{te = p;p--;{
	sym.tok = TK_F;
	;
	{p++; goto _out; }
}}
	break;
	case 272:
	{te = p;p--;{
	sym.tok = TK_I;
	;
	{p++; goto _out; }
}}
	break;
	case 273:
	{te = p;p--;{
	sym.tok = TK_R;
	;
	{p++; goto _out; }
}}
	break;
	case 274:
	{te = p;p--;{
	sym.tok = TK_BC;
	;
	{p++; goto _out; }
}}
	break;
	case 275:
	{te = p;p--;{
	sym.tok = TK_DE;
	;
	{p++; goto _out; }
}}
	break;
	case 276:
	{te = p;p--;{
	sym.tok = TK_HL;
	;
	{p++; goto _out; }
}}
	break;
	case 277:
	{te = p;p--;{
	sym.tok = TK_IX;
	;
	{p++; goto _out; }
}}
	break;
	case 278:
	{te = p;p--;{
	sym.tok = TK_IY;
	;
	{p++; goto _out; }
}}
	break;
	case 279:
	{te = p;p--;{
	sym.tok = TK_AF;
	;
	{p++; goto _out; }
}}
	break;
	case 280:
	{te = p;p--;{
	sym.tok = TK_IP;
	;
	{p++; goto _out; }
}}
	break;
	case 281:
	{te = p;p--;{
	sym.tok = TK_SU;
	;
	{p++; goto _out; }
}}
	break;
	case 282:
	{te = p;p--;{
	if (expect_opcode) {
		sym.tok = TK_IF;
		sym.tok_opcode = TK_IF;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_IF;
	}
	{p++; goto _out; }
}}
	break;
	case 283:
	{te = p;p--;{
	if (expect_opcode) {
		sym.tok = TK_CALL;
		sym.tok_opcode = TK_CALL;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_CALL;
	}
	{p++; goto _out; }
}}
	break;
	case 284:
	{te = p;p--;{
	if (expect_opcode) {
		sym.tok = TK_CP;
		sym.tok_opcode = TK_CP;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_CP;
	}
	{p++; goto _out; }
}}
	break;
	case 285:
	{te = p;p--;{
	if (expect_opcode) {
		sym.tok = TK_CPD;
		sym.tok_opcode = TK_CPD;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_CPD;
	}
	{p++; goto _out; }
}}
	break;
	case 286:
	{te = p;p--;{
	if (expect_opcode) {
		sym.tok = TK_CPI;
		sym.tok_opcode = TK_CPI;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_CPI;
	}
	{p++; goto _out; }
}}
	break;
	case 287:
	{te = p;p--;{
	if (expect_opcode) {
		sym.tok = TK_EI;
		sym.tok_opcode = TK_EI;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_EI;
	}
	{p++; goto _out; }
}}
	break;
	case 288:
	{te = p;p--;{
	if (expect_opcode) {
		sym.tok = TK_EX;
		sym.tok_opcode = TK_EX;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_EX;
	}
	{p++; goto _out; }
}}
	break;
	case 289:
	{te = p;p--;{
	if (expect_opcode) {
		sym.tok = TK_IN;
		sym.tok_opcode = TK_IN;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_IN;
	}
	{p++; goto _out; }
}}
	break;
	case 290:
	{te = p;p--;{
	if (expect_opcode) {
		sym.tok = TK_INC;
		sym.tok_opcode = TK_INC;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_INC;
	}
	{p++; goto _out; }
}}
	break;
	case 291:
	{te = p;p--;{
	if (expect_opcode) {
		sym.tok = TK_IND;
		sym.tok_opcode = TK_IND;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_IND;
	}
	{p++; goto _out; }
}}
	break;
	case 292:
	{te = p;p--;{
	if (expect_opcode) {
		sym.tok = TK_INI;
		sym.tok_opcode = TK_INI;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_INI;
	}
	{p++; goto _out; }
}}
	break;
	case 293:
	{te = p;p--;{
	if (expect_opcode) {
		sym.tok = TK_LD;
		sym.tok_opcode = TK_LD;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_LD;
	}
	{p++; goto _out; }
}}
	break;
	case 294:
	{te = p;p--;{
	if (expect_opcode) {
		sym.tok = TK_LDD;
		sym.tok_opcode = TK_LDD;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_LDD;
	}
	{p++; goto _out; }
}}
	break;
	case 295:
	{te = p;p--;{
	if (expect_opcode) {
		sym.tok = TK_LDDR;
		sym.tok_opcode = TK_LDDR;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_LDDR;
	}
	{p++; goto _out; }
}}
	break;
	case 296:
	{te = p;p--;{
	if (expect_opcode) {
		sym.tok = TK_LDI;
		sym.tok_opcode = TK_LDI;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_LDI;
	}
	{p++; goto _out; }
}}
	break;
	case 297:
	{te = p;p--;{
	if (expect_opcode) {
		sym.tok = TK_LDIR;
		sym.tok_opcode = TK_LDIR;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_LDIR;
	}
	{p++; goto _out; }
}}
	break;
	case 298:
	{te = p;p--;{
	if (expect_opcode) {
		sym.tok = TK_OR;
		sym.tok_opcode = TK_OR;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_OR;
	}
	{p++; goto _out; }
}}
	break;
	case 299:
	{te = p;p--;{
	if (expect_opcode) {
		sym.tok = TK_OUT;
		sym.tok_opcode = TK_OUT;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_OUT;
	}
	{p++; goto _out; }
}}
	break;
	case 300:
	{te = p;p--;{
	if (expect_opcode) {
		sym.tok = TK_OUTI;
		sym.tok_opcode = TK_OUTI;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_OUTI;
	}
	{p++; goto _out; }
}}
	break;
	case 301:
	{te = p;p--;{
	if (expect_opcode) {
		sym.tok = TK_POP;
		sym.tok_opcode = TK_POP;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_POP;
	}
	{p++; goto _out; }
}}
	break;
	case 302:
	{te = p;p--;{
	if (expect_opcode) {
		sym.tok = TK_RET;
		sym.tok_opcode = TK_RET;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_RET;
	}
	{p++; goto _out; }
}}
	break;
	case 303:
	{te = p;p--;{
	if (expect_opcode) {
		sym.tok = TK_RL;
		sym.tok_opcode = TK_RL;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_RL;
	}
	{p++; goto _out; }
}}
	break;
	case 304:
	{te = p;p--;{
	if (expect_opcode) {
		sym.tok = TK_RLC;
		sym.tok_opcode = TK_RLC;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_RLC;
	}
	{p++; goto _out; }
}}
	break;
	case 305:
	{te = p;p--;{
	if (expect_opcode) {
		sym.tok = TK_RR;
		sym.tok_opcode = TK_RR;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_RR;
	}
	{p++; goto _out; }
}}
	break;
	case 306:
	{te = p;p--;{
	if (expect_opcode) {
		sym.tok = TK_RRC;
		sym.tok_opcode = TK_RRC;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_RRC;
	}
	{p++; goto _out; }
}}
	break;
	case 307:
	{te = p;p--;{
	if (expect_opcode) {
		sym.tok = TK_SET;
		sym.tok_opcode = TK_SET;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_SET;
	}
	{p++; goto _out; }
}}
	break;
	case 308:
	{te = p;p--;{
	if (expect_opcode) {
		sym.tok = TK_SWAP;
		sym.tok_opcode = TK_SWAP;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_SWAP;
	}
	{p++; goto _out; }
}}
	break;
	case 309:
	{te = p;p--;{
	if (expect_opcode) {
		sym.tok = TK_FILL;
		sym.tok_opcode = TK_FILL;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_FILL;
	}
	{p++; goto _out; }
}}
	break;
	case 310:
	{te = p;p--;{
	if (expect_opcode) {
		sym.tok = TK_OTDM;
		sym.tok_opcode = TK_OTDM;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_OTDM;
	}
	{p++; goto _out; }
}}
	break;
	case 311:
	{te = p;p--;{
	if (expect_opcode) {
		sym.tok = TK_OTIM;
		sym.tok_opcode = TK_OTIM;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_OTIM;
	}
	{p++; goto _out; }
}}
	break;
	case 312:
	{te = p;p--;{
	if (expect_opcode) {
		sym.tok = TK_TST;
		sym.tok_opcode = TK_TST;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_TST;
	}
	{p++; goto _out; }
}}
	break;
	case 313:
	{te = p;p--;}
	break;
	case 314:
	{te = p;p--;{
  sym.tok = TK_NAME;
  {p++; goto _out; }
 }}
	break;
	case 315:
	{te = p;p--;{
  while ( ts[ 0] == '.' || isspace(ts[ 0]) ) ts++;
  while ( te[-1] == ':' || isspace(te[-1]) ) te--;
  sym.tok = TK_LABEL;
  {p++; goto _out; }
 }}
	break;
	case 316:
	{te = p;p--;{
  sym.tok = TK_NUMBER;
  sym.number = scan_num( ts, te - ts, 10 );
  ts = te = p;
  {p++; goto _out; }
 }}
	break;
	case 317:
	{te = p;p--;{
  sym.tok = TK_NUMBER;
  sym.number = scan_num( ts + 2, te - ts - 2, 16 );
  ts = te = p;
  {p++; goto _out; }
 }}
	break;
	case 318:
	{te = p;p--;{
  sym.tok = TK_NUMBER;
  sym.number = scan_num( ts, te - ts - 1, 2 );
  ts = te = p;
  {p++; goto _out; }
 }}
	break;
	case 319:
	{te = p;p--;{
  sym.tok = TK_NUMBER;
  sym.number = scan_num( ts + 1, te - ts - 1, 2 );
  ts = te = p;
  {p++; goto _out; }
 }}
	break;
	case 320:
	{{p = ((te))-1;}{
	sym.tok = TK_LPAREN;
	;
	{p++; goto _out; }
}}
	break;
	case 321:
	{{p = ((te))-1;}{
	sym.tok = TK_DOT;
	;
	{p++; goto _out; }
}}
	break;
	case 322:
	{{p = ((te))-1;}{
  sym.tok = TK_NAME;
  {p++; goto _out; }
 }}
	break;
	case 323:
	{{p = ((te))-1;}{
  sym.tok = TK_NUMBER;
  sym.number = scan_num( ts, te - ts, 10 );
  ts = te = p;
  {p++; goto _out; }
 }}
	break;
	case 324:
	{	switch( act ) {
	case 1:
	{{p = ((te))-1;}
	sym.tok = TK_ASMPC;
	;
	{p++; goto _out; }
}
	break;
	case 5:
	{{p = ((te))-1;}
	sym.tok = TK_MOD;
	;
	{p++; goto _out; }
}
	break;
	case 37:
	{{p = ((te))-1;}
	sym.tok = TK_NZ;
	;
	{p++; goto _out; }
}
	break;
	case 38:
	{{p = ((te))-1;}
	sym.tok = TK_Z;
	;
	{p++; goto _out; }
}
	break;
	case 39:
	{{p = ((te))-1;}
	sym.tok = TK_NC;
	;
	{p++; goto _out; }
}
	break;
	case 40:
	{{p = ((te))-1;}
	sym.tok = TK_C;
	;
	{p++; goto _out; }
}
	break;
	case 41:
	{{p = ((te))-1;}
	sym.tok = TK_PO;
	;
	{p++; goto _out; }
}
	break;
	case 42:
	{{p = ((te))-1;}
	sym.tok = TK_PE;
	;
	{p++; goto _out; }
}
	break;
	case 43:
	{{p = ((te))-1;}
	sym.tok = TK_P;
	;
	{p++; goto _out; }
}
	break;
	case 44:
	{{p = ((te))-1;}
	sym.tok = TK_M;
	;
	{p++; goto _out; }
}
	break;
	case 45:
	{{p = ((te))-1;}
	sym.tok = TK_LZ;
	;
	{p++; goto _out; }
}
	break;
	case 46:
	{{p = ((te))-1;}
	sym.tok = TK_LO;
	;
	{p++; goto _out; }
}
	break;
	case 47:
	{{p = ((te))-1;}
	sym.tok = TK_NV;
	;
	{p++; goto _out; }
}
	break;
	case 48:
	{{p = ((te))-1;}
	sym.tok = TK_V;
	;
	{p++; goto _out; }
}
	break;
	case 49:
	{{p = ((te))-1;}
	sym.tok = TK_B;
	;
	{p++; goto _out; }
}
	break;
	case 50:
	{{p = ((te))-1;}
	sym.tok = TK_D;
	;
	{p++; goto _out; }
}
	break;
	case 51:
	{{p = ((te))-1;}
	sym.tok = TK_E;
	;
	{p++; goto _out; }
}
	break;
	case 52:
	{{p = ((te))-1;}
	sym.tok = TK_H;
	;
	{p++; goto _out; }
}
	break;
	case 53:
	{{p = ((te))-1;}
	sym.tok = TK_IXH;
	;
	{p++; goto _out; }
}
	break;
	case 54:
	{{p = ((te))-1;}
	sym.tok = TK_IYH;
	;
	{p++; goto _out; }
}
	break;
	case 55:
	{{p = ((te))-1;}
	sym.tok = TK_L;
	;
	{p++; goto _out; }
}
	break;
	case 56:
	{{p = ((te))-1;}
	sym.tok = TK_IXL;
	;
	{p++; goto _out; }
}
	break;
	case 57:
	{{p = ((te))-1;}
	sym.tok = TK_IYL;
	;
	{p++; goto _out; }
}
	break;
	case 58:
	{{p = ((te))-1;}
	sym.tok = TK_A;
	;
	{p++; goto _out; }
}
	break;
	case 59:
	{{p = ((te))-1;}
	sym.tok = TK_F;
	;
	{p++; goto _out; }
}
	break;
	case 60:
	{{p = ((te))-1;}
	sym.tok = TK_I;
	;
	{p++; goto _out; }
}
	break;
	case 61:
	{{p = ((te))-1;}
	sym.tok = TK_IIR;
	;
	{p++; goto _out; }
}
	break;
	case 62:
	{{p = ((te))-1;}
	sym.tok = TK_R;
	;
	{p++; goto _out; }
}
	break;
	case 63:
	{{p = ((te))-1;}
	sym.tok = TK_EIR;
	;
	{p++; goto _out; }
}
	break;
	case 64:
	{{p = ((te))-1;}
	sym.tok = TK_BC;
	;
	{p++; goto _out; }
}
	break;
	case 65:
	{{p = ((te))-1;}
	sym.tok = TK_DE;
	;
	{p++; goto _out; }
}
	break;
	case 66:
	{{p = ((te))-1;}
	sym.tok = TK_HL;
	;
	{p++; goto _out; }
}
	break;
	case 67:
	{{p = ((te))-1;}
	sym.tok = TK_IX;
	;
	{p++; goto _out; }
}
	break;
	case 68:
	{{p = ((te))-1;}
	sym.tok = TK_IY;
	;
	{p++; goto _out; }
}
	break;
	case 69:
	{{p = ((te))-1;}
	sym.tok = TK_AF;
	;
	{p++; goto _out; }
}
	break;
	case 70:
	{{p = ((te))-1;}
	sym.tok = TK_SP;
	;
	{p++; goto _out; }
}
	break;
	case 71:
	{{p = ((te))-1;}
	sym.tok = TK_IP;
	;
	{p++; goto _out; }
}
	break;
	case 72:
	{{p = ((te))-1;}
	sym.tok = TK_SU;
	;
	{p++; goto _out; }
}
	break;
	case 73:
	{{p = ((te))-1;}
	sym.tok = TK_XPC;
	;
	{p++; goto _out; }
}
	break;
	case 93:
	{{p = ((te))-1;}
	sym.tok = TK_A32;
	;
	{p++; goto _out; }
}
	break;
	case 94:
	{{p = ((te))-1;}
	sym.tok = TK_DEHL;
	;
	{p++; goto _out; }
}
	break;
	case 95:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_BINARY;
		sym.tok_opcode = TK_BINARY;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_BINARY;
	}
	{p++; goto _out; }
}
	break;
	case 96:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_DEFB;
		sym.tok_opcode = TK_DEFB;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_DEFB;
	}
	{p++; goto _out; }
}
	break;
	case 97:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_DEFC;
		sym.tok_opcode = TK_DEFC;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_DEFC;
	}
	{p++; goto _out; }
}
	break;
	case 98:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_DEFGROUP;
		sym.tok_opcode = TK_DEFGROUP;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_DEFGROUP;
	}
	{p++; goto _out; }
}
	break;
	case 99:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_DEFINE;
		sym.tok_opcode = TK_DEFINE;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_DEFINE;
	}
	{p++; goto _out; }
}
	break;
	case 100:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_DEFQ;
		sym.tok_opcode = TK_DEFQ;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_DEFQ;
	}
	{p++; goto _out; }
}
	break;
	case 101:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_DEFM;
		sym.tok_opcode = TK_DEFM;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_DEFM;
	}
	{p++; goto _out; }
}
	break;
	case 102:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_DEFS;
		sym.tok_opcode = TK_DEFS;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_DEFS;
	}
	{p++; goto _out; }
}
	break;
	case 103:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_DEFVARS;
		sym.tok_opcode = TK_DEFVARS;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_DEFVARS;
	}
	{p++; goto _out; }
}
	break;
	case 104:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_DEFW;
		sym.tok_opcode = TK_DEFW;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_DEFW;
	}
	{p++; goto _out; }
}
	break;
	case 105:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_ELSE;
		sym.tok_opcode = TK_ELSE;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_ELSE;
	}
	{p++; goto _out; }
}
	break;
	case 106:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_ENDIF;
		sym.tok_opcode = TK_ENDIF;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_ENDIF;
	}
	{p++; goto _out; }
}
	break;
	case 107:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_EXTERN;
		sym.tok_opcode = TK_EXTERN;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_EXTERN;
	}
	{p++; goto _out; }
}
	break;
	case 108:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_GLOBAL;
		sym.tok_opcode = TK_GLOBAL;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_GLOBAL;
	}
	{p++; goto _out; }
}
	break;
	case 109:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_IF;
		sym.tok_opcode = TK_IF;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_IF;
	}
	{p++; goto _out; }
}
	break;
	case 110:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_IFDEF;
		sym.tok_opcode = TK_IFDEF;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_IFDEF;
	}
	{p++; goto _out; }
}
	break;
	case 111:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_IFNDEF;
		sym.tok_opcode = TK_IFNDEF;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_IFNDEF;
	}
	{p++; goto _out; }
}
	break;
	case 112:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_INCLUDE;
		sym.tok_opcode = TK_INCLUDE;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_INCLUDE;
	}
	{p++; goto _out; }
}
	break;
	case 113:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_LINE;
		sym.tok_opcode = TK_LINE;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_LINE;
	}
	{p++; goto _out; }
}
	break;
	case 114:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_LSTOFF;
		sym.tok_opcode = TK_LSTOFF;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_LSTOFF;
	}
	{p++; goto _out; }
}
	break;
	case 115:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_LSTON;
		sym.tok_opcode = TK_LSTON;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_LSTON;
	}
	{p++; goto _out; }
}
	break;
	case 116:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_MODULE;
		sym.tok_opcode = TK_MODULE;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_MODULE;
	}
	{p++; goto _out; }
}
	break;
	case 117:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_ORG;
		sym.tok_opcode = TK_ORG;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_ORG;
	}
	{p++; goto _out; }
}
	break;
	case 118:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_PUBLIC;
		sym.tok_opcode = TK_PUBLIC;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_PUBLIC;
	}
	{p++; goto _out; }
}
	break;
	case 119:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_SECTION;
		sym.tok_opcode = TK_SECTION;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_SECTION;
	}
	{p++; goto _out; }
}
	break;
	case 120:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_UNDEFINE;
		sym.tok_opcode = TK_UNDEFINE;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_UNDEFINE;
	}
	{p++; goto _out; }
}
	break;
	case 125:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_ADC;
		sym.tok_opcode = TK_ADC;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_ADC;
	}
	{p++; goto _out; }
}
	break;
	case 126:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_ADD;
		sym.tok_opcode = TK_ADD;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_ADD;
	}
	{p++; goto _out; }
}
	break;
	case 127:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_AND;
		sym.tok_opcode = TK_AND;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_AND;
	}
	{p++; goto _out; }
}
	break;
	case 128:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_BIT;
		sym.tok_opcode = TK_BIT;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_BIT;
	}
	{p++; goto _out; }
}
	break;
	case 129:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_CALL;
		sym.tok_opcode = TK_CALL;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_CALL;
	}
	{p++; goto _out; }
}
	break;
	case 130:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_CCF;
		sym.tok_opcode = TK_CCF;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_CCF;
	}
	{p++; goto _out; }
}
	break;
	case 131:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_CP;
		sym.tok_opcode = TK_CP;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_CP;
	}
	{p++; goto _out; }
}
	break;
	case 132:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_CPD;
		sym.tok_opcode = TK_CPD;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_CPD;
	}
	{p++; goto _out; }
}
	break;
	case 133:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_CPDR;
		sym.tok_opcode = TK_CPDR;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_CPDR;
	}
	{p++; goto _out; }
}
	break;
	case 134:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_CPI;
		sym.tok_opcode = TK_CPI;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_CPI;
	}
	{p++; goto _out; }
}
	break;
	case 135:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_CPIR;
		sym.tok_opcode = TK_CPIR;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_CPIR;
	}
	{p++; goto _out; }
}
	break;
	case 136:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_CPL;
		sym.tok_opcode = TK_CPL;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_CPL;
	}
	{p++; goto _out; }
}
	break;
	case 137:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_DAA;
		sym.tok_opcode = TK_DAA;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_DAA;
	}
	{p++; goto _out; }
}
	break;
	case 138:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_DEC;
		sym.tok_opcode = TK_DEC;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_DEC;
	}
	{p++; goto _out; }
}
	break;
	case 139:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_DI;
		sym.tok_opcode = TK_DI;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_DI;
	}
	{p++; goto _out; }
}
	break;
	case 140:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_DJNZ;
		sym.tok_opcode = TK_DJNZ;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_DJNZ;
	}
	{p++; goto _out; }
}
	break;
	case 141:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_EI;
		sym.tok_opcode = TK_EI;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_EI;
	}
	{p++; goto _out; }
}
	break;
	case 142:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_EX;
		sym.tok_opcode = TK_EX;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_EX;
	}
	{p++; goto _out; }
}
	break;
	case 143:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_EXX;
		sym.tok_opcode = TK_EXX;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_EXX;
	}
	{p++; goto _out; }
}
	break;
	case 144:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_HALT;
		sym.tok_opcode = TK_HALT;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_HALT;
	}
	{p++; goto _out; }
}
	break;
	case 145:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_IM;
		sym.tok_opcode = TK_IM;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_IM;
	}
	{p++; goto _out; }
}
	break;
	case 146:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_IN;
		sym.tok_opcode = TK_IN;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_IN;
	}
	{p++; goto _out; }
}
	break;
	case 147:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_INC;
		sym.tok_opcode = TK_INC;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_INC;
	}
	{p++; goto _out; }
}
	break;
	case 148:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_IND;
		sym.tok_opcode = TK_IND;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_IND;
	}
	{p++; goto _out; }
}
	break;
	case 149:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_INDR;
		sym.tok_opcode = TK_INDR;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_INDR;
	}
	{p++; goto _out; }
}
	break;
	case 150:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_INI;
		sym.tok_opcode = TK_INI;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_INI;
	}
	{p++; goto _out; }
}
	break;
	case 151:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_INIR;
		sym.tok_opcode = TK_INIR;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_INIR;
	}
	{p++; goto _out; }
}
	break;
	case 152:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_JP;
		sym.tok_opcode = TK_JP;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_JP;
	}
	{p++; goto _out; }
}
	break;
	case 153:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_JR;
		sym.tok_opcode = TK_JR;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_JR;
	}
	{p++; goto _out; }
}
	break;
	case 154:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_LD;
		sym.tok_opcode = TK_LD;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_LD;
	}
	{p++; goto _out; }
}
	break;
	case 155:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_LDD;
		sym.tok_opcode = TK_LDD;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_LDD;
	}
	{p++; goto _out; }
}
	break;
	case 156:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_LDDR;
		sym.tok_opcode = TK_LDDR;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_LDDR;
	}
	{p++; goto _out; }
}
	break;
	case 157:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_LDI;
		sym.tok_opcode = TK_LDI;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_LDI;
	}
	{p++; goto _out; }
}
	break;
	case 158:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_LDIR;
		sym.tok_opcode = TK_LDIR;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_LDIR;
	}
	{p++; goto _out; }
}
	break;
	case 159:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_NEG;
		sym.tok_opcode = TK_NEG;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_NEG;
	}
	{p++; goto _out; }
}
	break;
	case 160:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_NOP;
		sym.tok_opcode = TK_NOP;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_NOP;
	}
	{p++; goto _out; }
}
	break;
	case 161:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_OR;
		sym.tok_opcode = TK_OR;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_OR;
	}
	{p++; goto _out; }
}
	break;
	case 162:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_OTDR;
		sym.tok_opcode = TK_OTDR;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_OTDR;
	}
	{p++; goto _out; }
}
	break;
	case 163:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_OTIR;
		sym.tok_opcode = TK_OTIR;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_OTIR;
	}
	{p++; goto _out; }
}
	break;
	case 164:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_OUT;
		sym.tok_opcode = TK_OUT;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_OUT;
	}
	{p++; goto _out; }
}
	break;
	case 165:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_OUTD;
		sym.tok_opcode = TK_OUTD;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_OUTD;
	}
	{p++; goto _out; }
}
	break;
	case 166:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_OUTI;
		sym.tok_opcode = TK_OUTI;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_OUTI;
	}
	{p++; goto _out; }
}
	break;
	case 167:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_POP;
		sym.tok_opcode = TK_POP;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_POP;
	}
	{p++; goto _out; }
}
	break;
	case 168:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_PUSH;
		sym.tok_opcode = TK_PUSH;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_PUSH;
	}
	{p++; goto _out; }
}
	break;
	case 169:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_RES;
		sym.tok_opcode = TK_RES;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_RES;
	}
	{p++; goto _out; }
}
	break;
	case 170:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_RET;
		sym.tok_opcode = TK_RET;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_RET;
	}
	{p++; goto _out; }
}
	break;
	case 171:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_RETI;
		sym.tok_opcode = TK_RETI;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_RETI;
	}
	{p++; goto _out; }
}
	break;
	case 172:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_RETN;
		sym.tok_opcode = TK_RETN;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_RETN;
	}
	{p++; goto _out; }
}
	break;
	case 173:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_RL;
		sym.tok_opcode = TK_RL;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_RL;
	}
	{p++; goto _out; }
}
	break;
	case 174:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_RLA;
		sym.tok_opcode = TK_RLA;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_RLA;
	}
	{p++; goto _out; }
}
	break;
	case 175:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_RLC;
		sym.tok_opcode = TK_RLC;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_RLC;
	}
	{p++; goto _out; }
}
	break;
	case 176:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_RLCA;
		sym.tok_opcode = TK_RLCA;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_RLCA;
	}
	{p++; goto _out; }
}
	break;
	case 177:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_RLD;
		sym.tok_opcode = TK_RLD;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_RLD;
	}
	{p++; goto _out; }
}
	break;
	case 178:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_RR;
		sym.tok_opcode = TK_RR;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_RR;
	}
	{p++; goto _out; }
}
	break;
	case 179:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_RRA;
		sym.tok_opcode = TK_RRA;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_RRA;
	}
	{p++; goto _out; }
}
	break;
	case 180:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_RRC;
		sym.tok_opcode = TK_RRC;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_RRC;
	}
	{p++; goto _out; }
}
	break;
	case 181:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_RRCA;
		sym.tok_opcode = TK_RRCA;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_RRCA;
	}
	{p++; goto _out; }
}
	break;
	case 182:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_RRD;
		sym.tok_opcode = TK_RRD;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_RRD;
	}
	{p++; goto _out; }
}
	break;
	case 183:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_RST;
		sym.tok_opcode = TK_RST;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_RST;
	}
	{p++; goto _out; }
}
	break;
	case 184:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_SBC;
		sym.tok_opcode = TK_SBC;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_SBC;
	}
	{p++; goto _out; }
}
	break;
	case 185:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_SCF;
		sym.tok_opcode = TK_SCF;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_SCF;
	}
	{p++; goto _out; }
}
	break;
	case 186:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_SET;
		sym.tok_opcode = TK_SET;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_SET;
	}
	{p++; goto _out; }
}
	break;
	case 187:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_SLA;
		sym.tok_opcode = TK_SLA;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_SLA;
	}
	{p++; goto _out; }
}
	break;
	case 188:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_SLL;
		sym.tok_opcode = TK_SLL;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_SLL;
	}
	{p++; goto _out; }
}
	break;
	case 189:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_SLI;
		sym.tok_opcode = TK_SLI;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_SLI;
	}
	{p++; goto _out; }
}
	break;
	case 190:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_SRA;
		sym.tok_opcode = TK_SRA;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_SRA;
	}
	{p++; goto _out; }
}
	break;
	case 191:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_SRL;
		sym.tok_opcode = TK_SRL;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_SRL;
	}
	{p++; goto _out; }
}
	break;
	case 192:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_SUB;
		sym.tok_opcode = TK_SUB;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_SUB;
	}
	{p++; goto _out; }
}
	break;
	case 193:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_XOR;
		sym.tok_opcode = TK_XOR;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_XOR;
	}
	{p++; goto _out; }
}
	break;
	case 194:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_SWAPNIB;
		sym.tok_opcode = TK_SWAPNIB;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_SWAPNIB;
	}
	{p++; goto _out; }
}
	break;
	case 195:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_SWAP;
		sym.tok_opcode = TK_SWAP;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_SWAP;
	}
	{p++; goto _out; }
}
	break;
	case 196:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_OUTINB;
		sym.tok_opcode = TK_OUTINB;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_OUTINB;
	}
	{p++; goto _out; }
}
	break;
	case 197:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_LDIX;
		sym.tok_opcode = TK_LDIX;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_LDIX;
	}
	{p++; goto _out; }
}
	break;
	case 198:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_LDIRX;
		sym.tok_opcode = TK_LDIRX;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_LDIRX;
	}
	{p++; goto _out; }
}
	break;
	case 199:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_LDDX;
		sym.tok_opcode = TK_LDDX;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_LDDX;
	}
	{p++; goto _out; }
}
	break;
	case 200:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_LDDRX;
		sym.tok_opcode = TK_LDDRX;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_LDDRX;
	}
	{p++; goto _out; }
}
	break;
	case 201:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_FILL;
		sym.tok_opcode = TK_FILL;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_FILL;
	}
	{p++; goto _out; }
}
	break;
	case 202:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_FILLDE;
		sym.tok_opcode = TK_FILLDE;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_FILLDE;
	}
	{p++; goto _out; }
}
	break;
	case 203:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_MIRROR;
		sym.tok_opcode = TK_MIRROR;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_MIRROR;
	}
	{p++; goto _out; }
}
	break;
	case 204:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_POPX;
		sym.tok_opcode = TK_POPX;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_POPX;
	}
	{p++; goto _out; }
}
	break;
	case 205:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_NEXTREG;
		sym.tok_opcode = TK_NEXTREG;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_NEXTREG;
	}
	{p++; goto _out; }
}
	break;
	case 206:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_PIXELDN;
		sym.tok_opcode = TK_PIXELDN;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_PIXELDN;
	}
	{p++; goto _out; }
}
	break;
	case 207:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_PIXELAD;
		sym.tok_opcode = TK_PIXELAD;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_PIXELAD;
	}
	{p++; goto _out; }
}
	break;
	case 208:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_SETAE;
		sym.tok_opcode = TK_SETAE;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_SETAE;
	}
	{p++; goto _out; }
}
	break;
	case 209:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_TEST;
		sym.tok_opcode = TK_TEST;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_TEST;
	}
	{p++; goto _out; }
}
	break;
	case 210:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_IN0;
		sym.tok_opcode = TK_IN0;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_IN0;
	}
	{p++; goto _out; }
}
	break;
	case 211:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_MLT;
		sym.tok_opcode = TK_MLT;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_MLT;
	}
	{p++; goto _out; }
}
	break;
	case 212:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_OTDM;
		sym.tok_opcode = TK_OTDM;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_OTDM;
	}
	{p++; goto _out; }
}
	break;
	case 213:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_OTDMR;
		sym.tok_opcode = TK_OTDMR;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_OTDMR;
	}
	{p++; goto _out; }
}
	break;
	case 214:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_OTIM;
		sym.tok_opcode = TK_OTIM;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_OTIM;
	}
	{p++; goto _out; }
}
	break;
	case 215:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_OTIMR;
		sym.tok_opcode = TK_OTIMR;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_OTIMR;
	}
	{p++; goto _out; }
}
	break;
	case 216:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_OUT0;
		sym.tok_opcode = TK_OUT0;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_OUT0;
	}
	{p++; goto _out; }
}
	break;
	case 217:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_SLP;
		sym.tok_opcode = TK_SLP;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_SLP;
	}
	{p++; goto _out; }
}
	break;
	case 218:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_TST;
		sym.tok_opcode = TK_TST;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_TST;
	}
	{p++; goto _out; }
}
	break;
	case 219:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_TSTIO;
		sym.tok_opcode = TK_TSTIO;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_TSTIO;
	}
	{p++; goto _out; }
}
	break;
	case 220:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_ALTD;
		sym.tok_opcode = TK_ALTD;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_ALTD;
	}
	{p++; goto _out; }
}
	break;
	case 221:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_BOOL;
		sym.tok_opcode = TK_BOOL;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_BOOL;
	}
	{p++; goto _out; }
}
	break;
	case 222:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_IDET;
		sym.tok_opcode = TK_IDET;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_IDET;
	}
	{p++; goto _out; }
}
	break;
	case 223:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_IOE;
		sym.tok_opcode = TK_IOE;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_IOE;
	}
	{p++; goto _out; }
}
	break;
	case 224:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_IOI;
		sym.tok_opcode = TK_IOI;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_IOI;
	}
	{p++; goto _out; }
}
	break;
	case 225:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_IPRES;
		sym.tok_opcode = TK_IPRES;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_IPRES;
	}
	{p++; goto _out; }
}
	break;
	case 226:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_IPSET;
		sym.tok_opcode = TK_IPSET;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_IPSET;
	}
	{p++; goto _out; }
}
	break;
	case 227:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_LDDSR;
		sym.tok_opcode = TK_LDDSR;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_LDDSR;
	}
	{p++; goto _out; }
}
	break;
	case 228:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_LDISR;
		sym.tok_opcode = TK_LDISR;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_LDISR;
	}
	{p++; goto _out; }
}
	break;
	case 229:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_LDP;
		sym.tok_opcode = TK_LDP;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_LDP;
	}
	{p++; goto _out; }
}
	break;
	case 230:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_LSDR;
		sym.tok_opcode = TK_LSDR;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_LSDR;
	}
	{p++; goto _out; }
}
	break;
	case 231:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_LSIR;
		sym.tok_opcode = TK_LSIR;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_LSIR;
	}
	{p++; goto _out; }
}
	break;
	case 232:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_LSDDR;
		sym.tok_opcode = TK_LSDDR;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_LSDDR;
	}
	{p++; goto _out; }
}
	break;
	case 233:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_LSIDR;
		sym.tok_opcode = TK_LSIDR;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_LSIDR;
	}
	{p++; goto _out; }
}
	break;
	case 234:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_MUL;
		sym.tok_opcode = TK_MUL;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_MUL;
	}
	{p++; goto _out; }
}
	break;
	case 235:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_RDMODE;
		sym.tok_opcode = TK_RDMODE;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_RDMODE;
	}
	{p++; goto _out; }
}
	break;
	case 236:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_SETUSR;
		sym.tok_opcode = TK_SETUSR;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_SETUSR;
	}
	{p++; goto _out; }
}
	break;
	case 237:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_SURES;
		sym.tok_opcode = TK_SURES;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_SURES;
	}
	{p++; goto _out; }
}
	break;
	case 238:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_SYSCALL;
		sym.tok_opcode = TK_SYSCALL;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_SYSCALL;
	}
	{p++; goto _out; }
}
	break;
	case 239:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_UMA;
		sym.tok_opcode = TK_UMA;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_UMA;
	}
	{p++; goto _out; }
}
	break;
	case 240:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_UMS;
		sym.tok_opcode = TK_UMS;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_UMS;
	}
	{p++; goto _out; }
}
	break;
	case 241:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_CALL_OZ;
		sym.tok_opcode = TK_CALL_OZ;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_CALL_OZ;
	}
	{p++; goto _out; }
}
	break;
	case 242:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_CALL_PKG;
		sym.tok_opcode = TK_CALL_PKG;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_CALL_PKG;
	}
	{p++; goto _out; }
}
	break;
	case 243:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_FPP;
		sym.tok_opcode = TK_FPP;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_FPP;
	}
	{p++; goto _out; }
}
	break;
	case 244:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_INVOKE;
		sym.tok_opcode = TK_INVOKE;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_INVOKE;
	}
	{p++; goto _out; }
}
	break;
	case 247:
	{{p = ((te))-1;}
  sym.tok = TK_NAME;
  {p++; goto _out; }
 }
	break;
	case 249:
	{{p = ((te))-1;}
  sym.tok = TK_NUMBER;
  sym.number = scan_num( ts, te - ts, 10 );
  ts = te = p;
  {p++; goto _out; }
 }
	break;
	case 251:
	{{p = ((te))-1;}
  sym.tok = TK_NUMBER;
  sym.number = scan_num( ts + 1, te - ts - 1, 16 );
  ts = te = p;
  {p++; goto _out; }
 }
	break;
	case 253:
	{{p = ((te))-1;}
  sym.tok = TK_NUMBER;
  sym.number = scan_num( ts, te - ts - 1, 2 );
  ts = te = p;
  {p++; goto _out; }
 }
	break;
	case 255:
	{{p = ((te))-1;}
  sym.tok = TK_NUMBER;
  sym.number = scan_num( ts + 2, te - ts - 2, 2 );
  ts = te = p;
  {p++; goto _out; }
 }
	break;
	case 259:
	{{p = ((te))-1;}
  sym.tok = TK_NIL;
  skip_to_newline();
  ts = te = p;
  {p++; goto _out; }
 }
	break;
	}
	}
	break;
		}
	}
_again:
	_acts = _lexer_actions + _lexer_to_state_actions[cs];
	_nacts = (unsigned int) *_acts++;
	while ( _nacts-- > 0 ) {
		switch ( *_acts++ ) {
	case 0:
	{ts = 0;}
	break;
		}
	}
	if ( cs == 0 )
		goto _out;
	if ( ++p != pe )
		goto _resume;
	_test_eof: {}
	if ( p == eof )
	{
	if ( _lexer_eof_trans[cs] > 0 ) {
		_trans = _lexer_eof_trans[cs] - 1;
		goto _eof_trans;
	}
	}
	_out: {}
	}
 return sym.tok;
}
