static const short _lexer_actions[] = {
	0, 1, 0, 1, 1, 1, 2, 1, 
	165, 1, 166, 1, 167, 1, 168, 1, 
	169, 1, 170, 1, 171, 1, 172, 1, 
	173, 1, 174, 1, 175, 1, 176, 1, 
	177, 1, 178, 1, 179, 1, 180, 1, 
	181, 1, 182, 1, 183, 1, 184, 1, 
	185, 1, 186, 1, 187, 1, 188, 1, 
	189, 1, 190, 1, 191, 1, 192, 1, 
	193, 1, 194, 1, 195, 1, 196, 1, 
	197, 1, 198, 1, 199, 1, 200, 1, 
	201, 1, 202, 1, 203, 1, 204, 1, 
	205, 1, 206, 1, 207, 1, 208, 1, 
	209, 1, 210, 1, 211, 1, 212, 1, 
	213, 1, 214, 1, 215, 1, 216, 1, 
	217, 1, 218, 1, 219, 1, 220, 1, 
	221, 1, 222, 1, 223, 1, 224, 1, 
	225, 1, 226, 1, 227, 1, 228, 1, 
	229, 1, 230, 1, 231, 1, 232, 1, 
	233, 1, 234, 1, 235, 1, 236, 1, 
	237, 1, 238, 1, 239, 1, 240, 1, 
	241, 1, 242, 1, 243, 1, 244, 1, 
	245, 1, 246, 1, 247, 1, 248, 1, 
	249, 1, 250, 1, 251, 1, 252, 1, 
	253, 1, 254, 1, 255, 1, 256, 1, 
	257, 1, 258, 1, 259, 1, 260, 1, 
	261, 1, 262, 1, 263, 1, 264, 1, 
	265, 1, 266, 1, 267, 1, 268, 1, 
	269, 1, 270, 1, 271, 1, 272, 1, 
	273, 1, 274, 1, 275, 1, 276, 2, 
	2, 3, 2, 2, 4, 2, 2, 5, 
	2, 2, 6, 2, 2, 7, 2, 2, 
	8, 2, 2, 9, 2, 2, 10, 2, 
	2, 11, 2, 2, 12, 2, 2, 13, 
	2, 2, 14, 2, 2, 15, 2, 2, 
	16, 2, 2, 17, 2, 2, 18, 2, 
	2, 19, 2, 2, 20, 2, 2, 21, 
	2, 2, 22, 2, 2, 23, 2, 2, 
	24, 2, 2, 25, 2, 2, 26, 2, 
	2, 27, 2, 2, 28, 2, 2, 29, 
	2, 2, 30, 2, 2, 31, 2, 2, 
	32, 2, 2, 33, 2, 2, 34, 2, 
	2, 35, 2, 2, 36, 2, 2, 37, 
	2, 2, 38, 2, 2, 39, 2, 2, 
	40, 2, 2, 41, 2, 2, 42, 2, 
	2, 43, 2, 2, 44, 2, 2, 45, 
	2, 2, 46, 2, 2, 47, 2, 2, 
	48, 2, 2, 49, 2, 2, 50, 2, 
	2, 51, 2, 2, 52, 2, 2, 53, 
	2, 2, 54, 2, 2, 55, 2, 2, 
	56, 2, 2, 57, 2, 2, 58, 2, 
	2, 59, 2, 2, 60, 2, 2, 61, 
	2, 2, 62, 2, 2, 63, 2, 2, 
	64, 2, 2, 65, 2, 2, 66, 2, 
	2, 67, 2, 2, 68, 2, 2, 69, 
	2, 2, 70, 2, 2, 71, 2, 2, 
	72, 2, 2, 73, 2, 2, 74, 2, 
	2, 75, 2, 2, 76, 2, 2, 77, 
	2, 2, 78, 2, 2, 79, 2, 2, 
	80, 2, 2, 81, 2, 2, 82, 2, 
	2, 83, 2, 2, 84, 2, 2, 85, 
	2, 2, 86, 2, 2, 87, 2, 2, 
	88, 2, 2, 89, 2, 2, 90, 2, 
	2, 91, 2, 2, 92, 2, 2, 93, 
	2, 2, 94, 2, 2, 95, 2, 2, 
	96, 2, 2, 97, 2, 2, 98, 2, 
	2, 99, 2, 2, 100, 2, 2, 101, 
	2, 2, 102, 2, 2, 103, 2, 2, 
	104, 2, 2, 105, 2, 2, 106, 2, 
	2, 107, 2, 2, 108, 2, 2, 109, 
	2, 2, 110, 2, 2, 111, 2, 2, 
	112, 2, 2, 113, 2, 2, 114, 2, 
	2, 115, 2, 2, 116, 2, 2, 117, 
	2, 2, 118, 2, 2, 119, 2, 2, 
	120, 2, 2, 121, 2, 2, 122, 2, 
	2, 123, 2, 2, 124, 2, 2, 125, 
	2, 2, 126, 2, 2, 127, 2, 2, 
	128, 2, 2, 129, 2, 2, 130, 2, 
	2, 131, 2, 2, 132, 2, 2, 133, 
	2, 2, 134, 2, 2, 135, 2, 2, 
	136, 2, 2, 137, 2, 2, 138, 2, 
	2, 139, 2, 2, 140, 2, 2, 141, 
	2, 2, 142, 2, 2, 143, 2, 2, 
	144, 2, 2, 145, 2, 2, 146, 2, 
	2, 147, 2, 2, 148, 2, 2, 149, 
	2, 2, 150, 2, 2, 151, 2, 2, 
	152, 2, 2, 153, 2, 2, 154, 2, 
	2, 155, 2, 2, 156, 2, 2, 157, 
	2, 2, 158, 2, 2, 159, 2, 2, 
	160, 2, 2, 161, 2, 2, 162, 2, 
	2, 163, 2, 2, 164
};
static const short _lexer_cond_offsets[] = {
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 5, 8, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	17, 21, 28, 35, 42, 49, 56, 63, 
	70, 77, 84, 91, 98, 105, 112, 119, 
	126, 133, 140, 147, 154, 161, 168, 175, 
	182, 189, 196, 203, 210, 217, 224, 231, 
	238, 245, 252, 259, 266, 273, 280, 287, 
	294, 301, 308, 315, 322, 329, 336, 343, 
	350, 357, 364, 371, 378, 385, 392, 399, 
	406, 413, 420, 427, 434, 441, 448, 455, 
	462, 469, 476, 483, 490, 497, 504, 511, 
	518, 525, 532, 539, 546, 553, 560, 567, 
	574, 581, 588, 595, 602, 609, 616, 623, 
	630, 637, 644, 651, 658, 665, 672, 679, 
	686, 693, 700, 707, 714, 721, 728, 735, 
	742, 749, 756, 763, 770, 777, 784, 791, 
	798, 805, 812, 819, 826, 833, 840, 847, 
	854, 861, 868, 875, 882, 889, 896, 903, 
	910, 917, 924, 931, 938, 945, 952, 959, 
	966, 973, 980, 987, 994, 1001, 1008, 1015, 
	1022, 1029, 1036, 1043, 1050, 1057, 1064, 1071, 
	1078, 1085, 1092, 1099, 1106, 1113, 1120, 1127, 
	1134, 1141, 1148, 1155, 1162, 1169, 1176, 1183, 
	1190, 1197, 1204, 1211, 1218, 1225, 1232, 1239, 
	1246, 1253, 1260, 1267, 1274, 1281, 1288, 1295
};
static const char _lexer_cond_lengths[] = {
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 5, 3, 4, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 5, 
	4, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7
};
static const short _lexer_cond_keys[] = {
	9, 9, 32, 32, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 58, 58, 
	46, 46, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 65, 90, 95, 95, 
	97, 122, 48, 57, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 0
};
static const char _lexer_cond_spaces[] = {
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0
};
static const short _lexer_key_offsets[] = {
	0, 0, 2, 5, 19, 21, 24, 27, 
	29, 32, 34, 37, 41, 46, 51, 53, 
	56, 64, 70, 78, 85, 88, 222, 223, 
	229, 232, 234, 235, 249, 250, 264, 276, 
	284, 292, 302, 308, 309, 312, 313, 315, 
	316, 332, 339, 347, 358, 366, 375, 384, 
	393, 402, 413, 424, 433, 442, 451, 464, 
	473, 482, 489, 500, 509, 518, 527, 536, 
	549, 558, 567, 584, 593, 606, 631, 640, 
	649, 658, 667, 676, 685, 694, 703, 712, 
	721, 730, 739, 747, 762, 771, 780, 789, 
	798, 807, 816, 827, 836, 845, 854, 865, 
	874, 883, 892, 901, 910, 919, 928, 937, 
	946, 955, 966, 975, 984, 1003, 1014, 1023, 
	1032, 1041, 1050, 1059, 1068, 1084, 1093, 1102, 
	1111, 1120, 1129, 1138, 1147, 1156, 1165, 1176, 
	1187, 1198, 1211, 1222, 1233, 1242, 1253, 1262, 
	1271, 1280, 1289, 1298, 1309, 1318, 1333, 1342, 
	1351, 1360, 1369, 1378, 1387, 1396, 1405, 1414, 
	1423, 1438, 1449, 1458, 1467, 1476, 1485, 1494, 
	1507, 1516, 1527, 1538, 1547, 1558, 1567, 1576, 
	1588, 1597, 1606, 1621, 1630, 1639, 1648, 1659, 
	1668, 1677, 1686, 1695, 1706, 1715, 1724, 1733, 
	1742, 1757, 1768, 1779, 1792, 1801, 1814, 1823, 
	1832, 1855, 1864, 1873, 1884, 1893, 1902, 1911, 
	1920, 1929, 1938, 1951, 1962, 1971, 1980, 1989, 
	1998, 2007, 2016, 2025, 2034, 2043, 2052, 2061, 
	2070, 2079, 2088, 2097, 2106, 2115, 2124, 2133, 
	2140, 2147, 2182, 2199, 2218, 2243, 2261, 2282, 
	2303, 2324, 2345, 2370, 2395, 2416, 2437, 2458, 
	2487, 2508, 2529, 2546, 2571, 2592, 2613, 2634, 
	2655, 2684, 2705, 2726, 2763, 2784, 2813, 2866, 
	2887, 2908, 2929, 2950, 2971, 2992, 3013, 3034, 
	3055, 3076, 3097, 3118, 3136, 3169, 3190, 3211, 
	3232, 3253, 3274, 3295, 3320, 3341, 3362, 3383, 
	3408, 3429, 3450, 3471, 3492, 3513, 3534, 3555, 
	3576, 3597, 3618, 3643, 3664, 3685, 3726, 3751, 
	3772, 3793, 3814, 3835, 3856, 3877, 3912, 3933, 
	3954, 3975, 3996, 4017, 4038, 4059, 4080, 4101, 
	4126, 4151, 4176, 4205, 4230, 4255, 4276, 4301, 
	4322, 4343, 4364, 4385, 4406, 4431, 4452, 4485, 
	4506, 4527, 4548, 4569, 4590, 4611, 4632, 4653, 
	4674, 4695, 4728, 4753, 4774, 4795, 4816, 4837, 
	4858, 4887, 4908, 4933, 4958, 4979, 5004, 5025, 
	5046, 5073, 5094, 5115, 5148, 5169, 5190, 5211, 
	5236, 5257, 5278, 5299, 5320, 5345, 5366, 5387, 
	5408, 5429, 5462, 5487, 5512, 5541, 5562, 5591, 
	5612, 5633, 5682, 5703, 5724, 5749, 5770, 5791, 
	5812, 5833, 5854, 5875, 5904, 5929, 5950, 5971, 
	5992, 6013, 6034, 6055, 6076, 6097, 6118, 6139, 
	6160, 6181, 6202, 6223, 6244, 6265, 6286, 6307
};
static const short _lexer_trans_keys[] = {
	35, 45, 34, 35, 45, 9, 32, 66, 
	67, 68, 72, 73, 83, 98, 99, 100, 
	104, 105, 115, 67, 99, 9, 32, 41, 
	9, 32, 41, 69, 101, 9, 32, 41, 
	76, 108, 9, 32, 41, 88, 89, 120, 
	121, 9, 32, 41, 43, 45, 9, 32, 
	41, 43, 45, 80, 112, 9, 32, 41, 
	72, 104, 48, 57, 65, 70, 97, 102, 
	48, 57, 65, 70, 97, 102, 66, 80, 
	81, 87, 98, 112, 113, 119, 521, 544, 
	607, 577, 602, 609, 634, 521, 544, 570, 
	10, 33, 34, 35, 36, 37, 38, 39, 
	40, 41, 42, 43, 44, 45, 47, 48, 
	49, 58, 59, 60, 61, 62, 63, 64, 
	91, 92, 93, 94, 96, 123, 124, 125, 
	126, 127, 302, 321, 322, 323, 324, 325, 
	326, 327, 328, 329, 330, 332, 333, 334, 
	335, 336, 338, 339, 340, 341, 344, 346, 
	351, 353, 354, 355, 356, 357, 358, 359, 
	360, 361, 362, 364, 365, 366, 367, 368, 
	370, 371, 372, 373, 376, 378, 558, 577, 
	578, 579, 580, 581, 582, 583, 584, 585, 
	586, 588, 589, 590, 591, 592, 594, 595, 
	596, 597, 600, 602, 607, 609, 610, 611, 
	612, 613, 614, 615, 616, 617, 618, 620, 
	621, 622, 623, 624, 626, 627, 628, 629, 
	632, 634, -128, 32, 50, 57, 331, 345, 
	363, 377, 587, 601, 619, 633, 61, 48, 
	57, 65, 70, 97, 102, 34, 48, 49, 
	48, 49, 38, 9, 32, 66, 67, 68, 
	72, 73, 83, 98, 99, 100, 104, 105, 
	115, 42, 66, 72, 88, 98, 104, 120, 
	48, 49, 50, 57, 65, 70, 97, 102, 
	66, 72, 98, 104, 48, 49, 50, 57, 
	65, 70, 97, 102, 72, 104, 48, 57, 
	65, 70, 97, 102, 72, 104, 48, 57, 
	65, 70, 97, 102, 72, 104, 48, 49, 
	50, 57, 65, 70, 97, 102, 48, 57, 
	65, 70, 97, 102, 10, 60, 61, 62, 
	61, 61, 62, 124, 51, 68, 70, 78, 
	83, 95, 100, 102, 110, 115, 48, 57, 
	65, 90, 97, 122, 95, 48, 57, 65, 
	90, 97, 122, 50, 95, 48, 57, 65, 
	90, 97, 122, 67, 68, 95, 99, 100, 
	48, 57, 65, 90, 97, 122, 39, 95, 
	48, 57, 65, 90, 97, 122, 68, 95, 
	100, 48, 57, 65, 90, 97, 122, 77, 
	95, 109, 48, 57, 65, 90, 97, 122, 
	80, 95, 112, 48, 57, 65, 90, 97, 
	122, 67, 95, 99, 48, 57, 65, 90, 
	97, 122, 67, 73, 95, 99, 105, 48, 
	57, 65, 90, 97, 122, 78, 84, 95, 
	110, 116, 48, 57, 65, 90, 97, 122, 
	65, 95, 97, 48, 57, 66, 90, 98, 
	122, 82, 95, 114, 48, 57, 65, 90, 
	97, 122, 89, 95, 121, 48, 57, 65, 
	90, 97, 122, 65, 67, 80, 95, 97, 
	99, 112, 48, 57, 66, 90, 98, 122, 
	76, 95, 108, 48, 57, 65, 90, 97, 
	122, 76, 95, 108, 48, 57, 65, 90, 
	97, 122, 95, 48, 57, 65, 90, 97, 
	122, 79, 80, 95, 111, 112, 48, 57, 
	65, 90, 97, 122, 90, 95, 122, 48, 
	57, 65, 89, 97, 121, 75, 95, 107, 
	48, 57, 65, 90, 97, 122, 71, 95, 
	103, 48, 57, 65, 90, 97, 122, 70, 
	95, 102, 48, 57, 65, 90, 97, 122, 
	68, 73, 76, 95, 100, 105, 108, 48, 
	57, 65, 90, 97, 122, 82, 95, 114, 
	48, 57, 65, 90, 97, 122, 82, 95, 
	114, 48, 57, 65, 90, 97, 122, 65, 
	69, 73, 74, 83, 95, 97, 101, 105, 
	106, 115, 48, 57, 66, 90, 98, 122, 
	65, 95, 97, 48, 57, 66, 90, 98, 
	122, 67, 70, 72, 95, 99, 102, 104, 
	48, 57, 65, 90, 97, 122, 66, 67, 
	71, 73, 77, 81, 83, 86, 87, 95, 
	98, 99, 103, 105, 109, 113, 115, 118, 
	119, 48, 57, 65, 90, 97, 122, 82, 
	95, 114, 48, 57, 65, 90, 97, 122, 
	79, 95, 111, 48, 57, 65, 90, 97, 
	122, 85, 95, 117, 48, 57, 65, 90, 
	97, 122, 80, 95, 112, 48, 57, 65, 
	90, 97, 122, 78, 95, 110, 48, 57, 
	65, 90, 97, 122, 69, 95, 101, 48, 
	57, 65, 90, 97, 122, 65, 95, 97, 
	48, 57, 66, 90, 98, 122, 82, 95, 
	114, 48, 57, 65, 90, 97, 122, 83, 
	95, 115, 48, 57, 65, 90, 97, 122, 
	76, 95, 108, 48, 57, 65, 90, 97, 
	122, 78, 95, 110, 48, 57, 65, 90, 
	97, 122, 90, 95, 122, 48, 57, 65, 
	89, 97, 121, 46, 95, 48, 57, 65, 
	90, 97, 122, 73, 76, 78, 88, 95, 
	105, 108, 110, 120, 48, 57, 65, 90, 
	97, 122, 82, 95, 114, 48, 57, 65, 
	90, 97, 122, 83, 95, 115, 48, 57, 
	65, 90, 97, 122, 69, 95, 101, 48, 
	57, 65, 90, 97, 122, 68, 95, 100, 
	48, 57, 65, 90, 97, 122, 73, 95, 
	105, 48, 57, 65, 90, 97, 122, 70, 
	95, 102, 48, 57, 65, 90, 97, 122, 
	84, 88, 95, 116, 120, 48, 57, 65, 
	90, 97, 122, 69, 95, 101, 48, 57, 
	65, 90, 97, 122, 82, 95, 114, 48, 
	57, 65, 90, 97, 122, 78, 95, 110, 
	48, 57, 65, 90, 97, 122, 73, 80, 
	95, 105, 112, 48, 57, 65, 90, 97, 
	122, 76, 95, 108, 48, 57, 65, 90, 
	97, 122, 76, 95, 108, 48, 57, 65, 
	90, 97, 122, 68, 95, 100, 48, 57, 
	65, 90, 97, 122, 69, 95, 101, 48, 
	57, 65, 90, 97, 122, 80, 95, 112, 
	48, 57, 65, 90, 97, 122, 76, 95, 
	108, 48, 57, 65, 90, 97, 122, 79, 
	95, 111, 48, 57, 65, 90, 97, 122, 
	66, 95, 98, 48, 57, 65, 90, 97, 
	122, 65, 95, 97, 48, 57, 66, 90, 
	98, 122, 76, 95, 108, 48, 57, 65, 
	90, 97, 122, 65, 76, 95, 97, 108, 
	48, 57, 66, 90, 98, 122, 76, 95, 
	108, 48, 57, 65, 90, 97, 122, 84, 
	95, 116, 48, 57, 65, 90, 97, 122, 
	70, 73, 77, 78, 88, 89, 95, 102, 
	105, 109, 110, 120, 121, 48, 57, 65, 
	90, 97, 122, 68, 78, 95, 100, 110, 
	48, 57, 65, 90, 97, 122, 69, 95, 
	101, 48, 57, 65, 90, 97, 122, 70, 
	95, 102, 48, 57, 65, 90, 97, 122, 
	68, 95, 100, 48, 57, 65, 90, 97, 
	122, 69, 95, 101, 48, 57, 65, 90, 
	97, 122, 70, 95, 102, 48, 57, 65, 
	90, 97, 122, 82, 95, 114, 48, 57, 
	65, 90, 97, 122, 48, 67, 68, 73, 
	86, 95, 99, 100, 105, 118, 49, 57, 
	65, 90, 97, 122, 76, 95, 108, 48, 
	57, 65, 90, 97, 122, 85, 95, 117, 
	48, 57, 65, 90, 97, 122, 68, 95, 
	100, 48, 57, 65, 90, 97, 122, 69, 
	95, 101, 48, 57, 65, 90, 97, 122, 
	82, 95, 114, 48, 57, 65, 90, 97, 
	122, 82, 95, 114, 48, 57, 65, 90, 
	97, 122, 79, 95, 111, 48, 57, 65, 
	90, 97, 122, 75, 95, 107, 48, 57, 
	65, 90, 97, 122, 69, 95, 101, 48, 
	57, 65, 90, 97, 122, 72, 76, 95, 
	104, 108, 48, 57, 65, 90, 97, 122, 
	72, 76, 95, 104, 108, 48, 57, 65, 
	90, 97, 122, 80, 82, 95, 112, 114, 
	48, 57, 65, 90, 97, 122, 68, 73, 
	83, 95, 100, 105, 115, 48, 57, 65, 
	90, 97, 122, 68, 73, 95, 100, 105, 
	48, 57, 65, 90, 97, 122, 82, 88, 
	95, 114, 120, 48, 57, 65, 90, 97, 
	122, 88, 95, 120, 48, 57, 65, 90, 
	97, 122, 82, 88, 95, 114, 120, 48, 
	57, 65, 90, 97, 122, 88, 95, 120, 
	48, 57, 65, 90, 97, 122, 78, 95, 
	110, 48, 57, 65, 90, 97, 122, 69, 
	95, 101, 48, 57, 65, 90, 97, 122, 
	84, 95, 116, 48, 57, 65, 90, 97, 
	122, 79, 95, 111, 48, 57, 65, 90, 
	97, 122, 70, 78, 95, 102, 110, 48, 
	57, 65, 90, 97, 122, 70, 95, 102, 
	48, 57, 65, 90, 97, 122, 73, 76, 
	79, 85, 95, 105, 108, 111, 117, 48, 
	57, 65, 90, 97, 122, 82, 95, 114, 
	48, 57, 65, 90, 97, 122, 82, 95, 
	114, 48, 57, 65, 90, 97, 122, 79, 
	95, 111, 48, 57, 65, 90, 97, 122, 
	82, 95, 114, 48, 57, 65, 90, 97, 
	122, 84, 95, 116, 48, 57, 65, 90, 
	97, 122, 68, 95, 100, 48, 57, 65, 
	90, 97, 122, 85, 95, 117, 48, 57, 
	65, 90, 97, 122, 76, 95, 108, 48, 
	57, 65, 90, 97, 122, 69, 95, 101, 
	48, 57, 65, 90, 97, 122, 76, 95, 
	108, 48, 57, 65, 90, 97, 122, 67, 
	69, 79, 90, 95, 99, 101, 111, 122, 
	48, 57, 65, 89, 97, 121, 71, 88, 
	95, 103, 120, 48, 57, 65, 90, 97, 
	122, 84, 95, 116, 48, 57, 65, 90, 
	97, 122, 82, 95, 114, 48, 57, 65, 
	90, 97, 122, 69, 95, 101, 48, 57, 
	65, 90, 97, 122, 71, 95, 103, 48, 
	57, 65, 90, 97, 122, 80, 95, 112, 
	48, 57, 65, 90, 97, 122, 82, 84, 
	85, 95, 114, 116, 117, 48, 57, 65, 
	90, 97, 122, 71, 95, 103, 48, 57, 
	65, 90, 97, 122, 68, 73, 95, 100, 
	105, 48, 57, 65, 90, 97, 122, 77, 
	82, 95, 109, 114, 48, 57, 65, 90, 
	97, 122, 82, 95, 114, 48, 57, 65, 
	90, 97, 122, 77, 82, 95, 109, 114, 
	48, 57, 65, 90, 97, 122, 82, 95, 
	114, 48, 57, 65, 90, 97, 122, 84, 
	95, 116, 48, 57, 65, 90, 97, 122, 
	48, 68, 73, 95, 100, 105, 49, 57, 
	65, 90, 97, 122, 78, 95, 110, 48, 
	57, 65, 90, 97, 122, 66, 95, 98, 
	48, 57, 65, 90, 97, 122, 69, 73, 
	79, 85, 95, 101, 105, 111, 117, 48, 
	57, 65, 90, 97, 122, 88, 95, 120, 
	48, 57, 65, 90, 97, 122, 69, 95, 
	101, 48, 57, 65, 90, 97, 122, 76, 
	95, 108, 48, 57, 65, 90, 97, 122, 
	65, 68, 95, 97, 100, 48, 57, 66, 
	90, 98, 122, 68, 95, 100, 48, 57, 
	65, 90, 97, 122, 78, 95, 110, 48, 
	57, 65, 90, 97, 122, 80, 95, 112, 
	48, 57, 65, 90, 97, 122, 88, 95, 
	120, 48, 57, 65, 90, 97, 122, 66, 
	83, 95, 98, 115, 48, 57, 65, 90, 
	97, 122, 76, 95, 108, 48, 57, 65, 
	90, 97, 122, 73, 95, 105, 48, 57, 
	65, 90, 97, 122, 67, 95, 99, 48, 
	57, 65, 90, 97, 122, 72, 95, 104, 
	48, 57, 65, 90, 97, 122, 69, 76, 
	82, 83, 95, 101, 108, 114, 115, 48, 
	57, 65, 90, 97, 122, 83, 84, 95, 
	115, 116, 48, 57, 65, 90, 97, 122, 
	73, 78, 95, 105, 110, 48, 57, 65, 
	90, 97, 122, 65, 67, 68, 95, 97, 
	99, 100, 48, 57, 66, 90, 98, 122, 
	65, 95, 97, 48, 57, 66, 90, 98, 
	122, 65, 67, 68, 95, 97, 99, 100, 
	48, 57, 66, 90, 98, 122, 65, 95, 
	97, 48, 57, 66, 90, 98, 122, 84, 
	95, 116, 48, 57, 65, 90, 97, 122, 
	66, 67, 69, 76, 80, 82, 85, 87, 
	95, 98, 99, 101, 108, 112, 114, 117, 
	119, 48, 57, 65, 90, 97, 122, 67, 
	95, 99, 48, 57, 65, 90, 97, 122, 
	70, 95, 102, 48, 57, 65, 90, 97, 
	122, 67, 84, 95, 99, 116, 48, 57, 
	65, 90, 97, 122, 84, 95, 116, 48, 
	57, 65, 90, 97, 122, 73, 95, 105, 
	48, 57, 65, 90, 97, 122, 79, 95, 
	111, 48, 57, 65, 90, 97, 122, 78, 
	95, 110, 48, 57, 65, 90, 97, 122, 
	65, 95, 97, 48, 57, 66, 90, 98, 
	122, 69, 95, 101, 48, 57, 65, 90, 
	97, 122, 65, 76, 80, 95, 97, 108, 
	112, 48, 57, 66, 90, 98, 122, 65, 
	76, 95, 97, 108, 48, 57, 66, 90, 
	98, 122, 66, 95, 98, 48, 57, 65, 
	90, 97, 122, 65, 95, 97, 48, 57, 
	66, 90, 98, 122, 80, 95, 112, 48, 
	57, 65, 90, 97, 122, 78, 95, 110, 
	48, 57, 65, 90, 97, 122, 73, 95, 
	105, 48, 57, 65, 90, 97, 122, 66, 
	95, 98, 48, 57, 65, 90, 97, 122, 
	83, 95, 115, 48, 57, 65, 90, 97, 
	122, 84, 95, 116, 48, 57, 65, 90, 
	97, 122, 73, 95, 105, 48, 57, 65, 
	90, 97, 122, 79, 95, 111, 48, 57, 
	65, 90, 97, 122, 78, 95, 110, 48, 
	57, 65, 90, 97, 122, 68, 95, 100, 
	48, 57, 65, 90, 97, 122, 69, 95, 
	101, 48, 57, 65, 90, 97, 122, 70, 
	95, 102, 48, 57, 65, 90, 97, 122, 
	73, 95, 105, 48, 57, 65, 90, 97, 
	122, 78, 95, 110, 48, 57, 65, 90, 
	97, 122, 69, 95, 101, 48, 57, 65, 
	90, 97, 122, 79, 95, 111, 48, 57, 
	65, 90, 97, 122, 82, 95, 114, 48, 
	57, 65, 90, 97, 122, 521, 544, 607, 
	577, 602, 609, 634, 607, 560, 569, 577, 
	602, 609, 634, 307, 324, 326, 334, 339, 
	351, 356, 358, 366, 371, 521, 544, 563, 
	570, 580, 582, 590, 595, 607, 612, 614, 
	622, 627, 304, 313, 321, 346, 353, 378, 
	560, 569, 577, 602, 609, 634, 351, 521, 
	544, 570, 607, 304, 313, 321, 346, 353, 
	378, 560, 569, 577, 602, 609, 634, 306, 
	351, 521, 544, 562, 570, 607, 304, 313, 
	321, 346, 353, 378, 560, 569, 577, 602, 
	609, 634, 323, 324, 351, 355, 356, 521, 
	544, 570, 579, 580, 607, 611, 612, 304, 
	313, 321, 346, 353, 378, 560, 569, 577, 
	602, 609, 634, 39, 351, 521, 544, 570, 
	607, 304, 313, 321, 346, 353, 378, 560, 
	569, 577, 602, 609, 634, 324, 351, 356, 
	521, 544, 570, 580, 607, 612, 304, 313, 
	321, 346, 353, 378, 560, 569, 577, 602, 
	609, 634, 333, 351, 365, 521, 544, 570, 
	589, 607, 621, 304, 313, 321, 346, 353, 
	378, 560, 569, 577, 602, 609, 634, 336, 
	351, 368, 521, 544, 570, 592, 607, 624, 
	304, 313, 321, 346, 353, 378, 560, 569, 
	577, 602, 609, 634, 323, 351, 355, 521, 
	544, 570, 579, 607, 611, 304, 313, 321, 
	346, 353, 378, 560, 569, 577, 602, 609, 
	634, 323, 329, 351, 355, 361, 521, 544, 
	570, 579, 585, 607, 611, 617, 304, 313, 
	321, 346, 353, 378, 560, 569, 577, 602, 
	609, 634, 334, 340, 351, 366, 372, 521, 
	544, 570, 590, 596, 607, 622, 628, 304, 
	313, 321, 346, 353, 378, 560, 569, 577, 
	602, 609, 634, 321, 351, 353, 521, 544, 
	570, 577, 607, 609, 304, 313, 322, 346, 
	354, 378, 560, 569, 578, 602, 610, 634, 
	338, 351, 370, 521, 544, 570, 594, 607, 
	626, 304, 313, 321, 346, 353, 378, 560, 
	569, 577, 602, 609, 634, 345, 351, 377, 
	521, 544, 570, 601, 607, 633, 304, 313, 
	321, 346, 353, 378, 560, 569, 577, 602, 
	609, 634, 321, 323, 336, 351, 353, 355, 
	368, 521, 544, 570, 577, 579, 592, 607, 
	609, 611, 624, 304, 313, 322, 346, 354, 
	378, 560, 569, 578, 602, 610, 634, 332, 
	351, 364, 521, 544, 570, 588, 607, 620, 
	304, 313, 321, 346, 353, 378, 560, 569, 
	577, 602, 609, 634, 332, 351, 364, 521, 
	544, 570, 588, 607, 620, 304, 313, 321, 
	346, 353, 378, 560, 569, 577, 602, 609, 
	634, 351, 521, 544, 570, 607, 304, 313, 
	321, 346, 353, 378, 560, 569, 577, 602, 
	609, 634, 335, 336, 351, 367, 368, 521, 
	544, 570, 591, 592, 607, 623, 624, 304, 
	313, 321, 346, 353, 378, 560, 569, 577, 
	602, 609, 634, 346, 351, 378, 521, 544, 
	570, 602, 607, 634, 304, 313, 321, 345, 
	353, 377, 560, 569, 577, 601, 609, 633, 
	331, 351, 363, 521, 544, 570, 587, 607, 
	619, 304, 313, 321, 346, 353, 378, 560, 
	569, 577, 602, 609, 634, 327, 351, 359, 
	521, 544, 570, 583, 607, 615, 304, 313, 
	321, 346, 353, 378, 560, 569, 577, 602, 
	609, 634, 326, 351, 358, 521, 544, 570, 
	582, 607, 614, 304, 313, 321, 346, 353, 
	378, 560, 569, 577, 602, 609, 634, 324, 
	329, 332, 351, 356, 361, 364, 521, 544, 
	570, 580, 585, 588, 607, 612, 617, 620, 
	304, 313, 321, 346, 353, 378, 560, 569, 
	577, 602, 609, 634, 338, 351, 370, 521, 
	544, 570, 594, 607, 626, 304, 313, 321, 
	346, 353, 378, 560, 569, 577, 602, 609, 
	634, 338, 351, 370, 521, 544, 570, 594, 
	607, 626, 304, 313, 321, 346, 353, 378, 
	560, 569, 577, 602, 609, 634, 321, 325, 
	329, 330, 339, 351, 353, 357, 361, 362, 
	371, 521, 544, 570, 577, 581, 585, 586, 
	595, 607, 609, 613, 617, 618, 627, 304, 
	313, 322, 346, 354, 378, 560, 569, 578, 
	602, 610, 634, 321, 351, 353, 521, 544, 
	570, 577, 607, 609, 304, 313, 322, 346, 
	354, 378, 560, 569, 578, 602, 610, 634, 
	323, 326, 328, 351, 355, 358, 360, 521, 
	544, 570, 579, 582, 584, 607, 611, 614, 
	616, 304, 313, 321, 346, 353, 378, 560, 
	569, 577, 602, 609, 634, 322, 323, 327, 
	329, 333, 337, 339, 342, 343, 351, 354, 
	355, 359, 361, 365, 369, 371, 374, 375, 
	521, 544, 570, 578, 579, 583, 585, 589, 
	593, 595, 598, 599, 607, 610, 611, 615, 
	617, 621, 625, 627, 630, 631, 304, 313, 
	321, 346, 353, 378, 560, 569, 577, 602, 
	609, 634, 338, 351, 370, 521, 544, 570, 
	594, 607, 626, 304, 313, 321, 346, 353, 
	378, 560, 569, 577, 602, 609, 634, 335, 
	351, 367, 521, 544, 570, 591, 607, 623, 
	304, 313, 321, 346, 353, 378, 560, 569, 
	577, 602, 609, 634, 341, 351, 373, 521, 
	544, 570, 597, 607, 629, 304, 313, 321, 
	346, 353, 378, 560, 569, 577, 602, 609, 
	634, 336, 351, 368, 521, 544, 570, 592, 
	607, 624, 304, 313, 321, 346, 353, 378, 
	560, 569, 577, 602, 609, 634, 334, 351, 
	366, 521, 544, 570, 590, 607, 622, 304, 
	313, 321, 346, 353, 378, 560, 569, 577, 
	602, 609, 634, 325, 351, 357, 521, 544, 
	570, 581, 607, 613, 304, 313, 321, 346, 
	353, 378, 560, 569, 577, 602, 609, 634, 
	321, 351, 353, 521, 544, 570, 577, 607, 
	609, 304, 313, 322, 346, 354, 378, 560, 
	569, 578, 602, 610, 634, 338, 351, 370, 
	521, 544, 570, 594, 607, 626, 304, 313, 
	321, 346, 353, 378, 560, 569, 577, 602, 
	609, 634, 339, 351, 371, 521, 544, 570, 
	595, 607, 627, 304, 313, 321, 346, 353, 
	378, 560, 569, 577, 602, 609, 634, 332, 
	351, 364, 521, 544, 570, 588, 607, 620, 
	304, 313, 321, 346, 353, 378, 560, 569, 
	577, 602, 609, 634, 334, 351, 366, 521, 
	544, 570, 590, 607, 622, 304, 313, 321, 
	346, 353, 378, 560, 569, 577, 602, 609, 
	634, 346, 351, 378, 521, 544, 570, 602, 
	607, 634, 304, 313, 321, 345, 353, 377, 
	560, 569, 577, 601, 609, 633, 46, 351, 
	521, 544, 570, 607, 304, 313, 321, 346, 
	353, 378, 560, 569, 577, 602, 609, 634, 
	329, 332, 334, 344, 351, 361, 364, 366, 
	376, 521, 544, 570, 585, 588, 590, 600, 
	607, 617, 620, 622, 632, 304, 313, 321, 
	346, 353, 378, 560, 569, 577, 602, 609, 
	634, 338, 351, 370, 521, 544, 570, 594, 
	607, 626, 304, 313, 321, 346, 353, 378, 
	560, 569, 577, 602, 609, 634, 339, 351, 
	371, 521, 544, 570, 595, 607, 627, 304, 
	313, 321, 346, 353, 378, 560, 569, 577, 
	602, 609, 634, 325, 351, 357, 521, 544, 
	570, 581, 607, 613, 304, 313, 321, 346, 
	353, 378, 560, 569, 577, 602, 609, 634, 
	324, 351, 356, 521, 544, 570, 580, 607, 
	612, 304, 313, 321, 346, 353, 378, 560, 
	569, 577, 602, 609, 634, 329, 351, 361, 
	521, 544, 570, 585, 607, 617, 304, 313, 
	321, 346, 353, 378, 560, 569, 577, 602, 
	609, 634, 326, 351, 358, 521, 544, 570, 
	582, 607, 614, 304, 313, 321, 346, 353, 
	378, 560, 569, 577, 602, 609, 634, 340, 
	344, 351, 372, 376, 521, 544, 570, 596, 
	600, 607, 628, 632, 304, 313, 321, 346, 
	353, 378, 560, 569, 577, 602, 609, 634, 
	325, 351, 357, 521, 544, 570, 581, 607, 
	613, 304, 313, 321, 346, 353, 378, 560, 
	569, 577, 602, 609, 634, 338, 351, 370, 
	521, 544, 570, 594, 607, 626, 304, 313, 
	321, 346, 353, 378, 560, 569, 577, 602, 
	609, 634, 334, 351, 366, 521, 544, 570, 
	590, 607, 622, 304, 313, 321, 346, 353, 
	378, 560, 569, 577, 602, 609, 634, 329, 
	336, 351, 361, 368, 521, 544, 570, 585, 
	592, 607, 617, 624, 304, 313, 321, 346, 
	353, 378, 560, 569, 577, 602, 609, 634, 
	332, 351, 364, 521, 544, 570, 588, 607, 
	620, 304, 313, 321, 346, 353, 378, 560, 
	569, 577, 602, 609, 634, 332, 351, 364, 
	521, 544, 570, 588, 607, 620, 304, 313, 
	321, 346, 353, 378, 560, 569, 577, 602, 
	609, 634, 324, 351, 356, 521, 544, 570, 
	580, 607, 612, 304, 313, 321, 346, 353, 
	378, 560, 569, 577, 602, 609, 634, 325, 
	351, 357, 521, 544, 570, 581, 607, 613, 
	304, 313, 321, 346, 353, 378, 560, 569, 
	577, 602, 609, 634, 336, 351, 368, 521, 
	544, 570, 592, 607, 624, 304, 313, 321, 
	346, 353, 378, 560, 569, 577, 602, 609, 
	634, 332, 351, 364, 521, 544, 570, 588, 
	607, 620, 304, 313, 321, 346, 353, 378, 
	560, 569, 577, 602, 609, 634, 335, 351, 
	367, 521, 544, 570, 591, 607, 623, 304, 
	313, 321, 346, 353, 378, 560, 569, 577, 
	602, 609, 634, 322, 351, 354, 521, 544, 
	570, 578, 607, 610, 304, 313, 321, 346, 
	353, 378, 560, 569, 577, 602, 609, 634, 
	321, 351, 353, 521, 544, 570, 577, 607, 
	609, 304, 313, 322, 346, 354, 378, 560, 
	569, 578, 602, 610, 634, 332, 351, 364, 
	521, 544, 570, 588, 607, 620, 304, 313, 
	321, 346, 353, 378, 560, 569, 577, 602, 
	609, 634, 321, 332, 351, 353, 364, 521, 
	544, 570, 577, 588, 607, 609, 620, 304, 
	313, 322, 346, 354, 378, 560, 569, 578, 
	602, 610, 634, 332, 351, 364, 521, 544, 
	570, 588, 607, 620, 304, 313, 321, 346, 
	353, 378, 560, 569, 577, 602, 609, 634, 
	340, 351, 372, 521, 544, 570, 596, 607, 
	628, 304, 313, 321, 346, 353, 378, 560, 
	569, 577, 602, 609, 634, 326, 329, 333, 
	334, 344, 345, 351, 358, 361, 365, 366, 
	376, 377, 521, 544, 570, 582, 585, 589, 
	590, 600, 601, 607, 614, 617, 621, 622, 
	632, 633, 304, 313, 321, 346, 353, 378, 
	560, 569, 577, 602, 609, 634, 324, 334, 
	351, 356, 366, 521, 544, 570, 580, 590, 
	607, 612, 622, 304, 313, 321, 346, 353, 
	378, 560, 569, 577, 602, 609, 634, 325, 
	351, 357, 521, 544, 570, 581, 607, 613, 
	304, 313, 321, 346, 353, 378, 560, 569, 
	577, 602, 609, 634, 326, 351, 358, 521, 
	544, 570, 582, 607, 614, 304, 313, 321, 
	346, 353, 378, 560, 569, 577, 602, 609, 
	634, 324, 351, 356, 521, 544, 570, 580, 
	607, 612, 304, 313, 321, 346, 353, 378, 
	560, 569, 577, 602, 609, 634, 325, 351, 
	357, 521, 544, 570, 581, 607, 613, 304, 
	313, 321, 346, 353, 378, 560, 569, 577, 
	602, 609, 634, 326, 351, 358, 521, 544, 
	570, 582, 607, 614, 304, 313, 321, 346, 
	353, 378, 560, 569, 577, 602, 609, 634, 
	338, 351, 370, 521, 544, 570, 594, 607, 
	626, 304, 313, 321, 346, 353, 378, 560, 
	569, 577, 602, 609, 634, 304, 323, 324, 
	329, 342, 351, 355, 356, 361, 374, 521, 
	544, 560, 570, 579, 580, 585, 598, 607, 
	611, 612, 617, 630, 305, 313, 321, 346, 
	353, 378, 561, 569, 577, 602, 609, 634, 
	332, 351, 364, 521, 544, 570, 588, 607, 
	620, 304, 313, 321, 346, 353, 378, 560, 
	569, 577, 602, 609, 634, 341, 351, 373, 
	521, 544, 570, 597, 607, 629, 304, 313, 
	321, 346, 353, 378, 560, 569, 577, 602, 
	609, 634, 324, 351, 356, 521, 544, 570, 
	580, 607, 612, 304, 313, 321, 346, 353, 
	378, 560, 569, 577, 602, 609, 634, 325, 
	351, 357, 521, 544, 570, 581, 607, 613, 
	304, 313, 321, 346, 353, 378, 560, 569, 
	577, 602, 609, 634, 338, 351, 370, 521, 
	544, 570, 594, 607, 626, 304, 313, 321, 
	346, 353, 378, 560, 569, 577, 602, 609, 
	634, 338, 351, 370, 521, 544, 570, 594, 
	607, 626, 304, 313, 321, 346, 353, 378, 
	560, 569, 577, 602, 609, 634, 335, 351, 
	367, 521, 544, 570, 591, 607, 623, 304, 
	313, 321, 346, 353, 378, 560, 569, 577, 
	602, 609, 634, 331, 351, 363, 521, 544, 
	570, 587, 607, 619, 304, 313, 321, 346, 
	353, 378, 560, 569, 577, 602, 609, 634, 
	325, 351, 357, 521, 544, 570, 581, 607, 
	613, 304, 313, 321, 346, 353, 378, 560, 
	569, 577, 602, 609, 634, 328, 332, 351, 
	360, 364, 521, 544, 570, 584, 588, 607, 
	616, 620, 304, 313, 321, 346, 353, 378, 
	560, 569, 577, 602, 609, 634, 328, 332, 
	351, 360, 364, 521, 544, 570, 584, 588, 
	607, 616, 620, 304, 313, 321, 346, 353, 
	378, 560, 569, 577, 602, 609, 634, 336, 
	338, 351, 368, 370, 521, 544, 570, 592, 
	594, 607, 624, 626, 304, 313, 321, 346, 
	353, 378, 560, 569, 577, 602, 609, 634, 
	324, 329, 339, 351, 356, 361, 371, 521, 
	544, 570, 580, 585, 595, 607, 612, 617, 
	627, 304, 313, 321, 346, 353, 378, 560, 
	569, 577, 602, 609, 634, 324, 329, 351, 
	356, 361, 521, 544, 570, 580, 585, 607, 
	612, 617, 304, 313, 321, 346, 353, 378, 
	560, 569, 577, 602, 609, 634, 338, 344, 
	351, 370, 376, 521, 544, 570, 594, 600, 
	607, 626, 632, 304, 313, 321, 346, 353, 
	378, 560, 569, 577, 602, 609, 634, 344, 
	351, 376, 521, 544, 570, 600, 607, 632, 
	304, 313, 321, 346, 353, 378, 560, 569, 
	577, 602, 609, 634, 338, 344, 351, 370, 
	376, 521, 544, 570, 594, 600, 607, 626, 
	632, 304, 313, 321, 346, 353, 378, 560, 
	569, 577, 602, 609, 634, 344, 351, 376, 
	521, 544, 570, 600, 607, 632, 304, 313, 
	321, 346, 353, 378, 560, 569, 577, 602, 
	609, 634, 334, 351, 366, 521, 544, 570, 
	590, 607, 622, 304, 313, 321, 346, 353, 
	378, 560, 569, 577, 602, 609, 634, 325, 
	351, 357, 521, 544, 570, 581, 607, 613, 
	304, 313, 321, 346, 353, 378, 560, 569, 
	577, 602, 609, 634, 340, 351, 372, 521, 
	544, 570, 596, 607, 628, 304, 313, 321, 
	346, 353, 378, 560, 569, 577, 602, 609, 
	634, 335, 351, 367, 521, 544, 570, 591, 
	607, 623, 304, 313, 321, 346, 353, 378, 
	560, 569, 577, 602, 609, 634, 326, 334, 
	351, 358, 366, 521, 544, 570, 582, 590, 
	607, 614, 622, 304, 313, 321, 346, 353, 
	378, 560, 569, 577, 602, 609, 634, 326, 
	351, 358, 521, 544, 570, 582, 607, 614, 
	304, 313, 321, 346, 353, 378, 560, 569, 
	577, 602, 609, 634, 329, 332, 335, 341, 
	351, 361, 364, 367, 373, 521, 544, 570, 
	585, 588, 591, 597, 607, 617, 620, 623, 
	629, 304, 313, 321, 346, 353, 378, 560, 
	569, 577, 602, 609, 634, 338, 351, 370, 
	521, 544, 570, 594, 607, 626, 304, 313, 
	321, 346, 353, 378, 560, 569, 577, 602, 
	609, 634, 338, 351, 370, 521, 544, 570, 
	594, 607, 626, 304, 313, 321, 346, 353, 
	378, 560, 569, 577, 602, 609, 634, 335, 
	351, 367, 521, 544, 570, 591, 607, 623, 
	304, 313, 321, 346, 353, 378, 560, 569, 
	577, 602, 609, 634, 338, 351, 370, 521, 
	544, 570, 594, 607, 626, 304, 313, 321, 
	346, 353, 378, 560, 569, 577, 602, 609, 
	634, 340, 351, 372, 521, 544, 570, 596, 
	607, 628, 304, 313, 321, 346, 353, 378, 
	560, 569, 577, 602, 609, 634, 324, 351, 
	356, 521, 544, 570, 580, 607, 612, 304, 
	313, 321, 346, 353, 378, 560, 569, 577, 
	602, 609, 634, 341, 351, 373, 521, 544, 
	570, 597, 607, 629, 304, 313, 321, 346, 
	353, 378, 560, 569, 577, 602, 609, 634, 
	332, 351, 364, 521, 544, 570, 588, 607, 
	620, 304, 313, 321, 346, 353, 378, 560, 
	569, 577, 602, 609, 634, 325, 351, 357, 
	521, 544, 570, 581, 607, 613, 304, 313, 
	321, 346, 353, 378, 560, 569, 577, 602, 
	609, 634, 332, 351, 364, 521, 544, 570, 
	588, 607, 620, 304, 313, 321, 346, 353, 
	378, 560, 569, 577, 602, 609, 634, 323, 
	325, 335, 346, 351, 355, 357, 367, 378, 
	521, 544, 570, 579, 581, 591, 602, 607, 
	611, 613, 623, 634, 304, 313, 321, 345, 
	353, 377, 560, 569, 577, 601, 609, 633, 
	327, 344, 351, 359, 376, 521, 544, 570, 
	583, 600, 607, 615, 632, 304, 313, 321, 
	346, 353, 378, 560, 569, 577, 602, 609, 
	634, 340, 351, 372, 521, 544, 570, 596, 
	607, 628, 304, 313, 321, 346, 353, 378, 
	560, 569, 577, 602, 609, 634, 338, 351, 
	370, 521, 544, 570, 594, 607, 626, 304, 
	313, 321, 346, 353, 378, 560, 569, 577, 
	602, 609, 634, 325, 351, 357, 521, 544, 
	570, 581, 607, 613, 304, 313, 321, 346, 
	353, 378, 560, 569, 577, 602, 609, 634, 
	327, 351, 359, 521, 544, 570, 583, 607, 
	615, 304, 313, 321, 346, 353, 378, 560, 
	569, 577, 602, 609, 634, 336, 351, 368, 
	521, 544, 570, 592, 607, 624, 304, 313, 
	321, 346, 353, 378, 560, 569, 577, 602, 
	609, 634, 338, 340, 341, 351, 370, 372, 
	373, 521, 544, 570, 594, 596, 597, 607, 
	626, 628, 629, 304, 313, 321, 346, 353, 
	378, 560, 569, 577, 602, 609, 634, 327, 
	351, 359, 521, 544, 570, 583, 607, 615, 
	304, 313, 321, 346, 353, 378, 560, 569, 
	577, 602, 609, 634, 324, 329, 351, 356, 
	361, 521, 544, 570, 580, 585, 607, 612, 
	617, 304, 313, 321, 346, 353, 378, 560, 
	569, 577, 602, 609, 634, 333, 338, 351, 
	365, 370, 521, 544, 570, 589, 594, 607, 
	621, 626, 304, 313, 321, 346, 353, 378, 
	560, 569, 577, 602, 609, 634, 338, 351, 
	370, 521, 544, 570, 594, 607, 626, 304, 
	313, 321, 346, 353, 378, 560, 569, 577, 
	602, 609, 634, 333, 338, 351, 365, 370, 
	521, 544, 570, 589, 594, 607, 621, 626, 
	304, 313, 321, 346, 353, 378, 560, 569, 
	577, 602, 609, 634, 338, 351, 370, 521, 
	544, 570, 594, 607, 626, 304, 313, 321, 
	346, 353, 378, 560, 569, 577, 602, 609, 
	634, 340, 351, 372, 521, 544, 570, 596, 
	607, 628, 304, 313, 321, 346, 353, 378, 
	560, 569, 577, 602, 609, 634, 304, 324, 
	329, 351, 356, 361, 521, 544, 560, 570, 
	580, 585, 607, 612, 617, 305, 313, 321, 
	346, 353, 378, 561, 569, 577, 602, 609, 
	634, 334, 351, 366, 521, 544, 570, 590, 
	607, 622, 304, 313, 321, 346, 353, 378, 
	560, 569, 577, 602, 609, 634, 322, 351, 
	354, 521, 544, 570, 578, 607, 610, 304, 
	313, 321, 346, 353, 378, 560, 569, 577, 
	602, 609, 634, 325, 329, 335, 341, 351, 
	357, 361, 367, 373, 521, 544, 570, 581, 
	585, 591, 597, 607, 613, 617, 623, 629, 
	304, 313, 321, 346, 353, 378, 560, 569, 
	577, 602, 609, 634, 344, 351, 376, 521, 
	544, 570, 600, 607, 632, 304, 313, 321, 
	346, 353, 378, 560, 569, 577, 602, 609, 
	634, 325, 351, 357, 521, 544, 570, 581, 
	607, 613, 304, 313, 321, 346, 353, 378, 
	560, 569, 577, 602, 609, 634, 332, 351, 
	364, 521, 544, 570, 588, 607, 620, 304, 
	313, 321, 346, 353, 378, 560, 569, 577, 
	602, 609, 634, 321, 324, 351, 353, 356, 
	521, 544, 570, 577, 580, 607, 609, 612, 
	304, 313, 322, 346, 354, 378, 560, 569, 
	578, 602, 610, 634, 324, 351, 356, 521, 
	544, 570, 580, 607, 612, 304, 313, 321, 
	346, 353, 378, 560, 569, 577, 602, 609, 
	634, 334, 351, 366, 521, 544, 570, 590, 
	607, 622, 304, 313, 321, 346, 353, 378, 
	560, 569, 577, 602, 609, 634, 336, 351, 
	368, 521, 544, 570, 592, 607, 624, 304, 
	313, 321, 346, 353, 378, 560, 569, 577, 
	602, 609, 634, 344, 351, 376, 521, 544, 
	570, 600, 607, 632, 304, 313, 321, 346, 
	353, 378, 560, 569, 577, 602, 609, 634, 
	322, 339, 351, 354, 371, 521, 544, 570, 
	578, 595, 607, 610, 627, 304, 313, 321, 
	346, 353, 378, 560, 569, 577, 602, 609, 
	634, 332, 351, 364, 521, 544, 570, 588, 
	607, 620, 304, 313, 321, 346, 353, 378, 
	560, 569, 577, 602, 609, 634, 329, 351, 
	361, 521, 544, 570, 585, 607, 617, 304, 
	313, 321, 346, 353, 378, 560, 569, 577, 
	602, 609, 634, 323, 351, 355, 521, 544, 
	570, 579, 607, 611, 304, 313, 321, 346, 
	353, 378, 560, 569, 577, 602, 609, 634, 
	328, 351, 360, 521, 544, 570, 584, 607, 
	616, 304, 313, 321, 346, 353, 378, 560, 
	569, 577, 602, 609, 634, 325, 332, 338, 
	339, 351, 357, 364, 370, 371, 521, 544, 
	570, 581, 588, 594, 595, 607, 613, 620, 
	626, 627, 304, 313, 321, 346, 353, 378, 
	560, 569, 577, 602, 609, 634, 339, 340, 
	351, 371, 372, 521, 544, 570, 595, 596, 
	607, 627, 628, 304, 313, 321, 346, 353, 
	378, 560, 569, 577, 602, 609, 634, 329, 
	334, 351, 361, 366, 521, 544, 570, 585, 
	590, 607, 617, 622, 304, 313, 321, 346, 
	353, 378, 560, 569, 577, 602, 609, 634, 
	321, 323, 324, 351, 353, 355, 356, 521, 
	544, 570, 577, 579, 580, 607, 609, 611, 
	612, 304, 313, 322, 346, 354, 378, 560, 
	569, 578, 602, 610, 634, 321, 351, 353, 
	521, 544, 570, 577, 607, 609, 304, 313, 
	322, 346, 354, 378, 560, 569, 578, 602, 
	610, 634, 321, 323, 324, 351, 353, 355, 
	356, 521, 544, 570, 577, 579, 580, 607, 
	609, 611, 612, 304, 313, 322, 346, 354, 
	378, 560, 569, 578, 602, 610, 634, 321, 
	351, 353, 521, 544, 570, 577, 607, 609, 
	304, 313, 322, 346, 354, 378, 560, 569, 
	578, 602, 610, 634, 340, 351, 372, 521, 
	544, 570, 596, 607, 628, 304, 313, 321, 
	346, 353, 378, 560, 569, 577, 602, 609, 
	634, 322, 323, 325, 332, 336, 338, 341, 
	343, 351, 354, 355, 357, 364, 368, 370, 
	373, 375, 521, 544, 570, 578, 579, 581, 
	588, 592, 594, 597, 599, 607, 610, 611, 
	613, 620, 624, 626, 629, 631, 304, 313, 
	321, 346, 353, 378, 560, 569, 577, 602, 
	609, 634, 323, 351, 355, 521, 544, 570, 
	579, 607, 611, 304, 313, 321, 346, 353, 
	378, 560, 569, 577, 602, 609, 634, 326, 
	351, 358, 521, 544, 570, 582, 607, 614, 
	304, 313, 321, 346, 353, 378, 560, 569, 
	577, 602, 609, 634, 323, 340, 351, 355, 
	372, 521, 544, 570, 579, 596, 607, 611, 
	628, 304, 313, 321, 346, 353, 378, 560, 
	569, 577, 602, 609, 634, 340, 351, 372, 
	521, 544, 570, 596, 607, 628, 304, 313, 
	321, 346, 353, 378, 560, 569, 577, 602, 
	609, 634, 329, 351, 361, 521, 544, 570, 
	585, 607, 617, 304, 313, 321, 346, 353, 
	378, 560, 569, 577, 602, 609, 634, 335, 
	351, 367, 521, 544, 570, 591, 607, 623, 
	304, 313, 321, 346, 353, 378, 560, 569, 
	577, 602, 609, 634, 334, 351, 366, 521, 
	544, 570, 590, 607, 622, 304, 313, 321, 
	346, 353, 378, 560, 569, 577, 602, 609, 
	634, 321, 351, 353, 521, 544, 570, 577, 
	607, 609, 304, 313, 322, 346, 354, 378, 
	560, 569, 578, 602, 610, 634, 325, 351, 
	357, 521, 544, 570, 581, 607, 613, 304, 
	313, 321, 346, 353, 378, 560, 569, 577, 
	602, 609, 634, 321, 332, 336, 351, 353, 
	364, 368, 521, 544, 570, 577, 588, 592, 
	607, 609, 620, 624, 304, 313, 322, 346, 
	354, 378, 560, 569, 578, 602, 610, 634, 
	321, 332, 351, 353, 364, 521, 544, 570, 
	577, 588, 607, 609, 620, 304, 313, 322, 
	346, 354, 378, 560, 569, 578, 602, 610, 
	634, 322, 351, 354, 521, 544, 570, 578, 
	607, 610, 304, 313, 321, 346, 353, 378, 
	560, 569, 577, 602, 609, 634, 321, 351, 
	353, 521, 544, 570, 577, 607, 609, 304, 
	313, 322, 346, 354, 378, 560, 569, 578, 
	602, 610, 634, 336, 351, 368, 521, 544, 
	570, 592, 607, 624, 304, 313, 321, 346, 
	353, 378, 560, 569, 577, 602, 609, 634, 
	334, 351, 366, 521, 544, 570, 590, 607, 
	622, 304, 313, 321, 346, 353, 378, 560, 
	569, 577, 602, 609, 634, 329, 351, 361, 
	521, 544, 570, 585, 607, 617, 304, 313, 
	321, 346, 353, 378, 560, 569, 577, 602, 
	609, 634, 322, 351, 354, 521, 544, 570, 
	578, 607, 610, 304, 313, 321, 346, 353, 
	378, 560, 569, 577, 602, 609, 634, 339, 
	351, 371, 521, 544, 570, 595, 607, 627, 
	304, 313, 321, 346, 353, 378, 560, 569, 
	577, 602, 609, 634, 340, 351, 372, 521, 
	544, 570, 596, 607, 628, 304, 313, 321, 
	346, 353, 378, 560, 569, 577, 602, 609, 
	634, 329, 351, 361, 521, 544, 570, 585, 
	607, 617, 304, 313, 321, 346, 353, 378, 
	560, 569, 577, 602, 609, 634, 335, 351, 
	367, 521, 544, 570, 591, 607, 623, 304, 
	313, 321, 346, 353, 378, 560, 569, 577, 
	602, 609, 634, 334, 351, 366, 521, 544, 
	570, 590, 607, 622, 304, 313, 321, 346, 
	353, 378, 560, 569, 577, 602, 609, 634, 
	324, 351, 356, 521, 544, 570, 580, 607, 
	612, 304, 313, 321, 346, 353, 378, 560, 
	569, 577, 602, 609, 634, 325, 351, 357, 
	521, 544, 570, 581, 607, 613, 304, 313, 
	321, 346, 353, 378, 560, 569, 577, 602, 
	609, 634, 326, 351, 358, 521, 544, 570, 
	582, 607, 614, 304, 313, 321, 346, 353, 
	378, 560, 569, 577, 602, 609, 634, 329, 
	351, 361, 521, 544, 570, 585, 607, 617, 
	304, 313, 321, 346, 353, 378, 560, 569, 
	577, 602, 609, 634, 334, 351, 366, 521, 
	544, 570, 590, 607, 622, 304, 313, 321, 
	346, 353, 378, 560, 569, 577, 602, 609, 
	634, 325, 351, 357, 521, 544, 570, 581, 
	607, 613, 304, 313, 321, 346, 353, 378, 
	560, 569, 577, 602, 609, 634, 335, 351, 
	367, 521, 544, 570, 591, 607, 623, 304, 
	313, 321, 346, 353, 378, 560, 569, 577, 
	602, 609, 634, 338, 351, 370, 521, 544, 
	570, 594, 607, 626, 304, 313, 321, 346, 
	353, 378, 560, 569, 577, 602, 609, 634, 
	0
};
static const char _lexer_single_lengths[] = {
	0, 2, 3, 14, 2, 3, 3, 2, 
	3, 2, 3, 4, 5, 5, 2, 3, 
	2, 0, 8, 3, 3, 122, 1, 0, 
	1, 0, 1, 14, 1, 6, 4, 2, 
	2, 2, 0, 1, 3, 1, 2, 1, 
	10, 1, 2, 5, 2, 3, 3, 3, 
	3, 5, 5, 3, 3, 3, 7, 3, 
	3, 1, 5, 3, 3, 3, 3, 7, 
	3, 3, 11, 3, 7, 19, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 2, 9, 3, 3, 3, 3, 
	3, 3, 5, 3, 3, 3, 5, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 5, 3, 3, 13, 5, 3, 3, 
	3, 3, 3, 3, 10, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 5, 5, 
	5, 7, 5, 5, 3, 5, 3, 3, 
	3, 3, 3, 5, 3, 9, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	9, 5, 3, 3, 3, 3, 3, 7, 
	3, 5, 5, 3, 5, 3, 3, 6, 
	3, 3, 9, 3, 3, 3, 5, 3, 
	3, 3, 3, 5, 3, 3, 3, 3, 
	9, 5, 5, 7, 3, 7, 3, 3, 
	17, 3, 3, 5, 3, 3, 3, 3, 
	3, 3, 7, 5, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	1, 23, 5, 7, 13, 6, 9, 9, 
	9, 9, 13, 13, 9, 9, 9, 17, 
	9, 9, 5, 13, 9, 9, 9, 9, 
	17, 9, 9, 25, 9, 17, 41, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 6, 21, 9, 9, 9, 
	9, 9, 9, 13, 9, 9, 9, 13, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 13, 9, 9, 29, 13, 9, 
	9, 9, 9, 9, 9, 23, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 13, 
	13, 13, 17, 13, 13, 9, 13, 9, 
	9, 9, 9, 9, 13, 9, 21, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 21, 13, 9, 9, 9, 9, 9, 
	17, 9, 13, 13, 9, 13, 9, 9, 
	15, 9, 9, 21, 9, 9, 9, 13, 
	9, 9, 9, 9, 13, 9, 9, 9, 
	9, 21, 13, 13, 17, 9, 17, 9, 
	9, 37, 9, 9, 13, 9, 9, 9, 
	9, 9, 9, 17, 13, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9
};
static const char _lexer_range_lengths[] = {
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	3, 3, 0, 2, 0, 6, 0, 3, 
	1, 1, 0, 0, 0, 4, 4, 3, 
	3, 4, 3, 0, 0, 0, 0, 0, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 2, 
	3, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6
};
static const short _lexer_index_offsets[] = {
	0, 0, 3, 7, 22, 25, 29, 33, 
	36, 40, 43, 47, 52, 58, 64, 67, 
	71, 77, 81, 90, 96, 100, 229, 231, 
	235, 238, 240, 242, 257, 259, 270, 279, 
	285, 291, 298, 302, 304, 308, 310, 313, 
	315, 329, 334, 340, 349, 355, 362, 369, 
	376, 383, 392, 401, 408, 415, 422, 433, 
	440, 447, 452, 461, 468, 475, 482, 489, 
	500, 507, 514, 529, 536, 547, 570, 577, 
	584, 591, 598, 605, 612, 619, 626, 633, 
	640, 647, 654, 660, 673, 680, 687, 694, 
	701, 708, 715, 724, 731, 738, 745, 754, 
	761, 768, 775, 782, 789, 796, 803, 810, 
	817, 824, 833, 840, 847, 864, 873, 880, 
	887, 894, 901, 908, 915, 929, 936, 943, 
	950, 957, 964, 971, 978, 985, 992, 1001, 
	1010, 1019, 1030, 1039, 1048, 1055, 1064, 1071, 
	1078, 1085, 1092, 1099, 1108, 1115, 1128, 1135, 
	1142, 1149, 1156, 1163, 1170, 1177, 1184, 1191, 
	1198, 1211, 1220, 1227, 1234, 1241, 1248, 1255, 
	1266, 1273, 1282, 1291, 1298, 1307, 1314, 1321, 
	1331, 1338, 1345, 1358, 1365, 1372, 1379, 1388, 
	1395, 1402, 1409, 1416, 1425, 1432, 1439, 1446, 
	1453, 1466, 1475, 1484, 1495, 1502, 1513, 1520, 
	1527, 1548, 1555, 1562, 1571, 1578, 1585, 1592, 
	1599, 1606, 1613, 1624, 1633, 1640, 1647, 1654, 
	1661, 1668, 1675, 1682, 1689, 1696, 1703, 1710, 
	1717, 1724, 1731, 1738, 1745, 1752, 1759, 1766, 
	1772, 1777, 1807, 1819, 1833, 1853, 1866, 1882, 
	1898, 1914, 1930, 1950, 1970, 1986, 2002, 2018, 
	2042, 2058, 2074, 2086, 2106, 2122, 2138, 2154, 
	2170, 2194, 2210, 2226, 2258, 2274, 2298, 2346, 
	2362, 2378, 2394, 2410, 2426, 2442, 2458, 2474, 
	2490, 2506, 2522, 2538, 2551, 2579, 2595, 2611, 
	2627, 2643, 2659, 2675, 2695, 2711, 2727, 2743, 
	2763, 2779, 2795, 2811, 2827, 2843, 2859, 2875, 
	2891, 2907, 2923, 2943, 2959, 2975, 3011, 3031, 
	3047, 3063, 3079, 3095, 3111, 3127, 3157, 3173, 
	3189, 3205, 3221, 3237, 3253, 3269, 3285, 3301, 
	3321, 3341, 3361, 3385, 3405, 3425, 3441, 3461, 
	3477, 3493, 3509, 3525, 3541, 3561, 3577, 3605, 
	3621, 3637, 3653, 3669, 3685, 3701, 3717, 3733, 
	3749, 3765, 3793, 3813, 3829, 3845, 3861, 3877, 
	3893, 3917, 3933, 3953, 3973, 3989, 4009, 4025, 
	4041, 4063, 4079, 4095, 4123, 4139, 4155, 4171, 
	4191, 4207, 4223, 4239, 4255, 4275, 4291, 4307, 
	4323, 4339, 4367, 4387, 4407, 4431, 4447, 4471, 
	4487, 4503, 4547, 4563, 4579, 4599, 4615, 4631, 
	4647, 4663, 4679, 4695, 4719, 4739, 4755, 4771, 
	4787, 4803, 4819, 4835, 4851, 4867, 4883, 4899, 
	4915, 4931, 4947, 4963, 4979, 4995, 5011, 5027
};
static const short _lexer_indicies[] = {
	1, 1, 0, 2, 1, 1, 0, 4, 
	4, 5, 6, 7, 8, 9, 10, 5, 
	6, 7, 8, 9, 10, 3, 11, 11, 
	3, 11, 11, 12, 3, 6, 6, 13, 
	3, 14, 14, 3, 14, 14, 15, 3, 
	16, 16, 3, 16, 16, 17, 3, 18, 
	19, 18, 19, 3, 18, 18, 20, 20, 
	20, 3, 19, 19, 21, 21, 21, 3, 
	22, 22, 3, 22, 22, 23, 3, 25, 
	25, 24, 24, 24, 0, 27, 27, 27, 
	26, 29, 30, 31, 32, 29, 30, 31, 
	32, 28, 34, 34, 35, 35, 35, 33, 
	36, 36, 37, 0, 39, 40, 41, 42, 
	43, 44, 45, 46, 47, 48, 49, 50, 
	51, 52, 53, 55, 56, 58, 59, 60, 
	61, 62, 63, 64, 65, 66, 67, 68, 
	66, 69, 70, 71, 72, 38, 73, 74, 
	75, 76, 77, 78, 79, 80, 81, 82, 
	83, 85, 86, 87, 88, 89, 90, 91, 
	92, 93, 94, 95, 84, 74, 75, 76, 
	77, 78, 79, 80, 81, 82, 83, 85, 
	86, 87, 88, 89, 90, 91, 92, 93, 
	94, 95, 96, 97, 98, 99, 100, 101, 
	102, 103, 104, 105, 106, 108, 109, 110, 
	111, 112, 113, 114, 115, 116, 117, 118, 
	107, 97, 98, 99, 100, 101, 102, 103, 
	104, 105, 106, 108, 109, 110, 111, 112, 
	113, 114, 115, 116, 117, 118, 38, 57, 
	84, 84, 107, 107, 54, 120, 119, 121, 
	121, 121, 0, 122, 123, 0, 123, 124, 
	126, 125, 4, 4, 5, 6, 7, 8, 
	9, 10, 5, 6, 7, 8, 9, 10, 
	127, 129, 128, 131, 25, 132, 131, 25, 
	132, 56, 57, 24, 24, 130, 133, 25, 
	133, 25, 56, 57, 24, 24, 130, 25, 
	25, 57, 24, 24, 130, 25, 25, 24, 
	24, 24, 134, 25, 25, 135, 24, 24, 
	24, 0, 27, 27, 27, 136, 137, 59, 
	139, 140, 141, 138, 143, 142, 145, 146, 
	144, 148, 147, 150, 151, 152, 153, 154, 
	84, 151, 152, 153, 154, 84, 84, 84, 
	149, 84, 84, 84, 84, 0, 156, 84, 
	84, 84, 84, 155, 157, 158, 84, 157, 
	158, 84, 84, 84, 155, 160, 84, 84, 
	84, 84, 159, 161, 84, 161, 84, 84, 
	84, 155, 162, 84, 162, 84, 84, 84, 
	155, 163, 84, 163, 84, 84, 84, 155, 
	164, 84, 164, 84, 84, 84, 155, 166, 
	167, 84, 166, 167, 84, 84, 84, 165, 
	168, 169, 84, 168, 169, 84, 84, 84, 
	155, 170, 84, 170, 84, 84, 84, 155, 
	171, 84, 171, 84, 84, 84, 155, 172, 
	84, 172, 84, 84, 84, 155, 174, 175, 
	176, 84, 174, 175, 176, 84, 84, 84, 
	173, 177, 84, 177, 84, 84, 84, 155, 
	178, 84, 178, 84, 84, 84, 155, 180, 
	84, 84, 84, 179, 181, 182, 84, 181, 
	182, 84, 84, 84, 155, 183, 84, 183, 
	84, 84, 84, 155, 184, 84, 184, 84, 
	84, 84, 155, 185, 84, 185, 84, 84, 
	84, 155, 186, 84, 186, 84, 84, 84, 
	155, 188, 189, 190, 84, 188, 189, 190, 
	84, 84, 84, 187, 192, 84, 192, 84, 
	84, 84, 191, 194, 84, 194, 84, 84, 
	84, 193, 196, 197, 198, 199, 200, 84, 
	196, 197, 198, 199, 200, 84, 84, 84, 
	195, 201, 84, 201, 84, 84, 84, 155, 
	203, 204, 205, 84, 203, 204, 205, 84, 
	84, 84, 202, 206, 207, 208, 209, 210, 
	211, 212, 213, 214, 84, 206, 207, 208, 
	209, 210, 211, 212, 213, 214, 84, 84, 
	84, 155, 215, 84, 215, 84, 84, 84, 
	155, 216, 84, 216, 84, 84, 84, 155, 
	217, 84, 217, 84, 84, 84, 155, 218, 
	84, 218, 84, 84, 84, 155, 219, 84, 
	219, 84, 84, 84, 155, 220, 84, 220, 
	84, 84, 84, 155, 221, 84, 221, 84, 
	84, 84, 155, 222, 84, 222, 84, 84, 
	84, 155, 223, 84, 223, 84, 84, 84, 
	155, 224, 84, 224, 84, 84, 84, 155, 
	225, 84, 225, 84, 84, 84, 155, 226, 
	84, 226, 84, 84, 84, 155, 227, 84, 
	84, 84, 84, 155, 229, 230, 231, 232, 
	84, 229, 230, 231, 232, 84, 84, 84, 
	228, 234, 84, 234, 84, 84, 84, 233, 
	235, 84, 235, 84, 84, 84, 155, 236, 
	84, 236, 84, 84, 84, 155, 237, 84, 
	237, 84, 84, 84, 155, 238, 84, 238, 
	84, 84, 84, 155, 239, 84, 239, 84, 
	84, 84, 155, 241, 242, 84, 241, 242, 
	84, 84, 84, 240, 243, 84, 243, 84, 
	84, 84, 155, 244, 84, 244, 84, 84, 
	84, 155, 245, 84, 245, 84, 84, 84, 
	155, 247, 248, 84, 247, 248, 84, 84, 
	84, 246, 249, 84, 249, 84, 84, 84, 
	155, 250, 84, 250, 84, 84, 84, 155, 
	251, 84, 251, 84, 84, 84, 155, 252, 
	84, 252, 84, 84, 84, 155, 253, 84, 
	253, 84, 84, 84, 155, 254, 84, 254, 
	84, 84, 84, 155, 255, 84, 255, 84, 
	84, 84, 155, 256, 84, 256, 84, 84, 
	84, 155, 257, 84, 257, 84, 84, 84, 
	155, 258, 84, 258, 84, 84, 84, 155, 
	260, 261, 84, 260, 261, 84, 84, 84, 
	259, 262, 84, 262, 84, 84, 84, 155, 
	263, 84, 263, 84, 84, 84, 155, 265, 
	266, 267, 268, 269, 270, 84, 265, 266, 
	267, 268, 269, 270, 84, 84, 84, 264, 
	272, 273, 84, 272, 273, 84, 84, 84, 
	271, 274, 84, 274, 84, 84, 84, 155, 
	275, 84, 275, 84, 84, 84, 155, 276, 
	84, 276, 84, 84, 84, 155, 277, 84, 
	277, 84, 84, 84, 155, 278, 84, 278, 
	84, 84, 84, 155, 279, 84, 279, 84, 
	84, 84, 155, 281, 282, 283, 284, 285, 
	84, 282, 283, 284, 285, 84, 84, 84, 
	280, 287, 84, 287, 84, 84, 84, 286, 
	288, 84, 288, 84, 84, 84, 155, 289, 
	84, 289, 84, 84, 84, 155, 290, 84, 
	290, 84, 84, 84, 155, 292, 84, 292, 
	84, 84, 84, 291, 294, 84, 294, 84, 
	84, 84, 293, 295, 84, 295, 84, 84, 
	84, 155, 296, 84, 296, 84, 84, 84, 
	155, 297, 84, 297, 84, 84, 84, 155, 
	299, 300, 84, 299, 300, 84, 84, 84, 
	298, 302, 303, 84, 302, 303, 84, 84, 
	84, 301, 304, 305, 84, 304, 305, 84, 
	84, 84, 155, 307, 308, 309, 84, 307, 
	308, 309, 84, 84, 84, 306, 311, 312, 
	84, 311, 312, 84, 84, 84, 310, 314, 
	315, 84, 314, 315, 84, 84, 84, 313, 
	317, 84, 317, 84, 84, 84, 316, 319, 
	320, 84, 319, 320, 84, 84, 84, 318, 
	322, 84, 322, 84, 84, 84, 321, 323, 
	84, 323, 84, 84, 84, 155, 324, 84, 
	324, 84, 84, 84, 155, 325, 84, 325, 
	84, 84, 84, 155, 326, 84, 326, 84, 
	84, 84, 155, 327, 328, 84, 327, 328, 
	84, 84, 84, 155, 329, 84, 329, 84, 
	84, 84, 155, 331, 332, 333, 334, 84, 
	331, 332, 333, 334, 84, 84, 84, 330, 
	335, 84, 335, 84, 84, 84, 155, 336, 
	84, 336, 84, 84, 84, 155, 337, 84, 
	337, 84, 84, 84, 155, 338, 84, 338, 
	84, 84, 84, 155, 339, 84, 339, 84, 
	84, 84, 155, 340, 84, 340, 84, 84, 
	84, 155, 341, 84, 341, 84, 84, 84, 
	155, 342, 84, 342, 84, 84, 84, 155, 
	343, 84, 343, 84, 84, 84, 155, 344, 
	84, 344, 84, 84, 84, 155, 345, 346, 
	347, 348, 84, 345, 346, 347, 348, 84, 
	84, 84, 155, 349, 350, 84, 349, 350, 
	84, 84, 84, 155, 351, 84, 351, 84, 
	84, 84, 155, 352, 84, 352, 84, 84, 
	84, 155, 353, 84, 353, 84, 84, 84, 
	155, 354, 84, 354, 84, 84, 84, 155, 
	355, 84, 355, 84, 84, 84, 155, 356, 
	357, 358, 84, 356, 357, 358, 84, 84, 
	84, 155, 360, 84, 360, 84, 84, 84, 
	359, 361, 362, 84, 361, 362, 84, 84, 
	84, 155, 363, 364, 84, 363, 364, 84, 
	84, 84, 155, 366, 84, 366, 84, 84, 
	84, 365, 367, 368, 84, 367, 368, 84, 
	84, 84, 155, 370, 84, 370, 84, 84, 
	84, 369, 371, 84, 371, 84, 84, 84, 
	155, 373, 374, 375, 84, 374, 375, 84, 
	84, 84, 372, 377, 84, 377, 84, 84, 
	84, 376, 378, 84, 378, 84, 84, 84, 
	155, 380, 381, 382, 383, 84, 380, 381, 
	382, 383, 84, 84, 84, 379, 384, 84, 
	384, 84, 84, 84, 155, 385, 84, 385, 
	84, 84, 84, 155, 386, 84, 386, 84, 
	84, 84, 155, 387, 388, 84, 387, 388, 
	84, 84, 84, 155, 389, 84, 389, 84, 
	84, 84, 155, 390, 84, 390, 84, 84, 
	84, 155, 392, 84, 392, 84, 84, 84, 
	391, 394, 84, 394, 84, 84, 84, 393, 
	395, 396, 84, 395, 396, 84, 84, 84, 
	155, 397, 84, 397, 84, 84, 84, 155, 
	398, 84, 398, 84, 84, 84, 155, 399, 
	84, 399, 84, 84, 84, 155, 400, 84, 
	400, 84, 84, 84, 155, 402, 403, 404, 
	405, 84, 402, 403, 404, 405, 84, 84, 
	84, 401, 406, 407, 84, 406, 407, 84, 
	84, 84, 155, 409, 410, 84, 409, 410, 
	84, 84, 84, 408, 412, 413, 414, 84, 
	412, 413, 414, 84, 84, 84, 411, 416, 
	84, 416, 84, 84, 84, 415, 418, 419, 
	420, 84, 418, 419, 420, 84, 84, 84, 
	417, 422, 84, 422, 84, 84, 84, 421, 
	423, 84, 423, 84, 84, 84, 155, 424, 
	425, 426, 427, 428, 429, 430, 431, 84, 
	424, 425, 426, 427, 428, 429, 430, 431, 
	84, 84, 84, 155, 432, 84, 432, 84, 
	84, 84, 155, 433, 84, 433, 84, 84, 
	84, 155, 434, 435, 84, 434, 435, 84, 
	84, 84, 155, 436, 84, 436, 84, 84, 
	84, 155, 437, 84, 437, 84, 84, 84, 
	155, 438, 84, 438, 84, 84, 84, 155, 
	439, 84, 439, 84, 84, 84, 155, 441, 
	84, 441, 84, 84, 84, 440, 442, 84, 
	442, 84, 84, 84, 155, 443, 444, 445, 
	84, 443, 444, 445, 84, 84, 84, 155, 
	446, 447, 84, 446, 447, 84, 84, 84, 
	155, 448, 84, 448, 84, 84, 84, 155, 
	449, 84, 449, 84, 84, 84, 155, 450, 
	84, 450, 84, 84, 84, 155, 451, 84, 
	451, 84, 84, 84, 155, 452, 84, 452, 
	84, 84, 84, 155, 453, 84, 453, 84, 
	84, 84, 155, 454, 84, 454, 84, 84, 
	84, 155, 455, 84, 455, 84, 84, 84, 
	155, 457, 84, 457, 84, 84, 84, 456, 
	458, 84, 458, 84, 84, 84, 155, 459, 
	84, 459, 84, 84, 84, 155, 460, 84, 
	460, 84, 84, 84, 155, 461, 84, 461, 
	84, 84, 84, 155, 462, 84, 462, 84, 
	84, 84, 155, 463, 84, 463, 84, 84, 
	84, 155, 464, 84, 464, 84, 84, 84, 
	155, 465, 84, 465, 84, 84, 84, 155, 
	466, 84, 466, 84, 84, 84, 155, 467, 
	84, 467, 84, 84, 84, 155, 34, 34, 
	35, 35, 35, 468, 35, 35, 35, 35, 
	469, 150, 151, 152, 153, 154, 84, 151, 
	152, 153, 154, 36, 36, 470, 37, 471, 
	472, 473, 474, 107, 471, 472, 473, 474, 
	84, 84, 84, 107, 107, 107, 149, 84, 
	36, 36, 37, 107, 84, 84, 84, 107, 
	107, 107, 0, 156, 84, 36, 36, 475, 
	37, 107, 84, 84, 84, 107, 107, 107, 
	155, 157, 158, 84, 157, 158, 36, 36, 
	37, 476, 477, 107, 476, 477, 84, 84, 
	84, 107, 107, 107, 155, 160, 84, 36, 
	36, 37, 107, 84, 84, 84, 107, 107, 
	107, 159, 161, 84, 161, 36, 36, 37, 
	478, 107, 478, 84, 84, 84, 107, 107, 
	107, 155, 162, 84, 162, 36, 36, 37, 
	479, 107, 479, 84, 84, 84, 107, 107, 
	107, 155, 163, 84, 163, 36, 36, 37, 
	480, 107, 480, 84, 84, 84, 107, 107, 
	107, 155, 164, 84, 164, 36, 36, 37, 
	481, 107, 481, 84, 84, 84, 107, 107, 
	107, 155, 166, 167, 84, 166, 167, 36, 
	36, 37, 482, 483, 107, 482, 483, 84, 
	84, 84, 107, 107, 107, 165, 168, 169, 
	84, 168, 169, 36, 36, 37, 484, 485, 
	107, 484, 485, 84, 84, 84, 107, 107, 
	107, 155, 170, 84, 170, 36, 36, 37, 
	486, 107, 486, 84, 84, 84, 107, 107, 
	107, 155, 171, 84, 171, 36, 36, 37, 
	487, 107, 487, 84, 84, 84, 107, 107, 
	107, 155, 172, 84, 172, 36, 36, 37, 
	488, 107, 488, 84, 84, 84, 107, 107, 
	107, 155, 174, 175, 176, 84, 174, 175, 
	176, 36, 36, 37, 489, 490, 491, 107, 
	489, 490, 491, 84, 84, 84, 107, 107, 
	107, 173, 177, 84, 177, 36, 36, 37, 
	492, 107, 492, 84, 84, 84, 107, 107, 
	107, 155, 178, 84, 178, 36, 36, 37, 
	493, 107, 493, 84, 84, 84, 107, 107, 
	107, 155, 180, 36, 36, 37, 494, 84, 
	84, 84, 107, 107, 107, 179, 181, 182, 
	84, 181, 182, 36, 36, 37, 495, 496, 
	107, 495, 496, 84, 84, 84, 107, 107, 
	107, 155, 183, 84, 183, 36, 36, 37, 
	497, 107, 497, 84, 84, 84, 107, 107, 
	107, 155, 184, 84, 184, 36, 36, 37, 
	498, 107, 498, 84, 84, 84, 107, 107, 
	107, 155, 185, 84, 185, 36, 36, 37, 
	499, 107, 499, 84, 84, 84, 107, 107, 
	107, 155, 186, 84, 186, 36, 36, 37, 
	500, 107, 500, 84, 84, 84, 107, 107, 
	107, 155, 188, 189, 190, 84, 188, 189, 
	190, 36, 36, 37, 501, 502, 503, 107, 
	501, 502, 503, 84, 84, 84, 107, 107, 
	107, 187, 192, 84, 192, 36, 36, 37, 
	504, 107, 504, 84, 84, 84, 107, 107, 
	107, 191, 194, 84, 194, 36, 36, 37, 
	505, 107, 505, 84, 84, 84, 107, 107, 
	107, 193, 196, 197, 198, 199, 200, 84, 
	196, 197, 198, 199, 200, 36, 36, 37, 
	506, 507, 508, 509, 510, 107, 506, 507, 
	508, 509, 510, 84, 84, 84, 107, 107, 
	107, 195, 201, 84, 201, 36, 36, 37, 
	511, 107, 511, 84, 84, 84, 107, 107, 
	107, 155, 203, 204, 205, 84, 203, 204, 
	205, 36, 36, 37, 512, 513, 514, 107, 
	512, 513, 514, 84, 84, 84, 107, 107, 
	107, 202, 206, 207, 208, 209, 210, 211, 
	212, 213, 214, 84, 206, 207, 208, 209, 
	210, 211, 212, 213, 214, 36, 36, 37, 
	515, 516, 517, 518, 519, 520, 521, 522, 
	523, 107, 515, 516, 517, 518, 519, 520, 
	521, 522, 523, 84, 84, 84, 107, 107, 
	107, 155, 215, 84, 215, 36, 36, 37, 
	524, 107, 524, 84, 84, 84, 107, 107, 
	107, 155, 216, 84, 216, 36, 36, 37, 
	525, 107, 525, 84, 84, 84, 107, 107, 
	107, 155, 217, 84, 217, 36, 36, 37, 
	526, 107, 526, 84, 84, 84, 107, 107, 
	107, 155, 218, 84, 218, 36, 36, 37, 
	527, 107, 527, 84, 84, 84, 107, 107, 
	107, 155, 219, 84, 219, 36, 36, 37, 
	528, 107, 528, 84, 84, 84, 107, 107, 
	107, 155, 220, 84, 220, 36, 36, 37, 
	529, 107, 529, 84, 84, 84, 107, 107, 
	107, 155, 221, 84, 221, 36, 36, 37, 
	530, 107, 530, 84, 84, 84, 107, 107, 
	107, 155, 222, 84, 222, 36, 36, 37, 
	531, 107, 531, 84, 84, 84, 107, 107, 
	107, 155, 223, 84, 223, 36, 36, 37, 
	532, 107, 532, 84, 84, 84, 107, 107, 
	107, 155, 224, 84, 224, 36, 36, 37, 
	533, 107, 533, 84, 84, 84, 107, 107, 
	107, 155, 225, 84, 225, 36, 36, 37, 
	534, 107, 534, 84, 84, 84, 107, 107, 
	107, 155, 226, 84, 226, 36, 36, 37, 
	535, 107, 535, 84, 84, 84, 107, 107, 
	107, 155, 227, 84, 36, 36, 37, 107, 
	84, 84, 84, 107, 107, 107, 155, 229, 
	230, 231, 232, 84, 229, 230, 231, 232, 
	36, 36, 37, 536, 537, 538, 539, 107, 
	536, 537, 538, 539, 84, 84, 84, 107, 
	107, 107, 228, 234, 84, 234, 36, 36, 
	37, 540, 107, 540, 84, 84, 84, 107, 
	107, 107, 233, 235, 84, 235, 36, 36, 
	37, 541, 107, 541, 84, 84, 84, 107, 
	107, 107, 155, 236, 84, 236, 36, 36, 
	37, 542, 107, 542, 84, 84, 84, 107, 
	107, 107, 155, 237, 84, 237, 36, 36, 
	37, 543, 107, 543, 84, 84, 84, 107, 
	107, 107, 155, 238, 84, 238, 36, 36, 
	37, 544, 107, 544, 84, 84, 84, 107, 
	107, 107, 155, 239, 84, 239, 36, 36, 
	37, 545, 107, 545, 84, 84, 84, 107, 
	107, 107, 155, 241, 242, 84, 241, 242, 
	36, 36, 37, 546, 547, 107, 546, 547, 
	84, 84, 84, 107, 107, 107, 240, 243, 
	84, 243, 36, 36, 37, 548, 107, 548, 
	84, 84, 84, 107, 107, 107, 155, 244, 
	84, 244, 36, 36, 37, 549, 107, 549, 
	84, 84, 84, 107, 107, 107, 155, 245, 
	84, 245, 36, 36, 37, 550, 107, 550, 
	84, 84, 84, 107, 107, 107, 155, 247, 
	248, 84, 247, 248, 36, 36, 37, 551, 
	552, 107, 551, 552, 84, 84, 84, 107, 
	107, 107, 246, 249, 84, 249, 36, 36, 
	37, 553, 107, 553, 84, 84, 84, 107, 
	107, 107, 155, 250, 84, 250, 36, 36, 
	37, 554, 107, 554, 84, 84, 84, 107, 
	107, 107, 155, 251, 84, 251, 36, 36, 
	37, 555, 107, 555, 84, 84, 84, 107, 
	107, 107, 155, 252, 84, 252, 36, 36, 
	37, 556, 107, 556, 84, 84, 84, 107, 
	107, 107, 155, 253, 84, 253, 36, 36, 
	37, 557, 107, 557, 84, 84, 84, 107, 
	107, 107, 155, 254, 84, 254, 36, 36, 
	37, 558, 107, 558, 84, 84, 84, 107, 
	107, 107, 155, 255, 84, 255, 36, 36, 
	37, 559, 107, 559, 84, 84, 84, 107, 
	107, 107, 155, 256, 84, 256, 36, 36, 
	37, 560, 107, 560, 84, 84, 84, 107, 
	107, 107, 155, 257, 84, 257, 36, 36, 
	37, 561, 107, 561, 84, 84, 84, 107, 
	107, 107, 155, 258, 84, 258, 36, 36, 
	37, 562, 107, 562, 84, 84, 84, 107, 
	107, 107, 155, 260, 261, 84, 260, 261, 
	36, 36, 37, 563, 564, 107, 563, 564, 
	84, 84, 84, 107, 107, 107, 259, 262, 
	84, 262, 36, 36, 37, 565, 107, 565, 
	84, 84, 84, 107, 107, 107, 155, 263, 
	84, 263, 36, 36, 37, 566, 107, 566, 
	84, 84, 84, 107, 107, 107, 155, 265, 
	266, 267, 268, 269, 270, 84, 265, 266, 
	267, 268, 269, 270, 36, 36, 37, 567, 
	568, 569, 570, 571, 572, 107, 567, 568, 
	569, 570, 571, 572, 84, 84, 84, 107, 
	107, 107, 264, 272, 273, 84, 272, 273, 
	36, 36, 37, 573, 574, 107, 573, 574, 
	84, 84, 84, 107, 107, 107, 271, 274, 
	84, 274, 36, 36, 37, 575, 107, 575, 
	84, 84, 84, 107, 107, 107, 155, 275, 
	84, 275, 36, 36, 37, 576, 107, 576, 
	84, 84, 84, 107, 107, 107, 155, 276, 
	84, 276, 36, 36, 37, 577, 107, 577, 
	84, 84, 84, 107, 107, 107, 155, 277, 
	84, 277, 36, 36, 37, 578, 107, 578, 
	84, 84, 84, 107, 107, 107, 155, 278, 
	84, 278, 36, 36, 37, 579, 107, 579, 
	84, 84, 84, 107, 107, 107, 155, 279, 
	84, 279, 36, 36, 37, 580, 107, 580, 
	84, 84, 84, 107, 107, 107, 155, 281, 
	282, 283, 284, 285, 84, 282, 283, 284, 
	285, 36, 36, 581, 37, 582, 583, 584, 
	585, 107, 582, 583, 584, 585, 84, 84, 
	84, 107, 107, 107, 280, 287, 84, 287, 
	36, 36, 37, 586, 107, 586, 84, 84, 
	84, 107, 107, 107, 286, 288, 84, 288, 
	36, 36, 37, 587, 107, 587, 84, 84, 
	84, 107, 107, 107, 155, 289, 84, 289, 
	36, 36, 37, 588, 107, 588, 84, 84, 
	84, 107, 107, 107, 155, 290, 84, 290, 
	36, 36, 37, 589, 107, 589, 84, 84, 
	84, 107, 107, 107, 155, 292, 84, 292, 
	36, 36, 37, 590, 107, 590, 84, 84, 
	84, 107, 107, 107, 291, 294, 84, 294, 
	36, 36, 37, 591, 107, 591, 84, 84, 
	84, 107, 107, 107, 293, 295, 84, 295, 
	36, 36, 37, 592, 107, 592, 84, 84, 
	84, 107, 107, 107, 155, 296, 84, 296, 
	36, 36, 37, 593, 107, 593, 84, 84, 
	84, 107, 107, 107, 155, 297, 84, 297, 
	36, 36, 37, 594, 107, 594, 84, 84, 
	84, 107, 107, 107, 155, 299, 300, 84, 
	299, 300, 36, 36, 37, 595, 596, 107, 
	595, 596, 84, 84, 84, 107, 107, 107, 
	298, 302, 303, 84, 302, 303, 36, 36, 
	37, 597, 598, 107, 597, 598, 84, 84, 
	84, 107, 107, 107, 301, 304, 305, 84, 
	304, 305, 36, 36, 37, 599, 600, 107, 
	599, 600, 84, 84, 84, 107, 107, 107, 
	155, 307, 308, 309, 84, 307, 308, 309, 
	36, 36, 37, 601, 602, 603, 107, 601, 
	602, 603, 84, 84, 84, 107, 107, 107, 
	306, 311, 312, 84, 311, 312, 36, 36, 
	37, 604, 605, 107, 604, 605, 84, 84, 
	84, 107, 107, 107, 310, 314, 315, 84, 
	314, 315, 36, 36, 37, 606, 607, 107, 
	606, 607, 84, 84, 84, 107, 107, 107, 
	313, 317, 84, 317, 36, 36, 37, 608, 
	107, 608, 84, 84, 84, 107, 107, 107, 
	316, 319, 320, 84, 319, 320, 36, 36, 
	37, 609, 610, 107, 609, 610, 84, 84, 
	84, 107, 107, 107, 318, 322, 84, 322, 
	36, 36, 37, 611, 107, 611, 84, 84, 
	84, 107, 107, 107, 321, 323, 84, 323, 
	36, 36, 37, 612, 107, 612, 84, 84, 
	84, 107, 107, 107, 155, 324, 84, 324, 
	36, 36, 37, 613, 107, 613, 84, 84, 
	84, 107, 107, 107, 155, 325, 84, 325, 
	36, 36, 37, 614, 107, 614, 84, 84, 
	84, 107, 107, 107, 155, 326, 84, 326, 
	36, 36, 37, 615, 107, 615, 84, 84, 
	84, 107, 107, 107, 155, 327, 328, 84, 
	327, 328, 36, 36, 37, 616, 617, 107, 
	616, 617, 84, 84, 84, 107, 107, 107, 
	155, 329, 84, 329, 36, 36, 37, 618, 
	107, 618, 84, 84, 84, 107, 107, 107, 
	155, 331, 332, 333, 334, 84, 331, 332, 
	333, 334, 36, 36, 37, 619, 620, 621, 
	622, 107, 619, 620, 621, 622, 84, 84, 
	84, 107, 107, 107, 330, 335, 84, 335, 
	36, 36, 37, 623, 107, 623, 84, 84, 
	84, 107, 107, 107, 155, 336, 84, 336, 
	36, 36, 37, 624, 107, 624, 84, 84, 
	84, 107, 107, 107, 155, 337, 84, 337, 
	36, 36, 37, 625, 107, 625, 84, 84, 
	84, 107, 107, 107, 155, 338, 84, 338, 
	36, 36, 37, 626, 107, 626, 84, 84, 
	84, 107, 107, 107, 155, 339, 84, 339, 
	36, 36, 37, 627, 107, 627, 84, 84, 
	84, 107, 107, 107, 155, 340, 84, 340, 
	36, 36, 37, 628, 107, 628, 84, 84, 
	84, 107, 107, 107, 155, 341, 84, 341, 
	36, 36, 37, 629, 107, 629, 84, 84, 
	84, 107, 107, 107, 155, 342, 84, 342, 
	36, 36, 37, 630, 107, 630, 84, 84, 
	84, 107, 107, 107, 155, 343, 84, 343, 
	36, 36, 37, 631, 107, 631, 84, 84, 
	84, 107, 107, 107, 155, 344, 84, 344, 
	36, 36, 37, 632, 107, 632, 84, 84, 
	84, 107, 107, 107, 155, 345, 346, 347, 
	348, 84, 345, 346, 347, 348, 36, 36, 
	37, 633, 634, 635, 636, 107, 633, 634, 
	635, 636, 84, 84, 84, 107, 107, 107, 
	155, 349, 350, 84, 349, 350, 36, 36, 
	37, 637, 638, 107, 637, 638, 84, 84, 
	84, 107, 107, 107, 155, 351, 84, 351, 
	36, 36, 37, 639, 107, 639, 84, 84, 
	84, 107, 107, 107, 155, 352, 84, 352, 
	36, 36, 37, 640, 107, 640, 84, 84, 
	84, 107, 107, 107, 155, 353, 84, 353, 
	36, 36, 37, 641, 107, 641, 84, 84, 
	84, 107, 107, 107, 155, 354, 84, 354, 
	36, 36, 37, 642, 107, 642, 84, 84, 
	84, 107, 107, 107, 155, 355, 84, 355, 
	36, 36, 37, 643, 107, 643, 84, 84, 
	84, 107, 107, 107, 155, 356, 357, 358, 
	84, 356, 357, 358, 36, 36, 37, 644, 
	645, 646, 107, 644, 645, 646, 84, 84, 
	84, 107, 107, 107, 155, 360, 84, 360, 
	36, 36, 37, 647, 107, 647, 84, 84, 
	84, 107, 107, 107, 359, 361, 362, 84, 
	361, 362, 36, 36, 37, 648, 649, 107, 
	648, 649, 84, 84, 84, 107, 107, 107, 
	155, 363, 364, 84, 363, 364, 36, 36, 
	37, 650, 651, 107, 650, 651, 84, 84, 
	84, 107, 107, 107, 155, 366, 84, 366, 
	36, 36, 37, 652, 107, 652, 84, 84, 
	84, 107, 107, 107, 365, 367, 368, 84, 
	367, 368, 36, 36, 37, 653, 654, 107, 
	653, 654, 84, 84, 84, 107, 107, 107, 
	155, 370, 84, 370, 36, 36, 37, 655, 
	107, 655, 84, 84, 84, 107, 107, 107, 
	369, 371, 84, 371, 36, 36, 37, 656, 
	107, 656, 84, 84, 84, 107, 107, 107, 
	155, 373, 374, 375, 84, 374, 375, 36, 
	36, 657, 37, 658, 659, 107, 658, 659, 
	84, 84, 84, 107, 107, 107, 372, 377, 
	84, 377, 36, 36, 37, 660, 107, 660, 
	84, 84, 84, 107, 107, 107, 376, 378, 
	84, 378, 36, 36, 37, 661, 107, 661, 
	84, 84, 84, 107, 107, 107, 155, 380, 
	381, 382, 383, 84, 380, 381, 382, 383, 
	36, 36, 37, 662, 663, 664, 665, 107, 
	662, 663, 664, 665, 84, 84, 84, 107, 
	107, 107, 379, 384, 84, 384, 36, 36, 
	37, 666, 107, 666, 84, 84, 84, 107, 
	107, 107, 155, 385, 84, 385, 36, 36, 
	37, 667, 107, 667, 84, 84, 84, 107, 
	107, 107, 155, 386, 84, 386, 36, 36, 
	37, 668, 107, 668, 84, 84, 84, 107, 
	107, 107, 155, 387, 388, 84, 387, 388, 
	36, 36, 37, 669, 670, 107, 669, 670, 
	84, 84, 84, 107, 107, 107, 155, 389, 
	84, 389, 36, 36, 37, 671, 107, 671, 
	84, 84, 84, 107, 107, 107, 155, 390, 
	84, 390, 36, 36, 37, 672, 107, 672, 
	84, 84, 84, 107, 107, 107, 155, 392, 
	84, 392, 36, 36, 37, 673, 107, 673, 
	84, 84, 84, 107, 107, 107, 391, 394, 
	84, 394, 36, 36, 37, 674, 107, 674, 
	84, 84, 84, 107, 107, 107, 393, 395, 
	396, 84, 395, 396, 36, 36, 37, 675, 
	676, 107, 675, 676, 84, 84, 84, 107, 
	107, 107, 155, 397, 84, 397, 36, 36, 
	37, 677, 107, 677, 84, 84, 84, 107, 
	107, 107, 155, 398, 84, 398, 36, 36, 
	37, 678, 107, 678, 84, 84, 84, 107, 
	107, 107, 155, 399, 84, 399, 36, 36, 
	37, 679, 107, 679, 84, 84, 84, 107, 
	107, 107, 155, 400, 84, 400, 36, 36, 
	37, 680, 107, 680, 84, 84, 84, 107, 
	107, 107, 155, 402, 403, 404, 405, 84, 
	402, 403, 404, 405, 36, 36, 37, 681, 
	682, 683, 684, 107, 681, 682, 683, 684, 
	84, 84, 84, 107, 107, 107, 401, 406, 
	407, 84, 406, 407, 36, 36, 37, 685, 
	686, 107, 685, 686, 84, 84, 84, 107, 
	107, 107, 155, 409, 410, 84, 409, 410, 
	36, 36, 37, 687, 688, 107, 687, 688, 
	84, 84, 84, 107, 107, 107, 408, 412, 
	413, 414, 84, 412, 413, 414, 36, 36, 
	37, 689, 690, 691, 107, 689, 690, 691, 
	84, 84, 84, 107, 107, 107, 411, 416, 
	84, 416, 36, 36, 37, 692, 107, 692, 
	84, 84, 84, 107, 107, 107, 415, 418, 
	419, 420, 84, 418, 419, 420, 36, 36, 
	37, 693, 694, 695, 107, 693, 694, 695, 
	84, 84, 84, 107, 107, 107, 417, 422, 
	84, 422, 36, 36, 37, 696, 107, 696, 
	84, 84, 84, 107, 107, 107, 421, 423, 
	84, 423, 36, 36, 37, 697, 107, 697, 
	84, 84, 84, 107, 107, 107, 155, 424, 
	425, 426, 427, 428, 429, 430, 431, 84, 
	424, 425, 426, 427, 428, 429, 430, 431, 
	36, 36, 37, 698, 699, 700, 701, 702, 
	703, 704, 705, 107, 698, 699, 700, 701, 
	702, 703, 704, 705, 84, 84, 84, 107, 
	107, 107, 155, 432, 84, 432, 36, 36, 
	37, 706, 107, 706, 84, 84, 84, 107, 
	107, 107, 155, 433, 84, 433, 36, 36, 
	37, 707, 107, 707, 84, 84, 84, 107, 
	107, 107, 155, 434, 435, 84, 434, 435, 
	36, 36, 37, 708, 709, 107, 708, 709, 
	84, 84, 84, 107, 107, 107, 155, 436, 
	84, 436, 36, 36, 37, 710, 107, 710, 
	84, 84, 84, 107, 107, 107, 155, 437, 
	84, 437, 36, 36, 37, 711, 107, 711, 
	84, 84, 84, 107, 107, 107, 155, 438, 
	84, 438, 36, 36, 37, 712, 107, 712, 
	84, 84, 84, 107, 107, 107, 155, 439, 
	84, 439, 36, 36, 37, 713, 107, 713, 
	84, 84, 84, 107, 107, 107, 155, 441, 
	84, 441, 36, 36, 37, 714, 107, 714, 
	84, 84, 84, 107, 107, 107, 440, 442, 
	84, 442, 36, 36, 37, 715, 107, 715, 
	84, 84, 84, 107, 107, 107, 155, 443, 
	444, 445, 84, 443, 444, 445, 36, 36, 
	37, 716, 717, 718, 107, 716, 717, 718, 
	84, 84, 84, 107, 107, 107, 155, 446, 
	447, 84, 446, 447, 36, 36, 37, 719, 
	720, 107, 719, 720, 84, 84, 84, 107, 
	107, 107, 155, 448, 84, 448, 36, 36, 
	37, 721, 107, 721, 84, 84, 84, 107, 
	107, 107, 155, 449, 84, 449, 36, 36, 
	37, 722, 107, 722, 84, 84, 84, 107, 
	107, 107, 155, 450, 84, 450, 36, 36, 
	37, 723, 107, 723, 84, 84, 84, 107, 
	107, 107, 155, 451, 84, 451, 36, 36, 
	37, 724, 107, 724, 84, 84, 84, 107, 
	107, 107, 155, 452, 84, 452, 36, 36, 
	37, 725, 107, 725, 84, 84, 84, 107, 
	107, 107, 155, 453, 84, 453, 36, 36, 
	37, 726, 107, 726, 84, 84, 84, 107, 
	107, 107, 155, 454, 84, 454, 36, 36, 
	37, 727, 107, 727, 84, 84, 84, 107, 
	107, 107, 155, 455, 84, 455, 36, 36, 
	37, 728, 107, 728, 84, 84, 84, 107, 
	107, 107, 155, 457, 84, 457, 36, 36, 
	37, 729, 107, 729, 84, 84, 84, 107, 
	107, 107, 456, 458, 84, 458, 36, 36, 
	37, 730, 107, 730, 84, 84, 84, 107, 
	107, 107, 155, 459, 84, 459, 36, 36, 
	37, 731, 107, 731, 84, 84, 84, 107, 
	107, 107, 155, 460, 84, 460, 36, 36, 
	37, 732, 107, 732, 84, 84, 84, 107, 
	107, 107, 155, 461, 84, 461, 36, 36, 
	37, 733, 107, 733, 84, 84, 84, 107, 
	107, 107, 155, 462, 84, 462, 36, 36, 
	37, 734, 107, 734, 84, 84, 84, 107, 
	107, 107, 155, 463, 84, 463, 36, 36, 
	37, 735, 107, 735, 84, 84, 84, 107, 
	107, 107, 155, 464, 84, 464, 36, 36, 
	37, 736, 107, 736, 84, 84, 84, 107, 
	107, 107, 155, 465, 84, 465, 36, 36, 
	37, 737, 107, 737, 84, 84, 84, 107, 
	107, 107, 155, 466, 84, 466, 36, 36, 
	37, 738, 107, 738, 84, 84, 84, 107, 
	107, 107, 155, 467, 84, 467, 36, 36, 
	37, 739, 107, 739, 84, 84, 84, 107, 
	107, 107, 155, 0
};
static const short _lexer_trans_targs[] = {
	21, 2, 21, 21, 3, 4, 6, 7, 
	9, 11, 14, 5, 21, 21, 8, 21, 
	10, 21, 12, 13, 21, 21, 15, 21, 
	16, 21, 21, 34, 21, 21, 21, 21, 
	21, 21, 19, 224, 20, 21, 21, 21, 
	22, 21, 21, 23, 24, 26, 21, 27, 
	21, 28, 21, 21, 21, 21, 0, 29, 
	30, 31, 21, 35, 36, 37, 38, 21, 
	24, 21, 21, 21, 21, 21, 39, 21, 
	21, 21, 40, 49, 54, 66, 83, 94, 
	100, 105, 108, 128, 41, 129, 141, 152, 
	159, 170, 184, 192, 210, 214, 221, 41, 
	223, 225, 234, 239, 251, 268, 279, 285, 
	290, 293, 313, 226, 314, 326, 337, 344, 
	355, 369, 377, 395, 399, 406, 226, 21, 
	21, 23, 1, 25, 21, 21, 21, 21, 
	21, 21, 21, 33, 17, 32, 21, 33, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 42, 43, 
	44, 45, 46, 21, 41, 41, 41, 21, 
	21, 41, 47, 48, 41, 21, 41, 50, 
	51, 41, 52, 53, 41, 21, 55, 62, 
	63, 56, 57, 21, 58, 59, 60, 41, 
	61, 41, 41, 21, 64, 65, 41, 21, 
	41, 21, 41, 21, 67, 68, 41, 80, 
	82, 41, 21, 41, 69, 79, 41, 41, 
	70, 74, 41, 41, 41, 76, 41, 71, 
	72, 73, 41, 75, 41, 77, 78, 41, 
	41, 81, 41, 18, 21, 84, 85, 87, 
	90, 21, 41, 86, 41, 88, 89, 41, 
	21, 91, 41, 92, 93, 41, 21, 95, 
	99, 96, 97, 98, 41, 41, 101, 102, 
	103, 104, 41, 21, 106, 41, 107, 41, 
	21, 109, 115, 41, 116, 126, 127, 21, 
	110, 112, 111, 41, 113, 114, 41, 41, 
	21, 41, 117, 121, 122, 123, 21, 118, 
	119, 120, 41, 21, 41, 21, 41, 124, 
	125, 41, 21, 41, 41, 21, 41, 41, 
	41, 41, 21, 130, 135, 137, 21, 131, 
	133, 21, 132, 41, 21, 41, 21, 134, 
	41, 21, 41, 136, 41, 138, 139, 140, 
	41, 41, 21, 142, 146, 147, 151, 143, 
	144, 145, 41, 41, 148, 149, 150, 41, 
	41, 41, 153, 158, 41, 41, 154, 155, 
	156, 157, 41, 41, 160, 161, 166, 21, 
	41, 162, 164, 163, 41, 21, 41, 165, 
	41, 21, 41, 167, 21, 41, 41, 168, 
	21, 169, 41, 21, 41, 171, 177, 179, 
	172, 173, 174, 175, 176, 41, 41, 21, 
	178, 21, 41, 180, 183, 181, 182, 41, 
	41, 21, 185, 187, 189, 191, 41, 186, 
	21, 41, 41, 21, 41, 188, 41, 21, 
	41, 21, 41, 190, 41, 21, 41, 41, 
	193, 194, 195, 202, 41, 203, 204, 205, 
	41, 41, 196, 200, 197, 198, 199, 41, 
	21, 201, 41, 41, 41, 41, 41, 41, 
	41, 206, 207, 208, 209, 41, 211, 212, 
	21, 213, 41, 215, 216, 217, 218, 219, 
	220, 41, 222, 41, 21, 21, 227, 228, 
	229, 230, 231, 226, 226, 226, 226, 232, 
	233, 226, 226, 235, 236, 226, 237, 238, 
	226, 240, 247, 248, 241, 242, 243, 244, 
	245, 226, 246, 226, 226, 249, 250, 226, 
	226, 226, 252, 253, 226, 265, 267, 226, 
	226, 254, 264, 226, 226, 255, 259, 226, 
	226, 226, 261, 226, 256, 257, 258, 226, 
	260, 226, 262, 263, 226, 226, 266, 226, 
	269, 270, 272, 275, 226, 271, 226, 273, 
	274, 226, 276, 226, 277, 278, 226, 280, 
	284, 281, 282, 283, 226, 226, 286, 287, 
	288, 289, 226, 291, 226, 292, 226, 294, 
	300, 226, 301, 311, 312, 295, 297, 296, 
	226, 298, 299, 226, 226, 226, 302, 306, 
	307, 308, 303, 304, 305, 226, 226, 226, 
	309, 310, 226, 226, 226, 226, 226, 226, 
	226, 315, 320, 322, 316, 318, 317, 226, 
	226, 319, 226, 226, 321, 226, 323, 324, 
	325, 226, 226, 327, 331, 332, 336, 328, 
	329, 330, 226, 226, 333, 334, 335, 226, 
	226, 226, 338, 343, 226, 226, 339, 340, 
	341, 342, 226, 226, 345, 346, 351, 226, 
	347, 349, 348, 226, 226, 350, 226, 226, 
	352, 226, 226, 353, 354, 226, 226, 356, 
	362, 364, 357, 358, 359, 360, 361, 226, 
	226, 363, 226, 365, 368, 366, 367, 226, 
	226, 370, 372, 374, 376, 226, 371, 226, 
	226, 226, 373, 226, 226, 226, 375, 226, 
	226, 226, 378, 379, 380, 387, 226, 388, 
	389, 390, 226, 226, 381, 385, 382, 383, 
	384, 226, 386, 226, 226, 226, 226, 226, 
	226, 226, 391, 392, 393, 394, 226, 396, 
	397, 398, 226, 400, 401, 402, 403, 404, 
	405, 226, 407, 226
};
static const short _lexer_trans_actions[] = {
	229, 0, 89, 221, 0, 0, 0, 0, 
	0, 0, 0, 0, 63, 59, 0, 65, 
	0, 67, 0, 0, 69, 71, 0, 73, 
	0, 87, 227, 0, 225, 75, 79, 81, 
	77, 223, 0, 0, 0, 85, 83, 7, 
	0, 93, 9, 714, 234, 0, 91, 5, 
	13, 0, 15, 17, 19, 23, 0, 702, 
	702, 702, 25, 0, 0, 0, 0, 41, 
	714, 43, 95, 45, 47, 51, 0, 55, 
	57, 21, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 699, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 240, 
	5, 288, 261, 246, 264, 267, 291, 699, 
	270, 294, 699, 699, 279, 258, 699, 699, 
	255, 300, 699, 699, 699, 699, 240, 97, 
	33, 705, 0, 0, 219, 99, 11, 101, 
	103, 49, 213, 708, 0, 708, 217, 711, 
	215, 207, 107, 27, 29, 31, 109, 35, 
	111, 39, 37, 113, 53, 133, 0, 0, 
	0, 0, 0, 209, 327, 411, 414, 147, 
	61, 417, 0, 0, 231, 123, 306, 0, 
	0, 420, 0, 0, 333, 115, 0, 0, 
	0, 0, 0, 151, 0, 0, 0, 687, 
	0, 690, 426, 153, 0, 0, 444, 155, 
	435, 157, 441, 125, 0, 0, 453, 0, 
	5, 447, 141, 450, 0, 0, 336, 339, 
	0, 0, 351, 348, 354, 0, 360, 0, 
	0, 0, 342, 0, 345, 0, 0, 357, 
	330, 0, 456, 0, 127, 0, 0, 0, 
	0, 159, 303, 0, 363, 0, 0, 366, 
	161, 0, 465, 0, 0, 369, 135, 0, 
	0, 0, 0, 0, 636, 693, 0, 0, 
	0, 0, 372, 129, 0, 312, 0, 468, 
	137, 0, 0, 471, 0, 0, 0, 149, 
	0, 0, 0, 378, 0, 0, 381, 297, 
	163, 663, 0, 0, 0, 0, 165, 0, 
	0, 0, 384, 167, 483, 169, 489, 0, 
	0, 696, 143, 273, 282, 145, 276, 285, 
	492, 495, 131, 0, 0, 0, 171, 0, 
	0, 173, 0, 630, 175, 633, 177, 0, 
	624, 179, 627, 0, 387, 0, 0, 0, 
	393, 390, 121, 0, 0, 0, 0, 0, 
	0, 0, 639, 660, 0, 0, 0, 396, 
	618, 243, 0, 0, 237, 513, 0, 0, 
	0, 0, 645, 516, 0, 0, 0, 181, 
	399, 0, 0, 0, 522, 203, 678, 0, 
	525, 201, 672, 0, 183, 666, 531, 0, 
	185, 0, 621, 119, 252, 0, 0, 0, 
	0, 0, 0, 0, 0, 651, 648, 117, 
	0, 187, 642, 0, 0, 0, 0, 402, 
	540, 139, 0, 0, 0, 0, 543, 0, 
	189, 549, 552, 191, 558, 0, 567, 193, 
	564, 195, 573, 0, 582, 197, 579, 585, 
	0, 0, 0, 0, 324, 0, 0, 0, 
	588, 591, 0, 0, 0, 0, 0, 405, 
	199, 0, 654, 597, 600, 657, 603, 606, 
	609, 0, 0, 0, 0, 615, 0, 0, 
	205, 0, 684, 0, 0, 0, 0, 0, 
	0, 408, 0, 612, 105, 211, 699, 699, 
	321, 699, 699, 327, 411, 414, 417, 699, 
	699, 231, 306, 699, 699, 420, 699, 699, 
	333, 699, 699, 429, 699, 423, 699, 699, 
	699, 687, 699, 690, 426, 432, 438, 444, 
	435, 441, 699, 309, 453, 699, 699, 447, 
	450, 699, 699, 336, 339, 699, 699, 351, 
	348, 354, 699, 360, 699, 699, 699, 342, 
	699, 345, 699, 699, 357, 330, 699, 456, 
	459, 699, 699, 462, 303, 699, 363, 699, 
	699, 366, 699, 465, 699, 699, 369, 699, 
	699, 699, 699, 699, 636, 693, 699, 699, 
	699, 699, 372, 699, 312, 699, 468, 375, 
	699, 471, 474, 315, 318, 699, 699, 699, 
	378, 699, 699, 381, 297, 663, 477, 480, 
	486, 699, 699, 699, 699, 384, 483, 489, 
	699, 699, 696, 273, 282, 276, 285, 492, 
	495, 498, 699, 699, 501, 507, 504, 630, 
	633, 510, 624, 627, 699, 387, 699, 699, 
	699, 393, 390, 699, 699, 699, 699, 699, 
	699, 699, 639, 660, 699, 699, 699, 396, 
	618, 243, 699, 699, 237, 513, 699, 699, 
	699, 699, 645, 516, 519, 699, 699, 399, 
	699, 699, 675, 522, 678, 669, 525, 672, 
	528, 666, 531, 534, 699, 621, 252, 699, 
	249, 699, 699, 699, 699, 699, 699, 651, 
	648, 537, 642, 699, 699, 699, 699, 402, 
	540, 699, 555, 570, 699, 543, 546, 549, 
	552, 558, 561, 567, 564, 573, 576, 582, 
	579, 585, 699, 699, 699, 699, 324, 699, 
	699, 699, 588, 591, 699, 594, 699, 699, 
	699, 405, 699, 654, 597, 600, 657, 603, 
	606, 609, 699, 699, 699, 699, 615, 699, 
	681, 699, 684, 699, 699, 699, 699, 699, 
	699, 408, 699, 612
};
static const short _lexer_to_state_actions[] = {
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 1, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0
};
static const short _lexer_from_state_actions[] = {
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 3, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0
};
static const short _lexer_eof_trans[] = {
	0, 1, 1, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	1, 27, 29, 34, 1, 0, 120, 1, 
	1, 125, 126, 128, 129, 131, 131, 131, 
	135, 1, 137, 138, 139, 143, 145, 148, 
	150, 1, 156, 156, 160, 156, 156, 156, 
	156, 166, 156, 156, 156, 156, 174, 156, 
	156, 180, 156, 156, 156, 156, 156, 188, 
	192, 194, 196, 156, 203, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 229, 234, 156, 156, 156, 
	156, 156, 241, 156, 156, 156, 247, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 260, 156, 156, 265, 272, 156, 156, 
	156, 156, 156, 156, 281, 287, 156, 156, 
	156, 292, 294, 156, 156, 156, 299, 302, 
	156, 307, 311, 314, 317, 319, 322, 156, 
	156, 156, 156, 156, 156, 331, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	360, 156, 156, 366, 156, 370, 156, 373, 
	377, 156, 380, 156, 156, 156, 156, 156, 
	156, 392, 394, 156, 156, 156, 156, 156, 
	402, 156, 409, 412, 416, 418, 422, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	441, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 457, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 469, 
	470, 150, 1, 156, 156, 160, 156, 156, 
	156, 156, 166, 156, 156, 156, 156, 174, 
	156, 156, 180, 156, 156, 156, 156, 156, 
	188, 192, 194, 196, 156, 203, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 229, 234, 156, 156, 
	156, 156, 156, 241, 156, 156, 156, 247, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 260, 156, 156, 265, 272, 156, 
	156, 156, 156, 156, 156, 281, 287, 156, 
	156, 156, 292, 294, 156, 156, 156, 299, 
	302, 156, 307, 311, 314, 317, 319, 322, 
	156, 156, 156, 156, 156, 156, 331, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 360, 156, 156, 366, 156, 370, 156, 
	373, 377, 156, 380, 156, 156, 156, 156, 
	156, 156, 392, 394, 156, 156, 156, 156, 
	156, 402, 156, 409, 412, 416, 418, 422, 
	156, 156, 156, 156, 156, 156, 156, 156, 
	156, 441, 156, 156, 156, 156, 156, 156, 
	156, 156, 156, 156, 156, 457, 156, 156, 
	156, 156, 156, 156, 156, 156, 156, 156
};
static const int lexer_start = 21;
static const int lexer_error = 0;
static const int lexer_en_main = 21;
static void set_scan_buf( char *text, Bool _at_bol )
{
 str_set( input_buf, text );
 p = str_data(input_buf);
 at_bol = _at_bol;
 pe = str_data(input_buf) + str_len(input_buf);
 eof = pe;
	{
	cs = lexer_start;
	ts = 0;
	te = 0;
	act = 0;
	}
}
static tokid_t _scan_get( void )
{
	{
	int _klen;
	unsigned int _trans;
	short _widec;
	const short *_acts;
	unsigned int _nacts;
	const short *_keys;
	if ( p == pe )
		goto _test_eof;
	if ( cs == 0 )
		goto _out;
_resume:
	_acts = _lexer_actions + _lexer_from_state_actions[cs];
	_nacts = (unsigned int) *_acts++;
	while ( _nacts-- > 0 ) {
		switch ( *_acts++ ) {
	case 1:
	{ts = p;}
	break;
		}
	}
	_widec = (*p);
	_klen = _lexer_cond_lengths[cs];
	_keys = _lexer_cond_keys + (_lexer_cond_offsets[cs]*2);
	if ( _klen > 0 ) {
		const short *_lower = _keys;
		const short *_mid;
		const short *_upper = _keys + (_klen<<1) - 2;
		while (1) {
			if ( _upper < _lower )
				break;
			_mid = _lower + (((_upper-_lower) >> 1) & ~1);
			if ( _widec < _mid[0] )
				_upper = _mid - 2;
			else if ( _widec > _mid[1] )
				_lower = _mid + 2;
			else {
				switch ( _lexer_cond_spaces[_lexer_cond_offsets[cs] + ((_mid - _keys)>>1)] ) {
	case 0: {
		_widec = (short)(128 + ((*p) - -128));
		if ( 
 at_bol  ) _widec += 256;
		break;
	}
				}
				break;
			}
		}
	}
	_keys = _lexer_trans_keys + _lexer_key_offsets[cs];
	_trans = _lexer_index_offsets[cs];
	_klen = _lexer_single_lengths[cs];
	if ( _klen > 0 ) {
		const short *_lower = _keys;
		const short *_mid;
		const short *_upper = _keys + _klen - 1;
		while (1) {
			if ( _upper < _lower )
				break;
			_mid = _lower + ((_upper-_lower) >> 1);
			if ( _widec < *_mid )
				_upper = _mid - 1;
			else if ( _widec > *_mid )
				_lower = _mid + 1;
			else {
				_trans += (unsigned int)(_mid - _keys);
				goto _match;
			}
		}
		_keys += _klen;
		_trans += _klen;
	}
	_klen = _lexer_range_lengths[cs];
	if ( _klen > 0 ) {
		const short *_lower = _keys;
		const short *_mid;
		const short *_upper = _keys + (_klen<<1) - 2;
		while (1) {
			if ( _upper < _lower )
				break;
			_mid = _lower + (((_upper-_lower) >> 1) & ~1);
			if ( _widec < _mid[0] )
				_upper = _mid - 2;
			else if ( _widec > _mid[1] )
				_lower = _mid + 2;
			else {
				_trans += (unsigned int)((_mid - _keys)>>1);
				goto _match;
			}
		}
		_trans += _klen;
	}
_match:
	_trans = _lexer_indicies[_trans];
_eof_trans:
	cs = _lexer_trans_targs[_trans];
	if ( _lexer_trans_actions[_trans] == 0 )
		goto _again;
	_acts = _lexer_actions + _lexer_trans_actions[_trans];
	_nacts = (unsigned int) *_acts++;
	while ( _nacts-- > 0 )
	{
		switch ( *_acts++ )
		{
	case 2:
	{te = p+1;}
	break;
	case 3:
	{act = 1;}
	break;
	case 4:
	{act = 5;}
	break;
	case 5:
	{act = 37;}
	break;
	case 6:
	{act = 38;}
	break;
	case 7:
	{act = 39;}
	break;
	case 8:
	{act = 40;}
	break;
	case 9:
	{act = 41;}
	break;
	case 10:
	{act = 42;}
	break;
	case 11:
	{act = 43;}
	break;
	case 12:
	{act = 44;}
	break;
	case 13:
	{act = 45;}
	break;
	case 14:
	{act = 46;}
	break;
	case 15:
	{act = 47;}
	break;
	case 16:
	{act = 48;}
	break;
	case 17:
	{act = 49;}
	break;
	case 18:
	{act = 50;}
	break;
	case 19:
	{act = 51;}
	break;
	case 20:
	{act = 52;}
	break;
	case 21:
	{act = 53;}
	break;
	case 22:
	{act = 54;}
	break;
	case 23:
	{act = 55;}
	break;
	case 24:
	{act = 56;}
	break;
	case 25:
	{act = 57;}
	break;
	case 26:
	{act = 58;}
	break;
	case 27:
	{act = 59;}
	break;
	case 28:
	{act = 61;}
	break;
	case 29:
	{act = 62;}
	break;
	case 30:
	{act = 63;}
	break;
	case 31:
	{act = 64;}
	break;
	case 32:
	{act = 65;}
	break;
	case 33:
	{act = 66;}
	break;
	case 34:
	{act = 67;}
	break;
	case 35:
	{act = 75;}
	break;
	case 36:
	{act = 76;}
	break;
	case 37:
	{act = 77;}
	break;
	case 38:
	{act = 78;}
	break;
	case 39:
	{act = 79;}
	break;
	case 40:
	{act = 80;}
	break;
	case 41:
	{act = 81;}
	break;
	case 42:
	{act = 82;}
	break;
	case 43:
	{act = 83;}
	break;
	case 44:
	{act = 84;}
	break;
	case 45:
	{act = 85;}
	break;
	case 46:
	{act = 86;}
	break;
	case 47:
	{act = 87;}
	break;
	case 48:
	{act = 88;}
	break;
	case 49:
	{act = 89;}
	break;
	case 50:
	{act = 90;}
	break;
	case 51:
	{act = 91;}
	break;
	case 52:
	{act = 92;}
	break;
	case 53:
	{act = 93;}
	break;
	case 54:
	{act = 94;}
	break;
	case 55:
	{act = 95;}
	break;
	case 56:
	{act = 96;}
	break;
	case 57:
	{act = 97;}
	break;
	case 58:
	{act = 98;}
	break;
	case 59:
	{act = 99;}
	break;
	case 60:
	{act = 100;}
	break;
	case 61:
	{act = 101;}
	break;
	case 62:
	{act = 102;}
	break;
	case 63:
	{act = 107;}
	break;
	case 64:
	{act = 108;}
	break;
	case 65:
	{act = 109;}
	break;
	case 66:
	{act = 110;}
	break;
	case 67:
	{act = 111;}
	break;
	case 68:
	{act = 112;}
	break;
	case 69:
	{act = 113;}
	break;
	case 70:
	{act = 114;}
	break;
	case 71:
	{act = 115;}
	break;
	case 72:
	{act = 116;}
	break;
	case 73:
	{act = 117;}
	break;
	case 74:
	{act = 118;}
	break;
	case 75:
	{act = 119;}
	break;
	case 76:
	{act = 120;}
	break;
	case 77:
	{act = 121;}
	break;
	case 78:
	{act = 122;}
	break;
	case 79:
	{act = 123;}
	break;
	case 80:
	{act = 124;}
	break;
	case 81:
	{act = 125;}
	break;
	case 82:
	{act = 126;}
	break;
	case 83:
	{act = 127;}
	break;
	case 84:
	{act = 128;}
	break;
	case 85:
	{act = 129;}
	break;
	case 86:
	{act = 130;}
	break;
	case 87:
	{act = 131;}
	break;
	case 88:
	{act = 132;}
	break;
	case 89:
	{act = 133;}
	break;
	case 90:
	{act = 134;}
	break;
	case 91:
	{act = 135;}
	break;
	case 92:
	{act = 136;}
	break;
	case 93:
	{act = 137;}
	break;
	case 94:
	{act = 138;}
	break;
	case 95:
	{act = 139;}
	break;
	case 96:
	{act = 140;}
	break;
	case 97:
	{act = 141;}
	break;
	case 98:
	{act = 142;}
	break;
	case 99:
	{act = 143;}
	break;
	case 100:
	{act = 144;}
	break;
	case 101:
	{act = 145;}
	break;
	case 102:
	{act = 146;}
	break;
	case 103:
	{act = 147;}
	break;
	case 104:
	{act = 148;}
	break;
	case 105:
	{act = 149;}
	break;
	case 106:
	{act = 150;}
	break;
	case 107:
	{act = 151;}
	break;
	case 108:
	{act = 152;}
	break;
	case 109:
	{act = 153;}
	break;
	case 110:
	{act = 154;}
	break;
	case 111:
	{act = 155;}
	break;
	case 112:
	{act = 156;}
	break;
	case 113:
	{act = 157;}
	break;
	case 114:
	{act = 158;}
	break;
	case 115:
	{act = 159;}
	break;
	case 116:
	{act = 160;}
	break;
	case 117:
	{act = 161;}
	break;
	case 118:
	{act = 162;}
	break;
	case 119:
	{act = 163;}
	break;
	case 120:
	{act = 164;}
	break;
	case 121:
	{act = 165;}
	break;
	case 122:
	{act = 166;}
	break;
	case 123:
	{act = 167;}
	break;
	case 124:
	{act = 168;}
	break;
	case 125:
	{act = 169;}
	break;
	case 126:
	{act = 170;}
	break;
	case 127:
	{act = 171;}
	break;
	case 128:
	{act = 172;}
	break;
	case 129:
	{act = 173;}
	break;
	case 130:
	{act = 174;}
	break;
	case 131:
	{act = 175;}
	break;
	case 132:
	{act = 176;}
	break;
	case 133:
	{act = 177;}
	break;
	case 134:
	{act = 178;}
	break;
	case 135:
	{act = 179;}
	break;
	case 136:
	{act = 180;}
	break;
	case 137:
	{act = 181;}
	break;
	case 138:
	{act = 182;}
	break;
	case 139:
	{act = 183;}
	break;
	case 140:
	{act = 184;}
	break;
	case 141:
	{act = 185;}
	break;
	case 142:
	{act = 186;}
	break;
	case 143:
	{act = 187;}
	break;
	case 144:
	{act = 188;}
	break;
	case 145:
	{act = 189;}
	break;
	case 146:
	{act = 190;}
	break;
	case 147:
	{act = 191;}
	break;
	case 148:
	{act = 192;}
	break;
	case 149:
	{act = 193;}
	break;
	case 150:
	{act = 194;}
	break;
	case 151:
	{act = 195;}
	break;
	case 152:
	{act = 196;}
	break;
	case 153:
	{act = 197;}
	break;
	case 154:
	{act = 198;}
	break;
	case 155:
	{act = 199;}
	break;
	case 156:
	{act = 200;}
	break;
	case 157:
	{act = 201;}
	break;
	case 158:
	{act = 202;}
	break;
	case 159:
	{act = 205;}
	break;
	case 160:
	{act = 207;}
	break;
	case 161:
	{act = 209;}
	break;
	case 162:
	{act = 211;}
	break;
	case 163:
	{act = 213;}
	break;
	case 164:
	{act = 217;}
	break;
	case 165:
	{te = p+1;{
	sym.tok = TK_NEWLINE;
	;
	{p++; goto _out; }
}}
	break;
	case 166:
	{te = p+1;{
	sym.tok = TK_CONST_EXPR;
	;
	{p++; goto _out; }
}}
	break;
	case 167:
	{te = p+1;{
	sym.tok = TK_LOG_AND;
	;
	{p++; goto _out; }
}}
	break;
	case 168:
	{te = p+1;{
	sym.tok = TK_RPAREN;
	;
	{p++; goto _out; }
}}
	break;
	case 169:
	{te = p+1;{
	sym.tok = TK_PLUS;
	;
	{p++; goto _out; }
}}
	break;
	case 170:
	{te = p+1;{
	sym.tok = TK_COMMA;
	;
	{p++; goto _out; }
}}
	break;
	case 171:
	{te = p+1;{
	sym.tok = TK_MINUS;
	;
	{p++; goto _out; }
}}
	break;
	case 172:
	{te = p+1;{
	sym.tok = TK_DOT;
	;
	{p++; goto _out; }
}}
	break;
	case 173:
	{te = p+1;{
	sym.tok = TK_DIVIDE;
	;
	{p++; goto _out; }
}}
	break;
	case 174:
	{te = p+1;{
	sym.tok = TK_COLON;
	;
	{p++; goto _out; }
}}
	break;
	case 175:
	{te = p+1;{
	sym.tok = TK_LEFT_SHIFT;
	;
	{p++; goto _out; }
}}
	break;
	case 176:
	{te = p+1;{
	sym.tok = TK_LESS_EQ;
	;
	{p++; goto _out; }
}}
	break;
	case 177:
	{te = p+1;{
	sym.tok = TK_NOT_EQ;
	;
	{p++; goto _out; }
}}
	break;
	case 178:
	{te = p+1;{
	sym.tok = TK_NOT_EQ;
	;
	{p++; goto _out; }
}}
	break;
	case 179:
	{te = p+1;{
	sym.tok = TK_EQUAL;
	;
	{p++; goto _out; }
}}
	break;
	case 180:
	{te = p+1;{
	sym.tok = TK_RIGHT_SHIFT;
	;
	{p++; goto _out; }
}}
	break;
	case 181:
	{te = p+1;{
	sym.tok = TK_GREATER_EQ;
	;
	{p++; goto _out; }
}}
	break;
	case 182:
	{te = p+1;{
	sym.tok = TK_QUESTION;
	;
	{p++; goto _out; }
}}
	break;
	case 183:
	{te = p+1;{
	sym.tok = TK_LSQUARE;
	;
	{p++; goto _out; }
}}
	break;
	case 184:
	{te = p+1;{
	sym.tok = TK_RSQUARE;
	;
	{p++; goto _out; }
}}
	break;
	case 185:
	{te = p+1;{
	sym.tok = TK_BIN_XOR;
	;
	{p++; goto _out; }
}}
	break;
	case 186:
	{te = p+1;{
	sym.tok = TK_POWER;
	;
	{p++; goto _out; }
}}
	break;
	case 187:
	{te = p+1;{
	sym.tok = TK_LCURLY;
	;
	{p++; goto _out; }
}}
	break;
	case 188:
	{te = p+1;{
	sym.tok = TK_LOG_OR;
	;
	{p++; goto _out; }
}}
	break;
	case 189:
	{te = p+1;{
	sym.tok = TK_RCURLY;
	;
	{p++; goto _out; }
}}
	break;
	case 190:
	{te = p+1;{
	sym.tok = TK_BIN_NOT;
	;
	{p++; goto _out; }
}}
	break;
	case 191:
	{te = p+1;{
	sym.tok = TK_IND_C;
	;
	{p++; goto _out; }
}}
	break;
	case 192:
	{te = p+1;{
	sym.tok = TK_AF1;
	;
	{p++; goto _out; }
}}
	break;
	case 193:
	{te = p+1;{
	sym.tok = TK_IND_BC;
	;
	{p++; goto _out; }
}}
	break;
	case 194:
	{te = p+1;{
	sym.tok = TK_IND_DE;
	;
	{p++; goto _out; }
}}
	break;
	case 195:
	{te = p+1;{
	sym.tok = TK_IND_HL;
	;
	{p++; goto _out; }
}}
	break;
	case 196:
	{te = p+1;{
	sym.tok = TK_IND_IX;
	p--; te--;
	{p++; goto _out; }
}}
	break;
	case 197:
	{te = p+1;{
	sym.tok = TK_IND_IY;
	p--; te--;
	{p++; goto _out; }
}}
	break;
	case 198:
	{te = p+1;{
	sym.tok = TK_IND_SP;
	;
	{p++; goto _out; }
}}
	break;
	case 199:
	{te = p+1;{
	sym.tok = TK_DS_B;
	;
	{p++; goto _out; }
}}
	break;
	case 200:
	{te = p+1;{
	sym.tok = TK_DS_W;
	;
	{p++; goto _out; }
}}
	break;
	case 201:
	{te = p+1;{
	sym.tok = TK_DS_P;
	;
	{p++; goto _out; }
}}
	break;
	case 202:
	{te = p+1;{
	sym.tok = TK_DS_Q;
	;
	{p++; goto _out; }
}}
	break;
	case 203:
	{te = p+1;}
	break;
	case 204:
	{te = p+1;{
  while ( ts[ 0] == '.' || isspace(ts[ 0]) ) ts++;
  while ( te[-1] == ':' || isspace(te[-1]) ) te--;
  sym.tok = TK_LABEL;
  {p++; goto _out; }
 }}
	break;
	case 205:
	{te = p+1;{
  sym.tok = TK_NUMBER;
  sym.number = scan_num( ts, te - ts - 1, 16 );
  ts = te = p;
  {p++; goto _out; }
 }}
	break;
	case 206:
	{te = p+1;{
  sym.tok = TK_NUMBER;
  sym.number = scan_num( ts + 2, te - ts - 3, 2 );
  ts = te = p;
  {p++; goto _out; }
 }}
	break;
	case 207:
	{te = p+1;{
  sym.tok = TK_NUMBER;
  if ( get_sym_string() &&
                             te - ts == 1 )
  {
   sym.number = *ts;
  }
  else
  {
   sym.number = 0;
   error_invalid_squoted_string();
  }
  ts = te = p;
  {p++; goto _out; }
 }}
	break;
	case 208:
	{te = p+1;{
  sym.tok = TK_STRING;
  if ( ! get_sym_string() )
   error_unclosed_string();
  {p++; goto _out; }
 }}
	break;
	case 209:
	{te = p+1;{
  sym.tok = TK_NIL;
  skip_to_newline();
  ts = te = p;
  {p++; goto _out; }
 }}
	break;
	case 210:
	{te = p;p--;{
	sym.tok = TK_LOG_NOT;
	;
	{p++; goto _out; }
}}
	break;
	case 211:
	{te = p;p--;{
	sym.tok = TK_BIN_AND;
	;
	{p++; goto _out; }
}}
	break;
	case 212:
	{te = p;p--;{
	sym.tok = TK_LPAREN;
	;
	{p++; goto _out; }
}}
	break;
	case 213:
	{te = p;p--;{
	sym.tok = TK_MULTIPLY;
	;
	{p++; goto _out; }
}}
	break;
	case 214:
	{te = p;p--;{
	sym.tok = TK_DOT;
	;
	{p++; goto _out; }
}}
	break;
	case 215:
	{te = p;p--;{
	sym.tok = TK_LESS;
	;
	{p++; goto _out; }
}}
	break;
	case 216:
	{te = p;p--;{
	sym.tok = TK_EQUAL;
	;
	{p++; goto _out; }
}}
	break;
	case 217:
	{te = p;p--;{
	sym.tok = TK_GREATER;
	;
	{p++; goto _out; }
}}
	break;
	case 218:
	{te = p;p--;{
	sym.tok = TK_BIN_OR;
	;
	{p++; goto _out; }
}}
	break;
	case 219:
	{te = p;p--;{
	sym.tok = TK_C;
	;
	{p++; goto _out; }
}}
	break;
	case 220:
	{te = p;p--;{
	sym.tok = TK_PO;
	;
	{p++; goto _out; }
}}
	break;
	case 221:
	{te = p;p--;{
	sym.tok = TK_P;
	;
	{p++; goto _out; }
}}
	break;
	case 222:
	{te = p;p--;{
	sym.tok = TK_M;
	;
	{p++; goto _out; }
}}
	break;
	case 223:
	{te = p;p--;{
	sym.tok = TK_B;
	;
	{p++; goto _out; }
}}
	break;
	case 224:
	{te = p;p--;{
	sym.tok = TK_D;
	;
	{p++; goto _out; }
}}
	break;
	case 225:
	{te = p;p--;{
	sym.tok = TK_E;
	;
	{p++; goto _out; }
}}
	break;
	case 226:
	{te = p;p--;{
	sym.tok = TK_H;
	;
	{p++; goto _out; }
}}
	break;
	case 227:
	{te = p;p--;{
	sym.tok = TK_L;
	;
	{p++; goto _out; }
}}
	break;
	case 228:
	{te = p;p--;{
	sym.tok = TK_A;
	;
	{p++; goto _out; }
}}
	break;
	case 229:
	{te = p;p--;{
	sym.tok = TK_F;
	;
	{p++; goto _out; }
}}
	break;
	case 230:
	{te = p;p--;{
	sym.tok = TK_I;
	;
	{p++; goto _out; }
}}
	break;
	case 231:
	{te = p;p--;{
	sym.tok = TK_R;
	;
	{p++; goto _out; }
}}
	break;
	case 232:
	{te = p;p--;{
	sym.tok = TK_DE;
	;
	{p++; goto _out; }
}}
	break;
	case 233:
	{te = p;p--;{
	sym.tok = TK_IX;
	;
	{p++; goto _out; }
}}
	break;
	case 234:
	{te = p;p--;{
	sym.tok = TK_IY;
	;
	{p++; goto _out; }
}}
	break;
	case 235:
	{te = p;p--;{
	sym.tok = TK_AF;
	;
	{p++; goto _out; }
}}
	break;
	case 236:
	{te = p;p--;{
	if (expect_opcode) {
		sym.tok = TK_IF;
		sym.tok_opcode = TK_IF;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_IF;
	}
	{p++; goto _out; }
}}
	break;
	case 237:
	{te = p;p--;{
	if (expect_opcode) {
		sym.tok = TK_CALL;
		sym.tok_opcode = TK_CALL;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_CALL;
	}
	{p++; goto _out; }
}}
	break;
	case 238:
	{te = p;p--;{
	if (expect_opcode) {
		sym.tok = TK_CP;
		sym.tok_opcode = TK_CP;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_CP;
	}
	{p++; goto _out; }
}}
	break;
	case 239:
	{te = p;p--;{
	if (expect_opcode) {
		sym.tok = TK_CPD;
		sym.tok_opcode = TK_CPD;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_CPD;
	}
	{p++; goto _out; }
}}
	break;
	case 240:
	{te = p;p--;{
	if (expect_opcode) {
		sym.tok = TK_CPI;
		sym.tok_opcode = TK_CPI;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_CPI;
	}
	{p++; goto _out; }
}}
	break;
	case 241:
	{te = p;p--;{
	if (expect_opcode) {
		sym.tok = TK_EI;
		sym.tok_opcode = TK_EI;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_EI;
	}
	{p++; goto _out; }
}}
	break;
	case 242:
	{te = p;p--;{
	if (expect_opcode) {
		sym.tok = TK_EX;
		sym.tok_opcode = TK_EX;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_EX;
	}
	{p++; goto _out; }
}}
	break;
	case 243:
	{te = p;p--;{
	if (expect_opcode) {
		sym.tok = TK_IN;
		sym.tok_opcode = TK_IN;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_IN;
	}
	{p++; goto _out; }
}}
	break;
	case 244:
	{te = p;p--;{
	if (expect_opcode) {
		sym.tok = TK_INC;
		sym.tok_opcode = TK_INC;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_INC;
	}
	{p++; goto _out; }
}}
	break;
	case 245:
	{te = p;p--;{
	if (expect_opcode) {
		sym.tok = TK_IND;
		sym.tok_opcode = TK_IND;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_IND;
	}
	{p++; goto _out; }
}}
	break;
	case 246:
	{te = p;p--;{
	if (expect_opcode) {
		sym.tok = TK_INI;
		sym.tok_opcode = TK_INI;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_INI;
	}
	{p++; goto _out; }
}}
	break;
	case 247:
	{te = p;p--;{
	if (expect_opcode) {
		sym.tok = TK_LD;
		sym.tok_opcode = TK_LD;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_LD;
	}
	{p++; goto _out; }
}}
	break;
	case 248:
	{te = p;p--;{
	if (expect_opcode) {
		sym.tok = TK_LDD;
		sym.tok_opcode = TK_LDD;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_LDD;
	}
	{p++; goto _out; }
}}
	break;
	case 249:
	{te = p;p--;{
	if (expect_opcode) {
		sym.tok = TK_LDDR;
		sym.tok_opcode = TK_LDDR;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_LDDR;
	}
	{p++; goto _out; }
}}
	break;
	case 250:
	{te = p;p--;{
	if (expect_opcode) {
		sym.tok = TK_LDI;
		sym.tok_opcode = TK_LDI;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_LDI;
	}
	{p++; goto _out; }
}}
	break;
	case 251:
	{te = p;p--;{
	if (expect_opcode) {
		sym.tok = TK_LDIR;
		sym.tok_opcode = TK_LDIR;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_LDIR;
	}
	{p++; goto _out; }
}}
	break;
	case 252:
	{te = p;p--;{
	if (expect_opcode) {
		sym.tok = TK_OR;
		sym.tok_opcode = TK_OR;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_OR;
	}
	{p++; goto _out; }
}}
	break;
	case 253:
	{te = p;p--;{
	if (expect_opcode) {
		sym.tok = TK_OUT;
		sym.tok_opcode = TK_OUT;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_OUT;
	}
	{p++; goto _out; }
}}
	break;
	case 254:
	{te = p;p--;{
	if (expect_opcode) {
		sym.tok = TK_OUTI;
		sym.tok_opcode = TK_OUTI;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_OUTI;
	}
	{p++; goto _out; }
}}
	break;
	case 255:
	{te = p;p--;{
	if (expect_opcode) {
		sym.tok = TK_POP;
		sym.tok_opcode = TK_POP;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_POP;
	}
	{p++; goto _out; }
}}
	break;
	case 256:
	{te = p;p--;{
	if (expect_opcode) {
		sym.tok = TK_RET;
		sym.tok_opcode = TK_RET;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_RET;
	}
	{p++; goto _out; }
}}
	break;
	case 257:
	{te = p;p--;{
	if (expect_opcode) {
		sym.tok = TK_RL;
		sym.tok_opcode = TK_RL;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_RL;
	}
	{p++; goto _out; }
}}
	break;
	case 258:
	{te = p;p--;{
	if (expect_opcode) {
		sym.tok = TK_RLC;
		sym.tok_opcode = TK_RLC;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_RLC;
	}
	{p++; goto _out; }
}}
	break;
	case 259:
	{te = p;p--;{
	if (expect_opcode) {
		sym.tok = TK_RR;
		sym.tok_opcode = TK_RR;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_RR;
	}
	{p++; goto _out; }
}}
	break;
	case 260:
	{te = p;p--;{
	if (expect_opcode) {
		sym.tok = TK_RRC;
		sym.tok_opcode = TK_RRC;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_RRC;
	}
	{p++; goto _out; }
}}
	break;
	case 261:
	{te = p;p--;{
	if (expect_opcode) {
		sym.tok = TK_SET;
		sym.tok_opcode = TK_SET;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_SET;
	}
	{p++; goto _out; }
}}
	break;
	case 262:
	{te = p;p--;{
	if (expect_opcode) {
		sym.tok = TK_OTIM;
		sym.tok_opcode = TK_OTIM;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_OTIM;
	}
	{p++; goto _out; }
}}
	break;
	case 263:
	{te = p;p--;{
	if (expect_opcode) {
		sym.tok = TK_OTDM;
		sym.tok_opcode = TK_OTDM;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_OTDM;
	}
	{p++; goto _out; }
}}
	break;
	case 264:
	{te = p;p--;{
	if (expect_opcode) {
		sym.tok = TK_TST;
		sym.tok_opcode = TK_TST;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_TST;
	}
	{p++; goto _out; }
}}
	break;
	case 265:
	{te = p;p--;}
	break;
	case 266:
	{te = p;p--;{
  sym.tok = TK_NAME;
  {p++; goto _out; }
 }}
	break;
	case 267:
	{te = p;p--;{
  while ( ts[ 0] == '.' || isspace(ts[ 0]) ) ts++;
  while ( te[-1] == ':' || isspace(te[-1]) ) te--;
  sym.tok = TK_LABEL;
  {p++; goto _out; }
 }}
	break;
	case 268:
	{te = p;p--;{
  sym.tok = TK_NUMBER;
  sym.number = scan_num( ts, te - ts, 10 );
  ts = te = p;
  {p++; goto _out; }
 }}
	break;
	case 269:
	{te = p;p--;{
  sym.tok = TK_NUMBER;
  sym.number = scan_num( ts + 2, te - ts - 2, 16 );
  ts = te = p;
  {p++; goto _out; }
 }}
	break;
	case 270:
	{te = p;p--;{
  sym.tok = TK_NUMBER;
  sym.number = scan_num( ts, te - ts - 1, 2 );
  ts = te = p;
  {p++; goto _out; }
 }}
	break;
	case 271:
	{te = p;p--;{
  sym.tok = TK_NUMBER;
  sym.number = scan_num( ts + 1, te - ts - 1, 2 );
  ts = te = p;
  {p++; goto _out; }
 }}
	break;
	case 272:
	{{p = ((te))-1;}{
	sym.tok = TK_LPAREN;
	;
	{p++; goto _out; }
}}
	break;
	case 273:
	{{p = ((te))-1;}{
	sym.tok = TK_DOT;
	;
	{p++; goto _out; }
}}
	break;
	case 274:
	{{p = ((te))-1;}{
  sym.tok = TK_NAME;
  {p++; goto _out; }
 }}
	break;
	case 275:
	{{p = ((te))-1;}{
  sym.tok = TK_NUMBER;
  sym.number = scan_num( ts, te - ts, 10 );
  ts = te = p;
  {p++; goto _out; }
 }}
	break;
	case 276:
	{	switch( act ) {
	case 1:
	{{p = ((te))-1;}
	sym.tok = TK_ASMPC;
	;
	{p++; goto _out; }
}
	break;
	case 5:
	{{p = ((te))-1;}
	sym.tok = TK_MOD;
	;
	{p++; goto _out; }
}
	break;
	case 37:
	{{p = ((te))-1;}
	sym.tok = TK_NZ;
	;
	{p++; goto _out; }
}
	break;
	case 38:
	{{p = ((te))-1;}
	sym.tok = TK_Z;
	;
	{p++; goto _out; }
}
	break;
	case 39:
	{{p = ((te))-1;}
	sym.tok = TK_NC;
	;
	{p++; goto _out; }
}
	break;
	case 40:
	{{p = ((te))-1;}
	sym.tok = TK_C;
	;
	{p++; goto _out; }
}
	break;
	case 41:
	{{p = ((te))-1;}
	sym.tok = TK_PO;
	;
	{p++; goto _out; }
}
	break;
	case 42:
	{{p = ((te))-1;}
	sym.tok = TK_PE;
	;
	{p++; goto _out; }
}
	break;
	case 43:
	{{p = ((te))-1;}
	sym.tok = TK_P;
	;
	{p++; goto _out; }
}
	break;
	case 44:
	{{p = ((te))-1;}
	sym.tok = TK_M;
	;
	{p++; goto _out; }
}
	break;
	case 45:
	{{p = ((te))-1;}
	sym.tok = TK_B;
	;
	{p++; goto _out; }
}
	break;
	case 46:
	{{p = ((te))-1;}
	sym.tok = TK_D;
	;
	{p++; goto _out; }
}
	break;
	case 47:
	{{p = ((te))-1;}
	sym.tok = TK_E;
	;
	{p++; goto _out; }
}
	break;
	case 48:
	{{p = ((te))-1;}
	sym.tok = TK_H;
	;
	{p++; goto _out; }
}
	break;
	case 49:
	{{p = ((te))-1;}
	sym.tok = TK_IXH;
	;
	{p++; goto _out; }
}
	break;
	case 50:
	{{p = ((te))-1;}
	sym.tok = TK_IYH;
	;
	{p++; goto _out; }
}
	break;
	case 51:
	{{p = ((te))-1;}
	sym.tok = TK_L;
	;
	{p++; goto _out; }
}
	break;
	case 52:
	{{p = ((te))-1;}
	sym.tok = TK_IXL;
	;
	{p++; goto _out; }
}
	break;
	case 53:
	{{p = ((te))-1;}
	sym.tok = TK_IYL;
	;
	{p++; goto _out; }
}
	break;
	case 54:
	{{p = ((te))-1;}
	sym.tok = TK_A;
	;
	{p++; goto _out; }
}
	break;
	case 55:
	{{p = ((te))-1;}
	sym.tok = TK_F;
	;
	{p++; goto _out; }
}
	break;
	case 56:
	{{p = ((te))-1;}
	sym.tok = TK_I;
	;
	{p++; goto _out; }
}
	break;
	case 57:
	{{p = ((te))-1;}
	sym.tok = TK_IIR;
	;
	{p++; goto _out; }
}
	break;
	case 58:
	{{p = ((te))-1;}
	sym.tok = TK_R;
	;
	{p++; goto _out; }
}
	break;
	case 59:
	{{p = ((te))-1;}
	sym.tok = TK_EIR;
	;
	{p++; goto _out; }
}
	break;
	case 61:
	{{p = ((te))-1;}
	sym.tok = TK_BC;
	;
	{p++; goto _out; }
}
	break;
	case 62:
	{{p = ((te))-1;}
	sym.tok = TK_DE;
	;
	{p++; goto _out; }
}
	break;
	case 63:
	{{p = ((te))-1;}
	sym.tok = TK_HL;
	;
	{p++; goto _out; }
}
	break;
	case 64:
	{{p = ((te))-1;}
	sym.tok = TK_IX;
	;
	{p++; goto _out; }
}
	break;
	case 65:
	{{p = ((te))-1;}
	sym.tok = TK_IY;
	;
	{p++; goto _out; }
}
	break;
	case 66:
	{{p = ((te))-1;}
	sym.tok = TK_AF;
	;
	{p++; goto _out; }
}
	break;
	case 67:
	{{p = ((te))-1;}
	sym.tok = TK_SP;
	;
	{p++; goto _out; }
}
	break;
	case 75:
	{{p = ((te))-1;}
	sym.tok = TK_A32;
	;
	{p++; goto _out; }
}
	break;
	case 76:
	{{p = ((te))-1;}
	sym.tok = TK_DEHL;
	;
	{p++; goto _out; }
}
	break;
	case 77:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_BINARY;
		sym.tok_opcode = TK_BINARY;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_BINARY;
	}
	{p++; goto _out; }
}
	break;
	case 78:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_DEFB;
		sym.tok_opcode = TK_DEFB;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_DEFB;
	}
	{p++; goto _out; }
}
	break;
	case 79:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_DEFC;
		sym.tok_opcode = TK_DEFC;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_DEFC;
	}
	{p++; goto _out; }
}
	break;
	case 80:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_DEFGROUP;
		sym.tok_opcode = TK_DEFGROUP;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_DEFGROUP;
	}
	{p++; goto _out; }
}
	break;
	case 81:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_DEFINE;
		sym.tok_opcode = TK_DEFINE;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_DEFINE;
	}
	{p++; goto _out; }
}
	break;
	case 82:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_DEFQ;
		sym.tok_opcode = TK_DEFQ;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_DEFQ;
	}
	{p++; goto _out; }
}
	break;
	case 83:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_DEFM;
		sym.tok_opcode = TK_DEFM;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_DEFM;
	}
	{p++; goto _out; }
}
	break;
	case 84:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_DEFS;
		sym.tok_opcode = TK_DEFS;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_DEFS;
	}
	{p++; goto _out; }
}
	break;
	case 85:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_DEFVARS;
		sym.tok_opcode = TK_DEFVARS;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_DEFVARS;
	}
	{p++; goto _out; }
}
	break;
	case 86:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_DEFW;
		sym.tok_opcode = TK_DEFW;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_DEFW;
	}
	{p++; goto _out; }
}
	break;
	case 87:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_ELSE;
		sym.tok_opcode = TK_ELSE;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_ELSE;
	}
	{p++; goto _out; }
}
	break;
	case 88:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_ENDIF;
		sym.tok_opcode = TK_ENDIF;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_ENDIF;
	}
	{p++; goto _out; }
}
	break;
	case 89:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_EXTERN;
		sym.tok_opcode = TK_EXTERN;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_EXTERN;
	}
	{p++; goto _out; }
}
	break;
	case 90:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_GLOBAL;
		sym.tok_opcode = TK_GLOBAL;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_GLOBAL;
	}
	{p++; goto _out; }
}
	break;
	case 91:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_IF;
		sym.tok_opcode = TK_IF;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_IF;
	}
	{p++; goto _out; }
}
	break;
	case 92:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_IFDEF;
		sym.tok_opcode = TK_IFDEF;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_IFDEF;
	}
	{p++; goto _out; }
}
	break;
	case 93:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_IFNDEF;
		sym.tok_opcode = TK_IFNDEF;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_IFNDEF;
	}
	{p++; goto _out; }
}
	break;
	case 94:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_INCLUDE;
		sym.tok_opcode = TK_INCLUDE;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_INCLUDE;
	}
	{p++; goto _out; }
}
	break;
	case 95:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_LINE;
		sym.tok_opcode = TK_LINE;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_LINE;
	}
	{p++; goto _out; }
}
	break;
	case 96:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_LSTOFF;
		sym.tok_opcode = TK_LSTOFF;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_LSTOFF;
	}
	{p++; goto _out; }
}
	break;
	case 97:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_LSTON;
		sym.tok_opcode = TK_LSTON;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_LSTON;
	}
	{p++; goto _out; }
}
	break;
	case 98:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_MODULE;
		sym.tok_opcode = TK_MODULE;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_MODULE;
	}
	{p++; goto _out; }
}
	break;
	case 99:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_ORG;
		sym.tok_opcode = TK_ORG;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_ORG;
	}
	{p++; goto _out; }
}
	break;
	case 100:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_PUBLIC;
		sym.tok_opcode = TK_PUBLIC;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_PUBLIC;
	}
	{p++; goto _out; }
}
	break;
	case 101:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_SECTION;
		sym.tok_opcode = TK_SECTION;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_SECTION;
	}
	{p++; goto _out; }
}
	break;
	case 102:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_UNDEFINE;
		sym.tok_opcode = TK_UNDEFINE;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_UNDEFINE;
	}
	{p++; goto _out; }
}
	break;
	case 107:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_ADC;
		sym.tok_opcode = TK_ADC;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_ADC;
	}
	{p++; goto _out; }
}
	break;
	case 108:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_ADD;
		sym.tok_opcode = TK_ADD;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_ADD;
	}
	{p++; goto _out; }
}
	break;
	case 109:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_AND;
		sym.tok_opcode = TK_AND;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_AND;
	}
	{p++; goto _out; }
}
	break;
	case 110:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_BIT;
		sym.tok_opcode = TK_BIT;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_BIT;
	}
	{p++; goto _out; }
}
	break;
	case 111:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_CALL;
		sym.tok_opcode = TK_CALL;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_CALL;
	}
	{p++; goto _out; }
}
	break;
	case 112:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_CCF;
		sym.tok_opcode = TK_CCF;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_CCF;
	}
	{p++; goto _out; }
}
	break;
	case 113:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_CP;
		sym.tok_opcode = TK_CP;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_CP;
	}
	{p++; goto _out; }
}
	break;
	case 114:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_CPD;
		sym.tok_opcode = TK_CPD;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_CPD;
	}
	{p++; goto _out; }
}
	break;
	case 115:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_CPDR;
		sym.tok_opcode = TK_CPDR;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_CPDR;
	}
	{p++; goto _out; }
}
	break;
	case 116:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_CPI;
		sym.tok_opcode = TK_CPI;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_CPI;
	}
	{p++; goto _out; }
}
	break;
	case 117:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_CPIR;
		sym.tok_opcode = TK_CPIR;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_CPIR;
	}
	{p++; goto _out; }
}
	break;
	case 118:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_CPL;
		sym.tok_opcode = TK_CPL;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_CPL;
	}
	{p++; goto _out; }
}
	break;
	case 119:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_DAA;
		sym.tok_opcode = TK_DAA;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_DAA;
	}
	{p++; goto _out; }
}
	break;
	case 120:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_DEC;
		sym.tok_opcode = TK_DEC;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_DEC;
	}
	{p++; goto _out; }
}
	break;
	case 121:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_DI;
		sym.tok_opcode = TK_DI;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_DI;
	}
	{p++; goto _out; }
}
	break;
	case 122:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_DJNZ;
		sym.tok_opcode = TK_DJNZ;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_DJNZ;
	}
	{p++; goto _out; }
}
	break;
	case 123:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_EI;
		sym.tok_opcode = TK_EI;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_EI;
	}
	{p++; goto _out; }
}
	break;
	case 124:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_EX;
		sym.tok_opcode = TK_EX;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_EX;
	}
	{p++; goto _out; }
}
	break;
	case 125:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_EXX;
		sym.tok_opcode = TK_EXX;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_EXX;
	}
	{p++; goto _out; }
}
	break;
	case 126:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_HALT;
		sym.tok_opcode = TK_HALT;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_HALT;
	}
	{p++; goto _out; }
}
	break;
	case 127:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_IM;
		sym.tok_opcode = TK_IM;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_IM;
	}
	{p++; goto _out; }
}
	break;
	case 128:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_IN;
		sym.tok_opcode = TK_IN;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_IN;
	}
	{p++; goto _out; }
}
	break;
	case 129:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_INC;
		sym.tok_opcode = TK_INC;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_INC;
	}
	{p++; goto _out; }
}
	break;
	case 130:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_IND;
		sym.tok_opcode = TK_IND;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_IND;
	}
	{p++; goto _out; }
}
	break;
	case 131:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_INDR;
		sym.tok_opcode = TK_INDR;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_INDR;
	}
	{p++; goto _out; }
}
	break;
	case 132:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_INI;
		sym.tok_opcode = TK_INI;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_INI;
	}
	{p++; goto _out; }
}
	break;
	case 133:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_INIR;
		sym.tok_opcode = TK_INIR;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_INIR;
	}
	{p++; goto _out; }
}
	break;
	case 134:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_JP;
		sym.tok_opcode = TK_JP;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_JP;
	}
	{p++; goto _out; }
}
	break;
	case 135:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_JR;
		sym.tok_opcode = TK_JR;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_JR;
	}
	{p++; goto _out; }
}
	break;
	case 136:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_LD;
		sym.tok_opcode = TK_LD;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_LD;
	}
	{p++; goto _out; }
}
	break;
	case 137:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_LDD;
		sym.tok_opcode = TK_LDD;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_LDD;
	}
	{p++; goto _out; }
}
	break;
	case 138:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_LDDR;
		sym.tok_opcode = TK_LDDR;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_LDDR;
	}
	{p++; goto _out; }
}
	break;
	case 139:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_LDI;
		sym.tok_opcode = TK_LDI;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_LDI;
	}
	{p++; goto _out; }
}
	break;
	case 140:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_LDIR;
		sym.tok_opcode = TK_LDIR;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_LDIR;
	}
	{p++; goto _out; }
}
	break;
	case 141:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_NEG;
		sym.tok_opcode = TK_NEG;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_NEG;
	}
	{p++; goto _out; }
}
	break;
	case 142:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_NOP;
		sym.tok_opcode = TK_NOP;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_NOP;
	}
	{p++; goto _out; }
}
	break;
	case 143:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_OR;
		sym.tok_opcode = TK_OR;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_OR;
	}
	{p++; goto _out; }
}
	break;
	case 144:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_OTDR;
		sym.tok_opcode = TK_OTDR;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_OTDR;
	}
	{p++; goto _out; }
}
	break;
	case 145:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_OTIR;
		sym.tok_opcode = TK_OTIR;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_OTIR;
	}
	{p++; goto _out; }
}
	break;
	case 146:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_OUT;
		sym.tok_opcode = TK_OUT;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_OUT;
	}
	{p++; goto _out; }
}
	break;
	case 147:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_OUTD;
		sym.tok_opcode = TK_OUTD;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_OUTD;
	}
	{p++; goto _out; }
}
	break;
	case 148:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_OUTI;
		sym.tok_opcode = TK_OUTI;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_OUTI;
	}
	{p++; goto _out; }
}
	break;
	case 149:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_POP;
		sym.tok_opcode = TK_POP;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_POP;
	}
	{p++; goto _out; }
}
	break;
	case 150:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_PUSH;
		sym.tok_opcode = TK_PUSH;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_PUSH;
	}
	{p++; goto _out; }
}
	break;
	case 151:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_RES;
		sym.tok_opcode = TK_RES;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_RES;
	}
	{p++; goto _out; }
}
	break;
	case 152:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_RET;
		sym.tok_opcode = TK_RET;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_RET;
	}
	{p++; goto _out; }
}
	break;
	case 153:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_RETI;
		sym.tok_opcode = TK_RETI;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_RETI;
	}
	{p++; goto _out; }
}
	break;
	case 154:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_RETN;
		sym.tok_opcode = TK_RETN;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_RETN;
	}
	{p++; goto _out; }
}
	break;
	case 155:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_RL;
		sym.tok_opcode = TK_RL;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_RL;
	}
	{p++; goto _out; }
}
	break;
	case 156:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_RLA;
		sym.tok_opcode = TK_RLA;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_RLA;
	}
	{p++; goto _out; }
}
	break;
	case 157:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_RLC;
		sym.tok_opcode = TK_RLC;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_RLC;
	}
	{p++; goto _out; }
}
	break;
	case 158:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_RLCA;
		sym.tok_opcode = TK_RLCA;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_RLCA;
	}
	{p++; goto _out; }
}
	break;
	case 159:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_RLD;
		sym.tok_opcode = TK_RLD;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_RLD;
	}
	{p++; goto _out; }
}
	break;
	case 160:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_RR;
		sym.tok_opcode = TK_RR;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_RR;
	}
	{p++; goto _out; }
}
	break;
	case 161:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_RRA;
		sym.tok_opcode = TK_RRA;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_RRA;
	}
	{p++; goto _out; }
}
	break;
	case 162:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_RRC;
		sym.tok_opcode = TK_RRC;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_RRC;
	}
	{p++; goto _out; }
}
	break;
	case 163:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_RRCA;
		sym.tok_opcode = TK_RRCA;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_RRCA;
	}
	{p++; goto _out; }
}
	break;
	case 164:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_RRD;
		sym.tok_opcode = TK_RRD;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_RRD;
	}
	{p++; goto _out; }
}
	break;
	case 165:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_RST;
		sym.tok_opcode = TK_RST;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_RST;
	}
	{p++; goto _out; }
}
	break;
	case 166:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_SBC;
		sym.tok_opcode = TK_SBC;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_SBC;
	}
	{p++; goto _out; }
}
	break;
	case 167:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_SCF;
		sym.tok_opcode = TK_SCF;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_SCF;
	}
	{p++; goto _out; }
}
	break;
	case 168:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_SET;
		sym.tok_opcode = TK_SET;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_SET;
	}
	{p++; goto _out; }
}
	break;
	case 169:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_SLA;
		sym.tok_opcode = TK_SLA;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_SLA;
	}
	{p++; goto _out; }
}
	break;
	case 170:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_SLL;
		sym.tok_opcode = TK_SLL;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_SLL;
	}
	{p++; goto _out; }
}
	break;
	case 171:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_SRA;
		sym.tok_opcode = TK_SRA;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_SRA;
	}
	{p++; goto _out; }
}
	break;
	case 172:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_SRL;
		sym.tok_opcode = TK_SRL;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_SRL;
	}
	{p++; goto _out; }
}
	break;
	case 173:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_SUB;
		sym.tok_opcode = TK_SUB;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_SUB;
	}
	{p++; goto _out; }
}
	break;
	case 174:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_XOR;
		sym.tok_opcode = TK_XOR;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_XOR;
	}
	{p++; goto _out; }
}
	break;
	case 175:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_SWAPNIB;
		sym.tok_opcode = TK_SWAPNIB;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_SWAPNIB;
	}
	{p++; goto _out; }
}
	break;
	case 176:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_MUL;
		sym.tok_opcode = TK_MUL;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_MUL;
	}
	{p++; goto _out; }
}
	break;
	case 177:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_OUTINB;
		sym.tok_opcode = TK_OUTINB;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_OUTINB;
	}
	{p++; goto _out; }
}
	break;
	case 178:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_LDIX;
		sym.tok_opcode = TK_LDIX;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_LDIX;
	}
	{p++; goto _out; }
}
	break;
	case 179:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_LDIRX;
		sym.tok_opcode = TK_LDIRX;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_LDIRX;
	}
	{p++; goto _out; }
}
	break;
	case 180:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_LDDX;
		sym.tok_opcode = TK_LDDX;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_LDDX;
	}
	{p++; goto _out; }
}
	break;
	case 181:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_LDDRX;
		sym.tok_opcode = TK_LDDRX;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_LDDRX;
	}
	{p++; goto _out; }
}
	break;
	case 182:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_FILLDE;
		sym.tok_opcode = TK_FILLDE;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_FILLDE;
	}
	{p++; goto _out; }
}
	break;
	case 183:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_MIRROR;
		sym.tok_opcode = TK_MIRROR;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_MIRROR;
	}
	{p++; goto _out; }
}
	break;
	case 184:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_POPX;
		sym.tok_opcode = TK_POPX;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_POPX;
	}
	{p++; goto _out; }
}
	break;
	case 185:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_NEXTREG;
		sym.tok_opcode = TK_NEXTREG;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_NEXTREG;
	}
	{p++; goto _out; }
}
	break;
	case 186:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_PIXELDN;
		sym.tok_opcode = TK_PIXELDN;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_PIXELDN;
	}
	{p++; goto _out; }
}
	break;
	case 187:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_PIXELAD;
		sym.tok_opcode = TK_PIXELAD;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_PIXELAD;
	}
	{p++; goto _out; }
}
	break;
	case 188:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_SETAE;
		sym.tok_opcode = TK_SETAE;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_SETAE;
	}
	{p++; goto _out; }
}
	break;
	case 189:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_SLP;
		sym.tok_opcode = TK_SLP;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_SLP;
	}
	{p++; goto _out; }
}
	break;
	case 190:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_MLT;
		sym.tok_opcode = TK_MLT;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_MLT;
	}
	{p++; goto _out; }
}
	break;
	case 191:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_IN0;
		sym.tok_opcode = TK_IN0;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_IN0;
	}
	{p++; goto _out; }
}
	break;
	case 192:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_OUT0;
		sym.tok_opcode = TK_OUT0;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_OUT0;
	}
	{p++; goto _out; }
}
	break;
	case 193:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_OTIM;
		sym.tok_opcode = TK_OTIM;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_OTIM;
	}
	{p++; goto _out; }
}
	break;
	case 194:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_OTIMR;
		sym.tok_opcode = TK_OTIMR;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_OTIMR;
	}
	{p++; goto _out; }
}
	break;
	case 195:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_OTDM;
		sym.tok_opcode = TK_OTDM;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_OTDM;
	}
	{p++; goto _out; }
}
	break;
	case 196:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_OTDMR;
		sym.tok_opcode = TK_OTDMR;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_OTDMR;
	}
	{p++; goto _out; }
}
	break;
	case 197:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_TST;
		sym.tok_opcode = TK_TST;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_TST;
	}
	{p++; goto _out; }
}
	break;
	case 198:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_TSTIO;
		sym.tok_opcode = TK_TSTIO;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_TSTIO;
	}
	{p++; goto _out; }
}
	break;
	case 199:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_CALL_OZ;
		sym.tok_opcode = TK_CALL_OZ;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_CALL_OZ;
	}
	{p++; goto _out; }
}
	break;
	case 200:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_CALL_PKG;
		sym.tok_opcode = TK_CALL_PKG;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_CALL_PKG;
	}
	{p++; goto _out; }
}
	break;
	case 201:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_FPP;
		sym.tok_opcode = TK_FPP;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_FPP;
	}
	{p++; goto _out; }
}
	break;
	case 202:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_INVOKE;
		sym.tok_opcode = TK_INVOKE;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_INVOKE;
	}
	{p++; goto _out; }
}
	break;
	case 205:
	{{p = ((te))-1;}
  sym.tok = TK_NAME;
  {p++; goto _out; }
 }
	break;
	case 207:
	{{p = ((te))-1;}
  sym.tok = TK_NUMBER;
  sym.number = scan_num( ts, te - ts, 10 );
  ts = te = p;
  {p++; goto _out; }
 }
	break;
	case 209:
	{{p = ((te))-1;}
  sym.tok = TK_NUMBER;
  sym.number = scan_num( ts + 1, te - ts - 1, 16 );
  ts = te = p;
  {p++; goto _out; }
 }
	break;
	case 211:
	{{p = ((te))-1;}
  sym.tok = TK_NUMBER;
  sym.number = scan_num( ts, te - ts - 1, 2 );
  ts = te = p;
  {p++; goto _out; }
 }
	break;
	case 213:
	{{p = ((te))-1;}
  sym.tok = TK_NUMBER;
  sym.number = scan_num( ts + 2, te - ts - 2, 2 );
  ts = te = p;
  {p++; goto _out; }
 }
	break;
	case 217:
	{{p = ((te))-1;}
  sym.tok = TK_NIL;
  skip_to_newline();
  ts = te = p;
  {p++; goto _out; }
 }
	break;
	}
	}
	break;
		}
	}
_again:
	_acts = _lexer_actions + _lexer_to_state_actions[cs];
	_nacts = (unsigned int) *_acts++;
	while ( _nacts-- > 0 ) {
		switch ( *_acts++ ) {
	case 0:
	{ts = 0;}
	break;
		}
	}
	if ( cs == 0 )
		goto _out;
	if ( ++p != pe )
		goto _resume;
	_test_eof: {}
	if ( p == eof )
	{
	if ( _lexer_eof_trans[cs] > 0 ) {
		_trans = _lexer_eof_trans[cs] - 1;
		goto _eof_trans;
	}
	}
	_out: {}
	}
 return sym.tok;
}
