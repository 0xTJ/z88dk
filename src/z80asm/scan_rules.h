static const short _lexer_actions[] = {
	0, 1, 0, 1, 1, 1, 2, 1, 
	184, 1, 185, 1, 186, 1, 187, 1, 
	188, 1, 189, 1, 190, 1, 191, 1, 
	192, 1, 193, 1, 194, 1, 195, 1, 
	196, 1, 197, 1, 198, 1, 199, 1, 
	200, 1, 201, 1, 202, 1, 203, 1, 
	204, 1, 205, 1, 206, 1, 207, 1, 
	208, 1, 209, 1, 210, 1, 211, 1, 
	212, 1, 213, 1, 214, 1, 215, 1, 
	216, 1, 217, 1, 218, 1, 219, 1, 
	220, 1, 221, 1, 222, 1, 223, 1, 
	224, 1, 225, 1, 226, 1, 227, 1, 
	228, 1, 229, 1, 230, 1, 231, 1, 
	232, 1, 233, 1, 234, 1, 235, 1, 
	236, 1, 237, 1, 238, 1, 239, 1, 
	240, 1, 241, 1, 242, 1, 243, 1, 
	244, 1, 245, 1, 246, 1, 247, 1, 
	248, 1, 249, 1, 250, 1, 251, 1, 
	252, 1, 253, 1, 254, 1, 255, 1, 
	256, 1, 257, 1, 258, 1, 259, 1, 
	260, 1, 261, 1, 262, 1, 263, 1, 
	264, 1, 265, 1, 266, 1, 267, 1, 
	268, 1, 269, 1, 270, 1, 271, 1, 
	272, 1, 273, 1, 274, 1, 275, 1, 
	276, 1, 277, 1, 278, 1, 279, 1, 
	280, 1, 281, 1, 282, 1, 283, 1, 
	284, 1, 285, 1, 286, 1, 287, 1, 
	288, 1, 289, 1, 290, 1, 291, 1, 
	292, 1, 293, 1, 294, 1, 295, 1, 
	296, 1, 297, 1, 298, 1, 299, 1, 
	300, 1, 301, 1, 302, 1, 303, 1, 
	304, 1, 305, 1, 306, 1, 307, 1, 
	308, 1, 309, 2, 2, 3, 2, 2, 
	4, 2, 2, 5, 2, 2, 6, 2, 
	2, 7, 2, 2, 8, 2, 2, 9, 
	2, 2, 10, 2, 2, 11, 2, 2, 
	12, 2, 2, 13, 2, 2, 14, 2, 
	2, 15, 2, 2, 16, 2, 2, 17, 
	2, 2, 18, 2, 2, 19, 2, 2, 
	20, 2, 2, 21, 2, 2, 22, 2, 
	2, 23, 2, 2, 24, 2, 2, 25, 
	2, 2, 26, 2, 2, 27, 2, 2, 
	28, 2, 2, 29, 2, 2, 30, 2, 
	2, 31, 2, 2, 32, 2, 2, 33, 
	2, 2, 34, 2, 2, 35, 2, 2, 
	36, 2, 2, 37, 2, 2, 38, 2, 
	2, 39, 2, 2, 40, 2, 2, 41, 
	2, 2, 42, 2, 2, 43, 2, 2, 
	44, 2, 2, 45, 2, 2, 46, 2, 
	2, 47, 2, 2, 48, 2, 2, 49, 
	2, 2, 50, 2, 2, 51, 2, 2, 
	52, 2, 2, 53, 2, 2, 54, 2, 
	2, 55, 2, 2, 56, 2, 2, 57, 
	2, 2, 58, 2, 2, 59, 2, 2, 
	60, 2, 2, 61, 2, 2, 62, 2, 
	2, 63, 2, 2, 64, 2, 2, 65, 
	2, 2, 66, 2, 2, 67, 2, 2, 
	68, 2, 2, 69, 2, 2, 70, 2, 
	2, 71, 2, 2, 72, 2, 2, 73, 
	2, 2, 74, 2, 2, 75, 2, 2, 
	76, 2, 2, 77, 2, 2, 78, 2, 
	2, 79, 2, 2, 80, 2, 2, 81, 
	2, 2, 82, 2, 2, 83, 2, 2, 
	84, 2, 2, 85, 2, 2, 86, 2, 
	2, 87, 2, 2, 88, 2, 2, 89, 
	2, 2, 90, 2, 2, 91, 2, 2, 
	92, 2, 2, 93, 2, 2, 94, 2, 
	2, 95, 2, 2, 96, 2, 2, 97, 
	2, 2, 98, 2, 2, 99, 2, 2, 
	100, 2, 2, 101, 2, 2, 102, 2, 
	2, 103, 2, 2, 104, 2, 2, 105, 
	2, 2, 106, 2, 2, 107, 2, 2, 
	108, 2, 2, 109, 2, 2, 110, 2, 
	2, 111, 2, 2, 112, 2, 2, 113, 
	2, 2, 114, 2, 2, 115, 2, 2, 
	116, 2, 2, 117, 2, 2, 118, 2, 
	2, 119, 2, 2, 120, 2, 2, 121, 
	2, 2, 122, 2, 2, 123, 2, 2, 
	124, 2, 2, 125, 2, 2, 126, 2, 
	2, 127, 2, 2, 128, 2, 2, 129, 
	2, 2, 130, 2, 2, 131, 2, 2, 
	132, 2, 2, 133, 2, 2, 134, 2, 
	2, 135, 2, 2, 136, 2, 2, 137, 
	2, 2, 138, 2, 2, 139, 2, 2, 
	140, 2, 2, 141, 2, 2, 142, 2, 
	2, 143, 2, 2, 144, 2, 2, 145, 
	2, 2, 146, 2, 2, 147, 2, 2, 
	148, 2, 2, 149, 2, 2, 150, 2, 
	2, 151, 2, 2, 152, 2, 2, 153, 
	2, 2, 154, 2, 2, 155, 2, 2, 
	156, 2, 2, 157, 2, 2, 158, 2, 
	2, 159, 2, 2, 160, 2, 2, 161, 
	2, 2, 162, 2, 2, 163, 2, 2, 
	164, 2, 2, 165, 2, 2, 166, 2, 
	2, 167, 2, 2, 168, 2, 2, 169, 
	2, 2, 170, 2, 2, 171, 2, 2, 
	172, 2, 2, 173, 2, 2, 174, 2, 
	2, 175, 2, 2, 176, 2, 2, 177, 
	2, 2, 178, 2, 2, 179, 2, 2, 
	180, 2, 2, 181, 2, 2, 182, 2, 
	2, 183
};
static const short _lexer_cond_offsets[] = {
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 5, 8, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 17, 21, 28, 
	35, 42, 49, 56, 63, 70, 77, 84, 
	91, 98, 105, 112, 119, 126, 133, 140, 
	147, 154, 161, 168, 175, 182, 189, 196, 
	203, 210, 217, 224, 231, 238, 245, 252, 
	259, 266, 273, 280, 287, 294, 301, 308, 
	315, 322, 329, 336, 343, 350, 357, 364, 
	371, 378, 385, 392, 399, 406, 413, 420, 
	427, 434, 441, 448, 455, 462, 469, 476, 
	483, 490, 497, 504, 511, 518, 525, 532, 
	539, 546, 553, 560, 567, 574, 581, 588, 
	595, 602, 609, 616, 623, 630, 637, 644, 
	651, 658, 665, 672, 679, 686, 693, 700, 
	707, 714, 721, 728, 735, 742, 749, 756, 
	763, 770, 777, 784, 791, 798, 805, 812, 
	819, 826, 833, 840, 847, 854, 861, 868, 
	875, 882, 889, 896, 903, 910, 917, 924, 
	931, 938, 945, 952, 959, 966, 973, 980, 
	987, 994, 1001, 1008, 1015, 1022, 1029, 1036, 
	1043, 1050, 1057, 1064, 1071, 1078, 1085, 1092, 
	1099, 1106, 1113, 1120, 1127, 1134, 1141, 1148, 
	1155, 1162, 1169, 1176, 1183, 1190, 1197, 1204, 
	1211, 1218, 1225, 1232, 1239, 1246, 1253, 1260, 
	1267, 1274, 1281, 1288, 1295, 1302, 1309, 1316, 
	1323, 1330, 1337, 1344, 1351, 1358, 1365, 1372, 
	1379, 1386
};
static const char _lexer_cond_lengths[] = {
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 5, 3, 4, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 5, 4, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7
};
static const short _lexer_cond_keys[] = {
	9, 9, 32, 32, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 58, 58, 
	46, 46, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 65, 90, 95, 95, 
	97, 122, 48, 57, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 0
};
static const char _lexer_cond_spaces[] = {
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0
};
static const short _lexer_key_offsets[] = {
	0, 0, 2, 5, 19, 21, 26, 31, 
	33, 38, 40, 45, 49, 54, 59, 61, 
	66, 74, 80, 88, 95, 98, 236, 237, 
	243, 246, 248, 249, 263, 264, 278, 290, 
	298, 306, 316, 322, 323, 326, 327, 329, 
	330, 348, 355, 366, 374, 383, 392, 401, 
	410, 419, 428, 442, 450, 461, 470, 479, 
	488, 497, 506, 520, 529, 538, 545, 556, 
	565, 574, 583, 592, 605, 614, 623, 641, 
	650, 662, 687, 696, 705, 714, 723, 732, 
	741, 750, 759, 768, 777, 786, 794, 810, 
	819, 828, 837, 846, 855, 864, 875, 884, 
	893, 902, 912, 921, 930, 939, 948, 957, 
	966, 978, 987, 996, 1004, 1029, 1038, 1047, 
	1058, 1067, 1076, 1085, 1094, 1103, 1112, 1128, 
	1137, 1146, 1155, 1164, 1173, 1182, 1191, 1200, 
	1209, 1220, 1231, 1240, 1249, 1258, 1267, 1278, 
	1289, 1300, 1318, 1331, 1344, 1353, 1362, 1375, 
	1384, 1393, 1402, 1411, 1424, 1435, 1444, 1455, 
	1464, 1473, 1484, 1493, 1506, 1515, 1524, 1533, 
	1542, 1551, 1560, 1577, 1586, 1595, 1608, 1617, 
	1628, 1639, 1648, 1659, 1668, 1677, 1689, 1698, 
	1707, 1720, 1729, 1740, 1749, 1758, 1767, 1776, 
	1793, 1802, 1811, 1820, 1829, 1840, 1851, 1864, 
	1873, 1886, 1895, 1904, 1929, 1938, 1947, 1958, 
	1967, 1976, 1985, 1994, 2003, 2012, 2021, 2036, 
	2047, 2058, 2067, 2076, 2085, 2094, 2103, 2112, 
	2121, 2130, 2139, 2148, 2157, 2166, 2175, 2184, 
	2193, 2202, 2213, 2224, 2233, 2242, 2251, 2260, 
	2269, 2278, 2289, 2298, 2307, 2314, 2321, 2359, 
	2376, 2401, 2419, 2440, 2461, 2482, 2503, 2524, 
	2545, 2575, 2593, 2618, 2639, 2660, 2681, 2702, 
	2723, 2753, 2774, 2795, 2812, 2837, 2858, 2879, 
	2900, 2921, 2950, 2971, 2992, 3030, 3051, 3077, 
	3130, 3151, 3172, 3193, 3214, 3235, 3256, 3277, 
	3298, 3319, 3340, 3361, 3379, 3413, 3434, 3455, 
	3476, 3497, 3518, 3539, 3564, 3585, 3606, 3627, 
	3649, 3670, 3691, 3712, 3733, 3754, 3775, 3801, 
	3822, 3843, 3861, 3914, 3935, 3956, 3981, 4002, 
	4023, 4044, 4065, 4086, 4107, 4142, 4163, 4184, 
	4205, 4226, 4247, 4268, 4289, 4310, 4331, 4356, 
	4381, 4402, 4423, 4444, 4465, 4490, 4515, 4540, 
	4578, 4607, 4636, 4657, 4678, 4707, 4728, 4749, 
	4770, 4791, 4820, 4845, 4866, 4891, 4912, 4933, 
	4958, 4979, 5008, 5029, 5050, 5071, 5092, 5113, 
	5134, 5171, 5192, 5213, 5242, 5263, 5288, 5313, 
	5334, 5359, 5380, 5401, 5428, 5449, 5470, 5499, 
	5520, 5545, 5566, 5587, 5608, 5629, 5666, 5687, 
	5708, 5729, 5750, 5775, 5800, 5829, 5850, 5879, 
	5900, 5921, 5974, 5995, 6016, 6041, 6062, 6083, 
	6104, 6125, 6146, 6167, 6188, 6221, 6246, 6271, 
	6292, 6313, 6334, 6355, 6376, 6397, 6418, 6439, 
	6460, 6481, 6502, 6523, 6544, 6565, 6586, 6607, 
	6632, 6657, 6678, 6699, 6720, 6741, 6762, 6783, 
	6808, 6829
};
static const short _lexer_trans_keys[] = {
	35, 45, 34, 35, 45, 9, 32, 66, 
	67, 68, 72, 73, 83, 98, 99, 100, 
	104, 105, 115, 67, 99, 9, 32, 41, 
	43, 45, 9, 32, 41, 43, 45, 69, 
	101, 9, 32, 41, 43, 45, 76, 108, 
	9, 32, 41, 43, 45, 88, 89, 120, 
	121, 9, 32, 41, 43, 45, 9, 32, 
	41, 43, 45, 80, 112, 9, 32, 41, 
	43, 45, 72, 104, 48, 57, 65, 70, 
	97, 102, 48, 57, 65, 70, 97, 102, 
	66, 80, 81, 87, 98, 112, 113, 119, 
	521, 544, 607, 577, 602, 609, 634, 521, 
	544, 570, 10, 33, 34, 35, 36, 37, 
	38, 39, 40, 41, 42, 43, 44, 45, 
	47, 48, 49, 58, 59, 60, 61, 62, 
	63, 64, 91, 92, 93, 94, 96, 123, 
	124, 125, 126, 127, 302, 321, 322, 323, 
	324, 325, 326, 327, 328, 329, 330, 332, 
	333, 334, 335, 336, 338, 339, 340, 341, 
	342, 344, 346, 351, 353, 354, 355, 356, 
	357, 358, 359, 360, 361, 362, 364, 365, 
	366, 367, 368, 370, 371, 372, 373, 374, 
	376, 378, 558, 577, 578, 579, 580, 581, 
	582, 583, 584, 585, 586, 588, 589, 590, 
	591, 592, 594, 595, 596, 597, 598, 600, 
	602, 607, 609, 610, 611, 612, 613, 614, 
	615, 616, 617, 618, 620, 621, 622, 623, 
	624, 626, 627, 628, 629, 630, 632, 634, 
	-128, 32, 50, 57, 331, 345, 363, 377, 
	587, 601, 619, 633, 61, 48, 57, 65, 
	70, 97, 102, 34, 48, 49, 48, 49, 
	38, 9, 32, 66, 67, 68, 72, 73, 
	83, 98, 99, 100, 104, 105, 115, 42, 
	66, 72, 88, 98, 104, 120, 48, 49, 
	50, 57, 65, 70, 97, 102, 66, 72, 
	98, 104, 48, 49, 50, 57, 65, 70, 
	97, 102, 72, 104, 48, 57, 65, 70, 
	97, 102, 72, 104, 48, 57, 65, 70, 
	97, 102, 72, 104, 48, 49, 50, 57, 
	65, 70, 97, 102, 48, 57, 65, 70, 
	97, 102, 10, 60, 61, 62, 61, 61, 
	62, 124, 39, 68, 70, 76, 78, 83, 
	95, 100, 102, 108, 110, 115, 48, 57, 
	65, 90, 97, 122, 95, 48, 57, 65, 
	90, 97, 122, 67, 68, 95, 99, 100, 
	48, 57, 65, 90, 97, 122, 39, 95, 
	48, 57, 65, 90, 97, 122, 84, 95, 
	116, 48, 57, 65, 90, 97, 122, 68, 
	95, 100, 48, 57, 65, 90, 97, 122, 
	68, 95, 100, 48, 57, 65, 90, 97, 
	122, 77, 95, 109, 48, 57, 65, 90, 
	97, 122, 80, 95, 112, 48, 57, 65, 
	90, 97, 122, 67, 95, 99, 48, 57, 
	65, 90, 97, 122, 39, 67, 73, 79, 
	95, 99, 105, 111, 48, 57, 65, 90, 
	97, 122, 39, 95, 48, 57, 65, 90, 
	97, 122, 78, 84, 95, 110, 116, 48, 
	57, 65, 90, 97, 122, 65, 95, 97, 
	48, 57, 66, 90, 98, 122, 82, 95, 
	114, 48, 57, 65, 90, 97, 122, 89, 
	95, 121, 48, 57, 65, 90, 97, 122, 
	79, 95, 111, 48, 57, 65, 90, 97, 
	122, 76, 95, 108, 48, 57, 65, 90, 
	97, 122, 39, 65, 67, 80, 95, 97, 
	99, 112, 48, 57, 66, 90, 98, 122, 
	76, 95, 108, 48, 57, 65, 90, 97, 
	122, 76, 95, 108, 48, 57, 65, 90, 
	97, 122, 95, 48, 57, 65, 90, 97, 
	122, 79, 80, 95, 111, 112, 48, 57, 
	65, 90, 97, 122, 90, 95, 122, 48, 
	57, 65, 89, 97, 121, 75, 95, 107, 
	48, 57, 65, 90, 97, 122, 71, 95, 
	103, 48, 57, 65, 90, 97, 122, 70, 
	95, 102, 48, 57, 65, 90, 97, 122, 
	68, 73, 76, 95, 100, 105, 108, 48, 
	57, 65, 90, 97, 122, 82, 95, 114, 
	48, 57, 65, 90, 97, 122, 82, 95, 
	114, 48, 57, 65, 90, 97, 122, 39, 
	65, 69, 73, 74, 83, 95, 97, 101, 
	105, 106, 115, 48, 57, 66, 90, 98, 
	122, 65, 95, 97, 48, 57, 66, 90, 
	98, 122, 39, 67, 70, 95, 99, 102, 
	48, 57, 65, 90, 97, 122, 66, 67, 
	71, 73, 77, 81, 83, 86, 87, 95, 
	98, 99, 103, 105, 109, 113, 115, 118, 
	119, 48, 57, 65, 90, 97, 122, 82, 
	95, 114, 48, 57, 65, 90, 97, 122, 
	79, 95, 111, 48, 57, 65, 90, 97, 
	122, 85, 95, 117, 48, 57, 65, 90, 
	97, 122, 80, 95, 112, 48, 57, 65, 
	90, 97, 122, 78, 95, 110, 48, 57, 
	65, 90, 97, 122, 69, 95, 101, 48, 
	57, 65, 90, 97, 122, 65, 95, 97, 
	48, 57, 66, 90, 98, 122, 82, 95, 
	114, 48, 57, 65, 90, 97, 122, 83, 
	95, 115, 48, 57, 65, 90, 97, 122, 
	78, 95, 110, 48, 57, 65, 90, 97, 
	122, 90, 95, 122, 48, 57, 65, 89, 
	97, 121, 46, 95, 48, 57, 65, 90, 
	97, 122, 39, 73, 76, 78, 88, 95, 
	105, 108, 110, 120, 48, 57, 65, 90, 
	97, 122, 82, 95, 114, 48, 57, 65, 
	90, 97, 122, 83, 95, 115, 48, 57, 
	65, 90, 97, 122, 69, 95, 101, 48, 
	57, 65, 90, 97, 122, 68, 95, 100, 
	48, 57, 65, 90, 97, 122, 73, 95, 
	105, 48, 57, 65, 90, 97, 122, 70, 
	95, 102, 48, 57, 65, 90, 97, 122, 
	84, 88, 95, 116, 120, 48, 57, 65, 
	90, 97, 122, 69, 95, 101, 48, 57, 
	65, 90, 97, 122, 82, 95, 114, 48, 
	57, 65, 90, 97, 122, 78, 95, 110, 
	48, 57, 65, 90, 97, 122, 39, 80, 
	95, 112, 48, 57, 65, 90, 97, 122, 
	80, 95, 112, 48, 57, 65, 90, 97, 
	122, 76, 95, 108, 48, 57, 65, 90, 
	97, 122, 79, 95, 111, 48, 57, 65, 
	90, 97, 122, 66, 95, 98, 48, 57, 
	65, 90, 97, 122, 65, 95, 97, 48, 
	57, 66, 90, 98, 122, 76, 95, 108, 
	48, 57, 65, 90, 97, 122, 39, 65, 
	76, 95, 97, 108, 48, 57, 66, 90, 
	98, 122, 76, 95, 108, 48, 57, 65, 
	90, 97, 122, 84, 95, 116, 48, 57, 
	65, 90, 97, 122, 39, 95, 48, 57, 
	65, 90, 97, 122, 68, 70, 73, 77, 
	78, 79, 80, 88, 89, 95, 100, 102, 
	105, 109, 110, 111, 112, 120, 121, 48, 
	57, 65, 90, 97, 122, 69, 95, 101, 
	48, 57, 65, 90, 97, 122, 84, 95, 
	116, 48, 57, 65, 90, 97, 122, 68, 
	78, 95, 100, 110, 48, 57, 65, 90, 
	97, 122, 69, 95, 101, 48, 57, 65, 
	90, 97, 122, 70, 95, 102, 48, 57, 
	65, 90, 97, 122, 68, 95, 100, 48, 
	57, 65, 90, 97, 122, 69, 95, 101, 
	48, 57, 65, 90, 97, 122, 70, 95, 
	102, 48, 57, 65, 90, 97, 122, 82, 
	95, 114, 48, 57, 65, 90, 97, 122, 
	48, 67, 68, 73, 86, 95, 99, 100, 
	105, 118, 49, 57, 65, 90, 97, 122, 
	76, 95, 108, 48, 57, 65, 90, 97, 
	122, 85, 95, 117, 48, 57, 65, 90, 
	97, 122, 68, 95, 100, 48, 57, 65, 
	90, 97, 122, 69, 95, 101, 48, 57, 
	65, 90, 97, 122, 82, 95, 114, 48, 
	57, 65, 90, 97, 122, 82, 95, 114, 
	48, 57, 65, 90, 97, 122, 79, 95, 
	111, 48, 57, 65, 90, 97, 122, 75, 
	95, 107, 48, 57, 65, 90, 97, 122, 
	69, 95, 101, 48, 57, 65, 90, 97, 
	122, 69, 73, 95, 101, 105, 48, 57, 
	65, 90, 97, 122, 82, 83, 95, 114, 
	115, 48, 57, 65, 90, 97, 122, 69, 
	95, 101, 48, 57, 65, 90, 97, 122, 
	83, 95, 115, 48, 57, 65, 90, 97, 
	122, 69, 95, 101, 48, 57, 65, 90, 
	97, 122, 84, 95, 116, 48, 57, 65, 
	90, 97, 122, 72, 76, 95, 104, 108, 
	48, 57, 65, 90, 97, 122, 72, 76, 
	95, 104, 108, 48, 57, 65, 90, 97, 
	122, 80, 82, 95, 112, 114, 48, 57, 
	65, 90, 97, 122, 39, 68, 73, 79, 
	83, 90, 95, 100, 105, 111, 115, 122, 
	48, 57, 65, 89, 97, 121, 68, 73, 
	80, 95, 100, 105, 112, 48, 57, 65, 
	90, 97, 122, 82, 83, 88, 95, 114, 
	115, 120, 48, 57, 65, 90, 97, 122, 
	88, 95, 120, 48, 57, 65, 90, 97, 
	122, 82, 95, 114, 48, 57, 65, 90, 
	97, 122, 82, 83, 88, 95, 114, 115, 
	120, 48, 57, 65, 90, 97, 122, 88, 
	95, 120, 48, 57, 65, 90, 97, 122, 
	82, 95, 114, 48, 57, 65, 90, 97, 
	122, 78, 95, 110, 48, 57, 65, 90, 
	97, 122, 69, 95, 101, 48, 57, 65, 
	90, 97, 122, 68, 73, 84, 95, 100, 
	105, 116, 48, 57, 65, 90, 97, 122, 
	68, 82, 95, 100, 114, 48, 57, 65, 
	90, 97, 122, 82, 95, 114, 48, 57, 
	65, 90, 97, 122, 68, 82, 95, 100, 
	114, 48, 57, 65, 90, 97, 122, 82, 
	95, 114, 48, 57, 65, 90, 97, 122, 
	79, 95, 111, 48, 57, 65, 90, 97, 
	122, 70, 78, 95, 102, 110, 48, 57, 
	65, 90, 97, 122, 70, 95, 102, 48, 
	57, 65, 90, 97, 122, 76, 79, 85, 
	95, 108, 111, 117, 48, 57, 65, 90, 
	97, 122, 84, 95, 116, 48, 57, 65, 
	90, 97, 122, 68, 95, 100, 48, 57, 
	65, 90, 97, 122, 85, 95, 117, 48, 
	57, 65, 90, 97, 122, 76, 95, 108, 
	48, 57, 65, 90, 97, 122, 69, 95, 
	101, 48, 57, 65, 90, 97, 122, 76, 
	95, 108, 48, 57, 65, 90, 97, 122, 
	67, 69, 79, 86, 90, 95, 99, 101, 
	111, 118, 122, 48, 57, 65, 89, 97, 
	121, 71, 95, 103, 48, 57, 65, 90, 
	97, 122, 80, 95, 112, 48, 57, 65, 
	90, 97, 122, 82, 84, 85, 95, 114, 
	116, 117, 48, 57, 65, 90, 97, 122, 
	71, 95, 103, 48, 57, 65, 90, 97, 
	122, 68, 73, 95, 100, 105, 48, 57, 
	65, 90, 97, 122, 77, 82, 95, 109, 
	114, 48, 57, 65, 90, 97, 122, 82, 
	95, 114, 48, 57, 65, 90, 97, 122, 
	77, 82, 95, 109, 114, 48, 57, 65, 
	90, 97, 122, 82, 95, 114, 48, 57, 
	65, 90, 97, 122, 84, 95, 116, 48, 
	57, 65, 90, 97, 122, 48, 68, 73, 
	95, 100, 105, 49, 57, 65, 90, 97, 
	122, 78, 95, 110, 48, 57, 65, 90, 
	97, 122, 66, 95, 98, 48, 57, 65, 
	90, 97, 122, 69, 79, 85, 95, 101, 
	111, 117, 48, 57, 65, 90, 97, 122, 
	80, 95, 112, 48, 57, 65, 90, 97, 
	122, 66, 83, 95, 98, 115, 48, 57, 
	65, 90, 97, 122, 76, 95, 108, 48, 
	57, 65, 90, 97, 122, 73, 95, 105, 
	48, 57, 65, 90, 97, 122, 67, 95, 
	99, 48, 57, 65, 90, 97, 122, 72, 
	95, 104, 48, 57, 65, 90, 97, 122, 
	68, 69, 76, 82, 83, 95, 100, 101, 
	108, 114, 115, 48, 57, 65, 90, 97, 
	122, 77, 95, 109, 48, 57, 65, 90, 
	97, 122, 79, 95, 111, 48, 57, 65, 
	90, 97, 122, 68, 95, 100, 48, 57, 
	65, 90, 97, 122, 69, 95, 101, 48, 
	57, 65, 90, 97, 122, 83, 84, 95, 
	115, 116, 48, 57, 65, 90, 97, 122, 
	73, 78, 95, 105, 110, 48, 57, 65, 
	90, 97, 122, 65, 67, 68, 95, 97, 
	99, 100, 48, 57, 66, 90, 98, 122, 
	65, 95, 97, 48, 57, 66, 90, 98, 
	122, 65, 67, 68, 95, 97, 99, 100, 
	48, 57, 66, 90, 98, 122, 65, 95, 
	97, 48, 57, 66, 90, 98, 122, 84, 
	95, 116, 48, 57, 65, 90, 97, 122, 
	66, 67, 69, 76, 80, 82, 85, 87, 
	89, 95, 98, 99, 101, 108, 112, 114, 
	117, 119, 121, 48, 57, 65, 90, 97, 
	122, 67, 95, 99, 48, 57, 65, 90, 
	97, 122, 70, 95, 102, 48, 57, 65, 
	90, 97, 122, 67, 84, 95, 99, 116, 
	48, 57, 65, 90, 97, 122, 84, 95, 
	116, 48, 57, 65, 90, 97, 122, 73, 
	95, 105, 48, 57, 65, 90, 97, 122, 
	79, 95, 111, 48, 57, 65, 90, 97, 
	122, 78, 95, 110, 48, 57, 65, 90, 
	97, 122, 85, 95, 117, 48, 57, 65, 
	90, 97, 122, 83, 95, 115, 48, 57, 
	65, 90, 97, 122, 82, 95, 114, 48, 
	57, 65, 90, 97, 122, 65, 73, 76, 
	80, 95, 97, 105, 108, 112, 48, 57, 
	66, 90, 98, 122, 65, 76, 95, 97, 
	108, 48, 57, 66, 90, 98, 122, 66, 
	82, 95, 98, 114, 48, 57, 65, 90, 
	97, 122, 69, 95, 101, 48, 57, 65, 
	90, 97, 122, 83, 95, 115, 48, 57, 
	65, 90, 97, 122, 65, 95, 97, 48, 
	57, 66, 90, 98, 122, 80, 95, 112, 
	48, 57, 65, 90, 97, 122, 78, 95, 
	110, 48, 57, 65, 90, 97, 122, 73, 
	95, 105, 48, 57, 65, 90, 97, 122, 
	66, 95, 98, 48, 57, 65, 90, 97, 
	122, 83, 95, 115, 48, 57, 65, 90, 
	97, 122, 67, 95, 99, 48, 57, 65, 
	90, 97, 122, 65, 95, 97, 48, 57, 
	66, 90, 98, 122, 76, 95, 108, 48, 
	57, 65, 90, 97, 122, 76, 95, 108, 
	48, 57, 65, 90, 97, 122, 83, 95, 
	115, 48, 57, 65, 90, 97, 122, 84, 
	95, 116, 48, 57, 65, 90, 97, 122, 
	73, 95, 105, 48, 57, 65, 90, 97, 
	122, 79, 95, 111, 48, 57, 65, 90, 
	97, 122, 77, 78, 95, 109, 110, 48, 
	57, 65, 90, 97, 122, 65, 83, 95, 
	97, 115, 48, 57, 66, 90, 98, 122, 
	68, 95, 100, 48, 57, 65, 90, 97, 
	122, 69, 95, 101, 48, 57, 65, 90, 
	97, 122, 70, 95, 102, 48, 57, 65, 
	90, 97, 122, 73, 95, 105, 48, 57, 
	65, 90, 97, 122, 78, 95, 110, 48, 
	57, 65, 90, 97, 122, 69, 95, 101, 
	48, 57, 65, 90, 97, 122, 79, 80, 
	95, 111, 112, 48, 57, 65, 90, 97, 
	122, 82, 95, 114, 48, 57, 65, 90, 
	97, 122, 67, 95, 99, 48, 57, 65, 
	90, 97, 122, 521, 544, 607, 577, 602, 
	609, 634, 607, 560, 569, 577, 602, 609, 
	634, 39, 324, 326, 332, 334, 339, 351, 
	356, 358, 364, 366, 371, 521, 544, 570, 
	580, 582, 588, 590, 595, 607, 612, 614, 
	620, 622, 627, 304, 313, 321, 346, 353, 
	378, 560, 569, 577, 602, 609, 634, 351, 
	521, 544, 570, 607, 304, 313, 321, 346, 
	353, 378, 560, 569, 577, 602, 609, 634, 
	323, 324, 351, 355, 356, 521, 544, 570, 
	579, 580, 607, 611, 612, 304, 313, 321, 
	346, 353, 378, 560, 569, 577, 602, 609, 
	634, 39, 351, 521, 544, 570, 607, 304, 
	313, 321, 346, 353, 378, 560, 569, 577, 
	602, 609, 634, 340, 351, 372, 521, 544, 
	570, 596, 607, 628, 304, 313, 321, 346, 
	353, 378, 560, 569, 577, 602, 609, 634, 
	324, 351, 356, 521, 544, 570, 580, 607, 
	612, 304, 313, 321, 346, 353, 378, 560, 
	569, 577, 602, 609, 634, 324, 351, 356, 
	521, 544, 570, 580, 607, 612, 304, 313, 
	321, 346, 353, 378, 560, 569, 577, 602, 
	609, 634, 333, 351, 365, 521, 544, 570, 
	589, 607, 621, 304, 313, 321, 346, 353, 
	378, 560, 569, 577, 602, 609, 634, 336, 
	351, 368, 521, 544, 570, 592, 607, 624, 
	304, 313, 321, 346, 353, 378, 560, 569, 
	577, 602, 609, 634, 323, 351, 355, 521, 
	544, 570, 579, 607, 611, 304, 313, 321, 
	346, 353, 378, 560, 569, 577, 602, 609, 
	634, 39, 323, 329, 335, 351, 355, 361, 
	367, 521, 544, 570, 579, 585, 591, 607, 
	611, 617, 623, 304, 313, 321, 346, 353, 
	378, 560, 569, 577, 602, 609, 634, 39, 
	351, 521, 544, 570, 607, 304, 313, 321, 
	346, 353, 378, 560, 569, 577, 602, 609, 
	634, 334, 340, 351, 366, 372, 521, 544, 
	570, 590, 596, 607, 622, 628, 304, 313, 
	321, 346, 353, 378, 560, 569, 577, 602, 
	609, 634, 321, 351, 353, 521, 544, 570, 
	577, 607, 609, 304, 313, 322, 346, 354, 
	378, 560, 569, 578, 602, 610, 634, 338, 
	351, 370, 521, 544, 570, 594, 607, 626, 
	304, 313, 321, 346, 353, 378, 560, 569, 
	577, 602, 609, 634, 345, 351, 377, 521, 
	544, 570, 601, 607, 633, 304, 313, 321, 
	346, 353, 378, 560, 569, 577, 602, 609, 
	634, 335, 351, 367, 521, 544, 570, 591, 
	607, 623, 304, 313, 321, 346, 353, 378, 
	560, 569, 577, 602, 609, 634, 332, 351, 
	364, 521, 544, 570, 588, 607, 620, 304, 
	313, 321, 346, 353, 378, 560, 569, 577, 
	602, 609, 634, 39, 321, 323, 336, 351, 
	353, 355, 368, 521, 544, 570, 577, 579, 
	592, 607, 609, 611, 624, 304, 313, 322, 
	346, 354, 378, 560, 569, 578, 602, 610, 
	634, 332, 351, 364, 521, 544, 570, 588, 
	607, 620, 304, 313, 321, 346, 353, 378, 
	560, 569, 577, 602, 609, 634, 332, 351, 
	364, 521, 544, 570, 588, 607, 620, 304, 
	313, 321, 346, 353, 378, 560, 569, 577, 
	602, 609, 634, 351, 521, 544, 570, 607, 
	304, 313, 321, 346, 353, 378, 560, 569, 
	577, 602, 609, 634, 335, 336, 351, 367, 
	368, 521, 544, 570, 591, 592, 607, 623, 
	624, 304, 313, 321, 346, 353, 378, 560, 
	569, 577, 602, 609, 634, 346, 351, 378, 
	521, 544, 570, 602, 607, 634, 304, 313, 
	321, 345, 353, 377, 560, 569, 577, 601, 
	609, 633, 331, 351, 363, 521, 544, 570, 
	587, 607, 619, 304, 313, 321, 346, 353, 
	378, 560, 569, 577, 602, 609, 634, 327, 
	351, 359, 521, 544, 570, 583, 607, 615, 
	304, 313, 321, 346, 353, 378, 560, 569, 
	577, 602, 609, 634, 326, 351, 358, 521, 
	544, 570, 582, 607, 614, 304, 313, 321, 
	346, 353, 378, 560, 569, 577, 602, 609, 
	634, 324, 329, 332, 351, 356, 361, 364, 
	521, 544, 570, 580, 585, 588, 607, 612, 
	617, 620, 304, 313, 321, 346, 353, 378, 
	560, 569, 577, 602, 609, 634, 338, 351, 
	370, 521, 544, 570, 594, 607, 626, 304, 
	313, 321, 346, 353, 378, 560, 569, 577, 
	602, 609, 634, 338, 351, 370, 521, 544, 
	570, 594, 607, 626, 304, 313, 321, 346, 
	353, 378, 560, 569, 577, 602, 609, 634, 
	39, 321, 325, 329, 330, 339, 351, 353, 
	357, 361, 362, 371, 521, 544, 570, 577, 
	581, 585, 586, 595, 607, 609, 613, 617, 
	618, 627, 304, 313, 322, 346, 354, 378, 
	560, 569, 578, 602, 610, 634, 321, 351, 
	353, 521, 544, 570, 577, 607, 609, 304, 
	313, 322, 346, 354, 378, 560, 569, 578, 
	602, 610, 634, 39, 323, 326, 351, 355, 
	358, 521, 544, 570, 579, 582, 607, 611, 
	614, 304, 313, 321, 346, 353, 378, 560, 
	569, 577, 602, 609, 634, 322, 323, 327, 
	329, 333, 337, 339, 342, 343, 351, 354, 
	355, 359, 361, 365, 369, 371, 374, 375, 
	521, 544, 570, 578, 579, 583, 585, 589, 
	593, 595, 598, 599, 607, 610, 611, 615, 
	617, 621, 625, 627, 630, 631, 304, 313, 
	321, 346, 353, 378, 560, 569, 577, 602, 
	609, 634, 338, 351, 370, 521, 544, 570, 
	594, 607, 626, 304, 313, 321, 346, 353, 
	378, 560, 569, 577, 602, 609, 634, 335, 
	351, 367, 521, 544, 570, 591, 607, 623, 
	304, 313, 321, 346, 353, 378, 560, 569, 
	577, 602, 609, 634, 341, 351, 373, 521, 
	544, 570, 597, 607, 629, 304, 313, 321, 
	346, 353, 378, 560, 569, 577, 602, 609, 
	634, 336, 351, 368, 521, 544, 570, 592, 
	607, 624, 304, 313, 321, 346, 353, 378, 
	560, 569, 577, 602, 609, 634, 334, 351, 
	366, 521, 544, 570, 590, 607, 622, 304, 
	313, 321, 346, 353, 378, 560, 569, 577, 
	602, 609, 634, 325, 351, 357, 521, 544, 
	570, 581, 607, 613, 304, 313, 321, 346, 
	353, 378, 560, 569, 577, 602, 609, 634, 
	321, 351, 353, 521, 544, 570, 577, 607, 
	609, 304, 313, 322, 346, 354, 378, 560, 
	569, 578, 602, 610, 634, 338, 351, 370, 
	521, 544, 570, 594, 607, 626, 304, 313, 
	321, 346, 353, 378, 560, 569, 577, 602, 
	609, 634, 339, 351, 371, 521, 544, 570, 
	595, 607, 627, 304, 313, 321, 346, 353, 
	378, 560, 569, 577, 602, 609, 634, 334, 
	351, 366, 521, 544, 570, 590, 607, 622, 
	304, 313, 321, 346, 353, 378, 560, 569, 
	577, 602, 609, 634, 346, 351, 378, 521, 
	544, 570, 602, 607, 634, 304, 313, 321, 
	345, 353, 377, 560, 569, 577, 601, 609, 
	633, 46, 351, 521, 544, 570, 607, 304, 
	313, 321, 346, 353, 378, 560, 569, 577, 
	602, 609, 634, 39, 329, 332, 334, 344, 
	351, 361, 364, 366, 376, 521, 544, 570, 
	585, 588, 590, 600, 607, 617, 620, 622, 
	632, 304, 313, 321, 346, 353, 378, 560, 
	569, 577, 602, 609, 634, 338, 351, 370, 
	521, 544, 570, 594, 607, 626, 304, 313, 
	321, 346, 353, 378, 560, 569, 577, 602, 
	609, 634, 339, 351, 371, 521, 544, 570, 
	595, 607, 627, 304, 313, 321, 346, 353, 
	378, 560, 569, 577, 602, 609, 634, 325, 
	351, 357, 521, 544, 570, 581, 607, 613, 
	304, 313, 321, 346, 353, 378, 560, 569, 
	577, 602, 609, 634, 324, 351, 356, 521, 
	544, 570, 580, 607, 612, 304, 313, 321, 
	346, 353, 378, 560, 569, 577, 602, 609, 
	634, 329, 351, 361, 521, 544, 570, 585, 
	607, 617, 304, 313, 321, 346, 353, 378, 
	560, 569, 577, 602, 609, 634, 326, 351, 
	358, 521, 544, 570, 582, 607, 614, 304, 
	313, 321, 346, 353, 378, 560, 569, 577, 
	602, 609, 634, 340, 344, 351, 372, 376, 
	521, 544, 570, 596, 600, 607, 628, 632, 
	304, 313, 321, 346, 353, 378, 560, 569, 
	577, 602, 609, 634, 325, 351, 357, 521, 
	544, 570, 581, 607, 613, 304, 313, 321, 
	346, 353, 378, 560, 569, 577, 602, 609, 
	634, 338, 351, 370, 521, 544, 570, 594, 
	607, 626, 304, 313, 321, 346, 353, 378, 
	560, 569, 577, 602, 609, 634, 334, 351, 
	366, 521, 544, 570, 590, 607, 622, 304, 
	313, 321, 346, 353, 378, 560, 569, 577, 
	602, 609, 634, 39, 336, 351, 368, 521, 
	544, 570, 592, 607, 624, 304, 313, 321, 
	346, 353, 378, 560, 569, 577, 602, 609, 
	634, 336, 351, 368, 521, 544, 570, 592, 
	607, 624, 304, 313, 321, 346, 353, 378, 
	560, 569, 577, 602, 609, 634, 332, 351, 
	364, 521, 544, 570, 588, 607, 620, 304, 
	313, 321, 346, 353, 378, 560, 569, 577, 
	602, 609, 634, 335, 351, 367, 521, 544, 
	570, 591, 607, 623, 304, 313, 321, 346, 
	353, 378, 560, 569, 577, 602, 609, 634, 
	322, 351, 354, 521, 544, 570, 578, 607, 
	610, 304, 313, 321, 346, 353, 378, 560, 
	569, 577, 602, 609, 634, 321, 351, 353, 
	521, 544, 570, 577, 607, 609, 304, 313, 
	322, 346, 354, 378, 560, 569, 578, 602, 
	610, 634, 332, 351, 364, 521, 544, 570, 
	588, 607, 620, 304, 313, 321, 346, 353, 
	378, 560, 569, 577, 602, 609, 634, 39, 
	321, 332, 351, 353, 364, 521, 544, 570, 
	577, 588, 607, 609, 620, 304, 313, 322, 
	346, 354, 378, 560, 569, 578, 602, 610, 
	634, 332, 351, 364, 521, 544, 570, 588, 
	607, 620, 304, 313, 321, 346, 353, 378, 
	560, 569, 577, 602, 609, 634, 340, 351, 
	372, 521, 544, 570, 596, 607, 628, 304, 
	313, 321, 346, 353, 378, 560, 569, 577, 
	602, 609, 634, 39, 351, 521, 544, 570, 
	607, 304, 313, 321, 346, 353, 378, 560, 
	569, 577, 602, 609, 634, 324, 326, 329, 
	333, 334, 335, 336, 344, 345, 351, 356, 
	358, 361, 365, 366, 367, 368, 376, 377, 
	521, 544, 570, 580, 582, 585, 589, 590, 
	591, 592, 600, 601, 607, 612, 614, 617, 
	621, 622, 623, 624, 632, 633, 304, 313, 
	321, 346, 353, 378, 560, 569, 577, 602, 
	609, 634, 325, 351, 357, 521, 544, 570, 
	581, 607, 613, 304, 313, 321, 346, 353, 
	378, 560, 569, 577, 602, 609, 634, 340, 
	351, 372, 521, 544, 570, 596, 607, 628, 
	304, 313, 321, 346, 353, 378, 560, 569, 
	577, 602, 609, 634, 324, 334, 351, 356, 
	366, 521, 544, 570, 580, 590, 607, 612, 
	622, 304, 313, 321, 346, 353, 378, 560, 
	569, 577, 602, 609, 634, 325, 351, 357, 
	521, 544, 570, 581, 607, 613, 304, 313, 
	321, 346, 353, 378, 560, 569, 577, 602, 
	609, 634, 326, 351, 358, 521, 544, 570, 
	582, 607, 614, 304, 313, 321, 346, 353, 
	378, 560, 569, 577, 602, 609, 634, 324, 
	351, 356, 521, 544, 570, 580, 607, 612, 
	304, 313, 321, 346, 353, 378, 560, 569, 
	577, 602, 609, 634, 325, 351, 357, 521, 
	544, 570, 581, 607, 613, 304, 313, 321, 
	346, 353, 378, 560, 569, 577, 602, 609, 
	634, 326, 351, 358, 521, 544, 570, 582, 
	607, 614, 304, 313, 321, 346, 353, 378, 
	560, 569, 577, 602, 609, 634, 338, 351, 
	370, 521, 544, 570, 594, 607, 626, 304, 
	313, 321, 346, 353, 378, 560, 569, 577, 
	602, 609, 634, 304, 323, 324, 329, 342, 
	351, 355, 356, 361, 374, 521, 544, 560, 
	570, 579, 580, 585, 598, 607, 611, 612, 
	617, 630, 305, 313, 321, 346, 353, 378, 
	561, 569, 577, 602, 609, 634, 332, 351, 
	364, 521, 544, 570, 588, 607, 620, 304, 
	313, 321, 346, 353, 378, 560, 569, 577, 
	602, 609, 634, 341, 351, 373, 521, 544, 
	570, 597, 607, 629, 304, 313, 321, 346, 
	353, 378, 560, 569, 577, 602, 609, 634, 
	324, 351, 356, 521, 544, 570, 580, 607, 
	612, 304, 313, 321, 346, 353, 378, 560, 
	569, 577, 602, 609, 634, 325, 351, 357, 
	521, 544, 570, 581, 607, 613, 304, 313, 
	321, 346, 353, 378, 560, 569, 577, 602, 
	609, 634, 338, 351, 370, 521, 544, 570, 
	594, 607, 626, 304, 313, 321, 346, 353, 
	378, 560, 569, 577, 602, 609, 634, 338, 
	351, 370, 521, 544, 570, 594, 607, 626, 
	304, 313, 321, 346, 353, 378, 560, 569, 
	577, 602, 609, 634, 335, 351, 367, 521, 
	544, 570, 591, 607, 623, 304, 313, 321, 
	346, 353, 378, 560, 569, 577, 602, 609, 
	634, 331, 351, 363, 521, 544, 570, 587, 
	607, 619, 304, 313, 321, 346, 353, 378, 
	560, 569, 577, 602, 609, 634, 325, 351, 
	357, 521, 544, 570, 581, 607, 613, 304, 
	313, 321, 346, 353, 378, 560, 569, 577, 
	602, 609, 634, 325, 329, 351, 357, 361, 
	521, 544, 570, 581, 585, 607, 613, 617, 
	304, 313, 321, 346, 353, 378, 560, 569, 
	577, 602, 609, 634, 338, 339, 351, 370, 
	371, 521, 544, 570, 594, 595, 607, 626, 
	627, 304, 313, 321, 346, 353, 378, 560, 
	569, 577, 602, 609, 634, 325, 351, 357, 
	521, 544, 570, 581, 607, 613, 304, 313, 
	321, 346, 353, 378, 560, 569, 577, 602, 
	609, 634, 339, 351, 371, 521, 544, 570, 
	595, 607, 627, 304, 313, 321, 346, 353, 
	378, 560, 569, 577, 602, 609, 634, 325, 
	351, 357, 521, 544, 570, 581, 607, 613, 
	304, 313, 321, 346, 353, 378, 560, 569, 
	577, 602, 609, 634, 340, 351, 372, 521, 
	544, 570, 596, 607, 628, 304, 313, 321, 
	346, 353, 378, 560, 569, 577, 602, 609, 
	634, 328, 332, 351, 360, 364, 521, 544, 
	570, 584, 588, 607, 616, 620, 304, 313, 
	321, 346, 353, 378, 560, 569, 577, 602, 
	609, 634, 328, 332, 351, 360, 364, 521, 
	544, 570, 584, 588, 607, 616, 620, 304, 
	313, 321, 346, 353, 378, 560, 569, 577, 
	602, 609, 634, 336, 338, 351, 368, 370, 
	521, 544, 570, 592, 594, 607, 624, 626, 
	304, 313, 321, 346, 353, 378, 560, 569, 
	577, 602, 609, 634, 39, 324, 329, 335, 
	339, 346, 351, 356, 361, 367, 371, 378, 
	521, 544, 570, 580, 585, 591, 595, 602, 
	607, 612, 617, 623, 627, 634, 304, 313, 
	321, 345, 353, 377, 560, 569, 577, 601, 
	609, 633, 324, 329, 336, 351, 356, 361, 
	368, 521, 544, 570, 580, 585, 592, 607, 
	612, 617, 624, 304, 313, 321, 346, 353, 
	378, 560, 569, 577, 602, 609, 634, 338, 
	339, 344, 351, 370, 371, 376, 521, 544, 
	570, 594, 595, 600, 607, 626, 627, 632, 
	304, 313, 321, 346, 353, 378, 560, 569, 
	577, 602, 609, 634, 344, 351, 376, 521, 
	544, 570, 600, 607, 632, 304, 313, 321, 
	346, 353, 378, 560, 569, 577, 602, 609, 
	634, 338, 351, 370, 521, 544, 570, 594, 
	607, 626, 304, 313, 321, 346, 353, 378, 
	560, 569, 577, 602, 609, 634, 338, 339, 
	344, 351, 370, 371, 376, 521, 544, 570, 
	594, 595, 600, 607, 626, 627, 632, 304, 
	313, 321, 346, 353, 378, 560, 569, 577, 
	602, 609, 634, 344, 351, 376, 521, 544, 
	570, 600, 607, 632, 304, 313, 321, 346, 
	353, 378, 560, 569, 577, 602, 609, 634, 
	338, 351, 370, 521, 544, 570, 594, 607, 
	626, 304, 313, 321, 346, 353, 378, 560, 
	569, 577, 602, 609, 634, 334, 351, 366, 
	521, 544, 570, 590, 607, 622, 304, 313, 
	321, 346, 353, 378, 560, 569, 577, 602, 
	609, 634, 325, 351, 357, 521, 544, 570, 
	581, 607, 613, 304, 313, 321, 346, 353, 
	378, 560, 569, 577, 602, 609, 634, 324, 
	329, 340, 351, 356, 361, 372, 521, 544, 
	570, 580, 585, 596, 607, 612, 617, 628, 
	304, 313, 321, 346, 353, 378, 560, 569, 
	577, 602, 609, 634, 324, 338, 351, 356, 
	370, 521, 544, 570, 580, 594, 607, 612, 
	626, 304, 313, 321, 346, 353, 378, 560, 
	569, 577, 602, 609, 634, 338, 351, 370, 
	521, 544, 570, 594, 607, 626, 304, 313, 
	321, 346, 353, 378, 560, 569, 577, 602, 
	609, 634, 324, 338, 351, 356, 370, 521, 
	544, 570, 580, 594, 607, 612, 626, 304, 
	313, 321, 346, 353, 378, 560, 569, 577, 
	602, 609, 634, 338, 351, 370, 521, 544, 
	570, 594, 607, 626, 304, 313, 321, 346, 
	353, 378, 560, 569, 577, 602, 609, 634, 
	335, 351, 367, 521, 544, 570, 591, 607, 
	623, 304, 313, 321, 346, 353, 378, 560, 
	569, 577, 602, 609, 634, 326, 334, 351, 
	358, 366, 521, 544, 570, 582, 590, 607, 
	614, 622, 304, 313, 321, 346, 353, 378, 
	560, 569, 577, 602, 609, 634, 326, 351, 
	358, 521, 544, 570, 582, 607, 614, 304, 
	313, 321, 346, 353, 378, 560, 569, 577, 
	602, 609, 634, 332, 335, 341, 351, 364, 
	367, 373, 521, 544, 570, 588, 591, 597, 
	607, 620, 623, 629, 304, 313, 321, 346, 
	353, 378, 560, 569, 577, 602, 609, 634, 
	340, 351, 372, 521, 544, 570, 596, 607, 
	628, 304, 313, 321, 346, 353, 378, 560, 
	569, 577, 602, 609, 634, 324, 351, 356, 
	521, 544, 570, 580, 607, 612, 304, 313, 
	321, 346, 353, 378, 560, 569, 577, 602, 
	609, 634, 341, 351, 373, 521, 544, 570, 
	597, 607, 629, 304, 313, 321, 346, 353, 
	378, 560, 569, 577, 602, 609, 634, 332, 
	351, 364, 521, 544, 570, 588, 607, 620, 
	304, 313, 321, 346, 353, 378, 560, 569, 
	577, 602, 609, 634, 325, 351, 357, 521, 
	544, 570, 581, 607, 613, 304, 313, 321, 
	346, 353, 378, 560, 569, 577, 602, 609, 
	634, 332, 351, 364, 521, 544, 570, 588, 
	607, 620, 304, 313, 321, 346, 353, 378, 
	560, 569, 577, 602, 609, 634, 323, 325, 
	335, 342, 346, 351, 355, 357, 367, 374, 
	378, 521, 544, 570, 579, 581, 591, 598, 
	602, 607, 611, 613, 623, 630, 634, 304, 
	313, 321, 345, 353, 377, 560, 569, 577, 
	601, 609, 633, 327, 351, 359, 521, 544, 
	570, 583, 607, 615, 304, 313, 321, 346, 
	353, 378, 560, 569, 577, 602, 609, 634, 
	336, 351, 368, 521, 544, 570, 592, 607, 
	624, 304, 313, 321, 346, 353, 378, 560, 
	569, 577, 602, 609, 634, 338, 340, 341, 
	351, 370, 372, 373, 521, 544, 570, 594, 
	596, 597, 607, 626, 628, 629, 304, 313, 
	321, 346, 353, 378, 560, 569, 577, 602, 
	609, 634, 327, 351, 359, 521, 544, 570, 
	583, 607, 615, 304, 313, 321, 346, 353, 
	378, 560, 569, 577, 602, 609, 634, 324, 
	329, 351, 356, 361, 521, 544, 570, 580, 
	585, 607, 612, 617, 304, 313, 321, 346, 
	353, 378, 560, 569, 577, 602, 609, 634, 
	333, 338, 351, 365, 370, 521, 544, 570, 
	589, 594, 607, 621, 626, 304, 313, 321, 
	346, 353, 378, 560, 569, 577, 602, 609, 
	634, 338, 351, 370, 521, 544, 570, 594, 
	607, 626, 304, 313, 321, 346, 353, 378, 
	560, 569, 577, 602, 609, 634, 333, 338, 
	351, 365, 370, 521, 544, 570, 589, 594, 
	607, 621, 626, 304, 313, 321, 346, 353, 
	378, 560, 569, 577, 602, 609, 634, 338, 
	351, 370, 521, 544, 570, 594, 607, 626, 
	304, 313, 321, 346, 353, 378, 560, 569, 
	577, 602, 609, 634, 340, 351, 372, 521, 
	544, 570, 596, 607, 628, 304, 313, 321, 
	346, 353, 378, 560, 569, 577, 602, 609, 
	634, 304, 324, 329, 351, 356, 361, 521, 
	544, 560, 570, 580, 585, 607, 612, 617, 
	305, 313, 321, 346, 353, 378, 561, 569, 
	577, 602, 609, 634, 334, 351, 366, 521, 
	544, 570, 590, 607, 622, 304, 313, 321, 
	346, 353, 378, 560, 569, 577, 602, 609, 
	634, 322, 351, 354, 521, 544, 570, 578, 
	607, 610, 304, 313, 321, 346, 353, 378, 
	560, 569, 577, 602, 609, 634, 325, 335, 
	341, 351, 357, 367, 373, 521, 544, 570, 
	581, 591, 597, 607, 613, 623, 629, 304, 
	313, 321, 346, 353, 378, 560, 569, 577, 
	602, 609, 634, 336, 351, 368, 521, 544, 
	570, 592, 607, 624, 304, 313, 321, 346, 
	353, 378, 560, 569, 577, 602, 609, 634, 
	322, 339, 351, 354, 371, 521, 544, 570, 
	578, 595, 607, 610, 627, 304, 313, 321, 
	346, 353, 378, 560, 569, 577, 602, 609, 
	634, 332, 351, 364, 521, 544, 570, 588, 
	607, 620, 304, 313, 321, 346, 353, 378, 
	560, 569, 577, 602, 609, 634, 329, 351, 
	361, 521, 544, 570, 585, 607, 617, 304, 
	313, 321, 346, 353, 378, 560, 569, 577, 
	602, 609, 634, 323, 351, 355, 521, 544, 
	570, 579, 607, 611, 304, 313, 321, 346, 
	353, 378, 560, 569, 577, 602, 609, 634, 
	328, 351, 360, 521, 544, 570, 584, 607, 
	616, 304, 313, 321, 346, 353, 378, 560, 
	569, 577, 602, 609, 634, 324, 325, 332, 
	338, 339, 351, 356, 357, 364, 370, 371, 
	521, 544, 570, 580, 581, 588, 594, 595, 
	607, 612, 613, 620, 626, 627, 304, 313, 
	321, 346, 353, 378, 560, 569, 577, 602, 
	609, 634, 333, 351, 365, 521, 544, 570, 
	589, 607, 621, 304, 313, 321, 346, 353, 
	378, 560, 569, 577, 602, 609, 634, 335, 
	351, 367, 521, 544, 570, 591, 607, 623, 
	304, 313, 321, 346, 353, 378, 560, 569, 
	577, 602, 609, 634, 324, 351, 356, 521, 
	544, 570, 580, 607, 612, 304, 313, 321, 
	346, 353, 378, 560, 569, 577, 602, 609, 
	634, 325, 351, 357, 521, 544, 570, 581, 
	607, 613, 304, 313, 321, 346, 353, 378, 
	560, 569, 577, 602, 609, 634, 339, 340, 
	351, 371, 372, 521, 544, 570, 595, 596, 
	607, 627, 628, 304, 313, 321, 346, 353, 
	378, 560, 569, 577, 602, 609, 634, 329, 
	334, 351, 361, 366, 521, 544, 570, 585, 
	590, 607, 617, 622, 304, 313, 321, 346, 
	353, 378, 560, 569, 577, 602, 609, 634, 
	321, 323, 324, 351, 353, 355, 356, 521, 
	544, 570, 577, 579, 580, 607, 609, 611, 
	612, 304, 313, 322, 346, 354, 378, 560, 
	569, 578, 602, 610, 634, 321, 351, 353, 
	521, 544, 570, 577, 607, 609, 304, 313, 
	322, 346, 354, 378, 560, 569, 578, 602, 
	610, 634, 321, 323, 324, 351, 353, 355, 
	356, 521, 544, 570, 577, 579, 580, 607, 
	609, 611, 612, 304, 313, 322, 346, 354, 
	378, 560, 569, 578, 602, 610, 634, 321, 
	351, 353, 521, 544, 570, 577, 607, 609, 
	304, 313, 322, 346, 354, 378, 560, 569, 
	578, 602, 610, 634, 340, 351, 372, 521, 
	544, 570, 596, 607, 628, 304, 313, 321, 
	346, 353, 378, 560, 569, 577, 602, 609, 
	634, 322, 323, 325, 332, 336, 338, 341, 
	343, 345, 351, 354, 355, 357, 364, 368, 
	370, 373, 375, 377, 521, 544, 570, 578, 
	579, 581, 588, 592, 594, 597, 599, 601, 
	607, 610, 611, 613, 620, 624, 626, 629, 
	631, 633, 304, 313, 321, 346, 353, 378, 
	560, 569, 577, 602, 609, 634, 323, 351, 
	355, 521, 544, 570, 579, 607, 611, 304, 
	313, 321, 346, 353, 378, 560, 569, 577, 
	602, 609, 634, 326, 351, 358, 521, 544, 
	570, 582, 607, 614, 304, 313, 321, 346, 
	353, 378, 560, 569, 577, 602, 609, 634, 
	323, 340, 351, 355, 372, 521, 544, 570, 
	579, 596, 607, 611, 628, 304, 313, 321, 
	346, 353, 378, 560, 569, 577, 602, 609, 
	634, 340, 351, 372, 521, 544, 570, 596, 
	607, 628, 304, 313, 321, 346, 353, 378, 
	560, 569, 577, 602, 609, 634, 329, 351, 
	361, 521, 544, 570, 585, 607, 617, 304, 
	313, 321, 346, 353, 378, 560, 569, 577, 
	602, 609, 634, 335, 351, 367, 521, 544, 
	570, 591, 607, 623, 304, 313, 321, 346, 
	353, 378, 560, 569, 577, 602, 609, 634, 
	334, 351, 366, 521, 544, 570, 590, 607, 
	622, 304, 313, 321, 346, 353, 378, 560, 
	569, 577, 602, 609, 634, 341, 351, 373, 
	521, 544, 570, 597, 607, 629, 304, 313, 
	321, 346, 353, 378, 560, 569, 577, 602, 
	609, 634, 339, 351, 371, 521, 544, 570, 
	595, 607, 627, 304, 313, 321, 346, 353, 
	378, 560, 569, 577, 602, 609, 634, 338, 
	351, 370, 521, 544, 570, 594, 607, 626, 
	304, 313, 321, 346, 353, 378, 560, 569, 
	577, 602, 609, 634, 321, 329, 332, 336, 
	351, 353, 361, 364, 368, 521, 544, 570, 
	577, 585, 588, 592, 607, 609, 617, 620, 
	624, 304, 313, 322, 346, 354, 378, 560, 
	569, 578, 602, 610, 634, 321, 332, 351, 
	353, 364, 521, 544, 570, 577, 588, 607, 
	609, 620, 304, 313, 322, 346, 354, 378, 
	560, 569, 578, 602, 610, 634, 322, 338, 
	351, 354, 370, 521, 544, 570, 578, 594, 
	607, 610, 626, 304, 313, 321, 346, 353, 
	378, 560, 569, 577, 602, 609, 634, 325, 
	351, 357, 521, 544, 570, 581, 607, 613, 
	304, 313, 321, 346, 353, 378, 560, 569, 
	577, 602, 609, 634, 339, 351, 371, 521, 
	544, 570, 595, 607, 627, 304, 313, 321, 
	346, 353, 378, 560, 569, 577, 602, 609, 
	634, 321, 351, 353, 521, 544, 570, 577, 
	607, 609, 304, 313, 322, 346, 354, 378, 
	560, 569, 578, 602, 610, 634, 336, 351, 
	368, 521, 544, 570, 592, 607, 624, 304, 
	313, 321, 346, 353, 378, 560, 569, 577, 
	602, 609, 634, 334, 351, 366, 521, 544, 
	570, 590, 607, 622, 304, 313, 321, 346, 
	353, 378, 560, 569, 577, 602, 609, 634, 
	329, 351, 361, 521, 544, 570, 585, 607, 
	617, 304, 313, 321, 346, 353, 378, 560, 
	569, 577, 602, 609, 634, 322, 351, 354, 
	521, 544, 570, 578, 607, 610, 304, 313, 
	321, 346, 353, 378, 560, 569, 577, 602, 
	609, 634, 339, 351, 371, 521, 544, 570, 
	595, 607, 627, 304, 313, 321, 346, 353, 
	378, 560, 569, 577, 602, 609, 634, 323, 
	351, 355, 521, 544, 570, 579, 607, 611, 
	304, 313, 321, 346, 353, 378, 560, 569, 
	577, 602, 609, 634, 321, 351, 353, 521, 
	544, 570, 577, 607, 609, 304, 313, 322, 
	346, 354, 378, 560, 569, 578, 602, 610, 
	634, 332, 351, 364, 521, 544, 570, 588, 
	607, 620, 304, 313, 321, 346, 353, 378, 
	560, 569, 577, 602, 609, 634, 332, 351, 
	364, 521, 544, 570, 588, 607, 620, 304, 
	313, 321, 346, 353, 378, 560, 569, 577, 
	602, 609, 634, 339, 351, 371, 521, 544, 
	570, 595, 607, 627, 304, 313, 321, 346, 
	353, 378, 560, 569, 577, 602, 609, 634, 
	340, 351, 372, 521, 544, 570, 596, 607, 
	628, 304, 313, 321, 346, 353, 378, 560, 
	569, 577, 602, 609, 634, 329, 351, 361, 
	521, 544, 570, 585, 607, 617, 304, 313, 
	321, 346, 353, 378, 560, 569, 577, 602, 
	609, 634, 335, 351, 367, 521, 544, 570, 
	591, 607, 623, 304, 313, 321, 346, 353, 
	378, 560, 569, 577, 602, 609, 634, 333, 
	334, 351, 365, 366, 521, 544, 570, 589, 
	590, 607, 621, 622, 304, 313, 321, 346, 
	353, 378, 560, 569, 577, 602, 609, 634, 
	321, 339, 351, 353, 371, 521, 544, 570, 
	577, 595, 607, 609, 627, 304, 313, 322, 
	346, 354, 378, 560, 569, 578, 602, 610, 
	634, 324, 351, 356, 521, 544, 570, 580, 
	607, 612, 304, 313, 321, 346, 353, 378, 
	560, 569, 577, 602, 609, 634, 325, 351, 
	357, 521, 544, 570, 581, 607, 613, 304, 
	313, 321, 346, 353, 378, 560, 569, 577, 
	602, 609, 634, 326, 351, 358, 521, 544, 
	570, 582, 607, 614, 304, 313, 321, 346, 
	353, 378, 560, 569, 577, 602, 609, 634, 
	329, 351, 361, 521, 544, 570, 585, 607, 
	617, 304, 313, 321, 346, 353, 378, 560, 
	569, 577, 602, 609, 634, 334, 351, 366, 
	521, 544, 570, 590, 607, 622, 304, 313, 
	321, 346, 353, 378, 560, 569, 577, 602, 
	609, 634, 325, 351, 357, 521, 544, 570, 
	581, 607, 613, 304, 313, 321, 346, 353, 
	378, 560, 569, 577, 602, 609, 634, 335, 
	336, 351, 367, 368, 521, 544, 570, 591, 
	592, 607, 623, 624, 304, 313, 321, 346, 
	353, 378, 560, 569, 577, 602, 609, 634, 
	338, 351, 370, 521, 544, 570, 594, 607, 
	626, 304, 313, 321, 346, 353, 378, 560, 
	569, 577, 602, 609, 634, 323, 351, 355, 
	521, 544, 570, 579, 607, 611, 304, 313, 
	321, 346, 353, 378, 560, 569, 577, 602, 
	609, 634, 0
};
static const char _lexer_single_lengths[] = {
	0, 2, 3, 14, 2, 5, 5, 2, 
	5, 2, 5, 4, 5, 5, 2, 5, 
	2, 0, 8, 3, 3, 126, 1, 0, 
	1, 0, 1, 14, 1, 6, 4, 2, 
	2, 2, 0, 1, 3, 1, 2, 1, 
	12, 1, 5, 2, 3, 3, 3, 3, 
	3, 3, 8, 2, 5, 3, 3, 3, 
	3, 3, 8, 3, 3, 1, 5, 3, 
	3, 3, 3, 7, 3, 3, 12, 3, 
	6, 19, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 2, 10, 3, 
	3, 3, 3, 3, 3, 5, 3, 3, 
	3, 4, 3, 3, 3, 3, 3, 3, 
	6, 3, 3, 2, 19, 3, 3, 5, 
	3, 3, 3, 3, 3, 3, 10, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	5, 5, 3, 3, 3, 3, 5, 5, 
	5, 12, 7, 7, 3, 3, 7, 3, 
	3, 3, 3, 7, 5, 3, 5, 3, 
	3, 5, 3, 7, 3, 3, 3, 3, 
	3, 3, 11, 3, 3, 7, 3, 5, 
	5, 3, 5, 3, 3, 6, 3, 3, 
	7, 3, 5, 3, 3, 3, 3, 11, 
	3, 3, 3, 3, 5, 5, 7, 3, 
	7, 3, 3, 19, 3, 3, 5, 3, 
	3, 3, 3, 3, 3, 3, 9, 5, 
	5, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 5, 5, 3, 3, 3, 3, 3, 
	3, 5, 3, 3, 3, 1, 26, 5, 
	13, 6, 9, 9, 9, 9, 9, 9, 
	18, 6, 13, 9, 9, 9, 9, 9, 
	18, 9, 9, 5, 13, 9, 9, 9, 
	9, 17, 9, 9, 26, 9, 14, 41, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 6, 22, 9, 9, 9, 
	9, 9, 9, 13, 9, 9, 9, 10, 
	9, 9, 9, 9, 9, 9, 14, 9, 
	9, 6, 41, 9, 9, 13, 9, 9, 
	9, 9, 9, 9, 23, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 13, 13, 
	9, 9, 9, 9, 13, 13, 13, 26, 
	17, 17, 9, 9, 17, 9, 9, 9, 
	9, 17, 13, 9, 13, 9, 9, 13, 
	9, 17, 9, 9, 9, 9, 9, 9, 
	25, 9, 9, 17, 9, 13, 13, 9, 
	13, 9, 9, 15, 9, 9, 17, 9, 
	13, 9, 9, 9, 9, 25, 9, 9, 
	9, 9, 13, 13, 17, 9, 17, 9, 
	9, 41, 9, 9, 13, 9, 9, 9, 
	9, 9, 9, 9, 21, 13, 13, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 13, 
	13, 9, 9, 9, 9, 9, 9, 13, 
	9, 9
};
static const char _lexer_range_lengths[] = {
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	3, 3, 0, 2, 0, 6, 0, 3, 
	1, 1, 0, 0, 0, 4, 4, 3, 
	3, 4, 3, 0, 0, 0, 0, 0, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 2, 3, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6
};
static const short _lexer_index_offsets[] = {
	0, 0, 3, 7, 22, 25, 31, 37, 
	40, 46, 49, 55, 60, 66, 72, 75, 
	81, 87, 91, 100, 106, 110, 243, 245, 
	249, 252, 254, 256, 271, 273, 284, 293, 
	299, 305, 312, 316, 318, 322, 324, 327, 
	329, 345, 350, 359, 365, 372, 379, 386, 
	393, 400, 407, 419, 425, 434, 441, 448, 
	455, 462, 469, 481, 488, 495, 500, 509, 
	516, 523, 530, 537, 548, 555, 562, 578, 
	585, 595, 618, 625, 632, 639, 646, 653, 
	660, 667, 674, 681, 688, 695, 701, 715, 
	722, 729, 736, 743, 750, 757, 766, 773, 
	780, 787, 795, 802, 809, 816, 823, 830, 
	837, 847, 854, 861, 867, 890, 897, 904, 
	913, 920, 927, 934, 941, 948, 955, 969, 
	976, 983, 990, 997, 1004, 1011, 1018, 1025, 
	1032, 1041, 1050, 1057, 1064, 1071, 1078, 1087, 
	1096, 1105, 1121, 1132, 1143, 1150, 1157, 1168, 
	1175, 1182, 1189, 1196, 1207, 1216, 1223, 1232, 
	1239, 1246, 1255, 1262, 1273, 1280, 1287, 1294, 
	1301, 1308, 1315, 1330, 1337, 1344, 1355, 1362, 
	1371, 1380, 1387, 1396, 1403, 1410, 1420, 1427, 
	1434, 1445, 1452, 1461, 1468, 1475, 1482, 1489, 
	1504, 1511, 1518, 1525, 1532, 1541, 1550, 1561, 
	1568, 1579, 1586, 1593, 1616, 1623, 1630, 1639, 
	1646, 1653, 1660, 1667, 1674, 1681, 1688, 1701, 
	1710, 1719, 1726, 1733, 1740, 1747, 1754, 1761, 
	1768, 1775, 1782, 1789, 1796, 1803, 1810, 1817, 
	1824, 1831, 1840, 1849, 1856, 1863, 1870, 1877, 
	1884, 1891, 1900, 1907, 1914, 1920, 1925, 1958, 
	1970, 1990, 2003, 2019, 2035, 2051, 2067, 2083, 
	2099, 2124, 2137, 2157, 2173, 2189, 2205, 2221, 
	2237, 2262, 2278, 2294, 2306, 2326, 2342, 2358, 
	2374, 2390, 2414, 2430, 2446, 2479, 2495, 2516, 
	2564, 2580, 2596, 2612, 2628, 2644, 2660, 2676, 
	2692, 2708, 2724, 2740, 2753, 2782, 2798, 2814, 
	2830, 2846, 2862, 2878, 2898, 2914, 2930, 2946, 
	2963, 2979, 2995, 3011, 3027, 3043, 3059, 3080, 
	3096, 3112, 3125, 3173, 3189, 3205, 3225, 3241, 
	3257, 3273, 3289, 3305, 3321, 3351, 3367, 3383, 
	3399, 3415, 3431, 3447, 3463, 3479, 3495, 3515, 
	3535, 3551, 3567, 3583, 3599, 3619, 3639, 3659, 
	3692, 3716, 3740, 3756, 3772, 3796, 3812, 3828, 
	3844, 3860, 3884, 3904, 3920, 3940, 3956, 3972, 
	3992, 4008, 4032, 4048, 4064, 4080, 4096, 4112, 
	4128, 4160, 4176, 4192, 4216, 4232, 4252, 4272, 
	4288, 4308, 4324, 4340, 4362, 4378, 4394, 4418, 
	4434, 4454, 4470, 4486, 4502, 4518, 4550, 4566, 
	4582, 4598, 4614, 4634, 4654, 4678, 4694, 4718, 
	4734, 4750, 4798, 4814, 4830, 4850, 4866, 4882, 
	4898, 4914, 4930, 4946, 4962, 4990, 5010, 5030, 
	5046, 5062, 5078, 5094, 5110, 5126, 5142, 5158, 
	5174, 5190, 5206, 5222, 5238, 5254, 5270, 5286, 
	5306, 5326, 5342, 5358, 5374, 5390, 5406, 5422, 
	5442, 5458
};
static const short _lexer_indicies[] = {
	1, 1, 0, 2, 1, 1, 0, 4, 
	4, 5, 6, 7, 8, 9, 10, 5, 
	6, 7, 8, 9, 10, 3, 11, 11, 
	3, 11, 11, 12, 12, 12, 3, 6, 
	6, 13, 13, 13, 3, 14, 14, 3, 
	14, 14, 15, 15, 15, 3, 16, 16, 
	3, 16, 16, 17, 17, 17, 3, 18, 
	19, 18, 19, 3, 18, 18, 20, 20, 
	20, 3, 19, 19, 21, 21, 21, 3, 
	22, 22, 3, 22, 22, 23, 23, 23, 
	3, 25, 25, 24, 24, 24, 0, 27, 
	27, 27, 26, 29, 30, 31, 32, 29, 
	30, 31, 32, 28, 34, 34, 35, 35, 
	35, 33, 36, 36, 37, 0, 39, 40, 
	41, 42, 43, 44, 45, 46, 47, 48, 
	49, 50, 51, 52, 53, 55, 56, 58, 
	59, 60, 61, 62, 63, 64, 65, 66, 
	67, 68, 66, 69, 70, 71, 72, 38, 
	73, 74, 75, 76, 77, 78, 79, 80, 
	81, 82, 83, 85, 86, 87, 88, 89, 
	90, 91, 92, 93, 94, 95, 96, 84, 
	74, 75, 76, 77, 78, 79, 80, 81, 
	82, 83, 85, 86, 87, 88, 89, 90, 
	91, 92, 93, 94, 95, 96, 97, 98, 
	99, 100, 101, 102, 103, 104, 105, 106, 
	107, 109, 110, 111, 112, 113, 114, 115, 
	116, 117, 118, 119, 120, 108, 98, 99, 
	100, 101, 102, 103, 104, 105, 106, 107, 
	109, 110, 111, 112, 113, 114, 115, 116, 
	117, 118, 119, 120, 38, 57, 84, 84, 
	108, 108, 54, 122, 121, 123, 123, 123, 
	0, 124, 125, 0, 125, 126, 128, 127, 
	4, 4, 5, 6, 7, 8, 9, 10, 
	5, 6, 7, 8, 9, 10, 129, 131, 
	130, 133, 25, 134, 133, 25, 134, 56, 
	57, 24, 24, 132, 135, 25, 135, 25, 
	56, 57, 24, 24, 132, 25, 25, 57, 
	24, 24, 132, 25, 25, 24, 24, 24, 
	136, 25, 25, 137, 24, 24, 24, 0, 
	27, 27, 27, 138, 139, 59, 141, 142, 
	143, 140, 145, 144, 147, 148, 146, 150, 
	149, 152, 153, 154, 155, 156, 157, 84, 
	153, 154, 155, 156, 157, 84, 84, 84, 
	151, 84, 84, 84, 84, 0, 159, 160, 
	84, 159, 160, 84, 84, 84, 158, 162, 
	84, 84, 84, 84, 161, 163, 84, 163, 
	84, 84, 84, 158, 164, 84, 164, 84, 
	84, 84, 158, 165, 84, 165, 84, 84, 
	84, 158, 166, 84, 166, 84, 84, 84, 
	158, 167, 84, 167, 84, 84, 84, 158, 
	168, 84, 168, 84, 84, 84, 158, 170, 
	171, 172, 173, 84, 171, 172, 173, 84, 
	84, 84, 169, 175, 84, 84, 84, 84, 
	174, 176, 177, 84, 176, 177, 84, 84, 
	84, 158, 178, 84, 178, 84, 84, 84, 
	158, 179, 84, 179, 84, 84, 84, 158, 
	180, 84, 180, 84, 84, 84, 158, 181, 
	84, 181, 84, 84, 84, 158, 182, 84, 
	182, 84, 84, 84, 158, 184, 185, 186, 
	187, 84, 185, 186, 187, 84, 84, 84, 
	183, 188, 84, 188, 84, 84, 84, 158, 
	189, 84, 189, 84, 84, 84, 158, 191, 
	84, 84, 84, 190, 192, 193, 84, 192, 
	193, 84, 84, 84, 158, 194, 84, 194, 
	84, 84, 84, 158, 195, 84, 195, 84, 
	84, 84, 158, 196, 84, 196, 84, 84, 
	84, 158, 197, 84, 197, 84, 84, 84, 
	158, 199, 200, 201, 84, 199, 200, 201, 
	84, 84, 84, 198, 203, 84, 203, 84, 
	84, 84, 202, 205, 84, 205, 84, 84, 
	84, 204, 207, 208, 209, 210, 211, 212, 
	84, 208, 209, 210, 211, 212, 84, 84, 
	84, 206, 213, 84, 213, 84, 84, 84, 
	158, 215, 216, 217, 84, 216, 217, 84, 
	84, 84, 214, 218, 219, 220, 221, 222, 
	223, 224, 225, 226, 84, 218, 219, 220, 
	221, 222, 223, 224, 225, 226, 84, 84, 
	84, 158, 227, 84, 227, 84, 84, 84, 
	158, 228, 84, 228, 84, 84, 84, 158, 
	229, 84, 229, 84, 84, 84, 158, 230, 
	84, 230, 84, 84, 84, 158, 231, 84, 
	231, 84, 84, 84, 158, 232, 84, 232, 
	84, 84, 84, 158, 233, 84, 233, 84, 
	84, 84, 158, 234, 84, 234, 84, 84, 
	84, 158, 235, 84, 235, 84, 84, 84, 
	158, 236, 84, 236, 84, 84, 84, 158, 
	237, 84, 237, 84, 84, 84, 158, 238, 
	84, 84, 84, 84, 158, 240, 241, 242, 
	243, 244, 84, 241, 242, 243, 244, 84, 
	84, 84, 239, 246, 84, 246, 84, 84, 
	84, 245, 247, 84, 247, 84, 84, 84, 
	158, 248, 84, 248, 84, 84, 84, 158, 
	249, 84, 249, 84, 84, 84, 158, 250, 
	84, 250, 84, 84, 84, 158, 251, 84, 
	251, 84, 84, 84, 158, 253, 254, 84, 
	253, 254, 84, 84, 84, 252, 255, 84, 
	255, 84, 84, 84, 158, 256, 84, 256, 
	84, 84, 84, 158, 257, 84, 257, 84, 
	84, 84, 158, 259, 260, 84, 260, 84, 
	84, 84, 258, 261, 84, 261, 84, 84, 
	84, 158, 262, 84, 262, 84, 84, 84, 
	158, 263, 84, 263, 84, 84, 84, 158, 
	264, 84, 264, 84, 84, 84, 158, 265, 
	84, 265, 84, 84, 84, 158, 266, 84, 
	266, 84, 84, 84, 158, 268, 269, 270, 
	84, 269, 270, 84, 84, 84, 267, 271, 
	84, 271, 84, 84, 84, 158, 272, 84, 
	272, 84, 84, 84, 158, 274, 84, 84, 
	84, 84, 273, 276, 277, 278, 279, 280, 
	281, 282, 283, 284, 84, 276, 277, 278, 
	279, 280, 281, 282, 283, 284, 84, 84, 
	84, 275, 285, 84, 285, 84, 84, 84, 
	158, 286, 84, 286, 84, 84, 84, 158, 
	288, 289, 84, 288, 289, 84, 84, 84, 
	287, 290, 84, 290, 84, 84, 84, 158, 
	291, 84, 291, 84, 84, 84, 158, 292, 
	84, 292, 84, 84, 84, 158, 293, 84, 
	293, 84, 84, 84, 158, 294, 84, 294, 
	84, 84, 84, 158, 295, 84, 295, 84, 
	84, 84, 158, 297, 298, 299, 300, 301, 
	84, 298, 299, 300, 301, 84, 84, 84, 
	296, 303, 84, 303, 84, 84, 84, 302, 
	304, 84, 304, 84, 84, 84, 158, 305, 
	84, 305, 84, 84, 84, 158, 306, 84, 
	306, 84, 84, 84, 158, 308, 84, 308, 
	84, 84, 84, 307, 310, 84, 310, 84, 
	84, 84, 309, 311, 84, 311, 84, 84, 
	84, 158, 312, 84, 312, 84, 84, 84, 
	158, 313, 84, 313, 84, 84, 84, 158, 
	314, 315, 84, 314, 315, 84, 84, 84, 
	158, 317, 318, 84, 317, 318, 84, 84, 
	84, 316, 319, 84, 319, 84, 84, 84, 
	158, 320, 84, 320, 84, 84, 84, 158, 
	321, 84, 321, 84, 84, 84, 158, 322, 
	84, 322, 84, 84, 84, 158, 324, 325, 
	84, 324, 325, 84, 84, 84, 323, 327, 
	328, 84, 327, 328, 84, 84, 84, 326, 
	329, 330, 84, 329, 330, 84, 84, 84, 
	158, 332, 333, 334, 335, 336, 337, 84, 
	333, 334, 335, 336, 337, 84, 84, 84, 
	331, 339, 340, 341, 84, 339, 340, 341, 
	84, 84, 84, 338, 343, 344, 345, 84, 
	343, 344, 345, 84, 84, 84, 342, 347, 
	84, 347, 84, 84, 84, 346, 348, 84, 
	348, 84, 84, 84, 158, 350, 351, 352, 
	84, 350, 351, 352, 84, 84, 84, 349, 
	354, 84, 354, 84, 84, 84, 353, 355, 
	84, 355, 84, 84, 84, 158, 356, 84, 
	356, 84, 84, 84, 158, 357, 84, 357, 
	84, 84, 84, 158, 358, 359, 360, 84, 
	358, 359, 360, 84, 84, 84, 158, 361, 
	362, 84, 361, 362, 84, 84, 84, 158, 
	363, 84, 363, 84, 84, 84, 158, 364, 
	365, 84, 364, 365, 84, 84, 84, 158, 
	366, 84, 366, 84, 84, 84, 158, 367, 
	84, 367, 84, 84, 84, 158, 368, 369, 
	84, 368, 369, 84, 84, 84, 158, 370, 
	84, 370, 84, 84, 84, 158, 372, 373, 
	374, 84, 372, 373, 374, 84, 84, 84, 
	371, 375, 84, 375, 84, 84, 84, 158, 
	376, 84, 376, 84, 84, 84, 158, 377, 
	84, 377, 84, 84, 84, 158, 378, 84, 
	378, 84, 84, 84, 158, 379, 84, 379, 
	84, 84, 84, 158, 380, 84, 380, 84, 
	84, 84, 158, 381, 382, 383, 384, 385, 
	84, 381, 382, 383, 384, 385, 84, 84, 
	84, 158, 386, 84, 386, 84, 84, 84, 
	158, 387, 84, 387, 84, 84, 84, 158, 
	388, 389, 390, 84, 388, 389, 390, 84, 
	84, 84, 158, 392, 84, 392, 84, 84, 
	84, 391, 393, 394, 84, 393, 394, 84, 
	84, 84, 158, 395, 396, 84, 395, 396, 
	84, 84, 84, 158, 398, 84, 398, 84, 
	84, 84, 397, 399, 400, 84, 399, 400, 
	84, 84, 84, 158, 402, 84, 402, 84, 
	84, 84, 401, 403, 84, 403, 84, 84, 
	84, 158, 405, 406, 407, 84, 406, 407, 
	84, 84, 84, 404, 409, 84, 409, 84, 
	84, 84, 408, 410, 84, 410, 84, 84, 
	84, 158, 412, 413, 414, 84, 412, 413, 
	414, 84, 84, 84, 411, 416, 84, 416, 
	84, 84, 84, 415, 417, 418, 84, 417, 
	418, 84, 84, 84, 158, 419, 84, 419, 
	84, 84, 84, 158, 420, 84, 420, 84, 
	84, 84, 158, 421, 84, 421, 84, 84, 
	84, 158, 422, 84, 422, 84, 84, 84, 
	158, 424, 425, 426, 427, 428, 84, 424, 
	425, 426, 427, 428, 84, 84, 84, 423, 
	429, 84, 429, 84, 84, 84, 158, 430, 
	84, 430, 84, 84, 84, 158, 431, 84, 
	431, 84, 84, 84, 158, 432, 84, 432, 
	84, 84, 84, 158, 433, 434, 84, 433, 
	434, 84, 84, 84, 158, 436, 437, 84, 
	436, 437, 84, 84, 84, 435, 439, 440, 
	441, 84, 439, 440, 441, 84, 84, 84, 
	438, 443, 84, 443, 84, 84, 84, 442, 
	445, 446, 447, 84, 445, 446, 447, 84, 
	84, 84, 444, 449, 84, 449, 84, 84, 
	84, 448, 450, 84, 450, 84, 84, 84, 
	158, 451, 452, 453, 454, 455, 456, 457, 
	458, 459, 84, 451, 452, 453, 454, 455, 
	456, 457, 458, 459, 84, 84, 84, 158, 
	460, 84, 460, 84, 84, 84, 158, 461, 
	84, 461, 84, 84, 84, 158, 462, 463, 
	84, 462, 463, 84, 84, 84, 158, 464, 
	84, 464, 84, 84, 84, 158, 465, 84, 
	465, 84, 84, 84, 158, 466, 84, 466, 
	84, 84, 84, 158, 467, 84, 467, 84, 
	84, 84, 158, 469, 84, 469, 84, 84, 
	84, 468, 470, 84, 470, 84, 84, 84, 
	158, 471, 84, 471, 84, 84, 84, 158, 
	472, 473, 474, 475, 84, 472, 473, 474, 
	475, 84, 84, 84, 158, 476, 477, 84, 
	476, 477, 84, 84, 84, 158, 479, 480, 
	84, 479, 480, 84, 84, 84, 478, 481, 
	84, 481, 84, 84, 84, 158, 482, 84, 
	482, 84, 84, 84, 158, 483, 84, 483, 
	84, 84, 84, 158, 484, 84, 484, 84, 
	84, 84, 158, 485, 84, 485, 84, 84, 
	84, 158, 486, 84, 486, 84, 84, 84, 
	158, 487, 84, 487, 84, 84, 84, 158, 
	488, 84, 488, 84, 84, 84, 158, 489, 
	84, 489, 84, 84, 84, 158, 490, 84, 
	490, 84, 84, 84, 158, 491, 84, 491, 
	84, 84, 84, 158, 492, 84, 492, 84, 
	84, 84, 158, 493, 84, 493, 84, 84, 
	84, 158, 494, 84, 494, 84, 84, 84, 
	158, 496, 84, 496, 84, 84, 84, 495, 
	497, 84, 497, 84, 84, 84, 158, 498, 
	499, 84, 498, 499, 84, 84, 84, 158, 
	500, 501, 84, 500, 501, 84, 84, 84, 
	158, 502, 84, 502, 84, 84, 84, 158, 
	503, 84, 503, 84, 84, 84, 158, 504, 
	84, 504, 84, 84, 84, 158, 505, 84, 
	505, 84, 84, 84, 158, 506, 84, 506, 
	84, 84, 84, 158, 507, 84, 507, 84, 
	84, 84, 158, 508, 509, 84, 508, 509, 
	84, 84, 84, 158, 510, 84, 510, 84, 
	84, 84, 158, 511, 84, 511, 84, 84, 
	84, 158, 34, 34, 35, 35, 35, 512, 
	35, 35, 35, 35, 513, 152, 153, 154, 
	155, 156, 157, 84, 153, 154, 155, 156, 
	157, 36, 36, 37, 514, 515, 516, 517, 
	518, 108, 514, 515, 516, 517, 518, 84, 
	84, 84, 108, 108, 108, 151, 84, 36, 
	36, 37, 108, 84, 84, 84, 108, 108, 
	108, 0, 159, 160, 84, 159, 160, 36, 
	36, 37, 519, 520, 108, 519, 520, 84, 
	84, 84, 108, 108, 108, 158, 162, 84, 
	36, 36, 37, 108, 84, 84, 84, 108, 
	108, 108, 161, 163, 84, 163, 36, 36, 
	37, 521, 108, 521, 84, 84, 84, 108, 
	108, 108, 158, 164, 84, 164, 36, 36, 
	37, 522, 108, 522, 84, 84, 84, 108, 
	108, 108, 158, 165, 84, 165, 36, 36, 
	37, 523, 108, 523, 84, 84, 84, 108, 
	108, 108, 158, 166, 84, 166, 36, 36, 
	37, 524, 108, 524, 84, 84, 84, 108, 
	108, 108, 158, 167, 84, 167, 36, 36, 
	37, 525, 108, 525, 84, 84, 84, 108, 
	108, 108, 158, 168, 84, 168, 36, 36, 
	37, 526, 108, 526, 84, 84, 84, 108, 
	108, 108, 158, 170, 171, 172, 173, 84, 
	171, 172, 173, 36, 36, 37, 527, 528, 
	529, 108, 527, 528, 529, 84, 84, 84, 
	108, 108, 108, 169, 175, 84, 36, 36, 
	37, 108, 84, 84, 84, 108, 108, 108, 
	174, 176, 177, 84, 176, 177, 36, 36, 
	37, 530, 531, 108, 530, 531, 84, 84, 
	84, 108, 108, 108, 158, 178, 84, 178, 
	36, 36, 37, 532, 108, 532, 84, 84, 
	84, 108, 108, 108, 158, 179, 84, 179, 
	36, 36, 37, 533, 108, 533, 84, 84, 
	84, 108, 108, 108, 158, 180, 84, 180, 
	36, 36, 37, 534, 108, 534, 84, 84, 
	84, 108, 108, 108, 158, 181, 84, 181, 
	36, 36, 37, 535, 108, 535, 84, 84, 
	84, 108, 108, 108, 158, 182, 84, 182, 
	36, 36, 37, 536, 108, 536, 84, 84, 
	84, 108, 108, 108, 158, 184, 185, 186, 
	187, 84, 185, 186, 187, 36, 36, 37, 
	537, 538, 539, 108, 537, 538, 539, 84, 
	84, 84, 108, 108, 108, 183, 188, 84, 
	188, 36, 36, 37, 540, 108, 540, 84, 
	84, 84, 108, 108, 108, 158, 189, 84, 
	189, 36, 36, 37, 541, 108, 541, 84, 
	84, 84, 108, 108, 108, 158, 191, 36, 
	36, 37, 542, 84, 84, 84, 108, 108, 
	108, 190, 192, 193, 84, 192, 193, 36, 
	36, 37, 543, 544, 108, 543, 544, 84, 
	84, 84, 108, 108, 108, 158, 194, 84, 
	194, 36, 36, 37, 545, 108, 545, 84, 
	84, 84, 108, 108, 108, 158, 195, 84, 
	195, 36, 36, 37, 546, 108, 546, 84, 
	84, 84, 108, 108, 108, 158, 196, 84, 
	196, 36, 36, 37, 547, 108, 547, 84, 
	84, 84, 108, 108, 108, 158, 197, 84, 
	197, 36, 36, 37, 548, 108, 548, 84, 
	84, 84, 108, 108, 108, 158, 199, 200, 
	201, 84, 199, 200, 201, 36, 36, 37, 
	549, 550, 551, 108, 549, 550, 551, 84, 
	84, 84, 108, 108, 108, 198, 203, 84, 
	203, 36, 36, 37, 552, 108, 552, 84, 
	84, 84, 108, 108, 108, 202, 205, 84, 
	205, 36, 36, 37, 553, 108, 553, 84, 
	84, 84, 108, 108, 108, 204, 207, 208, 
	209, 210, 211, 212, 84, 208, 209, 210, 
	211, 212, 36, 36, 37, 554, 555, 556, 
	557, 558, 108, 554, 555, 556, 557, 558, 
	84, 84, 84, 108, 108, 108, 206, 213, 
	84, 213, 36, 36, 37, 559, 108, 559, 
	84, 84, 84, 108, 108, 108, 158, 215, 
	216, 217, 84, 216, 217, 36, 36, 37, 
	560, 561, 108, 560, 561, 84, 84, 84, 
	108, 108, 108, 214, 218, 219, 220, 221, 
	222, 223, 224, 225, 226, 84, 218, 219, 
	220, 221, 222, 223, 224, 225, 226, 36, 
	36, 37, 562, 563, 564, 565, 566, 567, 
	568, 569, 570, 108, 562, 563, 564, 565, 
	566, 567, 568, 569, 570, 84, 84, 84, 
	108, 108, 108, 158, 227, 84, 227, 36, 
	36, 37, 571, 108, 571, 84, 84, 84, 
	108, 108, 108, 158, 228, 84, 228, 36, 
	36, 37, 572, 108, 572, 84, 84, 84, 
	108, 108, 108, 158, 229, 84, 229, 36, 
	36, 37, 573, 108, 573, 84, 84, 84, 
	108, 108, 108, 158, 230, 84, 230, 36, 
	36, 37, 574, 108, 574, 84, 84, 84, 
	108, 108, 108, 158, 231, 84, 231, 36, 
	36, 37, 575, 108, 575, 84, 84, 84, 
	108, 108, 108, 158, 232, 84, 232, 36, 
	36, 37, 576, 108, 576, 84, 84, 84, 
	108, 108, 108, 158, 233, 84, 233, 36, 
	36, 37, 577, 108, 577, 84, 84, 84, 
	108, 108, 108, 158, 234, 84, 234, 36, 
	36, 37, 578, 108, 578, 84, 84, 84, 
	108, 108, 108, 158, 235, 84, 235, 36, 
	36, 37, 579, 108, 579, 84, 84, 84, 
	108, 108, 108, 158, 236, 84, 236, 36, 
	36, 37, 580, 108, 580, 84, 84, 84, 
	108, 108, 108, 158, 237, 84, 237, 36, 
	36, 37, 581, 108, 581, 84, 84, 84, 
	108, 108, 108, 158, 238, 84, 36, 36, 
	37, 108, 84, 84, 84, 108, 108, 108, 
	158, 240, 241, 242, 243, 244, 84, 241, 
	242, 243, 244, 36, 36, 37, 582, 583, 
	584, 585, 108, 582, 583, 584, 585, 84, 
	84, 84, 108, 108, 108, 239, 246, 84, 
	246, 36, 36, 37, 586, 108, 586, 84, 
	84, 84, 108, 108, 108, 245, 247, 84, 
	247, 36, 36, 37, 587, 108, 587, 84, 
	84, 84, 108, 108, 108, 158, 248, 84, 
	248, 36, 36, 37, 588, 108, 588, 84, 
	84, 84, 108, 108, 108, 158, 249, 84, 
	249, 36, 36, 37, 589, 108, 589, 84, 
	84, 84, 108, 108, 108, 158, 250, 84, 
	250, 36, 36, 37, 590, 108, 590, 84, 
	84, 84, 108, 108, 108, 158, 251, 84, 
	251, 36, 36, 37, 591, 108, 591, 84, 
	84, 84, 108, 108, 108, 158, 253, 254, 
	84, 253, 254, 36, 36, 37, 592, 593, 
	108, 592, 593, 84, 84, 84, 108, 108, 
	108, 252, 255, 84, 255, 36, 36, 37, 
	594, 108, 594, 84, 84, 84, 108, 108, 
	108, 158, 256, 84, 256, 36, 36, 37, 
	595, 108, 595, 84, 84, 84, 108, 108, 
	108, 158, 257, 84, 257, 36, 36, 37, 
	596, 108, 596, 84, 84, 84, 108, 108, 
	108, 158, 259, 260, 84, 260, 36, 36, 
	37, 597, 108, 597, 84, 84, 84, 108, 
	108, 108, 258, 261, 84, 261, 36, 36, 
	37, 598, 108, 598, 84, 84, 84, 108, 
	108, 108, 158, 262, 84, 262, 36, 36, 
	37, 599, 108, 599, 84, 84, 84, 108, 
	108, 108, 158, 263, 84, 263, 36, 36, 
	37, 600, 108, 600, 84, 84, 84, 108, 
	108, 108, 158, 264, 84, 264, 36, 36, 
	37, 601, 108, 601, 84, 84, 84, 108, 
	108, 108, 158, 265, 84, 265, 36, 36, 
	37, 602, 108, 602, 84, 84, 84, 108, 
	108, 108, 158, 266, 84, 266, 36, 36, 
	37, 603, 108, 603, 84, 84, 84, 108, 
	108, 108, 158, 268, 269, 270, 84, 269, 
	270, 36, 36, 37, 604, 605, 108, 604, 
	605, 84, 84, 84, 108, 108, 108, 267, 
	271, 84, 271, 36, 36, 37, 606, 108, 
	606, 84, 84, 84, 108, 108, 108, 158, 
	272, 84, 272, 36, 36, 37, 607, 108, 
	607, 84, 84, 84, 108, 108, 108, 158, 
	274, 84, 36, 36, 37, 108, 84, 84, 
	84, 108, 108, 108, 273, 276, 277, 278, 
	279, 280, 281, 282, 283, 284, 84, 276, 
	277, 278, 279, 280, 281, 282, 283, 284, 
	36, 36, 37, 608, 609, 610, 611, 612, 
	613, 614, 615, 616, 108, 608, 609, 610, 
	611, 612, 613, 614, 615, 616, 84, 84, 
	84, 108, 108, 108, 275, 285, 84, 285, 
	36, 36, 37, 617, 108, 617, 84, 84, 
	84, 108, 108, 108, 158, 286, 84, 286, 
	36, 36, 37, 618, 108, 618, 84, 84, 
	84, 108, 108, 108, 158, 288, 289, 84, 
	288, 289, 36, 36, 37, 619, 620, 108, 
	619, 620, 84, 84, 84, 108, 108, 108, 
	287, 290, 84, 290, 36, 36, 37, 621, 
	108, 621, 84, 84, 84, 108, 108, 108, 
	158, 291, 84, 291, 36, 36, 37, 622, 
	108, 622, 84, 84, 84, 108, 108, 108, 
	158, 292, 84, 292, 36, 36, 37, 623, 
	108, 623, 84, 84, 84, 108, 108, 108, 
	158, 293, 84, 293, 36, 36, 37, 624, 
	108, 624, 84, 84, 84, 108, 108, 108, 
	158, 294, 84, 294, 36, 36, 37, 625, 
	108, 625, 84, 84, 84, 108, 108, 108, 
	158, 295, 84, 295, 36, 36, 37, 626, 
	108, 626, 84, 84, 84, 108, 108, 108, 
	158, 297, 298, 299, 300, 301, 84, 298, 
	299, 300, 301, 36, 36, 627, 37, 628, 
	629, 630, 631, 108, 628, 629, 630, 631, 
	84, 84, 84, 108, 108, 108, 296, 303, 
	84, 303, 36, 36, 37, 632, 108, 632, 
	84, 84, 84, 108, 108, 108, 302, 304, 
	84, 304, 36, 36, 37, 633, 108, 633, 
	84, 84, 84, 108, 108, 108, 158, 305, 
	84, 305, 36, 36, 37, 634, 108, 634, 
	84, 84, 84, 108, 108, 108, 158, 306, 
	84, 306, 36, 36, 37, 635, 108, 635, 
	84, 84, 84, 108, 108, 108, 158, 308, 
	84, 308, 36, 36, 37, 636, 108, 636, 
	84, 84, 84, 108, 108, 108, 307, 310, 
	84, 310, 36, 36, 37, 637, 108, 637, 
	84, 84, 84, 108, 108, 108, 309, 311, 
	84, 311, 36, 36, 37, 638, 108, 638, 
	84, 84, 84, 108, 108, 108, 158, 312, 
	84, 312, 36, 36, 37, 639, 108, 639, 
	84, 84, 84, 108, 108, 108, 158, 313, 
	84, 313, 36, 36, 37, 640, 108, 640, 
	84, 84, 84, 108, 108, 108, 158, 314, 
	315, 84, 314, 315, 36, 36, 37, 641, 
	642, 108, 641, 642, 84, 84, 84, 108, 
	108, 108, 158, 317, 318, 84, 317, 318, 
	36, 36, 37, 643, 644, 108, 643, 644, 
	84, 84, 84, 108, 108, 108, 316, 319, 
	84, 319, 36, 36, 37, 645, 108, 645, 
	84, 84, 84, 108, 108, 108, 158, 320, 
	84, 320, 36, 36, 37, 646, 108, 646, 
	84, 84, 84, 108, 108, 108, 158, 321, 
	84, 321, 36, 36, 37, 647, 108, 647, 
	84, 84, 84, 108, 108, 108, 158, 322, 
	84, 322, 36, 36, 37, 648, 108, 648, 
	84, 84, 84, 108, 108, 108, 158, 324, 
	325, 84, 324, 325, 36, 36, 37, 649, 
	650, 108, 649, 650, 84, 84, 84, 108, 
	108, 108, 323, 327, 328, 84, 327, 328, 
	36, 36, 37, 651, 652, 108, 651, 652, 
	84, 84, 84, 108, 108, 108, 326, 329, 
	330, 84, 329, 330, 36, 36, 37, 653, 
	654, 108, 653, 654, 84, 84, 84, 108, 
	108, 108, 158, 332, 333, 334, 335, 336, 
	337, 84, 333, 334, 335, 336, 337, 36, 
	36, 37, 655, 656, 657, 658, 659, 108, 
	655, 656, 657, 658, 659, 84, 84, 84, 
	108, 108, 108, 331, 339, 340, 341, 84, 
	339, 340, 341, 36, 36, 37, 660, 661, 
	662, 108, 660, 661, 662, 84, 84, 84, 
	108, 108, 108, 338, 343, 344, 345, 84, 
	343, 344, 345, 36, 36, 37, 663, 664, 
	665, 108, 663, 664, 665, 84, 84, 84, 
	108, 108, 108, 342, 347, 84, 347, 36, 
	36, 37, 666, 108, 666, 84, 84, 84, 
	108, 108, 108, 346, 348, 84, 348, 36, 
	36, 37, 667, 108, 667, 84, 84, 84, 
	108, 108, 108, 158, 350, 351, 352, 84, 
	350, 351, 352, 36, 36, 37, 668, 669, 
	670, 108, 668, 669, 670, 84, 84, 84, 
	108, 108, 108, 349, 354, 84, 354, 36, 
	36, 37, 671, 108, 671, 84, 84, 84, 
	108, 108, 108, 353, 355, 84, 355, 36, 
	36, 37, 672, 108, 672, 84, 84, 84, 
	108, 108, 108, 158, 356, 84, 356, 36, 
	36, 37, 673, 108, 673, 84, 84, 84, 
	108, 108, 108, 158, 357, 84, 357, 36, 
	36, 37, 674, 108, 674, 84, 84, 84, 
	108, 108, 108, 158, 358, 359, 360, 84, 
	358, 359, 360, 36, 36, 37, 675, 676, 
	677, 108, 675, 676, 677, 84, 84, 84, 
	108, 108, 108, 158, 361, 362, 84, 361, 
	362, 36, 36, 37, 678, 679, 108, 678, 
	679, 84, 84, 84, 108, 108, 108, 158, 
	363, 84, 363, 36, 36, 37, 680, 108, 
	680, 84, 84, 84, 108, 108, 108, 158, 
	364, 365, 84, 364, 365, 36, 36, 37, 
	681, 682, 108, 681, 682, 84, 84, 84, 
	108, 108, 108, 158, 366, 84, 366, 36, 
	36, 37, 683, 108, 683, 84, 84, 84, 
	108, 108, 108, 158, 367, 84, 367, 36, 
	36, 37, 684, 108, 684, 84, 84, 84, 
	108, 108, 108, 158, 368, 369, 84, 368, 
	369, 36, 36, 37, 685, 686, 108, 685, 
	686, 84, 84, 84, 108, 108, 108, 158, 
	370, 84, 370, 36, 36, 37, 687, 108, 
	687, 84, 84, 84, 108, 108, 108, 158, 
	372, 373, 374, 84, 372, 373, 374, 36, 
	36, 37, 688, 689, 690, 108, 688, 689, 
	690, 84, 84, 84, 108, 108, 108, 371, 
	375, 84, 375, 36, 36, 37, 691, 108, 
	691, 84, 84, 84, 108, 108, 108, 158, 
	376, 84, 376, 36, 36, 37, 692, 108, 
	692, 84, 84, 84, 108, 108, 108, 158, 
	377, 84, 377, 36, 36, 37, 693, 108, 
	693, 84, 84, 84, 108, 108, 108, 158, 
	378, 84, 378, 36, 36, 37, 694, 108, 
	694, 84, 84, 84, 108, 108, 108, 158, 
	379, 84, 379, 36, 36, 37, 695, 108, 
	695, 84, 84, 84, 108, 108, 108, 158, 
	380, 84, 380, 36, 36, 37, 696, 108, 
	696, 84, 84, 84, 108, 108, 108, 158, 
	381, 382, 383, 384, 385, 84, 381, 382, 
	383, 384, 385, 36, 36, 37, 697, 698, 
	699, 700, 701, 108, 697, 698, 699, 700, 
	701, 84, 84, 84, 108, 108, 108, 158, 
	386, 84, 386, 36, 36, 37, 702, 108, 
	702, 84, 84, 84, 108, 108, 108, 158, 
	387, 84, 387, 36, 36, 37, 703, 108, 
	703, 84, 84, 84, 108, 108, 108, 158, 
	388, 389, 390, 84, 388, 389, 390, 36, 
	36, 37, 704, 705, 706, 108, 704, 705, 
	706, 84, 84, 84, 108, 108, 108, 158, 
	392, 84, 392, 36, 36, 37, 707, 108, 
	707, 84, 84, 84, 108, 108, 108, 391, 
	393, 394, 84, 393, 394, 36, 36, 37, 
	708, 709, 108, 708, 709, 84, 84, 84, 
	108, 108, 108, 158, 395, 396, 84, 395, 
	396, 36, 36, 37, 710, 711, 108, 710, 
	711, 84, 84, 84, 108, 108, 108, 158, 
	398, 84, 398, 36, 36, 37, 712, 108, 
	712, 84, 84, 84, 108, 108, 108, 397, 
	399, 400, 84, 399, 400, 36, 36, 37, 
	713, 714, 108, 713, 714, 84, 84, 84, 
	108, 108, 108, 158, 402, 84, 402, 36, 
	36, 37, 715, 108, 715, 84, 84, 84, 
	108, 108, 108, 401, 403, 84, 403, 36, 
	36, 37, 716, 108, 716, 84, 84, 84, 
	108, 108, 108, 158, 405, 406, 407, 84, 
	406, 407, 36, 36, 717, 37, 718, 719, 
	108, 718, 719, 84, 84, 84, 108, 108, 
	108, 404, 409, 84, 409, 36, 36, 37, 
	720, 108, 720, 84, 84, 84, 108, 108, 
	108, 408, 410, 84, 410, 36, 36, 37, 
	721, 108, 721, 84, 84, 84, 108, 108, 
	108, 158, 412, 413, 414, 84, 412, 413, 
	414, 36, 36, 37, 722, 723, 724, 108, 
	722, 723, 724, 84, 84, 84, 108, 108, 
	108, 411, 416, 84, 416, 36, 36, 37, 
	725, 108, 725, 84, 84, 84, 108, 108, 
	108, 415, 417, 418, 84, 417, 418, 36, 
	36, 37, 726, 727, 108, 726, 727, 84, 
	84, 84, 108, 108, 108, 158, 419, 84, 
	419, 36, 36, 37, 728, 108, 728, 84, 
	84, 84, 108, 108, 108, 158, 420, 84, 
	420, 36, 36, 37, 729, 108, 729, 84, 
	84, 84, 108, 108, 108, 158, 421, 84, 
	421, 36, 36, 37, 730, 108, 730, 84, 
	84, 84, 108, 108, 108, 158, 422, 84, 
	422, 36, 36, 37, 731, 108, 731, 84, 
	84, 84, 108, 108, 108, 158, 424, 425, 
	426, 427, 428, 84, 424, 425, 426, 427, 
	428, 36, 36, 37, 732, 733, 734, 735, 
	736, 108, 732, 733, 734, 735, 736, 84, 
	84, 84, 108, 108, 108, 423, 429, 84, 
	429, 36, 36, 37, 737, 108, 737, 84, 
	84, 84, 108, 108, 108, 158, 430, 84, 
	430, 36, 36, 37, 738, 108, 738, 84, 
	84, 84, 108, 108, 108, 158, 431, 84, 
	431, 36, 36, 37, 739, 108, 739, 84, 
	84, 84, 108, 108, 108, 158, 432, 84, 
	432, 36, 36, 37, 740, 108, 740, 84, 
	84, 84, 108, 108, 108, 158, 433, 434, 
	84, 433, 434, 36, 36, 37, 741, 742, 
	108, 741, 742, 84, 84, 84, 108, 108, 
	108, 158, 436, 437, 84, 436, 437, 36, 
	36, 37, 743, 744, 108, 743, 744, 84, 
	84, 84, 108, 108, 108, 435, 439, 440, 
	441, 84, 439, 440, 441, 36, 36, 37, 
	745, 746, 747, 108, 745, 746, 747, 84, 
	84, 84, 108, 108, 108, 438, 443, 84, 
	443, 36, 36, 37, 748, 108, 748, 84, 
	84, 84, 108, 108, 108, 442, 445, 446, 
	447, 84, 445, 446, 447, 36, 36, 37, 
	749, 750, 751, 108, 749, 750, 751, 84, 
	84, 84, 108, 108, 108, 444, 449, 84, 
	449, 36, 36, 37, 752, 108, 752, 84, 
	84, 84, 108, 108, 108, 448, 450, 84, 
	450, 36, 36, 37, 753, 108, 753, 84, 
	84, 84, 108, 108, 108, 158, 451, 452, 
	453, 454, 455, 456, 457, 458, 459, 84, 
	451, 452, 453, 454, 455, 456, 457, 458, 
	459, 36, 36, 37, 754, 755, 756, 757, 
	758, 759, 760, 761, 762, 108, 754, 755, 
	756, 757, 758, 759, 760, 761, 762, 84, 
	84, 84, 108, 108, 108, 158, 460, 84, 
	460, 36, 36, 37, 763, 108, 763, 84, 
	84, 84, 108, 108, 108, 158, 461, 84, 
	461, 36, 36, 37, 764, 108, 764, 84, 
	84, 84, 108, 108, 108, 158, 462, 463, 
	84, 462, 463, 36, 36, 37, 765, 766, 
	108, 765, 766, 84, 84, 84, 108, 108, 
	108, 158, 464, 84, 464, 36, 36, 37, 
	767, 108, 767, 84, 84, 84, 108, 108, 
	108, 158, 465, 84, 465, 36, 36, 37, 
	768, 108, 768, 84, 84, 84, 108, 108, 
	108, 158, 466, 84, 466, 36, 36, 37, 
	769, 108, 769, 84, 84, 84, 108, 108, 
	108, 158, 467, 84, 467, 36, 36, 37, 
	770, 108, 770, 84, 84, 84, 108, 108, 
	108, 158, 469, 84, 469, 36, 36, 37, 
	771, 108, 771, 84, 84, 84, 108, 108, 
	108, 468, 470, 84, 470, 36, 36, 37, 
	772, 108, 772, 84, 84, 84, 108, 108, 
	108, 158, 471, 84, 471, 36, 36, 37, 
	773, 108, 773, 84, 84, 84, 108, 108, 
	108, 158, 472, 473, 474, 475, 84, 472, 
	473, 474, 475, 36, 36, 37, 774, 775, 
	776, 777, 108, 774, 775, 776, 777, 84, 
	84, 84, 108, 108, 108, 158, 476, 477, 
	84, 476, 477, 36, 36, 37, 778, 779, 
	108, 778, 779, 84, 84, 84, 108, 108, 
	108, 158, 479, 480, 84, 479, 480, 36, 
	36, 37, 780, 781, 108, 780, 781, 84, 
	84, 84, 108, 108, 108, 478, 481, 84, 
	481, 36, 36, 37, 782, 108, 782, 84, 
	84, 84, 108, 108, 108, 158, 482, 84, 
	482, 36, 36, 37, 783, 108, 783, 84, 
	84, 84, 108, 108, 108, 158, 483, 84, 
	483, 36, 36, 37, 784, 108, 784, 84, 
	84, 84, 108, 108, 108, 158, 484, 84, 
	484, 36, 36, 37, 785, 108, 785, 84, 
	84, 84, 108, 108, 108, 158, 485, 84, 
	485, 36, 36, 37, 786, 108, 786, 84, 
	84, 84, 108, 108, 108, 158, 486, 84, 
	486, 36, 36, 37, 787, 108, 787, 84, 
	84, 84, 108, 108, 108, 158, 487, 84, 
	487, 36, 36, 37, 788, 108, 788, 84, 
	84, 84, 108, 108, 108, 158, 488, 84, 
	488, 36, 36, 37, 789, 108, 789, 84, 
	84, 84, 108, 108, 108, 158, 489, 84, 
	489, 36, 36, 37, 790, 108, 790, 84, 
	84, 84, 108, 108, 108, 158, 490, 84, 
	490, 36, 36, 37, 791, 108, 791, 84, 
	84, 84, 108, 108, 108, 158, 491, 84, 
	491, 36, 36, 37, 792, 108, 792, 84, 
	84, 84, 108, 108, 108, 158, 492, 84, 
	492, 36, 36, 37, 793, 108, 793, 84, 
	84, 84, 108, 108, 108, 158, 493, 84, 
	493, 36, 36, 37, 794, 108, 794, 84, 
	84, 84, 108, 108, 108, 158, 494, 84, 
	494, 36, 36, 37, 795, 108, 795, 84, 
	84, 84, 108, 108, 108, 158, 496, 84, 
	496, 36, 36, 37, 796, 108, 796, 84, 
	84, 84, 108, 108, 108, 495, 497, 84, 
	497, 36, 36, 37, 797, 108, 797, 84, 
	84, 84, 108, 108, 108, 158, 498, 499, 
	84, 498, 499, 36, 36, 37, 798, 799, 
	108, 798, 799, 84, 84, 84, 108, 108, 
	108, 158, 500, 501, 84, 500, 501, 36, 
	36, 37, 800, 801, 108, 800, 801, 84, 
	84, 84, 108, 108, 108, 158, 502, 84, 
	502, 36, 36, 37, 802, 108, 802, 84, 
	84, 84, 108, 108, 108, 158, 503, 84, 
	503, 36, 36, 37, 803, 108, 803, 84, 
	84, 84, 108, 108, 108, 158, 504, 84, 
	504, 36, 36, 37, 804, 108, 804, 84, 
	84, 84, 108, 108, 108, 158, 505, 84, 
	505, 36, 36, 37, 805, 108, 805, 84, 
	84, 84, 108, 108, 108, 158, 506, 84, 
	506, 36, 36, 37, 806, 108, 806, 84, 
	84, 84, 108, 108, 108, 158, 507, 84, 
	507, 36, 36, 37, 807, 108, 807, 84, 
	84, 84, 108, 108, 108, 158, 508, 509, 
	84, 508, 509, 36, 36, 37, 808, 809, 
	108, 808, 809, 84, 84, 84, 108, 108, 
	108, 158, 510, 84, 510, 36, 36, 37, 
	810, 108, 810, 84, 84, 84, 108, 108, 
	108, 158, 511, 84, 511, 36, 36, 37, 
	811, 108, 811, 84, 84, 84, 108, 108, 
	108, 158, 0
};
static const short _lexer_trans_targs[] = {
	21, 2, 21, 21, 3, 4, 6, 7, 
	9, 11, 14, 5, 21, 21, 8, 21, 
	10, 21, 12, 13, 21, 21, 15, 21, 
	16, 21, 21, 34, 21, 21, 21, 21, 
	21, 21, 19, 237, 20, 21, 21, 21, 
	22, 21, 21, 23, 24, 26, 21, 27, 
	21, 28, 21, 21, 21, 21, 0, 29, 
	30, 31, 21, 35, 36, 37, 38, 21, 
	24, 21, 21, 21, 21, 21, 39, 21, 
	21, 21, 40, 50, 58, 70, 86, 97, 
	99, 104, 108, 136, 41, 137, 155, 162, 
	165, 176, 183, 195, 221, 225, 41, 233, 
	41, 236, 238, 248, 256, 268, 284, 295, 
	297, 302, 306, 334, 239, 335, 353, 360, 
	363, 374, 381, 393, 419, 423, 239, 431, 
	239, 21, 21, 23, 1, 25, 21, 21, 
	21, 21, 21, 21, 21, 33, 17, 32, 
	21, 33, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 42, 43, 44, 46, 47, 21, 41, 
	41, 21, 21, 45, 41, 41, 48, 49, 
	41, 21, 21, 51, 52, 56, 21, 21, 
	53, 41, 54, 55, 41, 57, 41, 21, 
	21, 59, 66, 67, 60, 61, 21, 62, 
	63, 64, 41, 65, 41, 41, 21, 68, 
	69, 41, 21, 41, 21, 41, 21, 21, 
	71, 72, 41, 83, 85, 41, 21, 21, 
	41, 73, 41, 41, 74, 78, 41, 41, 
	41, 80, 41, 75, 76, 77, 41, 79, 
	41, 81, 82, 41, 84, 41, 18, 21, 
	21, 87, 88, 90, 93, 21, 41, 89, 
	41, 91, 92, 41, 21, 94, 41, 95, 
	96, 41, 21, 21, 98, 41, 100, 101, 
	102, 103, 41, 21, 21, 105, 107, 106, 
	41, 21, 21, 21, 109, 111, 117, 41, 
	118, 128, 129, 134, 135, 110, 41, 21, 
	112, 114, 113, 41, 115, 116, 41, 41, 
	21, 41, 119, 123, 124, 125, 21, 120, 
	121, 122, 41, 21, 41, 21, 41, 126, 
	127, 41, 41, 41, 21, 130, 132, 131, 
	41, 133, 41, 21, 41, 41, 21, 41, 
	41, 41, 41, 21, 21, 138, 145, 41, 
	147, 41, 21, 139, 142, 41, 21, 140, 
	141, 41, 21, 41, 41, 21, 143, 144, 
	41, 21, 41, 41, 146, 41, 148, 150, 
	152, 149, 41, 41, 151, 41, 41, 153, 
	154, 41, 41, 21, 156, 157, 161, 41, 
	158, 159, 160, 41, 41, 41, 163, 164, 
	41, 41, 41, 41, 166, 167, 172, 21, 
	41, 168, 170, 169, 41, 21, 41, 171, 
	41, 21, 41, 173, 21, 41, 41, 174, 
	21, 175, 41, 21, 41, 177, 178, 21, 
	41, 179, 182, 180, 181, 41, 41, 21, 
	184, 188, 190, 192, 194, 185, 186, 187, 
	41, 41, 189, 21, 41, 41, 21, 41, 
	191, 41, 21, 41, 21, 41, 193, 41, 
	21, 41, 41, 196, 197, 198, 206, 41, 
	207, 208, 211, 216, 41, 41, 199, 203, 
	200, 201, 202, 41, 21, 204, 205, 41, 
	41, 41, 41, 41, 41, 41, 21, 41, 
	209, 210, 41, 212, 213, 214, 215, 41, 
	217, 218, 219, 220, 41, 222, 223, 21, 
	224, 41, 226, 227, 41, 41, 228, 229, 
	230, 231, 232, 41, 234, 235, 41, 41, 
	21, 21, 240, 241, 242, 244, 245, 239, 
	239, 243, 239, 239, 246, 247, 239, 249, 
	250, 254, 251, 239, 252, 253, 239, 255, 
	239, 257, 264, 265, 258, 259, 260, 261, 
	262, 239, 263, 239, 239, 266, 267, 239, 
	239, 239, 269, 270, 239, 281, 283, 239, 
	239, 271, 239, 239, 272, 276, 239, 239, 
	239, 278, 239, 273, 274, 275, 239, 277, 
	239, 279, 280, 239, 282, 239, 285, 286, 
	288, 291, 239, 287, 239, 289, 290, 239, 
	292, 239, 293, 294, 239, 296, 239, 298, 
	299, 300, 301, 239, 303, 305, 304, 239, 
	307, 309, 315, 239, 316, 326, 327, 332, 
	333, 308, 239, 310, 312, 311, 239, 313, 
	314, 239, 239, 239, 317, 321, 322, 323, 
	318, 319, 320, 239, 239, 239, 324, 325, 
	239, 239, 239, 328, 330, 329, 239, 331, 
	239, 239, 239, 239, 239, 239, 239, 336, 
	343, 239, 345, 239, 337, 340, 239, 338, 
	339, 239, 239, 239, 341, 342, 239, 239, 
	239, 344, 239, 346, 348, 350, 347, 239, 
	239, 349, 239, 239, 351, 352, 239, 239, 
	354, 355, 359, 239, 356, 357, 358, 239, 
	239, 239, 361, 362, 239, 239, 239, 239, 
	364, 365, 370, 239, 366, 368, 367, 239, 
	239, 369, 239, 239, 371, 239, 239, 372, 
	373, 239, 239, 375, 376, 239, 377, 380, 
	378, 379, 239, 239, 382, 386, 388, 390, 
	392, 383, 384, 385, 239, 239, 387, 239, 
	239, 239, 389, 239, 239, 239, 391, 239, 
	239, 239, 394, 395, 396, 404, 239, 405, 
	406, 409, 414, 239, 239, 397, 401, 398, 
	399, 400, 239, 402, 403, 239, 239, 239, 
	239, 239, 239, 239, 239, 407, 408, 239, 
	410, 411, 412, 413, 239, 415, 416, 417, 
	418, 239, 420, 421, 422, 239, 424, 425, 
	239, 239, 426, 427, 428, 429, 430, 239, 
	432, 433, 239, 239
};
static const short _lexer_trans_actions[] = {
	257, 0, 111, 249, 0, 0, 0, 0, 
	0, 0, 0, 0, 83, 95, 0, 85, 
	0, 91, 0, 0, 87, 89, 0, 93, 
	0, 109, 255, 0, 253, 97, 101, 103, 
	99, 251, 0, 0, 0, 107, 105, 7, 
	0, 115, 9, 799, 262, 0, 113, 5, 
	13, 0, 15, 17, 19, 23, 0, 787, 
	787, 787, 25, 0, 0, 0, 0, 41, 
	799, 43, 117, 45, 47, 51, 0, 55, 
	57, 21, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 784, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 298, 0, 
	268, 5, 328, 301, 274, 304, 307, 331, 
	784, 310, 334, 784, 784, 319, 286, 784, 
	784, 283, 340, 784, 784, 784, 298, 784, 
	268, 119, 33, 790, 0, 0, 247, 121, 
	11, 123, 125, 49, 241, 793, 0, 793, 
	245, 796, 243, 235, 129, 27, 29, 31, 
	131, 35, 133, 39, 37, 135, 53, 155, 
	71, 0, 0, 0, 0, 0, 237, 454, 
	457, 173, 81, 0, 709, 460, 0, 0, 
	259, 145, 59, 0, 0, 0, 163, 75, 
	0, 463, 0, 0, 376, 0, 712, 137, 
	61, 0, 0, 0, 0, 0, 181, 0, 
	0, 0, 772, 0, 775, 469, 183, 0, 
	0, 487, 185, 478, 187, 484, 147, 63, 
	0, 0, 496, 0, 5, 490, 165, 77, 
	493, 0, 379, 382, 0, 0, 394, 391, 
	397, 0, 403, 0, 0, 0, 385, 0, 
	388, 0, 0, 400, 0, 499, 0, 149, 
	65, 0, 0, 0, 0, 189, 343, 0, 
	406, 0, 0, 409, 191, 0, 508, 0, 
	0, 412, 157, 73, 0, 778, 0, 0, 
	0, 0, 415, 151, 67, 0, 0, 0, 
	511, 167, 79, 159, 0, 0, 0, 514, 
	0, 0, 0, 0, 0, 0, 715, 179, 
	0, 0, 0, 421, 0, 0, 424, 337, 
	193, 679, 0, 0, 0, 0, 195, 0, 
	0, 0, 427, 197, 526, 199, 532, 0, 
	0, 781, 718, 721, 175, 0, 0, 0, 
	724, 0, 727, 169, 313, 322, 171, 316, 
	325, 535, 538, 153, 69, 0, 0, 292, 
	0, 289, 201, 0, 0, 736, 203, 0, 
	0, 673, 205, 676, 730, 207, 0, 0, 
	667, 209, 670, 733, 0, 430, 0, 0, 
	0, 0, 739, 745, 0, 742, 748, 0, 
	0, 436, 433, 143, 0, 0, 0, 682, 
	0, 0, 0, 439, 751, 271, 0, 0, 
	295, 265, 556, 559, 0, 0, 0, 211, 
	442, 0, 0, 0, 565, 229, 688, 0, 
	568, 231, 694, 0, 213, 697, 574, 0, 
	215, 0, 664, 141, 280, 0, 0, 139, 
	580, 0, 0, 0, 0, 445, 583, 161, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	754, 586, 0, 217, 592, 595, 219, 601, 
	0, 610, 221, 607, 223, 616, 0, 625, 
	225, 622, 628, 0, 0, 0, 0, 364, 
	0, 0, 0, 0, 631, 634, 0, 0, 
	0, 0, 0, 448, 227, 0, 0, 757, 
	640, 646, 643, 700, 649, 652, 177, 655, 
	0, 0, 760, 0, 0, 0, 0, 661, 
	0, 0, 0, 0, 763, 0, 0, 233, 
	0, 706, 0, 0, 766, 769, 0, 0, 
	0, 0, 0, 451, 0, 0, 658, 373, 
	127, 239, 784, 361, 784, 784, 784, 454, 
	457, 784, 709, 460, 784, 784, 259, 346, 
	784, 784, 784, 463, 784, 784, 376, 784, 
	712, 784, 784, 472, 784, 466, 784, 784, 
	784, 772, 784, 775, 469, 475, 481, 487, 
	478, 484, 784, 349, 496, 784, 784, 490, 
	493, 784, 379, 382, 784, 784, 394, 391, 
	397, 784, 403, 784, 784, 784, 385, 784, 
	388, 784, 784, 400, 784, 499, 502, 784, 
	784, 505, 343, 784, 406, 784, 784, 409, 
	784, 508, 784, 784, 412, 784, 778, 784, 
	784, 784, 784, 415, 784, 352, 784, 511, 
	784, 418, 784, 514, 517, 784, 367, 355, 
	358, 784, 715, 784, 784, 784, 421, 784, 
	784, 424, 337, 679, 520, 523, 529, 784, 
	784, 784, 784, 427, 526, 532, 784, 784, 
	781, 718, 721, 784, 784, 784, 724, 784, 
	727, 313, 322, 316, 325, 535, 538, 541, 
	784, 292, 784, 289, 544, 550, 736, 547, 
	784, 673, 676, 730, 553, 784, 667, 670, 
	733, 784, 430, 784, 784, 784, 784, 739, 
	745, 784, 742, 748, 784, 784, 436, 433, 
	784, 784, 784, 682, 784, 784, 784, 439, 
	751, 271, 784, 784, 295, 265, 556, 559, 
	562, 784, 784, 442, 784, 784, 685, 565, 
	688, 691, 568, 694, 571, 697, 574, 577, 
	784, 664, 280, 277, 784, 580, 784, 784, 
	784, 784, 445, 583, 784, 784, 598, 613, 
	784, 784, 784, 784, 754, 586, 589, 592, 
	595, 601, 604, 610, 607, 616, 619, 625, 
	622, 628, 784, 784, 784, 784, 364, 784, 
	370, 784, 784, 631, 634, 784, 637, 784, 
	784, 784, 448, 784, 784, 757, 640, 646, 
	643, 700, 649, 652, 655, 784, 784, 760, 
	784, 784, 784, 784, 661, 784, 784, 784, 
	784, 763, 784, 703, 784, 706, 784, 784, 
	766, 769, 784, 784, 784, 784, 784, 451, 
	784, 784, 658, 373
};
static const short _lexer_to_state_actions[] = {
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 1, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0
};
static const short _lexer_from_state_actions[] = {
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 3, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0
};
static const short _lexer_eof_trans[] = {
	0, 1, 1, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	1, 27, 29, 34, 1, 0, 122, 1, 
	1, 127, 128, 130, 131, 133, 133, 133, 
	137, 1, 139, 140, 141, 145, 147, 150, 
	152, 1, 159, 162, 159, 159, 159, 159, 
	159, 159, 170, 175, 159, 159, 159, 159, 
	159, 159, 184, 159, 159, 191, 159, 159, 
	159, 159, 159, 199, 203, 205, 207, 159, 
	215, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 240, 246, 
	159, 159, 159, 159, 159, 253, 159, 159, 
	159, 259, 159, 159, 159, 159, 159, 159, 
	268, 159, 159, 274, 276, 159, 159, 288, 
	159, 159, 159, 159, 159, 159, 297, 303, 
	159, 159, 159, 308, 310, 159, 159, 159, 
	159, 317, 159, 159, 159, 159, 324, 327, 
	159, 332, 339, 343, 347, 159, 350, 354, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 372, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 392, 159, 
	159, 398, 159, 402, 159, 405, 409, 159, 
	412, 416, 159, 159, 159, 159, 159, 424, 
	159, 159, 159, 159, 159, 436, 439, 443, 
	445, 449, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 469, 159, 159, 159, 159, 
	479, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 496, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 513, 514, 152, 1, 
	159, 162, 159, 159, 159, 159, 159, 159, 
	170, 175, 159, 159, 159, 159, 159, 159, 
	184, 159, 159, 191, 159, 159, 159, 159, 
	159, 199, 203, 205, 207, 159, 215, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 240, 246, 159, 159, 
	159, 159, 159, 253, 159, 159, 159, 259, 
	159, 159, 159, 159, 159, 159, 268, 159, 
	159, 274, 276, 159, 159, 288, 159, 159, 
	159, 159, 159, 159, 297, 303, 159, 159, 
	159, 308, 310, 159, 159, 159, 159, 317, 
	159, 159, 159, 159, 324, 327, 159, 332, 
	339, 343, 347, 159, 350, 354, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 372, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 392, 159, 159, 398, 
	159, 402, 159, 405, 409, 159, 412, 416, 
	159, 159, 159, 159, 159, 424, 159, 159, 
	159, 159, 159, 436, 439, 443, 445, 449, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 469, 159, 159, 159, 159, 479, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 496, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159
};
static const int lexer_start = 21;
static const int lexer_error = 0;
static const int lexer_en_main = 21;
static void set_scan_buf( char *text, Bool _at_bol )
{
 str_set( input_buf, text );
 p = str_data(input_buf);
 at_bol = _at_bol;
 pe = str_data(input_buf) + str_len(input_buf);
 eof = pe;
	{
	cs = lexer_start;
	ts = 0;
	te = 0;
	act = 0;
	}
}
static tokid_t _scan_get( void )
{
	{
	int _klen;
	unsigned int _trans;
	short _widec;
	const short *_acts;
	unsigned int _nacts;
	const short *_keys;
	if ( p == pe )
		goto _test_eof;
	if ( cs == 0 )
		goto _out;
_resume:
	_acts = _lexer_actions + _lexer_from_state_actions[cs];
	_nacts = (unsigned int) *_acts++;
	while ( _nacts-- > 0 ) {
		switch ( *_acts++ ) {
	case 1:
	{ts = p;}
	break;
		}
	}
	_widec = (*p);
	_klen = _lexer_cond_lengths[cs];
	_keys = _lexer_cond_keys + (_lexer_cond_offsets[cs]*2);
	if ( _klen > 0 ) {
		const short *_lower = _keys;
		const short *_mid;
		const short *_upper = _keys + (_klen<<1) - 2;
		while (1) {
			if ( _upper < _lower )
				break;
			_mid = _lower + (((_upper-_lower) >> 1) & ~1);
			if ( _widec < _mid[0] )
				_upper = _mid - 2;
			else if ( _widec > _mid[1] )
				_lower = _mid + 2;
			else {
				switch ( _lexer_cond_spaces[_lexer_cond_offsets[cs] + ((_mid - _keys)>>1)] ) {
	case 0: {
		_widec = (short)(128 + ((*p) - -128));
		if ( 
 at_bol  ) _widec += 256;
		break;
	}
				}
				break;
			}
		}
	}
	_keys = _lexer_trans_keys + _lexer_key_offsets[cs];
	_trans = _lexer_index_offsets[cs];
	_klen = _lexer_single_lengths[cs];
	if ( _klen > 0 ) {
		const short *_lower = _keys;
		const short *_mid;
		const short *_upper = _keys + _klen - 1;
		while (1) {
			if ( _upper < _lower )
				break;
			_mid = _lower + ((_upper-_lower) >> 1);
			if ( _widec < *_mid )
				_upper = _mid - 1;
			else if ( _widec > *_mid )
				_lower = _mid + 1;
			else {
				_trans += (unsigned int)(_mid - _keys);
				goto _match;
			}
		}
		_keys += _klen;
		_trans += _klen;
	}
	_klen = _lexer_range_lengths[cs];
	if ( _klen > 0 ) {
		const short *_lower = _keys;
		const short *_mid;
		const short *_upper = _keys + (_klen<<1) - 2;
		while (1) {
			if ( _upper < _lower )
				break;
			_mid = _lower + (((_upper-_lower) >> 1) & ~1);
			if ( _widec < _mid[0] )
				_upper = _mid - 2;
			else if ( _widec > _mid[1] )
				_lower = _mid + 2;
			else {
				_trans += (unsigned int)((_mid - _keys)>>1);
				goto _match;
			}
		}
		_trans += _klen;
	}
_match:
	_trans = _lexer_indicies[_trans];
_eof_trans:
	cs = _lexer_trans_targs[_trans];
	if ( _lexer_trans_actions[_trans] == 0 )
		goto _again;
	_acts = _lexer_actions + _lexer_trans_actions[_trans];
	_nacts = (unsigned int) *_acts++;
	while ( _nacts-- > 0 )
	{
		switch ( *_acts++ )
		{
	case 2:
	{te = p+1;}
	break;
	case 3:
	{act = 1;}
	break;
	case 4:
	{act = 5;}
	break;
	case 5:
	{act = 37;}
	break;
	case 6:
	{act = 38;}
	break;
	case 7:
	{act = 39;}
	break;
	case 8:
	{act = 40;}
	break;
	case 9:
	{act = 41;}
	break;
	case 10:
	{act = 42;}
	break;
	case 11:
	{act = 43;}
	break;
	case 12:
	{act = 44;}
	break;
	case 13:
	{act = 45;}
	break;
	case 14:
	{act = 46;}
	break;
	case 15:
	{act = 47;}
	break;
	case 16:
	{act = 48;}
	break;
	case 17:
	{act = 49;}
	break;
	case 18:
	{act = 50;}
	break;
	case 19:
	{act = 51;}
	break;
	case 20:
	{act = 52;}
	break;
	case 21:
	{act = 53;}
	break;
	case 22:
	{act = 54;}
	break;
	case 23:
	{act = 55;}
	break;
	case 24:
	{act = 56;}
	break;
	case 25:
	{act = 57;}
	break;
	case 26:
	{act = 58;}
	break;
	case 27:
	{act = 59;}
	break;
	case 28:
	{act = 60;}
	break;
	case 29:
	{act = 61;}
	break;
	case 30:
	{act = 62;}
	break;
	case 31:
	{act = 63;}
	break;
	case 32:
	{act = 64;}
	break;
	case 33:
	{act = 65;}
	break;
	case 34:
	{act = 66;}
	break;
	case 35:
	{act = 67;}
	break;
	case 36:
	{act = 68;}
	break;
	case 37:
	{act = 69;}
	break;
	case 38:
	{act = 70;}
	break;
	case 39:
	{act = 71;}
	break;
	case 40:
	{act = 72;}
	break;
	case 41:
	{act = 73;}
	break;
	case 42:
	{act = 93;}
	break;
	case 43:
	{act = 94;}
	break;
	case 44:
	{act = 95;}
	break;
	case 45:
	{act = 96;}
	break;
	case 46:
	{act = 97;}
	break;
	case 47:
	{act = 98;}
	break;
	case 48:
	{act = 99;}
	break;
	case 49:
	{act = 100;}
	break;
	case 50:
	{act = 101;}
	break;
	case 51:
	{act = 102;}
	break;
	case 52:
	{act = 103;}
	break;
	case 53:
	{act = 104;}
	break;
	case 54:
	{act = 105;}
	break;
	case 55:
	{act = 106;}
	break;
	case 56:
	{act = 107;}
	break;
	case 57:
	{act = 108;}
	break;
	case 58:
	{act = 109;}
	break;
	case 59:
	{act = 110;}
	break;
	case 60:
	{act = 111;}
	break;
	case 61:
	{act = 112;}
	break;
	case 62:
	{act = 113;}
	break;
	case 63:
	{act = 114;}
	break;
	case 64:
	{act = 115;}
	break;
	case 65:
	{act = 116;}
	break;
	case 66:
	{act = 117;}
	break;
	case 67:
	{act = 118;}
	break;
	case 68:
	{act = 123;}
	break;
	case 69:
	{act = 124;}
	break;
	case 70:
	{act = 125;}
	break;
	case 71:
	{act = 126;}
	break;
	case 72:
	{act = 127;}
	break;
	case 73:
	{act = 128;}
	break;
	case 74:
	{act = 129;}
	break;
	case 75:
	{act = 130;}
	break;
	case 76:
	{act = 131;}
	break;
	case 77:
	{act = 132;}
	break;
	case 78:
	{act = 133;}
	break;
	case 79:
	{act = 134;}
	break;
	case 80:
	{act = 135;}
	break;
	case 81:
	{act = 136;}
	break;
	case 82:
	{act = 137;}
	break;
	case 83:
	{act = 138;}
	break;
	case 84:
	{act = 139;}
	break;
	case 85:
	{act = 140;}
	break;
	case 86:
	{act = 141;}
	break;
	case 87:
	{act = 142;}
	break;
	case 88:
	{act = 143;}
	break;
	case 89:
	{act = 144;}
	break;
	case 90:
	{act = 145;}
	break;
	case 91:
	{act = 146;}
	break;
	case 92:
	{act = 147;}
	break;
	case 93:
	{act = 148;}
	break;
	case 94:
	{act = 149;}
	break;
	case 95:
	{act = 150;}
	break;
	case 96:
	{act = 151;}
	break;
	case 97:
	{act = 152;}
	break;
	case 98:
	{act = 153;}
	break;
	case 99:
	{act = 154;}
	break;
	case 100:
	{act = 155;}
	break;
	case 101:
	{act = 156;}
	break;
	case 102:
	{act = 157;}
	break;
	case 103:
	{act = 158;}
	break;
	case 104:
	{act = 159;}
	break;
	case 105:
	{act = 160;}
	break;
	case 106:
	{act = 161;}
	break;
	case 107:
	{act = 162;}
	break;
	case 108:
	{act = 163;}
	break;
	case 109:
	{act = 164;}
	break;
	case 110:
	{act = 165;}
	break;
	case 111:
	{act = 166;}
	break;
	case 112:
	{act = 167;}
	break;
	case 113:
	{act = 168;}
	break;
	case 114:
	{act = 169;}
	break;
	case 115:
	{act = 170;}
	break;
	case 116:
	{act = 171;}
	break;
	case 117:
	{act = 172;}
	break;
	case 118:
	{act = 173;}
	break;
	case 119:
	{act = 174;}
	break;
	case 120:
	{act = 175;}
	break;
	case 121:
	{act = 176;}
	break;
	case 122:
	{act = 177;}
	break;
	case 123:
	{act = 178;}
	break;
	case 124:
	{act = 179;}
	break;
	case 125:
	{act = 180;}
	break;
	case 126:
	{act = 181;}
	break;
	case 127:
	{act = 182;}
	break;
	case 128:
	{act = 183;}
	break;
	case 129:
	{act = 184;}
	break;
	case 130:
	{act = 185;}
	break;
	case 131:
	{act = 186;}
	break;
	case 132:
	{act = 187;}
	break;
	case 133:
	{act = 188;}
	break;
	case 134:
	{act = 189;}
	break;
	case 135:
	{act = 190;}
	break;
	case 136:
	{act = 191;}
	break;
	case 137:
	{act = 192;}
	break;
	case 138:
	{act = 193;}
	break;
	case 139:
	{act = 194;}
	break;
	case 140:
	{act = 195;}
	break;
	case 141:
	{act = 196;}
	break;
	case 142:
	{act = 197;}
	break;
	case 143:
	{act = 198;}
	break;
	case 144:
	{act = 199;}
	break;
	case 145:
	{act = 200;}
	break;
	case 146:
	{act = 201;}
	break;
	case 147:
	{act = 202;}
	break;
	case 148:
	{act = 203;}
	break;
	case 149:
	{act = 204;}
	break;
	case 150:
	{act = 205;}
	break;
	case 151:
	{act = 206;}
	break;
	case 152:
	{act = 207;}
	break;
	case 153:
	{act = 208;}
	break;
	case 154:
	{act = 209;}
	break;
	case 155:
	{act = 210;}
	break;
	case 156:
	{act = 211;}
	break;
	case 157:
	{act = 212;}
	break;
	case 158:
	{act = 213;}
	break;
	case 159:
	{act = 214;}
	break;
	case 160:
	{act = 215;}
	break;
	case 161:
	{act = 216;}
	break;
	case 162:
	{act = 217;}
	break;
	case 163:
	{act = 218;}
	break;
	case 164:
	{act = 219;}
	break;
	case 165:
	{act = 220;}
	break;
	case 166:
	{act = 221;}
	break;
	case 167:
	{act = 222;}
	break;
	case 168:
	{act = 223;}
	break;
	case 169:
	{act = 224;}
	break;
	case 170:
	{act = 225;}
	break;
	case 171:
	{act = 226;}
	break;
	case 172:
	{act = 227;}
	break;
	case 173:
	{act = 228;}
	break;
	case 174:
	{act = 229;}
	break;
	case 175:
	{act = 230;}
	break;
	case 176:
	{act = 231;}
	break;
	case 177:
	{act = 232;}
	break;
	case 178:
	{act = 235;}
	break;
	case 179:
	{act = 237;}
	break;
	case 180:
	{act = 239;}
	break;
	case 181:
	{act = 241;}
	break;
	case 182:
	{act = 243;}
	break;
	case 183:
	{act = 247;}
	break;
	case 184:
	{te = p+1;{
	sym.tok = TK_NEWLINE;
	;
	{p++; goto _out; }
}}
	break;
	case 185:
	{te = p+1;{
	sym.tok = TK_CONST_EXPR;
	;
	{p++; goto _out; }
}}
	break;
	case 186:
	{te = p+1;{
	sym.tok = TK_LOG_AND;
	;
	{p++; goto _out; }
}}
	break;
	case 187:
	{te = p+1;{
	sym.tok = TK_RPAREN;
	;
	{p++; goto _out; }
}}
	break;
	case 188:
	{te = p+1;{
	sym.tok = TK_PLUS;
	;
	{p++; goto _out; }
}}
	break;
	case 189:
	{te = p+1;{
	sym.tok = TK_COMMA;
	;
	{p++; goto _out; }
}}
	break;
	case 190:
	{te = p+1;{
	sym.tok = TK_MINUS;
	;
	{p++; goto _out; }
}}
	break;
	case 191:
	{te = p+1;{
	sym.tok = TK_DOT;
	;
	{p++; goto _out; }
}}
	break;
	case 192:
	{te = p+1;{
	sym.tok = TK_DIVIDE;
	;
	{p++; goto _out; }
}}
	break;
	case 193:
	{te = p+1;{
	sym.tok = TK_COLON;
	;
	{p++; goto _out; }
}}
	break;
	case 194:
	{te = p+1;{
	sym.tok = TK_LEFT_SHIFT;
	;
	{p++; goto _out; }
}}
	break;
	case 195:
	{te = p+1;{
	sym.tok = TK_LESS_EQ;
	;
	{p++; goto _out; }
}}
	break;
	case 196:
	{te = p+1;{
	sym.tok = TK_NOT_EQ;
	;
	{p++; goto _out; }
}}
	break;
	case 197:
	{te = p+1;{
	sym.tok = TK_NOT_EQ;
	;
	{p++; goto _out; }
}}
	break;
	case 198:
	{te = p+1;{
	sym.tok = TK_EQUAL;
	;
	{p++; goto _out; }
}}
	break;
	case 199:
	{te = p+1;{
	sym.tok = TK_RIGHT_SHIFT;
	;
	{p++; goto _out; }
}}
	break;
	case 200:
	{te = p+1;{
	sym.tok = TK_GREATER_EQ;
	;
	{p++; goto _out; }
}}
	break;
	case 201:
	{te = p+1;{
	sym.tok = TK_QUESTION;
	;
	{p++; goto _out; }
}}
	break;
	case 202:
	{te = p+1;{
	sym.tok = TK_LSQUARE;
	;
	{p++; goto _out; }
}}
	break;
	case 203:
	{te = p+1;{
	sym.tok = TK_RSQUARE;
	;
	{p++; goto _out; }
}}
	break;
	case 204:
	{te = p+1;{
	sym.tok = TK_BIN_XOR;
	;
	{p++; goto _out; }
}}
	break;
	case 205:
	{te = p+1;{
	sym.tok = TK_POWER;
	;
	{p++; goto _out; }
}}
	break;
	case 206:
	{te = p+1;{
	sym.tok = TK_LCURLY;
	;
	{p++; goto _out; }
}}
	break;
	case 207:
	{te = p+1;{
	sym.tok = TK_LOG_OR;
	;
	{p++; goto _out; }
}}
	break;
	case 208:
	{te = p+1;{
	sym.tok = TK_RCURLY;
	;
	{p++; goto _out; }
}}
	break;
	case 209:
	{te = p+1;{
	sym.tok = TK_BIN_NOT;
	;
	{p++; goto _out; }
}}
	break;
	case 210:
	{te = p+1;{
	sym.tok = TK_B1;
	;
	{p++; goto _out; }
}}
	break;
	case 211:
	{te = p+1;{
	sym.tok = TK_C1;
	;
	{p++; goto _out; }
}}
	break;
	case 212:
	{te = p+1;{
	sym.tok = TK_D1;
	;
	{p++; goto _out; }
}}
	break;
	case 213:
	{te = p+1;{
	sym.tok = TK_E1;
	;
	{p++; goto _out; }
}}
	break;
	case 214:
	{te = p+1;{
	sym.tok = TK_H1;
	;
	{p++; goto _out; }
}}
	break;
	case 215:
	{te = p+1;{
	sym.tok = TK_L1;
	;
	{p++; goto _out; }
}}
	break;
	case 216:
	{te = p+1;{
	sym.tok = TK_A1;
	;
	{p++; goto _out; }
}}
	break;
	case 217:
	{te = p+1;{
	sym.tok = TK_F1;
	;
	{p++; goto _out; }
}}
	break;
	case 218:
	{te = p+1;{
	sym.tok = TK_BC1;
	;
	{p++; goto _out; }
}}
	break;
	case 219:
	{te = p+1;{
	sym.tok = TK_DE1;
	;
	{p++; goto _out; }
}}
	break;
	case 220:
	{te = p+1;{
	sym.tok = TK_HL1;
	;
	{p++; goto _out; }
}}
	break;
	case 221:
	{te = p+1;{
	sym.tok = TK_AF1;
	;
	{p++; goto _out; }
}}
	break;
	case 222:
	{te = p+1;{
	sym.tok = TK_IND_BC;
	p--; te--;
	{p++; goto _out; }
}}
	break;
	case 223:
	{te = p+1;{
	sym.tok = TK_IND_DE;
	p--; te--;
	{p++; goto _out; }
}}
	break;
	case 224:
	{te = p+1;{
	sym.tok = TK_IND_IX;
	p--; te--;
	{p++; goto _out; }
}}
	break;
	case 225:
	{te = p+1;{
	sym.tok = TK_IND_IY;
	p--; te--;
	{p++; goto _out; }
}}
	break;
	case 226:
	{te = p+1;{
	sym.tok = TK_IND_HL;
	p--; te--;
	{p++; goto _out; }
}}
	break;
	case 227:
	{te = p+1;{
	sym.tok = TK_IND_SP;
	p--; te--;
	{p++; goto _out; }
}}
	break;
	case 228:
	{te = p+1;{
	sym.tok = TK_IND_C;
	p--; te--;
	{p++; goto _out; }
}}
	break;
	case 229:
	{te = p+1;{
	sym.tok = TK_DS_B;
	;
	{p++; goto _out; }
}}
	break;
	case 230:
	{te = p+1;{
	sym.tok = TK_DS_W;
	;
	{p++; goto _out; }
}}
	break;
	case 231:
	{te = p+1;{
	sym.tok = TK_DS_P;
	;
	{p++; goto _out; }
}}
	break;
	case 232:
	{te = p+1;{
	sym.tok = TK_DS_Q;
	;
	{p++; goto _out; }
}}
	break;
	case 233:
	{te = p+1;}
	break;
	case 234:
	{te = p+1;{
  while ( ts[ 0] == '.' || isspace(ts[ 0]) ) ts++;
  while ( te[-1] == ':' || isspace(te[-1]) ) te--;
  sym.tok = TK_LABEL;
  {p++; goto _out; }
 }}
	break;
	case 235:
	{te = p+1;{
  sym.tok = TK_NUMBER;
  sym.number = scan_num( ts, te - ts - 1, 16 );
  ts = te = p;
  {p++; goto _out; }
 }}
	break;
	case 236:
	{te = p+1;{
  sym.tok = TK_NUMBER;
  sym.number = scan_num( ts + 2, te - ts - 3, 2 );
  ts = te = p;
  {p++; goto _out; }
 }}
	break;
	case 237:
	{te = p+1;{
  sym.tok = TK_NUMBER;
  if ( get_sym_string() &&
                             te - ts == 1 )
  {
   sym.number = *ts;
  }
  else
  {
   sym.number = 0;
   error_invalid_squoted_string();
  }
  ts = te = p;
  {p++; goto _out; }
 }}
	break;
	case 238:
	{te = p+1;{
  sym.tok = TK_STRING;
  if ( ! get_sym_string() )
   error_unclosed_string();
  {p++; goto _out; }
 }}
	break;
	case 239:
	{te = p+1;{
  sym.tok = TK_NIL;
  skip_to_newline();
  ts = te = p;
  {p++; goto _out; }
 }}
	break;
	case 240:
	{te = p;p--;{
	sym.tok = TK_LOG_NOT;
	;
	{p++; goto _out; }
}}
	break;
	case 241:
	{te = p;p--;{
	sym.tok = TK_BIN_AND;
	;
	{p++; goto _out; }
}}
	break;
	case 242:
	{te = p;p--;{
	sym.tok = TK_LPAREN;
	;
	{p++; goto _out; }
}}
	break;
	case 243:
	{te = p;p--;{
	sym.tok = TK_MULTIPLY;
	;
	{p++; goto _out; }
}}
	break;
	case 244:
	{te = p;p--;{
	sym.tok = TK_DOT;
	;
	{p++; goto _out; }
}}
	break;
	case 245:
	{te = p;p--;{
	sym.tok = TK_LESS;
	;
	{p++; goto _out; }
}}
	break;
	case 246:
	{te = p;p--;{
	sym.tok = TK_EQUAL;
	;
	{p++; goto _out; }
}}
	break;
	case 247:
	{te = p;p--;{
	sym.tok = TK_GREATER;
	;
	{p++; goto _out; }
}}
	break;
	case 248:
	{te = p;p--;{
	sym.tok = TK_BIN_OR;
	;
	{p++; goto _out; }
}}
	break;
	case 249:
	{te = p;p--;{
	sym.tok = TK_C;
	;
	{p++; goto _out; }
}}
	break;
	case 250:
	{te = p;p--;{
	sym.tok = TK_PO;
	;
	{p++; goto _out; }
}}
	break;
	case 251:
	{te = p;p--;{
	sym.tok = TK_P;
	;
	{p++; goto _out; }
}}
	break;
	case 252:
	{te = p;p--;{
	sym.tok = TK_M;
	;
	{p++; goto _out; }
}}
	break;
	case 253:
	{te = p;p--;{
	sym.tok = TK_B;
	;
	{p++; goto _out; }
}}
	break;
	case 254:
	{te = p;p--;{
	sym.tok = TK_D;
	;
	{p++; goto _out; }
}}
	break;
	case 255:
	{te = p;p--;{
	sym.tok = TK_E;
	;
	{p++; goto _out; }
}}
	break;
	case 256:
	{te = p;p--;{
	sym.tok = TK_H;
	;
	{p++; goto _out; }
}}
	break;
	case 257:
	{te = p;p--;{
	sym.tok = TK_L;
	;
	{p++; goto _out; }
}}
	break;
	case 258:
	{te = p;p--;{
	sym.tok = TK_A;
	;
	{p++; goto _out; }
}}
	break;
	case 259:
	{te = p;p--;{
	sym.tok = TK_F;
	;
	{p++; goto _out; }
}}
	break;
	case 260:
	{te = p;p--;{
	sym.tok = TK_I;
	;
	{p++; goto _out; }
}}
	break;
	case 261:
	{te = p;p--;{
	sym.tok = TK_R;
	;
	{p++; goto _out; }
}}
	break;
	case 262:
	{te = p;p--;{
	sym.tok = TK_BC;
	;
	{p++; goto _out; }
}}
	break;
	case 263:
	{te = p;p--;{
	sym.tok = TK_DE;
	;
	{p++; goto _out; }
}}
	break;
	case 264:
	{te = p;p--;{
	sym.tok = TK_HL;
	;
	{p++; goto _out; }
}}
	break;
	case 265:
	{te = p;p--;{
	sym.tok = TK_IX;
	;
	{p++; goto _out; }
}}
	break;
	case 266:
	{te = p;p--;{
	sym.tok = TK_IY;
	;
	{p++; goto _out; }
}}
	break;
	case 267:
	{te = p;p--;{
	sym.tok = TK_AF;
	;
	{p++; goto _out; }
}}
	break;
	case 268:
	{te = p;p--;{
	sym.tok = TK_IP;
	;
	{p++; goto _out; }
}}
	break;
	case 269:
	{te = p;p--;{
	sym.tok = TK_SU;
	;
	{p++; goto _out; }
}}
	break;
	case 270:
	{te = p;p--;{
	if (expect_opcode) {
		sym.tok = TK_IF;
		sym.tok_opcode = TK_IF;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_IF;
	}
	{p++; goto _out; }
}}
	break;
	case 271:
	{te = p;p--;{
	if (expect_opcode) {
		sym.tok = TK_CALL;
		sym.tok_opcode = TK_CALL;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_CALL;
	}
	{p++; goto _out; }
}}
	break;
	case 272:
	{te = p;p--;{
	if (expect_opcode) {
		sym.tok = TK_CP;
		sym.tok_opcode = TK_CP;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_CP;
	}
	{p++; goto _out; }
}}
	break;
	case 273:
	{te = p;p--;{
	if (expect_opcode) {
		sym.tok = TK_CPD;
		sym.tok_opcode = TK_CPD;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_CPD;
	}
	{p++; goto _out; }
}}
	break;
	case 274:
	{te = p;p--;{
	if (expect_opcode) {
		sym.tok = TK_CPI;
		sym.tok_opcode = TK_CPI;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_CPI;
	}
	{p++; goto _out; }
}}
	break;
	case 275:
	{te = p;p--;{
	if (expect_opcode) {
		sym.tok = TK_EI;
		sym.tok_opcode = TK_EI;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_EI;
	}
	{p++; goto _out; }
}}
	break;
	case 276:
	{te = p;p--;{
	if (expect_opcode) {
		sym.tok = TK_EX;
		sym.tok_opcode = TK_EX;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_EX;
	}
	{p++; goto _out; }
}}
	break;
	case 277:
	{te = p;p--;{
	if (expect_opcode) {
		sym.tok = TK_IN;
		sym.tok_opcode = TK_IN;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_IN;
	}
	{p++; goto _out; }
}}
	break;
	case 278:
	{te = p;p--;{
	if (expect_opcode) {
		sym.tok = TK_INC;
		sym.tok_opcode = TK_INC;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_INC;
	}
	{p++; goto _out; }
}}
	break;
	case 279:
	{te = p;p--;{
	if (expect_opcode) {
		sym.tok = TK_IND;
		sym.tok_opcode = TK_IND;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_IND;
	}
	{p++; goto _out; }
}}
	break;
	case 280:
	{te = p;p--;{
	if (expect_opcode) {
		sym.tok = TK_INI;
		sym.tok_opcode = TK_INI;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_INI;
	}
	{p++; goto _out; }
}}
	break;
	case 281:
	{te = p;p--;{
	if (expect_opcode) {
		sym.tok = TK_LD;
		sym.tok_opcode = TK_LD;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_LD;
	}
	{p++; goto _out; }
}}
	break;
	case 282:
	{te = p;p--;{
	if (expect_opcode) {
		sym.tok = TK_LDD;
		sym.tok_opcode = TK_LDD;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_LDD;
	}
	{p++; goto _out; }
}}
	break;
	case 283:
	{te = p;p--;{
	if (expect_opcode) {
		sym.tok = TK_LDDR;
		sym.tok_opcode = TK_LDDR;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_LDDR;
	}
	{p++; goto _out; }
}}
	break;
	case 284:
	{te = p;p--;{
	if (expect_opcode) {
		sym.tok = TK_LDI;
		sym.tok_opcode = TK_LDI;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_LDI;
	}
	{p++; goto _out; }
}}
	break;
	case 285:
	{te = p;p--;{
	if (expect_opcode) {
		sym.tok = TK_LDIR;
		sym.tok_opcode = TK_LDIR;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_LDIR;
	}
	{p++; goto _out; }
}}
	break;
	case 286:
	{te = p;p--;{
	if (expect_opcode) {
		sym.tok = TK_OR;
		sym.tok_opcode = TK_OR;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_OR;
	}
	{p++; goto _out; }
}}
	break;
	case 287:
	{te = p;p--;{
	if (expect_opcode) {
		sym.tok = TK_OUT;
		sym.tok_opcode = TK_OUT;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_OUT;
	}
	{p++; goto _out; }
}}
	break;
	case 288:
	{te = p;p--;{
	if (expect_opcode) {
		sym.tok = TK_OUTI;
		sym.tok_opcode = TK_OUTI;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_OUTI;
	}
	{p++; goto _out; }
}}
	break;
	case 289:
	{te = p;p--;{
	if (expect_opcode) {
		sym.tok = TK_RET;
		sym.tok_opcode = TK_RET;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_RET;
	}
	{p++; goto _out; }
}}
	break;
	case 290:
	{te = p;p--;{
	if (expect_opcode) {
		sym.tok = TK_RL;
		sym.tok_opcode = TK_RL;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_RL;
	}
	{p++; goto _out; }
}}
	break;
	case 291:
	{te = p;p--;{
	if (expect_opcode) {
		sym.tok = TK_RLC;
		sym.tok_opcode = TK_RLC;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_RLC;
	}
	{p++; goto _out; }
}}
	break;
	case 292:
	{te = p;p--;{
	if (expect_opcode) {
		sym.tok = TK_RR;
		sym.tok_opcode = TK_RR;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_RR;
	}
	{p++; goto _out; }
}}
	break;
	case 293:
	{te = p;p--;{
	if (expect_opcode) {
		sym.tok = TK_RRC;
		sym.tok_opcode = TK_RRC;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_RRC;
	}
	{p++; goto _out; }
}}
	break;
	case 294:
	{te = p;p--;{
	if (expect_opcode) {
		sym.tok = TK_SET;
		sym.tok_opcode = TK_SET;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_SET;
	}
	{p++; goto _out; }
}}
	break;
	case 295:
	{te = p;p--;{
	if (expect_opcode) {
		sym.tok = TK_OTDM;
		sym.tok_opcode = TK_OTDM;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_OTDM;
	}
	{p++; goto _out; }
}}
	break;
	case 296:
	{te = p;p--;{
	if (expect_opcode) {
		sym.tok = TK_OTIM;
		sym.tok_opcode = TK_OTIM;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_OTIM;
	}
	{p++; goto _out; }
}}
	break;
	case 297:
	{te = p;p--;{
	if (expect_opcode) {
		sym.tok = TK_TST;
		sym.tok_opcode = TK_TST;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_TST;
	}
	{p++; goto _out; }
}}
	break;
	case 298:
	{te = p;p--;}
	break;
	case 299:
	{te = p;p--;{
  sym.tok = TK_NAME;
  {p++; goto _out; }
 }}
	break;
	case 300:
	{te = p;p--;{
  while ( ts[ 0] == '.' || isspace(ts[ 0]) ) ts++;
  while ( te[-1] == ':' || isspace(te[-1]) ) te--;
  sym.tok = TK_LABEL;
  {p++; goto _out; }
 }}
	break;
	case 301:
	{te = p;p--;{
  sym.tok = TK_NUMBER;
  sym.number = scan_num( ts, te - ts, 10 );
  ts = te = p;
  {p++; goto _out; }
 }}
	break;
	case 302:
	{te = p;p--;{
  sym.tok = TK_NUMBER;
  sym.number = scan_num( ts + 2, te - ts - 2, 16 );
  ts = te = p;
  {p++; goto _out; }
 }}
	break;
	case 303:
	{te = p;p--;{
  sym.tok = TK_NUMBER;
  sym.number = scan_num( ts, te - ts - 1, 2 );
  ts = te = p;
  {p++; goto _out; }
 }}
	break;
	case 304:
	{te = p;p--;{
  sym.tok = TK_NUMBER;
  sym.number = scan_num( ts + 1, te - ts - 1, 2 );
  ts = te = p;
  {p++; goto _out; }
 }}
	break;
	case 305:
	{{p = ((te))-1;}{
	sym.tok = TK_LPAREN;
	;
	{p++; goto _out; }
}}
	break;
	case 306:
	{{p = ((te))-1;}{
	sym.tok = TK_DOT;
	;
	{p++; goto _out; }
}}
	break;
	case 307:
	{{p = ((te))-1;}{
  sym.tok = TK_NAME;
  {p++; goto _out; }
 }}
	break;
	case 308:
	{{p = ((te))-1;}{
  sym.tok = TK_NUMBER;
  sym.number = scan_num( ts, te - ts, 10 );
  ts = te = p;
  {p++; goto _out; }
 }}
	break;
	case 309:
	{	switch( act ) {
	case 1:
	{{p = ((te))-1;}
	sym.tok = TK_ASMPC;
	;
	{p++; goto _out; }
}
	break;
	case 5:
	{{p = ((te))-1;}
	sym.tok = TK_MOD;
	;
	{p++; goto _out; }
}
	break;
	case 37:
	{{p = ((te))-1;}
	sym.tok = TK_NZ;
	;
	{p++; goto _out; }
}
	break;
	case 38:
	{{p = ((te))-1;}
	sym.tok = TK_Z;
	;
	{p++; goto _out; }
}
	break;
	case 39:
	{{p = ((te))-1;}
	sym.tok = TK_NC;
	;
	{p++; goto _out; }
}
	break;
	case 40:
	{{p = ((te))-1;}
	sym.tok = TK_C;
	;
	{p++; goto _out; }
}
	break;
	case 41:
	{{p = ((te))-1;}
	sym.tok = TK_PO;
	;
	{p++; goto _out; }
}
	break;
	case 42:
	{{p = ((te))-1;}
	sym.tok = TK_PE;
	;
	{p++; goto _out; }
}
	break;
	case 43:
	{{p = ((te))-1;}
	sym.tok = TK_P;
	;
	{p++; goto _out; }
}
	break;
	case 44:
	{{p = ((te))-1;}
	sym.tok = TK_M;
	;
	{p++; goto _out; }
}
	break;
	case 45:
	{{p = ((te))-1;}
	sym.tok = TK_LZ;
	;
	{p++; goto _out; }
}
	break;
	case 46:
	{{p = ((te))-1;}
	sym.tok = TK_LO;
	;
	{p++; goto _out; }
}
	break;
	case 47:
	{{p = ((te))-1;}
	sym.tok = TK_NV;
	;
	{p++; goto _out; }
}
	break;
	case 48:
	{{p = ((te))-1;}
	sym.tok = TK_V;
	;
	{p++; goto _out; }
}
	break;
	case 49:
	{{p = ((te))-1;}
	sym.tok = TK_B;
	;
	{p++; goto _out; }
}
	break;
	case 50:
	{{p = ((te))-1;}
	sym.tok = TK_D;
	;
	{p++; goto _out; }
}
	break;
	case 51:
	{{p = ((te))-1;}
	sym.tok = TK_E;
	;
	{p++; goto _out; }
}
	break;
	case 52:
	{{p = ((te))-1;}
	sym.tok = TK_H;
	;
	{p++; goto _out; }
}
	break;
	case 53:
	{{p = ((te))-1;}
	sym.tok = TK_IXH;
	;
	{p++; goto _out; }
}
	break;
	case 54:
	{{p = ((te))-1;}
	sym.tok = TK_IYH;
	;
	{p++; goto _out; }
}
	break;
	case 55:
	{{p = ((te))-1;}
	sym.tok = TK_L;
	;
	{p++; goto _out; }
}
	break;
	case 56:
	{{p = ((te))-1;}
	sym.tok = TK_IXL;
	;
	{p++; goto _out; }
}
	break;
	case 57:
	{{p = ((te))-1;}
	sym.tok = TK_IYL;
	;
	{p++; goto _out; }
}
	break;
	case 58:
	{{p = ((te))-1;}
	sym.tok = TK_A;
	;
	{p++; goto _out; }
}
	break;
	case 59:
	{{p = ((te))-1;}
	sym.tok = TK_F;
	;
	{p++; goto _out; }
}
	break;
	case 60:
	{{p = ((te))-1;}
	sym.tok = TK_I;
	;
	{p++; goto _out; }
}
	break;
	case 61:
	{{p = ((te))-1;}
	sym.tok = TK_IIR;
	;
	{p++; goto _out; }
}
	break;
	case 62:
	{{p = ((te))-1;}
	sym.tok = TK_R;
	;
	{p++; goto _out; }
}
	break;
	case 63:
	{{p = ((te))-1;}
	sym.tok = TK_EIR;
	;
	{p++; goto _out; }
}
	break;
	case 64:
	{{p = ((te))-1;}
	sym.tok = TK_BC;
	;
	{p++; goto _out; }
}
	break;
	case 65:
	{{p = ((te))-1;}
	sym.tok = TK_DE;
	;
	{p++; goto _out; }
}
	break;
	case 66:
	{{p = ((te))-1;}
	sym.tok = TK_HL;
	;
	{p++; goto _out; }
}
	break;
	case 67:
	{{p = ((te))-1;}
	sym.tok = TK_IX;
	;
	{p++; goto _out; }
}
	break;
	case 68:
	{{p = ((te))-1;}
	sym.tok = TK_IY;
	;
	{p++; goto _out; }
}
	break;
	case 69:
	{{p = ((te))-1;}
	sym.tok = TK_AF;
	;
	{p++; goto _out; }
}
	break;
	case 70:
	{{p = ((te))-1;}
	sym.tok = TK_SP;
	;
	{p++; goto _out; }
}
	break;
	case 71:
	{{p = ((te))-1;}
	sym.tok = TK_IP;
	;
	{p++; goto _out; }
}
	break;
	case 72:
	{{p = ((te))-1;}
	sym.tok = TK_SU;
	;
	{p++; goto _out; }
}
	break;
	case 73:
	{{p = ((te))-1;}
	sym.tok = TK_XPC;
	;
	{p++; goto _out; }
}
	break;
	case 93:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_BINARY;
		sym.tok_opcode = TK_BINARY;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_BINARY;
	}
	{p++; goto _out; }
}
	break;
	case 94:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_DEFB;
		sym.tok_opcode = TK_DEFB;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_DEFB;
	}
	{p++; goto _out; }
}
	break;
	case 95:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_DEFC;
		sym.tok_opcode = TK_DEFC;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_DEFC;
	}
	{p++; goto _out; }
}
	break;
	case 96:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_DEFGROUP;
		sym.tok_opcode = TK_DEFGROUP;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_DEFGROUP;
	}
	{p++; goto _out; }
}
	break;
	case 97:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_DEFINE;
		sym.tok_opcode = TK_DEFINE;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_DEFINE;
	}
	{p++; goto _out; }
}
	break;
	case 98:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_DEFQ;
		sym.tok_opcode = TK_DEFQ;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_DEFQ;
	}
	{p++; goto _out; }
}
	break;
	case 99:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_DEFM;
		sym.tok_opcode = TK_DEFM;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_DEFM;
	}
	{p++; goto _out; }
}
	break;
	case 100:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_DEFS;
		sym.tok_opcode = TK_DEFS;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_DEFS;
	}
	{p++; goto _out; }
}
	break;
	case 101:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_DEFVARS;
		sym.tok_opcode = TK_DEFVARS;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_DEFVARS;
	}
	{p++; goto _out; }
}
	break;
	case 102:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_DEFW;
		sym.tok_opcode = TK_DEFW;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_DEFW;
	}
	{p++; goto _out; }
}
	break;
	case 103:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_ELSE;
		sym.tok_opcode = TK_ELSE;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_ELSE;
	}
	{p++; goto _out; }
}
	break;
	case 104:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_ENDIF;
		sym.tok_opcode = TK_ENDIF;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_ENDIF;
	}
	{p++; goto _out; }
}
	break;
	case 105:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_EXTERN;
		sym.tok_opcode = TK_EXTERN;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_EXTERN;
	}
	{p++; goto _out; }
}
	break;
	case 106:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_GLOBAL;
		sym.tok_opcode = TK_GLOBAL;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_GLOBAL;
	}
	{p++; goto _out; }
}
	break;
	case 107:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_IF;
		sym.tok_opcode = TK_IF;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_IF;
	}
	{p++; goto _out; }
}
	break;
	case 108:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_IFDEF;
		sym.tok_opcode = TK_IFDEF;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_IFDEF;
	}
	{p++; goto _out; }
}
	break;
	case 109:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_IFNDEF;
		sym.tok_opcode = TK_IFNDEF;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_IFNDEF;
	}
	{p++; goto _out; }
}
	break;
	case 110:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_INCLUDE;
		sym.tok_opcode = TK_INCLUDE;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_INCLUDE;
	}
	{p++; goto _out; }
}
	break;
	case 111:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_LINE;
		sym.tok_opcode = TK_LINE;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_LINE;
	}
	{p++; goto _out; }
}
	break;
	case 112:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_LSTOFF;
		sym.tok_opcode = TK_LSTOFF;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_LSTOFF;
	}
	{p++; goto _out; }
}
	break;
	case 113:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_LSTON;
		sym.tok_opcode = TK_LSTON;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_LSTON;
	}
	{p++; goto _out; }
}
	break;
	case 114:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_MODULE;
		sym.tok_opcode = TK_MODULE;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_MODULE;
	}
	{p++; goto _out; }
}
	break;
	case 115:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_ORG;
		sym.tok_opcode = TK_ORG;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_ORG;
	}
	{p++; goto _out; }
}
	break;
	case 116:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_PUBLIC;
		sym.tok_opcode = TK_PUBLIC;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_PUBLIC;
	}
	{p++; goto _out; }
}
	break;
	case 117:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_SECTION;
		sym.tok_opcode = TK_SECTION;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_SECTION;
	}
	{p++; goto _out; }
}
	break;
	case 118:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_UNDEFINE;
		sym.tok_opcode = TK_UNDEFINE;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_UNDEFINE;
	}
	{p++; goto _out; }
}
	break;
	case 123:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_ADC;
		sym.tok_opcode = TK_ADC;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_ADC;
	}
	{p++; goto _out; }
}
	break;
	case 124:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_ADD;
		sym.tok_opcode = TK_ADD;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_ADD;
	}
	{p++; goto _out; }
}
	break;
	case 125:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_AND;
		sym.tok_opcode = TK_AND;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_AND;
	}
	{p++; goto _out; }
}
	break;
	case 126:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_BIT;
		sym.tok_opcode = TK_BIT;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_BIT;
	}
	{p++; goto _out; }
}
	break;
	case 127:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_CALL;
		sym.tok_opcode = TK_CALL;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_CALL;
	}
	{p++; goto _out; }
}
	break;
	case 128:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_CCF;
		sym.tok_opcode = TK_CCF;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_CCF;
	}
	{p++; goto _out; }
}
	break;
	case 129:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_CP;
		sym.tok_opcode = TK_CP;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_CP;
	}
	{p++; goto _out; }
}
	break;
	case 130:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_CPD;
		sym.tok_opcode = TK_CPD;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_CPD;
	}
	{p++; goto _out; }
}
	break;
	case 131:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_CPDR;
		sym.tok_opcode = TK_CPDR;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_CPDR;
	}
	{p++; goto _out; }
}
	break;
	case 132:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_CPI;
		sym.tok_opcode = TK_CPI;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_CPI;
	}
	{p++; goto _out; }
}
	break;
	case 133:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_CPIR;
		sym.tok_opcode = TK_CPIR;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_CPIR;
	}
	{p++; goto _out; }
}
	break;
	case 134:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_CPL;
		sym.tok_opcode = TK_CPL;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_CPL;
	}
	{p++; goto _out; }
}
	break;
	case 135:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_DAA;
		sym.tok_opcode = TK_DAA;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_DAA;
	}
	{p++; goto _out; }
}
	break;
	case 136:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_DEC;
		sym.tok_opcode = TK_DEC;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_DEC;
	}
	{p++; goto _out; }
}
	break;
	case 137:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_DI;
		sym.tok_opcode = TK_DI;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_DI;
	}
	{p++; goto _out; }
}
	break;
	case 138:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_DJNZ;
		sym.tok_opcode = TK_DJNZ;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_DJNZ;
	}
	{p++; goto _out; }
}
	break;
	case 139:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_EI;
		sym.tok_opcode = TK_EI;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_EI;
	}
	{p++; goto _out; }
}
	break;
	case 140:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_EX;
		sym.tok_opcode = TK_EX;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_EX;
	}
	{p++; goto _out; }
}
	break;
	case 141:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_EXX;
		sym.tok_opcode = TK_EXX;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_EXX;
	}
	{p++; goto _out; }
}
	break;
	case 142:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_HALT;
		sym.tok_opcode = TK_HALT;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_HALT;
	}
	{p++; goto _out; }
}
	break;
	case 143:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_IM;
		sym.tok_opcode = TK_IM;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_IM;
	}
	{p++; goto _out; }
}
	break;
	case 144:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_IN;
		sym.tok_opcode = TK_IN;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_IN;
	}
	{p++; goto _out; }
}
	break;
	case 145:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_INC;
		sym.tok_opcode = TK_INC;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_INC;
	}
	{p++; goto _out; }
}
	break;
	case 146:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_IND;
		sym.tok_opcode = TK_IND;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_IND;
	}
	{p++; goto _out; }
}
	break;
	case 147:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_INDR;
		sym.tok_opcode = TK_INDR;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_INDR;
	}
	{p++; goto _out; }
}
	break;
	case 148:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_INI;
		sym.tok_opcode = TK_INI;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_INI;
	}
	{p++; goto _out; }
}
	break;
	case 149:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_INIR;
		sym.tok_opcode = TK_INIR;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_INIR;
	}
	{p++; goto _out; }
}
	break;
	case 150:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_JP;
		sym.tok_opcode = TK_JP;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_JP;
	}
	{p++; goto _out; }
}
	break;
	case 151:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_JR;
		sym.tok_opcode = TK_JR;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_JR;
	}
	{p++; goto _out; }
}
	break;
	case 152:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_LD;
		sym.tok_opcode = TK_LD;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_LD;
	}
	{p++; goto _out; }
}
	break;
	case 153:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_LDD;
		sym.tok_opcode = TK_LDD;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_LDD;
	}
	{p++; goto _out; }
}
	break;
	case 154:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_LDDR;
		sym.tok_opcode = TK_LDDR;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_LDDR;
	}
	{p++; goto _out; }
}
	break;
	case 155:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_LDI;
		sym.tok_opcode = TK_LDI;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_LDI;
	}
	{p++; goto _out; }
}
	break;
	case 156:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_LDIR;
		sym.tok_opcode = TK_LDIR;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_LDIR;
	}
	{p++; goto _out; }
}
	break;
	case 157:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_NEG;
		sym.tok_opcode = TK_NEG;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_NEG;
	}
	{p++; goto _out; }
}
	break;
	case 158:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_NOP;
		sym.tok_opcode = TK_NOP;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_NOP;
	}
	{p++; goto _out; }
}
	break;
	case 159:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_OR;
		sym.tok_opcode = TK_OR;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_OR;
	}
	{p++; goto _out; }
}
	break;
	case 160:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_OTDR;
		sym.tok_opcode = TK_OTDR;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_OTDR;
	}
	{p++; goto _out; }
}
	break;
	case 161:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_OTIR;
		sym.tok_opcode = TK_OTIR;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_OTIR;
	}
	{p++; goto _out; }
}
	break;
	case 162:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_OUT;
		sym.tok_opcode = TK_OUT;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_OUT;
	}
	{p++; goto _out; }
}
	break;
	case 163:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_OUTD;
		sym.tok_opcode = TK_OUTD;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_OUTD;
	}
	{p++; goto _out; }
}
	break;
	case 164:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_OUTI;
		sym.tok_opcode = TK_OUTI;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_OUTI;
	}
	{p++; goto _out; }
}
	break;
	case 165:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_POP;
		sym.tok_opcode = TK_POP;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_POP;
	}
	{p++; goto _out; }
}
	break;
	case 166:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_PUSH;
		sym.tok_opcode = TK_PUSH;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_PUSH;
	}
	{p++; goto _out; }
}
	break;
	case 167:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_RES;
		sym.tok_opcode = TK_RES;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_RES;
	}
	{p++; goto _out; }
}
	break;
	case 168:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_RET;
		sym.tok_opcode = TK_RET;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_RET;
	}
	{p++; goto _out; }
}
	break;
	case 169:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_RETI;
		sym.tok_opcode = TK_RETI;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_RETI;
	}
	{p++; goto _out; }
}
	break;
	case 170:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_RETN;
		sym.tok_opcode = TK_RETN;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_RETN;
	}
	{p++; goto _out; }
}
	break;
	case 171:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_RL;
		sym.tok_opcode = TK_RL;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_RL;
	}
	{p++; goto _out; }
}
	break;
	case 172:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_RLA;
		sym.tok_opcode = TK_RLA;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_RLA;
	}
	{p++; goto _out; }
}
	break;
	case 173:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_RLC;
		sym.tok_opcode = TK_RLC;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_RLC;
	}
	{p++; goto _out; }
}
	break;
	case 174:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_RLCA;
		sym.tok_opcode = TK_RLCA;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_RLCA;
	}
	{p++; goto _out; }
}
	break;
	case 175:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_RLD;
		sym.tok_opcode = TK_RLD;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_RLD;
	}
	{p++; goto _out; }
}
	break;
	case 176:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_RR;
		sym.tok_opcode = TK_RR;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_RR;
	}
	{p++; goto _out; }
}
	break;
	case 177:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_RRA;
		sym.tok_opcode = TK_RRA;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_RRA;
	}
	{p++; goto _out; }
}
	break;
	case 178:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_RRC;
		sym.tok_opcode = TK_RRC;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_RRC;
	}
	{p++; goto _out; }
}
	break;
	case 179:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_RRCA;
		sym.tok_opcode = TK_RRCA;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_RRCA;
	}
	{p++; goto _out; }
}
	break;
	case 180:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_RRD;
		sym.tok_opcode = TK_RRD;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_RRD;
	}
	{p++; goto _out; }
}
	break;
	case 181:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_RST;
		sym.tok_opcode = TK_RST;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_RST;
	}
	{p++; goto _out; }
}
	break;
	case 182:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_SBC;
		sym.tok_opcode = TK_SBC;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_SBC;
	}
	{p++; goto _out; }
}
	break;
	case 183:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_SCF;
		sym.tok_opcode = TK_SCF;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_SCF;
	}
	{p++; goto _out; }
}
	break;
	case 184:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_SET;
		sym.tok_opcode = TK_SET;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_SET;
	}
	{p++; goto _out; }
}
	break;
	case 185:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_SLA;
		sym.tok_opcode = TK_SLA;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_SLA;
	}
	{p++; goto _out; }
}
	break;
	case 186:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_SLL;
		sym.tok_opcode = TK_SLL;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_SLL;
	}
	{p++; goto _out; }
}
	break;
	case 187:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_SLI;
		sym.tok_opcode = TK_SLI;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_SLI;
	}
	{p++; goto _out; }
}
	break;
	case 188:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_SRA;
		sym.tok_opcode = TK_SRA;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_SRA;
	}
	{p++; goto _out; }
}
	break;
	case 189:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_SRL;
		sym.tok_opcode = TK_SRL;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_SRL;
	}
	{p++; goto _out; }
}
	break;
	case 190:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_SUB;
		sym.tok_opcode = TK_SUB;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_SUB;
	}
	{p++; goto _out; }
}
	break;
	case 191:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_XOR;
		sym.tok_opcode = TK_XOR;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_XOR;
	}
	{p++; goto _out; }
}
	break;
	case 192:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_SWAPNIB;
		sym.tok_opcode = TK_SWAPNIB;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_SWAPNIB;
	}
	{p++; goto _out; }
}
	break;
	case 193:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_OUTINB;
		sym.tok_opcode = TK_OUTINB;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_OUTINB;
	}
	{p++; goto _out; }
}
	break;
	case 194:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_LDIX;
		sym.tok_opcode = TK_LDIX;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_LDIX;
	}
	{p++; goto _out; }
}
	break;
	case 195:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_LDIRX;
		sym.tok_opcode = TK_LDIRX;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_LDIRX;
	}
	{p++; goto _out; }
}
	break;
	case 196:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_LDDX;
		sym.tok_opcode = TK_LDDX;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_LDDX;
	}
	{p++; goto _out; }
}
	break;
	case 197:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_LDDRX;
		sym.tok_opcode = TK_LDDRX;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_LDDRX;
	}
	{p++; goto _out; }
}
	break;
	case 198:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_IN0;
		sym.tok_opcode = TK_IN0;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_IN0;
	}
	{p++; goto _out; }
}
	break;
	case 199:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_MLT;
		sym.tok_opcode = TK_MLT;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_MLT;
	}
	{p++; goto _out; }
}
	break;
	case 200:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_OTDM;
		sym.tok_opcode = TK_OTDM;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_OTDM;
	}
	{p++; goto _out; }
}
	break;
	case 201:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_OTDMR;
		sym.tok_opcode = TK_OTDMR;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_OTDMR;
	}
	{p++; goto _out; }
}
	break;
	case 202:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_OTIM;
		sym.tok_opcode = TK_OTIM;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_OTIM;
	}
	{p++; goto _out; }
}
	break;
	case 203:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_OTIMR;
		sym.tok_opcode = TK_OTIMR;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_OTIMR;
	}
	{p++; goto _out; }
}
	break;
	case 204:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_OUT0;
		sym.tok_opcode = TK_OUT0;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_OUT0;
	}
	{p++; goto _out; }
}
	break;
	case 205:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_SLP;
		sym.tok_opcode = TK_SLP;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_SLP;
	}
	{p++; goto _out; }
}
	break;
	case 206:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_TST;
		sym.tok_opcode = TK_TST;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_TST;
	}
	{p++; goto _out; }
}
	break;
	case 207:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_TSTIO;
		sym.tok_opcode = TK_TSTIO;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_TSTIO;
	}
	{p++; goto _out; }
}
	break;
	case 208:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_ALTD;
		sym.tok_opcode = TK_ALTD;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_ALTD;
	}
	{p++; goto _out; }
}
	break;
	case 209:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_BOOL;
		sym.tok_opcode = TK_BOOL;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_BOOL;
	}
	{p++; goto _out; }
}
	break;
	case 210:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_IDET;
		sym.tok_opcode = TK_IDET;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_IDET;
	}
	{p++; goto _out; }
}
	break;
	case 211:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_IOE;
		sym.tok_opcode = TK_IOE;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_IOE;
	}
	{p++; goto _out; }
}
	break;
	case 212:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_IOI;
		sym.tok_opcode = TK_IOI;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_IOI;
	}
	{p++; goto _out; }
}
	break;
	case 213:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_IPRES;
		sym.tok_opcode = TK_IPRES;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_IPRES;
	}
	{p++; goto _out; }
}
	break;
	case 214:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_IPSET;
		sym.tok_opcode = TK_IPSET;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_IPSET;
	}
	{p++; goto _out; }
}
	break;
	case 215:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_LDDSR;
		sym.tok_opcode = TK_LDDSR;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_LDDSR;
	}
	{p++; goto _out; }
}
	break;
	case 216:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_LDISR;
		sym.tok_opcode = TK_LDISR;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_LDISR;
	}
	{p++; goto _out; }
}
	break;
	case 217:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_LDP;
		sym.tok_opcode = TK_LDP;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_LDP;
	}
	{p++; goto _out; }
}
	break;
	case 218:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_LSDR;
		sym.tok_opcode = TK_LSDR;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_LSDR;
	}
	{p++; goto _out; }
}
	break;
	case 219:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_LSIR;
		sym.tok_opcode = TK_LSIR;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_LSIR;
	}
	{p++; goto _out; }
}
	break;
	case 220:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_LSDDR;
		sym.tok_opcode = TK_LSDDR;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_LSDDR;
	}
	{p++; goto _out; }
}
	break;
	case 221:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_LSIDR;
		sym.tok_opcode = TK_LSIDR;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_LSIDR;
	}
	{p++; goto _out; }
}
	break;
	case 222:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_MUL;
		sym.tok_opcode = TK_MUL;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_MUL;
	}
	{p++; goto _out; }
}
	break;
	case 223:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_RDMODE;
		sym.tok_opcode = TK_RDMODE;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_RDMODE;
	}
	{p++; goto _out; }
}
	break;
	case 224:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_SETUSR;
		sym.tok_opcode = TK_SETUSR;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_SETUSR;
	}
	{p++; goto _out; }
}
	break;
	case 225:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_SURES;
		sym.tok_opcode = TK_SURES;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_SURES;
	}
	{p++; goto _out; }
}
	break;
	case 226:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_SYSCALL;
		sym.tok_opcode = TK_SYSCALL;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_SYSCALL;
	}
	{p++; goto _out; }
}
	break;
	case 227:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_UMA;
		sym.tok_opcode = TK_UMA;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_UMA;
	}
	{p++; goto _out; }
}
	break;
	case 228:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_UMS;
		sym.tok_opcode = TK_UMS;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_UMS;
	}
	{p++; goto _out; }
}
	break;
	case 229:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_CALL_OZ;
		sym.tok_opcode = TK_CALL_OZ;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_CALL_OZ;
	}
	{p++; goto _out; }
}
	break;
	case 230:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_CALL_PKG;
		sym.tok_opcode = TK_CALL_PKG;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_CALL_PKG;
	}
	{p++; goto _out; }
}
	break;
	case 231:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_FPP;
		sym.tok_opcode = TK_FPP;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_FPP;
	}
	{p++; goto _out; }
}
	break;
	case 232:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_INVOKE;
		sym.tok_opcode = TK_INVOKE;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_INVOKE;
	}
	{p++; goto _out; }
}
	break;
	case 235:
	{{p = ((te))-1;}
  sym.tok = TK_NAME;
  {p++; goto _out; }
 }
	break;
	case 237:
	{{p = ((te))-1;}
  sym.tok = TK_NUMBER;
  sym.number = scan_num( ts, te - ts, 10 );
  ts = te = p;
  {p++; goto _out; }
 }
	break;
	case 239:
	{{p = ((te))-1;}
  sym.tok = TK_NUMBER;
  sym.number = scan_num( ts + 1, te - ts - 1, 16 );
  ts = te = p;
  {p++; goto _out; }
 }
	break;
	case 241:
	{{p = ((te))-1;}
  sym.tok = TK_NUMBER;
  sym.number = scan_num( ts, te - ts - 1, 2 );
  ts = te = p;
  {p++; goto _out; }
 }
	break;
	case 243:
	{{p = ((te))-1;}
  sym.tok = TK_NUMBER;
  sym.number = scan_num( ts + 2, te - ts - 2, 2 );
  ts = te = p;
  {p++; goto _out; }
 }
	break;
	case 247:
	{{p = ((te))-1;}
  sym.tok = TK_NIL;
  skip_to_newline();
  ts = te = p;
  {p++; goto _out; }
 }
	break;
	}
	}
	break;
		}
	}
_again:
	_acts = _lexer_actions + _lexer_to_state_actions[cs];
	_nacts = (unsigned int) *_acts++;
	while ( _nacts-- > 0 ) {
		switch ( *_acts++ ) {
	case 0:
	{ts = 0;}
	break;
		}
	}
	if ( cs == 0 )
		goto _out;
	if ( ++p != pe )
		goto _resume;
	_test_eof: {}
	if ( p == eof )
	{
	if ( _lexer_eof_trans[cs] > 0 ) {
		_trans = _lexer_eof_trans[cs] - 1;
		goto _eof_trans;
	}
	}
	_out: {}
	}
 return sym.tok;
}
