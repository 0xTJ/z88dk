static const short _lexer_actions[] = {
	0, 1, 0, 1, 1, 1, 2, 1, 
	178, 1, 179, 1, 180, 1, 181, 1, 
	182, 1, 183, 1, 184, 1, 185, 1, 
	186, 1, 187, 1, 188, 1, 189, 1, 
	190, 1, 191, 1, 192, 1, 193, 1, 
	194, 1, 195, 1, 196, 1, 197, 1, 
	198, 1, 199, 1, 200, 1, 201, 1, 
	202, 1, 203, 1, 204, 1, 205, 1, 
	206, 1, 207, 1, 208, 1, 209, 1, 
	210, 1, 211, 1, 212, 1, 213, 1, 
	214, 1, 215, 1, 216, 1, 217, 1, 
	218, 1, 219, 1, 220, 1, 221, 1, 
	222, 1, 223, 1, 224, 1, 225, 1, 
	226, 1, 227, 1, 228, 1, 229, 1, 
	230, 1, 231, 1, 232, 1, 233, 1, 
	234, 1, 235, 1, 236, 1, 237, 1, 
	238, 1, 239, 1, 240, 1, 241, 1, 
	242, 1, 243, 1, 244, 1, 245, 1, 
	246, 1, 247, 1, 248, 1, 249, 1, 
	250, 1, 251, 1, 252, 1, 253, 1, 
	254, 1, 255, 1, 256, 1, 257, 1, 
	258, 1, 259, 1, 260, 1, 261, 1, 
	262, 1, 263, 1, 264, 1, 265, 1, 
	266, 1, 267, 1, 268, 1, 269, 1, 
	270, 1, 271, 1, 272, 1, 273, 1, 
	274, 1, 275, 1, 276, 1, 277, 1, 
	278, 1, 279, 1, 280, 1, 281, 1, 
	282, 1, 283, 1, 284, 1, 285, 1, 
	286, 1, 287, 1, 288, 1, 289, 1, 
	290, 1, 291, 1, 292, 1, 293, 1, 
	294, 1, 295, 1, 296, 1, 297, 1, 
	298, 1, 299, 1, 300, 2, 2, 3, 
	2, 2, 4, 2, 2, 5, 2, 2, 
	6, 2, 2, 7, 2, 2, 8, 2, 
	2, 9, 2, 2, 10, 2, 2, 11, 
	2, 2, 12, 2, 2, 13, 2, 2, 
	14, 2, 2, 15, 2, 2, 16, 2, 
	2, 17, 2, 2, 18, 2, 2, 19, 
	2, 2, 20, 2, 2, 21, 2, 2, 
	22, 2, 2, 23, 2, 2, 24, 2, 
	2, 25, 2, 2, 26, 2, 2, 27, 
	2, 2, 28, 2, 2, 29, 2, 2, 
	30, 2, 2, 31, 2, 2, 32, 2, 
	2, 33, 2, 2, 34, 2, 2, 35, 
	2, 2, 36, 2, 2, 37, 2, 2, 
	38, 2, 2, 39, 2, 2, 40, 2, 
	2, 41, 2, 2, 42, 2, 2, 43, 
	2, 2, 44, 2, 2, 45, 2, 2, 
	46, 2, 2, 47, 2, 2, 48, 2, 
	2, 49, 2, 2, 50, 2, 2, 51, 
	2, 2, 52, 2, 2, 53, 2, 2, 
	54, 2, 2, 55, 2, 2, 56, 2, 
	2, 57, 2, 2, 58, 2, 2, 59, 
	2, 2, 60, 2, 2, 61, 2, 2, 
	62, 2, 2, 63, 2, 2, 64, 2, 
	2, 65, 2, 2, 66, 2, 2, 67, 
	2, 2, 68, 2, 2, 69, 2, 2, 
	70, 2, 2, 71, 2, 2, 72, 2, 
	2, 73, 2, 2, 74, 2, 2, 75, 
	2, 2, 76, 2, 2, 77, 2, 2, 
	78, 2, 2, 79, 2, 2, 80, 2, 
	2, 81, 2, 2, 82, 2, 2, 83, 
	2, 2, 84, 2, 2, 85, 2, 2, 
	86, 2, 2, 87, 2, 2, 88, 2, 
	2, 89, 2, 2, 90, 2, 2, 91, 
	2, 2, 92, 2, 2, 93, 2, 2, 
	94, 2, 2, 95, 2, 2, 96, 2, 
	2, 97, 2, 2, 98, 2, 2, 99, 
	2, 2, 100, 2, 2, 101, 2, 2, 
	102, 2, 2, 103, 2, 2, 104, 2, 
	2, 105, 2, 2, 106, 2, 2, 107, 
	2, 2, 108, 2, 2, 109, 2, 2, 
	110, 2, 2, 111, 2, 2, 112, 2, 
	2, 113, 2, 2, 114, 2, 2, 115, 
	2, 2, 116, 2, 2, 117, 2, 2, 
	118, 2, 2, 119, 2, 2, 120, 2, 
	2, 121, 2, 2, 122, 2, 2, 123, 
	2, 2, 124, 2, 2, 125, 2, 2, 
	126, 2, 2, 127, 2, 2, 128, 2, 
	2, 129, 2, 2, 130, 2, 2, 131, 
	2, 2, 132, 2, 2, 133, 2, 2, 
	134, 2, 2, 135, 2, 2, 136, 2, 
	2, 137, 2, 2, 138, 2, 2, 139, 
	2, 2, 140, 2, 2, 141, 2, 2, 
	142, 2, 2, 143, 2, 2, 144, 2, 
	2, 145, 2, 2, 146, 2, 2, 147, 
	2, 2, 148, 2, 2, 149, 2, 2, 
	150, 2, 2, 151, 2, 2, 152, 2, 
	2, 153, 2, 2, 154, 2, 2, 155, 
	2, 2, 156, 2, 2, 157, 2, 2, 
	158, 2, 2, 159, 2, 2, 160, 2, 
	2, 161, 2, 2, 162, 2, 2, 163, 
	2, 2, 164, 2, 2, 165, 2, 2, 
	166, 2, 2, 167, 2, 2, 168, 2, 
	2, 169, 2, 2, 170, 2, 2, 171, 
	2, 2, 172, 2, 2, 173, 2, 2, 
	174, 2, 2, 175, 2, 2, 176, 2, 
	2, 177
};
static const short _lexer_cond_offsets[] = {
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 5, 8, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 17, 21, 28, 35, 
	42, 49, 56, 63, 70, 77, 84, 91, 
	98, 105, 112, 119, 126, 133, 140, 147, 
	154, 161, 168, 175, 182, 189, 196, 203, 
	210, 217, 224, 231, 238, 245, 252, 259, 
	266, 273, 280, 287, 294, 301, 308, 315, 
	322, 329, 336, 343, 350, 357, 364, 371, 
	378, 385, 392, 399, 406, 413, 420, 427, 
	434, 441, 448, 455, 462, 469, 476, 483, 
	490, 497, 504, 511, 518, 525, 532, 539, 
	546, 553, 560, 567, 574, 581, 588, 595, 
	602, 609, 616, 623, 630, 637, 644, 651, 
	658, 665, 672, 679, 686, 693, 700, 707, 
	714, 721, 728, 735, 742, 749, 756, 763, 
	770, 777, 784, 791, 798, 805, 812, 819, 
	826, 833, 840, 847, 854, 861, 868, 875, 
	882, 889, 896, 903, 910, 917, 924, 931, 
	938, 945, 952, 959, 966, 973, 980, 987, 
	994, 1001, 1008, 1015, 1022, 1029, 1036, 1043, 
	1050, 1057, 1064, 1071, 1078, 1085, 1092, 1099, 
	1106, 1113, 1120, 1127, 1134, 1141, 1148, 1155, 
	1162, 1169, 1176, 1183, 1190, 1197, 1204, 1211, 
	1218, 1225, 1232, 1239, 1246, 1253, 1260, 1267, 
	1274, 1281, 1288, 1295, 1302, 1309, 1316, 1323
};
static const char _lexer_cond_lengths[] = {
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 5, 3, 4, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 5, 4, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7
};
static const short _lexer_cond_keys[] = {
	9, 9, 32, 32, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 58, 58, 
	46, 46, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 65, 90, 95, 95, 
	97, 122, 48, 57, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 0
};
static const char _lexer_cond_spaces[] = {
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0
};
static const short _lexer_key_offsets[] = {
	0, 0, 2, 5, 19, 21, 26, 31, 
	33, 38, 40, 45, 49, 54, 59, 61, 
	66, 74, 80, 88, 95, 98, 236, 237, 
	243, 246, 248, 249, 263, 264, 278, 290, 
	298, 306, 316, 322, 323, 326, 327, 329, 
	330, 348, 355, 366, 374, 383, 392, 401, 
	410, 419, 428, 442, 450, 461, 470, 479, 
	488, 497, 506, 520, 529, 538, 545, 556, 
	565, 574, 583, 592, 605, 614, 623, 641, 
	650, 662, 687, 696, 705, 714, 723, 732, 
	741, 750, 759, 768, 777, 786, 794, 810, 
	819, 828, 837, 846, 855, 864, 875, 884, 
	893, 902, 912, 921, 930, 939, 948, 957, 
	966, 978, 987, 996, 1004, 1029, 1038, 1047, 
	1058, 1067, 1076, 1085, 1094, 1103, 1112, 1128, 
	1137, 1146, 1155, 1164, 1173, 1182, 1191, 1200, 
	1209, 1220, 1231, 1240, 1249, 1258, 1267, 1278, 
	1289, 1300, 1318, 1331, 1342, 1351, 1362, 1371, 
	1380, 1389, 1402, 1413, 1422, 1433, 1442, 1451, 
	1462, 1471, 1484, 1493, 1502, 1511, 1520, 1529, 
	1538, 1555, 1564, 1573, 1586, 1595, 1606, 1617, 
	1626, 1637, 1646, 1655, 1667, 1680, 1689, 1700, 
	1709, 1718, 1727, 1736, 1753, 1762, 1771, 1780, 
	1789, 1800, 1811, 1824, 1833, 1846, 1855, 1864, 
	1887, 1896, 1905, 1916, 1925, 1934, 1943, 1952, 
	1961, 1970, 1979, 1994, 2005, 2016, 2025, 2034, 
	2043, 2052, 2061, 2070, 2079, 2088, 2097, 2106, 
	2115, 2126, 2137, 2146, 2155, 2164, 2173, 2182, 
	2191, 2202, 2211, 2220, 2227, 2234, 2272, 2289, 
	2314, 2332, 2353, 2374, 2395, 2416, 2437, 2458, 
	2488, 2506, 2531, 2552, 2573, 2594, 2615, 2636, 
	2666, 2687, 2708, 2725, 2750, 2771, 2792, 2813, 
	2834, 2863, 2884, 2905, 2943, 2964, 2990, 3043, 
	3064, 3085, 3106, 3127, 3148, 3169, 3190, 3211, 
	3232, 3253, 3274, 3292, 3326, 3347, 3368, 3389, 
	3410, 3431, 3452, 3477, 3498, 3519, 3540, 3562, 
	3583, 3604, 3625, 3646, 3667, 3688, 3714, 3735, 
	3756, 3774, 3827, 3848, 3869, 3894, 3915, 3936, 
	3957, 3978, 3999, 4020, 4055, 4076, 4097, 4118, 
	4139, 4160, 4181, 4202, 4223, 4244, 4269, 4294, 
	4315, 4336, 4357, 4378, 4403, 4428, 4453, 4491, 
	4520, 4545, 4566, 4591, 4612, 4633, 4654, 4683, 
	4708, 4729, 4754, 4775, 4796, 4821, 4842, 4871, 
	4892, 4913, 4934, 4955, 4976, 4997, 5034, 5055, 
	5076, 5105, 5126, 5151, 5176, 5197, 5222, 5243, 
	5264, 5291, 5320, 5341, 5366, 5387, 5408, 5429, 
	5450, 5487, 5508, 5529, 5550, 5571, 5596, 5621, 
	5650, 5671, 5700, 5721, 5742, 5791, 5812, 5833, 
	5858, 5879, 5900, 5921, 5942, 5963, 5984, 6005, 
	6038, 6063, 6088, 6109, 6130, 6151, 6172, 6193, 
	6214, 6235, 6256, 6277, 6298, 6319, 6344, 6369, 
	6390, 6411, 6432, 6453, 6474, 6495, 6520, 6541
};
static const short _lexer_trans_keys[] = {
	35, 45, 34, 35, 45, 9, 32, 66, 
	67, 68, 72, 73, 83, 98, 99, 100, 
	104, 105, 115, 67, 99, 9, 32, 41, 
	43, 45, 9, 32, 41, 43, 45, 69, 
	101, 9, 32, 41, 43, 45, 76, 108, 
	9, 32, 41, 43, 45, 88, 89, 120, 
	121, 9, 32, 41, 43, 45, 9, 32, 
	41, 43, 45, 80, 112, 9, 32, 41, 
	43, 45, 72, 104, 48, 57, 65, 70, 
	97, 102, 48, 57, 65, 70, 97, 102, 
	66, 80, 81, 87, 98, 112, 113, 119, 
	521, 544, 607, 577, 602, 609, 634, 521, 
	544, 570, 10, 33, 34, 35, 36, 37, 
	38, 39, 40, 41, 42, 43, 44, 45, 
	47, 48, 49, 58, 59, 60, 61, 62, 
	63, 64, 91, 92, 93, 94, 96, 123, 
	124, 125, 126, 127, 302, 321, 322, 323, 
	324, 325, 326, 327, 328, 329, 330, 332, 
	333, 334, 335, 336, 338, 339, 340, 341, 
	342, 344, 346, 351, 353, 354, 355, 356, 
	357, 358, 359, 360, 361, 362, 364, 365, 
	366, 367, 368, 370, 371, 372, 373, 374, 
	376, 378, 558, 577, 578, 579, 580, 581, 
	582, 583, 584, 585, 586, 588, 589, 590, 
	591, 592, 594, 595, 596, 597, 598, 600, 
	602, 607, 609, 610, 611, 612, 613, 614, 
	615, 616, 617, 618, 620, 621, 622, 623, 
	624, 626, 627, 628, 629, 630, 632, 634, 
	-128, 32, 50, 57, 331, 345, 363, 377, 
	587, 601, 619, 633, 61, 48, 57, 65, 
	70, 97, 102, 34, 48, 49, 48, 49, 
	38, 9, 32, 66, 67, 68, 72, 73, 
	83, 98, 99, 100, 104, 105, 115, 42, 
	66, 72, 88, 98, 104, 120, 48, 49, 
	50, 57, 65, 70, 97, 102, 66, 72, 
	98, 104, 48, 49, 50, 57, 65, 70, 
	97, 102, 72, 104, 48, 57, 65, 70, 
	97, 102, 72, 104, 48, 57, 65, 70, 
	97, 102, 72, 104, 48, 49, 50, 57, 
	65, 70, 97, 102, 48, 57, 65, 70, 
	97, 102, 10, 60, 61, 62, 61, 61, 
	62, 124, 39, 68, 70, 76, 78, 83, 
	95, 100, 102, 108, 110, 115, 48, 57, 
	65, 90, 97, 122, 95, 48, 57, 65, 
	90, 97, 122, 67, 68, 95, 99, 100, 
	48, 57, 65, 90, 97, 122, 39, 95, 
	48, 57, 65, 90, 97, 122, 84, 95, 
	116, 48, 57, 65, 90, 97, 122, 68, 
	95, 100, 48, 57, 65, 90, 97, 122, 
	68, 95, 100, 48, 57, 65, 90, 97, 
	122, 77, 95, 109, 48, 57, 65, 90, 
	97, 122, 80, 95, 112, 48, 57, 65, 
	90, 97, 122, 67, 95, 99, 48, 57, 
	65, 90, 97, 122, 39, 67, 73, 79, 
	95, 99, 105, 111, 48, 57, 65, 90, 
	97, 122, 39, 95, 48, 57, 65, 90, 
	97, 122, 78, 84, 95, 110, 116, 48, 
	57, 65, 90, 97, 122, 65, 95, 97, 
	48, 57, 66, 90, 98, 122, 82, 95, 
	114, 48, 57, 65, 90, 97, 122, 89, 
	95, 121, 48, 57, 65, 90, 97, 122, 
	79, 95, 111, 48, 57, 65, 90, 97, 
	122, 76, 95, 108, 48, 57, 65, 90, 
	97, 122, 39, 65, 67, 80, 95, 97, 
	99, 112, 48, 57, 66, 90, 98, 122, 
	76, 95, 108, 48, 57, 65, 90, 97, 
	122, 76, 95, 108, 48, 57, 65, 90, 
	97, 122, 95, 48, 57, 65, 90, 97, 
	122, 79, 80, 95, 111, 112, 48, 57, 
	65, 90, 97, 122, 90, 95, 122, 48, 
	57, 65, 89, 97, 121, 75, 95, 107, 
	48, 57, 65, 90, 97, 122, 71, 95, 
	103, 48, 57, 65, 90, 97, 122, 70, 
	95, 102, 48, 57, 65, 90, 97, 122, 
	68, 73, 76, 95, 100, 105, 108, 48, 
	57, 65, 90, 97, 122, 82, 95, 114, 
	48, 57, 65, 90, 97, 122, 82, 95, 
	114, 48, 57, 65, 90, 97, 122, 39, 
	65, 69, 73, 74, 83, 95, 97, 101, 
	105, 106, 115, 48, 57, 66, 90, 98, 
	122, 65, 95, 97, 48, 57, 66, 90, 
	98, 122, 39, 67, 70, 95, 99, 102, 
	48, 57, 65, 90, 97, 122, 66, 67, 
	71, 73, 77, 81, 83, 86, 87, 95, 
	98, 99, 103, 105, 109, 113, 115, 118, 
	119, 48, 57, 65, 90, 97, 122, 82, 
	95, 114, 48, 57, 65, 90, 97, 122, 
	79, 95, 111, 48, 57, 65, 90, 97, 
	122, 85, 95, 117, 48, 57, 65, 90, 
	97, 122, 80, 95, 112, 48, 57, 65, 
	90, 97, 122, 78, 95, 110, 48, 57, 
	65, 90, 97, 122, 69, 95, 101, 48, 
	57, 65, 90, 97, 122, 65, 95, 97, 
	48, 57, 66, 90, 98, 122, 82, 95, 
	114, 48, 57, 65, 90, 97, 122, 83, 
	95, 115, 48, 57, 65, 90, 97, 122, 
	78, 95, 110, 48, 57, 65, 90, 97, 
	122, 90, 95, 122, 48, 57, 65, 89, 
	97, 121, 46, 95, 48, 57, 65, 90, 
	97, 122, 39, 73, 76, 78, 88, 95, 
	105, 108, 110, 120, 48, 57, 65, 90, 
	97, 122, 82, 95, 114, 48, 57, 65, 
	90, 97, 122, 83, 95, 115, 48, 57, 
	65, 90, 97, 122, 69, 95, 101, 48, 
	57, 65, 90, 97, 122, 68, 95, 100, 
	48, 57, 65, 90, 97, 122, 73, 95, 
	105, 48, 57, 65, 90, 97, 122, 70, 
	95, 102, 48, 57, 65, 90, 97, 122, 
	84, 88, 95, 116, 120, 48, 57, 65, 
	90, 97, 122, 69, 95, 101, 48, 57, 
	65, 90, 97, 122, 82, 95, 114, 48, 
	57, 65, 90, 97, 122, 78, 95, 110, 
	48, 57, 65, 90, 97, 122, 39, 80, 
	95, 112, 48, 57, 65, 90, 97, 122, 
	80, 95, 112, 48, 57, 65, 90, 97, 
	122, 76, 95, 108, 48, 57, 65, 90, 
	97, 122, 79, 95, 111, 48, 57, 65, 
	90, 97, 122, 66, 95, 98, 48, 57, 
	65, 90, 97, 122, 65, 95, 97, 48, 
	57, 66, 90, 98, 122, 76, 95, 108, 
	48, 57, 65, 90, 97, 122, 39, 65, 
	76, 95, 97, 108, 48, 57, 66, 90, 
	98, 122, 76, 95, 108, 48, 57, 65, 
	90, 97, 122, 84, 95, 116, 48, 57, 
	65, 90, 97, 122, 39, 95, 48, 57, 
	65, 90, 97, 122, 68, 70, 73, 77, 
	78, 79, 80, 88, 89, 95, 100, 102, 
	105, 109, 110, 111, 112, 120, 121, 48, 
	57, 65, 90, 97, 122, 69, 95, 101, 
	48, 57, 65, 90, 97, 122, 84, 95, 
	116, 48, 57, 65, 90, 97, 122, 68, 
	78, 95, 100, 110, 48, 57, 65, 90, 
	97, 122, 69, 95, 101, 48, 57, 65, 
	90, 97, 122, 70, 95, 102, 48, 57, 
	65, 90, 97, 122, 68, 95, 100, 48, 
	57, 65, 90, 97, 122, 69, 95, 101, 
	48, 57, 65, 90, 97, 122, 70, 95, 
	102, 48, 57, 65, 90, 97, 122, 82, 
	95, 114, 48, 57, 65, 90, 97, 122, 
	48, 67, 68, 73, 86, 95, 99, 100, 
	105, 118, 49, 57, 65, 90, 97, 122, 
	76, 95, 108, 48, 57, 65, 90, 97, 
	122, 85, 95, 117, 48, 57, 65, 90, 
	97, 122, 68, 95, 100, 48, 57, 65, 
	90, 97, 122, 69, 95, 101, 48, 57, 
	65, 90, 97, 122, 82, 95, 114, 48, 
	57, 65, 90, 97, 122, 82, 95, 114, 
	48, 57, 65, 90, 97, 122, 79, 95, 
	111, 48, 57, 65, 90, 97, 122, 75, 
	95, 107, 48, 57, 65, 90, 97, 122, 
	69, 95, 101, 48, 57, 65, 90, 97, 
	122, 69, 73, 95, 101, 105, 48, 57, 
	65, 90, 97, 122, 82, 83, 95, 114, 
	115, 48, 57, 65, 90, 97, 122, 69, 
	95, 101, 48, 57, 65, 90, 97, 122, 
	83, 95, 115, 48, 57, 65, 90, 97, 
	122, 69, 95, 101, 48, 57, 65, 90, 
	97, 122, 84, 95, 116, 48, 57, 65, 
	90, 97, 122, 72, 76, 95, 104, 108, 
	48, 57, 65, 90, 97, 122, 72, 76, 
	95, 104, 108, 48, 57, 65, 90, 97, 
	122, 80, 82, 95, 112, 114, 48, 57, 
	65, 90, 97, 122, 39, 68, 73, 79, 
	83, 90, 95, 100, 105, 111, 115, 122, 
	48, 57, 65, 89, 97, 121, 68, 73, 
	80, 95, 100, 105, 112, 48, 57, 65, 
	90, 97, 122, 82, 83, 95, 114, 115, 
	48, 57, 65, 90, 97, 122, 82, 95, 
	114, 48, 57, 65, 90, 97, 122, 82, 
	83, 95, 114, 115, 48, 57, 65, 90, 
	97, 122, 82, 95, 114, 48, 57, 65, 
	90, 97, 122, 78, 95, 110, 48, 57, 
	65, 90, 97, 122, 69, 95, 101, 48, 
	57, 65, 90, 97, 122, 68, 73, 84, 
	95, 100, 105, 116, 48, 57, 65, 90, 
	97, 122, 68, 82, 95, 100, 114, 48, 
	57, 65, 90, 97, 122, 82, 95, 114, 
	48, 57, 65, 90, 97, 122, 68, 82, 
	95, 100, 114, 48, 57, 65, 90, 97, 
	122, 82, 95, 114, 48, 57, 65, 90, 
	97, 122, 79, 95, 111, 48, 57, 65, 
	90, 97, 122, 70, 78, 95, 102, 110, 
	48, 57, 65, 90, 97, 122, 70, 95, 
	102, 48, 57, 65, 90, 97, 122, 76, 
	79, 85, 95, 108, 111, 117, 48, 57, 
	65, 90, 97, 122, 84, 95, 116, 48, 
	57, 65, 90, 97, 122, 68, 95, 100, 
	48, 57, 65, 90, 97, 122, 85, 95, 
	117, 48, 57, 65, 90, 97, 122, 76, 
	95, 108, 48, 57, 65, 90, 97, 122, 
	69, 95, 101, 48, 57, 65, 90, 97, 
	122, 76, 95, 108, 48, 57, 65, 90, 
	97, 122, 67, 69, 79, 86, 90, 95, 
	99, 101, 111, 118, 122, 48, 57, 65, 
	89, 97, 121, 71, 95, 103, 48, 57, 
	65, 90, 97, 122, 80, 95, 112, 48, 
	57, 65, 90, 97, 122, 82, 84, 85, 
	95, 114, 116, 117, 48, 57, 65, 90, 
	97, 122, 71, 95, 103, 48, 57, 65, 
	90, 97, 122, 68, 73, 95, 100, 105, 
	48, 57, 65, 90, 97, 122, 77, 82, 
	95, 109, 114, 48, 57, 65, 90, 97, 
	122, 82, 95, 114, 48, 57, 65, 90, 
	97, 122, 77, 82, 95, 109, 114, 48, 
	57, 65, 90, 97, 122, 82, 95, 114, 
	48, 57, 65, 90, 97, 122, 84, 95, 
	116, 48, 57, 65, 90, 97, 122, 48, 
	68, 73, 95, 100, 105, 49, 57, 65, 
	90, 97, 122, 69, 79, 85, 95, 101, 
	111, 117, 48, 57, 65, 90, 97, 122, 
	80, 95, 112, 48, 57, 65, 90, 97, 
	122, 66, 83, 95, 98, 115, 48, 57, 
	65, 90, 97, 122, 76, 95, 108, 48, 
	57, 65, 90, 97, 122, 73, 95, 105, 
	48, 57, 65, 90, 97, 122, 67, 95, 
	99, 48, 57, 65, 90, 97, 122, 72, 
	95, 104, 48, 57, 65, 90, 97, 122, 
	68, 69, 76, 82, 83, 95, 100, 101, 
	108, 114, 115, 48, 57, 65, 90, 97, 
	122, 77, 95, 109, 48, 57, 65, 90, 
	97, 122, 79, 95, 111, 48, 57, 65, 
	90, 97, 122, 68, 95, 100, 48, 57, 
	65, 90, 97, 122, 69, 95, 101, 48, 
	57, 65, 90, 97, 122, 83, 84, 95, 
	115, 116, 48, 57, 65, 90, 97, 122, 
	73, 78, 95, 105, 110, 48, 57, 65, 
	90, 97, 122, 65, 67, 68, 95, 97, 
	99, 100, 48, 57, 66, 90, 98, 122, 
	65, 95, 97, 48, 57, 66, 90, 98, 
	122, 65, 67, 68, 95, 97, 99, 100, 
	48, 57, 66, 90, 98, 122, 65, 95, 
	97, 48, 57, 66, 90, 98, 122, 84, 
	95, 116, 48, 57, 65, 90, 97, 122, 
	66, 67, 69, 76, 80, 82, 85, 89, 
	95, 98, 99, 101, 108, 112, 114, 117, 
	121, 48, 57, 65, 90, 97, 122, 67, 
	95, 99, 48, 57, 65, 90, 97, 122, 
	70, 95, 102, 48, 57, 65, 90, 97, 
	122, 67, 84, 95, 99, 116, 48, 57, 
	65, 90, 97, 122, 84, 95, 116, 48, 
	57, 65, 90, 97, 122, 73, 95, 105, 
	48, 57, 65, 90, 97, 122, 79, 95, 
	111, 48, 57, 65, 90, 97, 122, 78, 
	95, 110, 48, 57, 65, 90, 97, 122, 
	85, 95, 117, 48, 57, 65, 90, 97, 
	122, 83, 95, 115, 48, 57, 65, 90, 
	97, 122, 82, 95, 114, 48, 57, 65, 
	90, 97, 122, 65, 73, 76, 80, 95, 
	97, 105, 108, 112, 48, 57, 66, 90, 
	98, 122, 65, 76, 95, 97, 108, 48, 
	57, 66, 90, 98, 122, 66, 82, 95, 
	98, 114, 48, 57, 65, 90, 97, 122, 
	69, 95, 101, 48, 57, 65, 90, 97, 
	122, 83, 95, 115, 48, 57, 65, 90, 
	97, 122, 83, 95, 115, 48, 57, 65, 
	90, 97, 122, 67, 95, 99, 48, 57, 
	65, 90, 97, 122, 65, 95, 97, 48, 
	57, 66, 90, 98, 122, 76, 95, 108, 
	48, 57, 65, 90, 97, 122, 76, 95, 
	108, 48, 57, 65, 90, 97, 122, 83, 
	95, 115, 48, 57, 65, 90, 97, 122, 
	84, 95, 116, 48, 57, 65, 90, 97, 
	122, 73, 95, 105, 48, 57, 65, 90, 
	97, 122, 79, 95, 111, 48, 57, 65, 
	90, 97, 122, 77, 78, 95, 109, 110, 
	48, 57, 65, 90, 97, 122, 65, 83, 
	95, 97, 115, 48, 57, 66, 90, 98, 
	122, 68, 95, 100, 48, 57, 65, 90, 
	97, 122, 69, 95, 101, 48, 57, 65, 
	90, 97, 122, 70, 95, 102, 48, 57, 
	65, 90, 97, 122, 73, 95, 105, 48, 
	57, 65, 90, 97, 122, 78, 95, 110, 
	48, 57, 65, 90, 97, 122, 69, 95, 
	101, 48, 57, 65, 90, 97, 122, 79, 
	80, 95, 111, 112, 48, 57, 65, 90, 
	97, 122, 82, 95, 114, 48, 57, 65, 
	90, 97, 122, 67, 95, 99, 48, 57, 
	65, 90, 97, 122, 521, 544, 607, 577, 
	602, 609, 634, 607, 560, 569, 577, 602, 
	609, 634, 39, 324, 326, 332, 334, 339, 
	351, 356, 358, 364, 366, 371, 521, 544, 
	570, 580, 582, 588, 590, 595, 607, 612, 
	614, 620, 622, 627, 304, 313, 321, 346, 
	353, 378, 560, 569, 577, 602, 609, 634, 
	351, 521, 544, 570, 607, 304, 313, 321, 
	346, 353, 378, 560, 569, 577, 602, 609, 
	634, 323, 324, 351, 355, 356, 521, 544, 
	570, 579, 580, 607, 611, 612, 304, 313, 
	321, 346, 353, 378, 560, 569, 577, 602, 
	609, 634, 39, 351, 521, 544, 570, 607, 
	304, 313, 321, 346, 353, 378, 560, 569, 
	577, 602, 609, 634, 340, 351, 372, 521, 
	544, 570, 596, 607, 628, 304, 313, 321, 
	346, 353, 378, 560, 569, 577, 602, 609, 
	634, 324, 351, 356, 521, 544, 570, 580, 
	607, 612, 304, 313, 321, 346, 353, 378, 
	560, 569, 577, 602, 609, 634, 324, 351, 
	356, 521, 544, 570, 580, 607, 612, 304, 
	313, 321, 346, 353, 378, 560, 569, 577, 
	602, 609, 634, 333, 351, 365, 521, 544, 
	570, 589, 607, 621, 304, 313, 321, 346, 
	353, 378, 560, 569, 577, 602, 609, 634, 
	336, 351, 368, 521, 544, 570, 592, 607, 
	624, 304, 313, 321, 346, 353, 378, 560, 
	569, 577, 602, 609, 634, 323, 351, 355, 
	521, 544, 570, 579, 607, 611, 304, 313, 
	321, 346, 353, 378, 560, 569, 577, 602, 
	609, 634, 39, 323, 329, 335, 351, 355, 
	361, 367, 521, 544, 570, 579, 585, 591, 
	607, 611, 617, 623, 304, 313, 321, 346, 
	353, 378, 560, 569, 577, 602, 609, 634, 
	39, 351, 521, 544, 570, 607, 304, 313, 
	321, 346, 353, 378, 560, 569, 577, 602, 
	609, 634, 334, 340, 351, 366, 372, 521, 
	544, 570, 590, 596, 607, 622, 628, 304, 
	313, 321, 346, 353, 378, 560, 569, 577, 
	602, 609, 634, 321, 351, 353, 521, 544, 
	570, 577, 607, 609, 304, 313, 322, 346, 
	354, 378, 560, 569, 578, 602, 610, 634, 
	338, 351, 370, 521, 544, 570, 594, 607, 
	626, 304, 313, 321, 346, 353, 378, 560, 
	569, 577, 602, 609, 634, 345, 351, 377, 
	521, 544, 570, 601, 607, 633, 304, 313, 
	321, 346, 353, 378, 560, 569, 577, 602, 
	609, 634, 335, 351, 367, 521, 544, 570, 
	591, 607, 623, 304, 313, 321, 346, 353, 
	378, 560, 569, 577, 602, 609, 634, 332, 
	351, 364, 521, 544, 570, 588, 607, 620, 
	304, 313, 321, 346, 353, 378, 560, 569, 
	577, 602, 609, 634, 39, 321, 323, 336, 
	351, 353, 355, 368, 521, 544, 570, 577, 
	579, 592, 607, 609, 611, 624, 304, 313, 
	322, 346, 354, 378, 560, 569, 578, 602, 
	610, 634, 332, 351, 364, 521, 544, 570, 
	588, 607, 620, 304, 313, 321, 346, 353, 
	378, 560, 569, 577, 602, 609, 634, 332, 
	351, 364, 521, 544, 570, 588, 607, 620, 
	304, 313, 321, 346, 353, 378, 560, 569, 
	577, 602, 609, 634, 351, 521, 544, 570, 
	607, 304, 313, 321, 346, 353, 378, 560, 
	569, 577, 602, 609, 634, 335, 336, 351, 
	367, 368, 521, 544, 570, 591, 592, 607, 
	623, 624, 304, 313, 321, 346, 353, 378, 
	560, 569, 577, 602, 609, 634, 346, 351, 
	378, 521, 544, 570, 602, 607, 634, 304, 
	313, 321, 345, 353, 377, 560, 569, 577, 
	601, 609, 633, 331, 351, 363, 521, 544, 
	570, 587, 607, 619, 304, 313, 321, 346, 
	353, 378, 560, 569, 577, 602, 609, 634, 
	327, 351, 359, 521, 544, 570, 583, 607, 
	615, 304, 313, 321, 346, 353, 378, 560, 
	569, 577, 602, 609, 634, 326, 351, 358, 
	521, 544, 570, 582, 607, 614, 304, 313, 
	321, 346, 353, 378, 560, 569, 577, 602, 
	609, 634, 324, 329, 332, 351, 356, 361, 
	364, 521, 544, 570, 580, 585, 588, 607, 
	612, 617, 620, 304, 313, 321, 346, 353, 
	378, 560, 569, 577, 602, 609, 634, 338, 
	351, 370, 521, 544, 570, 594, 607, 626, 
	304, 313, 321, 346, 353, 378, 560, 569, 
	577, 602, 609, 634, 338, 351, 370, 521, 
	544, 570, 594, 607, 626, 304, 313, 321, 
	346, 353, 378, 560, 569, 577, 602, 609, 
	634, 39, 321, 325, 329, 330, 339, 351, 
	353, 357, 361, 362, 371, 521, 544, 570, 
	577, 581, 585, 586, 595, 607, 609, 613, 
	617, 618, 627, 304, 313, 322, 346, 354, 
	378, 560, 569, 578, 602, 610, 634, 321, 
	351, 353, 521, 544, 570, 577, 607, 609, 
	304, 313, 322, 346, 354, 378, 560, 569, 
	578, 602, 610, 634, 39, 323, 326, 351, 
	355, 358, 521, 544, 570, 579, 582, 607, 
	611, 614, 304, 313, 321, 346, 353, 378, 
	560, 569, 577, 602, 609, 634, 322, 323, 
	327, 329, 333, 337, 339, 342, 343, 351, 
	354, 355, 359, 361, 365, 369, 371, 374, 
	375, 521, 544, 570, 578, 579, 583, 585, 
	589, 593, 595, 598, 599, 607, 610, 611, 
	615, 617, 621, 625, 627, 630, 631, 304, 
	313, 321, 346, 353, 378, 560, 569, 577, 
	602, 609, 634, 338, 351, 370, 521, 544, 
	570, 594, 607, 626, 304, 313, 321, 346, 
	353, 378, 560, 569, 577, 602, 609, 634, 
	335, 351, 367, 521, 544, 570, 591, 607, 
	623, 304, 313, 321, 346, 353, 378, 560, 
	569, 577, 602, 609, 634, 341, 351, 373, 
	521, 544, 570, 597, 607, 629, 304, 313, 
	321, 346, 353, 378, 560, 569, 577, 602, 
	609, 634, 336, 351, 368, 521, 544, 570, 
	592, 607, 624, 304, 313, 321, 346, 353, 
	378, 560, 569, 577, 602, 609, 634, 334, 
	351, 366, 521, 544, 570, 590, 607, 622, 
	304, 313, 321, 346, 353, 378, 560, 569, 
	577, 602, 609, 634, 325, 351, 357, 521, 
	544, 570, 581, 607, 613, 304, 313, 321, 
	346, 353, 378, 560, 569, 577, 602, 609, 
	634, 321, 351, 353, 521, 544, 570, 577, 
	607, 609, 304, 313, 322, 346, 354, 378, 
	560, 569, 578, 602, 610, 634, 338, 351, 
	370, 521, 544, 570, 594, 607, 626, 304, 
	313, 321, 346, 353, 378, 560, 569, 577, 
	602, 609, 634, 339, 351, 371, 521, 544, 
	570, 595, 607, 627, 304, 313, 321, 346, 
	353, 378, 560, 569, 577, 602, 609, 634, 
	334, 351, 366, 521, 544, 570, 590, 607, 
	622, 304, 313, 321, 346, 353, 378, 560, 
	569, 577, 602, 609, 634, 346, 351, 378, 
	521, 544, 570, 602, 607, 634, 304, 313, 
	321, 345, 353, 377, 560, 569, 577, 601, 
	609, 633, 46, 351, 521, 544, 570, 607, 
	304, 313, 321, 346, 353, 378, 560, 569, 
	577, 602, 609, 634, 39, 329, 332, 334, 
	344, 351, 361, 364, 366, 376, 521, 544, 
	570, 585, 588, 590, 600, 607, 617, 620, 
	622, 632, 304, 313, 321, 346, 353, 378, 
	560, 569, 577, 602, 609, 634, 338, 351, 
	370, 521, 544, 570, 594, 607, 626, 304, 
	313, 321, 346, 353, 378, 560, 569, 577, 
	602, 609, 634, 339, 351, 371, 521, 544, 
	570, 595, 607, 627, 304, 313, 321, 346, 
	353, 378, 560, 569, 577, 602, 609, 634, 
	325, 351, 357, 521, 544, 570, 581, 607, 
	613, 304, 313, 321, 346, 353, 378, 560, 
	569, 577, 602, 609, 634, 324, 351, 356, 
	521, 544, 570, 580, 607, 612, 304, 313, 
	321, 346, 353, 378, 560, 569, 577, 602, 
	609, 634, 329, 351, 361, 521, 544, 570, 
	585, 607, 617, 304, 313, 321, 346, 353, 
	378, 560, 569, 577, 602, 609, 634, 326, 
	351, 358, 521, 544, 570, 582, 607, 614, 
	304, 313, 321, 346, 353, 378, 560, 569, 
	577, 602, 609, 634, 340, 344, 351, 372, 
	376, 521, 544, 570, 596, 600, 607, 628, 
	632, 304, 313, 321, 346, 353, 378, 560, 
	569, 577, 602, 609, 634, 325, 351, 357, 
	521, 544, 570, 581, 607, 613, 304, 313, 
	321, 346, 353, 378, 560, 569, 577, 602, 
	609, 634, 338, 351, 370, 521, 544, 570, 
	594, 607, 626, 304, 313, 321, 346, 353, 
	378, 560, 569, 577, 602, 609, 634, 334, 
	351, 366, 521, 544, 570, 590, 607, 622, 
	304, 313, 321, 346, 353, 378, 560, 569, 
	577, 602, 609, 634, 39, 336, 351, 368, 
	521, 544, 570, 592, 607, 624, 304, 313, 
	321, 346, 353, 378, 560, 569, 577, 602, 
	609, 634, 336, 351, 368, 521, 544, 570, 
	592, 607, 624, 304, 313, 321, 346, 353, 
	378, 560, 569, 577, 602, 609, 634, 332, 
	351, 364, 521, 544, 570, 588, 607, 620, 
	304, 313, 321, 346, 353, 378, 560, 569, 
	577, 602, 609, 634, 335, 351, 367, 521, 
	544, 570, 591, 607, 623, 304, 313, 321, 
	346, 353, 378, 560, 569, 577, 602, 609, 
	634, 322, 351, 354, 521, 544, 570, 578, 
	607, 610, 304, 313, 321, 346, 353, 378, 
	560, 569, 577, 602, 609, 634, 321, 351, 
	353, 521, 544, 570, 577, 607, 609, 304, 
	313, 322, 346, 354, 378, 560, 569, 578, 
	602, 610, 634, 332, 351, 364, 521, 544, 
	570, 588, 607, 620, 304, 313, 321, 346, 
	353, 378, 560, 569, 577, 602, 609, 634, 
	39, 321, 332, 351, 353, 364, 521, 544, 
	570, 577, 588, 607, 609, 620, 304, 313, 
	322, 346, 354, 378, 560, 569, 578, 602, 
	610, 634, 332, 351, 364, 521, 544, 570, 
	588, 607, 620, 304, 313, 321, 346, 353, 
	378, 560, 569, 577, 602, 609, 634, 340, 
	351, 372, 521, 544, 570, 596, 607, 628, 
	304, 313, 321, 346, 353, 378, 560, 569, 
	577, 602, 609, 634, 39, 351, 521, 544, 
	570, 607, 304, 313, 321, 346, 353, 378, 
	560, 569, 577, 602, 609, 634, 324, 326, 
	329, 333, 334, 335, 336, 344, 345, 351, 
	356, 358, 361, 365, 366, 367, 368, 376, 
	377, 521, 544, 570, 580, 582, 585, 589, 
	590, 591, 592, 600, 601, 607, 612, 614, 
	617, 621, 622, 623, 624, 632, 633, 304, 
	313, 321, 346, 353, 378, 560, 569, 577, 
	602, 609, 634, 325, 351, 357, 521, 544, 
	570, 581, 607, 613, 304, 313, 321, 346, 
	353, 378, 560, 569, 577, 602, 609, 634, 
	340, 351, 372, 521, 544, 570, 596, 607, 
	628, 304, 313, 321, 346, 353, 378, 560, 
	569, 577, 602, 609, 634, 324, 334, 351, 
	356, 366, 521, 544, 570, 580, 590, 607, 
	612, 622, 304, 313, 321, 346, 353, 378, 
	560, 569, 577, 602, 609, 634, 325, 351, 
	357, 521, 544, 570, 581, 607, 613, 304, 
	313, 321, 346, 353, 378, 560, 569, 577, 
	602, 609, 634, 326, 351, 358, 521, 544, 
	570, 582, 607, 614, 304, 313, 321, 346, 
	353, 378, 560, 569, 577, 602, 609, 634, 
	324, 351, 356, 521, 544, 570, 580, 607, 
	612, 304, 313, 321, 346, 353, 378, 560, 
	569, 577, 602, 609, 634, 325, 351, 357, 
	521, 544, 570, 581, 607, 613, 304, 313, 
	321, 346, 353, 378, 560, 569, 577, 602, 
	609, 634, 326, 351, 358, 521, 544, 570, 
	582, 607, 614, 304, 313, 321, 346, 353, 
	378, 560, 569, 577, 602, 609, 634, 338, 
	351, 370, 521, 544, 570, 594, 607, 626, 
	304, 313, 321, 346, 353, 378, 560, 569, 
	577, 602, 609, 634, 304, 323, 324, 329, 
	342, 351, 355, 356, 361, 374, 521, 544, 
	560, 570, 579, 580, 585, 598, 607, 611, 
	612, 617, 630, 305, 313, 321, 346, 353, 
	378, 561, 569, 577, 602, 609, 634, 332, 
	351, 364, 521, 544, 570, 588, 607, 620, 
	304, 313, 321, 346, 353, 378, 560, 569, 
	577, 602, 609, 634, 341, 351, 373, 521, 
	544, 570, 597, 607, 629, 304, 313, 321, 
	346, 353, 378, 560, 569, 577, 602, 609, 
	634, 324, 351, 356, 521, 544, 570, 580, 
	607, 612, 304, 313, 321, 346, 353, 378, 
	560, 569, 577, 602, 609, 634, 325, 351, 
	357, 521, 544, 570, 581, 607, 613, 304, 
	313, 321, 346, 353, 378, 560, 569, 577, 
	602, 609, 634, 338, 351, 370, 521, 544, 
	570, 594, 607, 626, 304, 313, 321, 346, 
	353, 378, 560, 569, 577, 602, 609, 634, 
	338, 351, 370, 521, 544, 570, 594, 607, 
	626, 304, 313, 321, 346, 353, 378, 560, 
	569, 577, 602, 609, 634, 335, 351, 367, 
	521, 544, 570, 591, 607, 623, 304, 313, 
	321, 346, 353, 378, 560, 569, 577, 602, 
	609, 634, 331, 351, 363, 521, 544, 570, 
	587, 607, 619, 304, 313, 321, 346, 353, 
	378, 560, 569, 577, 602, 609, 634, 325, 
	351, 357, 521, 544, 570, 581, 607, 613, 
	304, 313, 321, 346, 353, 378, 560, 569, 
	577, 602, 609, 634, 325, 329, 351, 357, 
	361, 521, 544, 570, 581, 585, 607, 613, 
	617, 304, 313, 321, 346, 353, 378, 560, 
	569, 577, 602, 609, 634, 338, 339, 351, 
	370, 371, 521, 544, 570, 594, 595, 607, 
	626, 627, 304, 313, 321, 346, 353, 378, 
	560, 569, 577, 602, 609, 634, 325, 351, 
	357, 521, 544, 570, 581, 607, 613, 304, 
	313, 321, 346, 353, 378, 560, 569, 577, 
	602, 609, 634, 339, 351, 371, 521, 544, 
	570, 595, 607, 627, 304, 313, 321, 346, 
	353, 378, 560, 569, 577, 602, 609, 634, 
	325, 351, 357, 521, 544, 570, 581, 607, 
	613, 304, 313, 321, 346, 353, 378, 560, 
	569, 577, 602, 609, 634, 340, 351, 372, 
	521, 544, 570, 596, 607, 628, 304, 313, 
	321, 346, 353, 378, 560, 569, 577, 602, 
	609, 634, 328, 332, 351, 360, 364, 521, 
	544, 570, 584, 588, 607, 616, 620, 304, 
	313, 321, 346, 353, 378, 560, 569, 577, 
	602, 609, 634, 328, 332, 351, 360, 364, 
	521, 544, 570, 584, 588, 607, 616, 620, 
	304, 313, 321, 346, 353, 378, 560, 569, 
	577, 602, 609, 634, 336, 338, 351, 368, 
	370, 521, 544, 570, 592, 594, 607, 624, 
	626, 304, 313, 321, 346, 353, 378, 560, 
	569, 577, 602, 609, 634, 39, 324, 329, 
	335, 339, 346, 351, 356, 361, 367, 371, 
	378, 521, 544, 570, 580, 585, 591, 595, 
	602, 607, 612, 617, 623, 627, 634, 304, 
	313, 321, 345, 353, 377, 560, 569, 577, 
	601, 609, 633, 324, 329, 336, 351, 356, 
	361, 368, 521, 544, 570, 580, 585, 592, 
	607, 612, 617, 624, 304, 313, 321, 346, 
	353, 378, 560, 569, 577, 602, 609, 634, 
	338, 339, 351, 370, 371, 521, 544, 570, 
	594, 595, 607, 626, 627, 304, 313, 321, 
	346, 353, 378, 560, 569, 577, 602, 609, 
	634, 338, 351, 370, 521, 544, 570, 594, 
	607, 626, 304, 313, 321, 346, 353, 378, 
	560, 569, 577, 602, 609, 634, 338, 339, 
	351, 370, 371, 521, 544, 570, 594, 595, 
	607, 626, 627, 304, 313, 321, 346, 353, 
	378, 560, 569, 577, 602, 609, 634, 338, 
	351, 370, 521, 544, 570, 594, 607, 626, 
	304, 313, 321, 346, 353, 378, 560, 569, 
	577, 602, 609, 634, 334, 351, 366, 521, 
	544, 570, 590, 607, 622, 304, 313, 321, 
	346, 353, 378, 560, 569, 577, 602, 609, 
	634, 325, 351, 357, 521, 544, 570, 581, 
	607, 613, 304, 313, 321, 346, 353, 378, 
	560, 569, 577, 602, 609, 634, 324, 329, 
	340, 351, 356, 361, 372, 521, 544, 570, 
	580, 585, 596, 607, 612, 617, 628, 304, 
	313, 321, 346, 353, 378, 560, 569, 577, 
	602, 609, 634, 324, 338, 351, 356, 370, 
	521, 544, 570, 580, 594, 607, 612, 626, 
	304, 313, 321, 346, 353, 378, 560, 569, 
	577, 602, 609, 634, 338, 351, 370, 521, 
	544, 570, 594, 607, 626, 304, 313, 321, 
	346, 353, 378, 560, 569, 577, 602, 609, 
	634, 324, 338, 351, 356, 370, 521, 544, 
	570, 580, 594, 607, 612, 626, 304, 313, 
	321, 346, 353, 378, 560, 569, 577, 602, 
	609, 634, 338, 351, 370, 521, 544, 570, 
	594, 607, 626, 304, 313, 321, 346, 353, 
	378, 560, 569, 577, 602, 609, 634, 335, 
	351, 367, 521, 544, 570, 591, 607, 623, 
	304, 313, 321, 346, 353, 378, 560, 569, 
	577, 602, 609, 634, 326, 334, 351, 358, 
	366, 521, 544, 570, 582, 590, 607, 614, 
	622, 304, 313, 321, 346, 353, 378, 560, 
	569, 577, 602, 609, 634, 326, 351, 358, 
	521, 544, 570, 582, 607, 614, 304, 313, 
	321, 346, 353, 378, 560, 569, 577, 602, 
	609, 634, 332, 335, 341, 351, 364, 367, 
	373, 521, 544, 570, 588, 591, 597, 607, 
	620, 623, 629, 304, 313, 321, 346, 353, 
	378, 560, 569, 577, 602, 609, 634, 340, 
	351, 372, 521, 544, 570, 596, 607, 628, 
	304, 313, 321, 346, 353, 378, 560, 569, 
	577, 602, 609, 634, 324, 351, 356, 521, 
	544, 570, 580, 607, 612, 304, 313, 321, 
	346, 353, 378, 560, 569, 577, 602, 609, 
	634, 341, 351, 373, 521, 544, 570, 597, 
	607, 629, 304, 313, 321, 346, 353, 378, 
	560, 569, 577, 602, 609, 634, 332, 351, 
	364, 521, 544, 570, 588, 607, 620, 304, 
	313, 321, 346, 353, 378, 560, 569, 577, 
	602, 609, 634, 325, 351, 357, 521, 544, 
	570, 581, 607, 613, 304, 313, 321, 346, 
	353, 378, 560, 569, 577, 602, 609, 634, 
	332, 351, 364, 521, 544, 570, 588, 607, 
	620, 304, 313, 321, 346, 353, 378, 560, 
	569, 577, 602, 609, 634, 323, 325, 335, 
	342, 346, 351, 355, 357, 367, 374, 378, 
	521, 544, 570, 579, 581, 591, 598, 602, 
	607, 611, 613, 623, 630, 634, 304, 313, 
	321, 345, 353, 377, 560, 569, 577, 601, 
	609, 633, 327, 351, 359, 521, 544, 570, 
	583, 607, 615, 304, 313, 321, 346, 353, 
	378, 560, 569, 577, 602, 609, 634, 336, 
	351, 368, 521, 544, 570, 592, 607, 624, 
	304, 313, 321, 346, 353, 378, 560, 569, 
	577, 602, 609, 634, 338, 340, 341, 351, 
	370, 372, 373, 521, 544, 570, 594, 596, 
	597, 607, 626, 628, 629, 304, 313, 321, 
	346, 353, 378, 560, 569, 577, 602, 609, 
	634, 327, 351, 359, 521, 544, 570, 583, 
	607, 615, 304, 313, 321, 346, 353, 378, 
	560, 569, 577, 602, 609, 634, 324, 329, 
	351, 356, 361, 521, 544, 570, 580, 585, 
	607, 612, 617, 304, 313, 321, 346, 353, 
	378, 560, 569, 577, 602, 609, 634, 333, 
	338, 351, 365, 370, 521, 544, 570, 589, 
	594, 607, 621, 626, 304, 313, 321, 346, 
	353, 378, 560, 569, 577, 602, 609, 634, 
	338, 351, 370, 521, 544, 570, 594, 607, 
	626, 304, 313, 321, 346, 353, 378, 560, 
	569, 577, 602, 609, 634, 333, 338, 351, 
	365, 370, 521, 544, 570, 589, 594, 607, 
	621, 626, 304, 313, 321, 346, 353, 378, 
	560, 569, 577, 602, 609, 634, 338, 351, 
	370, 521, 544, 570, 594, 607, 626, 304, 
	313, 321, 346, 353, 378, 560, 569, 577, 
	602, 609, 634, 340, 351, 372, 521, 544, 
	570, 596, 607, 628, 304, 313, 321, 346, 
	353, 378, 560, 569, 577, 602, 609, 634, 
	304, 324, 329, 351, 356, 361, 521, 544, 
	560, 570, 580, 585, 607, 612, 617, 305, 
	313, 321, 346, 353, 378, 561, 569, 577, 
	602, 609, 634, 325, 335, 341, 351, 357, 
	367, 373, 521, 544, 570, 581, 591, 597, 
	607, 613, 623, 629, 304, 313, 321, 346, 
	353, 378, 560, 569, 577, 602, 609, 634, 
	336, 351, 368, 521, 544, 570, 592, 607, 
	624, 304, 313, 321, 346, 353, 378, 560, 
	569, 577, 602, 609, 634, 322, 339, 351, 
	354, 371, 521, 544, 570, 578, 595, 607, 
	610, 627, 304, 313, 321, 346, 353, 378, 
	560, 569, 577, 602, 609, 634, 332, 351, 
	364, 521, 544, 570, 588, 607, 620, 304, 
	313, 321, 346, 353, 378, 560, 569, 577, 
	602, 609, 634, 329, 351, 361, 521, 544, 
	570, 585, 607, 617, 304, 313, 321, 346, 
	353, 378, 560, 569, 577, 602, 609, 634, 
	323, 351, 355, 521, 544, 570, 579, 607, 
	611, 304, 313, 321, 346, 353, 378, 560, 
	569, 577, 602, 609, 634, 328, 351, 360, 
	521, 544, 570, 584, 607, 616, 304, 313, 
	321, 346, 353, 378, 560, 569, 577, 602, 
	609, 634, 324, 325, 332, 338, 339, 351, 
	356, 357, 364, 370, 371, 521, 544, 570, 
	580, 581, 588, 594, 595, 607, 612, 613, 
	620, 626, 627, 304, 313, 321, 346, 353, 
	378, 560, 569, 577, 602, 609, 634, 333, 
	351, 365, 521, 544, 570, 589, 607, 621, 
	304, 313, 321, 346, 353, 378, 560, 569, 
	577, 602, 609, 634, 335, 351, 367, 521, 
	544, 570, 591, 607, 623, 304, 313, 321, 
	346, 353, 378, 560, 569, 577, 602, 609, 
	634, 324, 351, 356, 521, 544, 570, 580, 
	607, 612, 304, 313, 321, 346, 353, 378, 
	560, 569, 577, 602, 609, 634, 325, 351, 
	357, 521, 544, 570, 581, 607, 613, 304, 
	313, 321, 346, 353, 378, 560, 569, 577, 
	602, 609, 634, 339, 340, 351, 371, 372, 
	521, 544, 570, 595, 596, 607, 627, 628, 
	304, 313, 321, 346, 353, 378, 560, 569, 
	577, 602, 609, 634, 329, 334, 351, 361, 
	366, 521, 544, 570, 585, 590, 607, 617, 
	622, 304, 313, 321, 346, 353, 378, 560, 
	569, 577, 602, 609, 634, 321, 323, 324, 
	351, 353, 355, 356, 521, 544, 570, 577, 
	579, 580, 607, 609, 611, 612, 304, 313, 
	322, 346, 354, 378, 560, 569, 578, 602, 
	610, 634, 321, 351, 353, 521, 544, 570, 
	577, 607, 609, 304, 313, 322, 346, 354, 
	378, 560, 569, 578, 602, 610, 634, 321, 
	323, 324, 351, 353, 355, 356, 521, 544, 
	570, 577, 579, 580, 607, 609, 611, 612, 
	304, 313, 322, 346, 354, 378, 560, 569, 
	578, 602, 610, 634, 321, 351, 353, 521, 
	544, 570, 577, 607, 609, 304, 313, 322, 
	346, 354, 378, 560, 569, 578, 602, 610, 
	634, 340, 351, 372, 521, 544, 570, 596, 
	607, 628, 304, 313, 321, 346, 353, 378, 
	560, 569, 577, 602, 609, 634, 322, 323, 
	325, 332, 336, 338, 341, 345, 351, 354, 
	355, 357, 364, 368, 370, 373, 377, 521, 
	544, 570, 578, 579, 581, 588, 592, 594, 
	597, 601, 607, 610, 611, 613, 620, 624, 
	626, 629, 633, 304, 313, 321, 346, 353, 
	378, 560, 569, 577, 602, 609, 634, 323, 
	351, 355, 521, 544, 570, 579, 607, 611, 
	304, 313, 321, 346, 353, 378, 560, 569, 
	577, 602, 609, 634, 326, 351, 358, 521, 
	544, 570, 582, 607, 614, 304, 313, 321, 
	346, 353, 378, 560, 569, 577, 602, 609, 
	634, 323, 340, 351, 355, 372, 521, 544, 
	570, 579, 596, 607, 611, 628, 304, 313, 
	321, 346, 353, 378, 560, 569, 577, 602, 
	609, 634, 340, 351, 372, 521, 544, 570, 
	596, 607, 628, 304, 313, 321, 346, 353, 
	378, 560, 569, 577, 602, 609, 634, 329, 
	351, 361, 521, 544, 570, 585, 607, 617, 
	304, 313, 321, 346, 353, 378, 560, 569, 
	577, 602, 609, 634, 335, 351, 367, 521, 
	544, 570, 591, 607, 623, 304, 313, 321, 
	346, 353, 378, 560, 569, 577, 602, 609, 
	634, 334, 351, 366, 521, 544, 570, 590, 
	607, 622, 304, 313, 321, 346, 353, 378, 
	560, 569, 577, 602, 609, 634, 341, 351, 
	373, 521, 544, 570, 597, 607, 629, 304, 
	313, 321, 346, 353, 378, 560, 569, 577, 
	602, 609, 634, 339, 351, 371, 521, 544, 
	570, 595, 607, 627, 304, 313, 321, 346, 
	353, 378, 560, 569, 577, 602, 609, 634, 
	338, 351, 370, 521, 544, 570, 594, 607, 
	626, 304, 313, 321, 346, 353, 378, 560, 
	569, 577, 602, 609, 634, 321, 329, 332, 
	336, 351, 353, 361, 364, 368, 521, 544, 
	570, 577, 585, 588, 592, 607, 609, 617, 
	620, 624, 304, 313, 322, 346, 354, 378, 
	560, 569, 578, 602, 610, 634, 321, 332, 
	351, 353, 364, 521, 544, 570, 577, 588, 
	607, 609, 620, 304, 313, 322, 346, 354, 
	378, 560, 569, 578, 602, 610, 634, 322, 
	338, 351, 354, 370, 521, 544, 570, 578, 
	594, 607, 610, 626, 304, 313, 321, 346, 
	353, 378, 560, 569, 577, 602, 609, 634, 
	325, 351, 357, 521, 544, 570, 581, 607, 
	613, 304, 313, 321, 346, 353, 378, 560, 
	569, 577, 602, 609, 634, 339, 351, 371, 
	521, 544, 570, 595, 607, 627, 304, 313, 
	321, 346, 353, 378, 560, 569, 577, 602, 
	609, 634, 339, 351, 371, 521, 544, 570, 
	595, 607, 627, 304, 313, 321, 346, 353, 
	378, 560, 569, 577, 602, 609, 634, 323, 
	351, 355, 521, 544, 570, 579, 607, 611, 
	304, 313, 321, 346, 353, 378, 560, 569, 
	577, 602, 609, 634, 321, 351, 353, 521, 
	544, 570, 577, 607, 609, 304, 313, 322, 
	346, 354, 378, 560, 569, 578, 602, 610, 
	634, 332, 351, 364, 521, 544, 570, 588, 
	607, 620, 304, 313, 321, 346, 353, 378, 
	560, 569, 577, 602, 609, 634, 332, 351, 
	364, 521, 544, 570, 588, 607, 620, 304, 
	313, 321, 346, 353, 378, 560, 569, 577, 
	602, 609, 634, 339, 351, 371, 521, 544, 
	570, 595, 607, 627, 304, 313, 321, 346, 
	353, 378, 560, 569, 577, 602, 609, 634, 
	340, 351, 372, 521, 544, 570, 596, 607, 
	628, 304, 313, 321, 346, 353, 378, 560, 
	569, 577, 602, 609, 634, 329, 351, 361, 
	521, 544, 570, 585, 607, 617, 304, 313, 
	321, 346, 353, 378, 560, 569, 577, 602, 
	609, 634, 335, 351, 367, 521, 544, 570, 
	591, 607, 623, 304, 313, 321, 346, 353, 
	378, 560, 569, 577, 602, 609, 634, 333, 
	334, 351, 365, 366, 521, 544, 570, 589, 
	590, 607, 621, 622, 304, 313, 321, 346, 
	353, 378, 560, 569, 577, 602, 609, 634, 
	321, 339, 351, 353, 371, 521, 544, 570, 
	577, 595, 607, 609, 627, 304, 313, 322, 
	346, 354, 378, 560, 569, 578, 602, 610, 
	634, 324, 351, 356, 521, 544, 570, 580, 
	607, 612, 304, 313, 321, 346, 353, 378, 
	560, 569, 577, 602, 609, 634, 325, 351, 
	357, 521, 544, 570, 581, 607, 613, 304, 
	313, 321, 346, 353, 378, 560, 569, 577, 
	602, 609, 634, 326, 351, 358, 521, 544, 
	570, 582, 607, 614, 304, 313, 321, 346, 
	353, 378, 560, 569, 577, 602, 609, 634, 
	329, 351, 361, 521, 544, 570, 585, 607, 
	617, 304, 313, 321, 346, 353, 378, 560, 
	569, 577, 602, 609, 634, 334, 351, 366, 
	521, 544, 570, 590, 607, 622, 304, 313, 
	321, 346, 353, 378, 560, 569, 577, 602, 
	609, 634, 325, 351, 357, 521, 544, 570, 
	581, 607, 613, 304, 313, 321, 346, 353, 
	378, 560, 569, 577, 602, 609, 634, 335, 
	336, 351, 367, 368, 521, 544, 570, 591, 
	592, 607, 623, 624, 304, 313, 321, 346, 
	353, 378, 560, 569, 577, 602, 609, 634, 
	338, 351, 370, 521, 544, 570, 594, 607, 
	626, 304, 313, 321, 346, 353, 378, 560, 
	569, 577, 602, 609, 634, 323, 351, 355, 
	521, 544, 570, 579, 607, 611, 304, 313, 
	321, 346, 353, 378, 560, 569, 577, 602, 
	609, 634, 0
};
static const char _lexer_single_lengths[] = {
	0, 2, 3, 14, 2, 5, 5, 2, 
	5, 2, 5, 4, 5, 5, 2, 5, 
	2, 0, 8, 3, 3, 126, 1, 0, 
	1, 0, 1, 14, 1, 6, 4, 2, 
	2, 2, 0, 1, 3, 1, 2, 1, 
	12, 1, 5, 2, 3, 3, 3, 3, 
	3, 3, 8, 2, 5, 3, 3, 3, 
	3, 3, 8, 3, 3, 1, 5, 3, 
	3, 3, 3, 7, 3, 3, 12, 3, 
	6, 19, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 2, 10, 3, 
	3, 3, 3, 3, 3, 5, 3, 3, 
	3, 4, 3, 3, 3, 3, 3, 3, 
	6, 3, 3, 2, 19, 3, 3, 5, 
	3, 3, 3, 3, 3, 3, 10, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	5, 5, 3, 3, 3, 3, 5, 5, 
	5, 12, 7, 5, 3, 5, 3, 3, 
	3, 7, 5, 3, 5, 3, 3, 5, 
	3, 7, 3, 3, 3, 3, 3, 3, 
	11, 3, 3, 7, 3, 5, 5, 3, 
	5, 3, 3, 6, 7, 3, 5, 3, 
	3, 3, 3, 11, 3, 3, 3, 3, 
	5, 5, 7, 3, 7, 3, 3, 17, 
	3, 3, 5, 3, 3, 3, 3, 3, 
	3, 3, 9, 5, 5, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	5, 5, 3, 3, 3, 3, 3, 3, 
	5, 3, 3, 3, 1, 26, 5, 13, 
	6, 9, 9, 9, 9, 9, 9, 18, 
	6, 13, 9, 9, 9, 9, 9, 18, 
	9, 9, 5, 13, 9, 9, 9, 9, 
	17, 9, 9, 26, 9, 14, 41, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 6, 22, 9, 9, 9, 9, 
	9, 9, 13, 9, 9, 9, 10, 9, 
	9, 9, 9, 9, 9, 14, 9, 9, 
	6, 41, 9, 9, 13, 9, 9, 9, 
	9, 9, 9, 23, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 13, 13, 9, 
	9, 9, 9, 13, 13, 13, 26, 17, 
	13, 9, 13, 9, 9, 9, 17, 13, 
	9, 13, 9, 9, 13, 9, 17, 9, 
	9, 9, 9, 9, 9, 25, 9, 9, 
	17, 9, 13, 13, 9, 13, 9, 9, 
	15, 17, 9, 13, 9, 9, 9, 9, 
	25, 9, 9, 9, 9, 13, 13, 17, 
	9, 17, 9, 9, 37, 9, 9, 13, 
	9, 9, 9, 9, 9, 9, 9, 21, 
	13, 13, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 13, 13, 9, 
	9, 9, 9, 9, 9, 13, 9, 9
};
static const char _lexer_range_lengths[] = {
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	3, 3, 0, 2, 0, 6, 0, 3, 
	1, 1, 0, 0, 0, 4, 4, 3, 
	3, 4, 3, 0, 0, 0, 0, 0, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 2, 3, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6
};
static const short _lexer_index_offsets[] = {
	0, 0, 3, 7, 22, 25, 31, 37, 
	40, 46, 49, 55, 60, 66, 72, 75, 
	81, 87, 91, 100, 106, 110, 243, 245, 
	249, 252, 254, 256, 271, 273, 284, 293, 
	299, 305, 312, 316, 318, 322, 324, 327, 
	329, 345, 350, 359, 365, 372, 379, 386, 
	393, 400, 407, 419, 425, 434, 441, 448, 
	455, 462, 469, 481, 488, 495, 500, 509, 
	516, 523, 530, 537, 548, 555, 562, 578, 
	585, 595, 618, 625, 632, 639, 646, 653, 
	660, 667, 674, 681, 688, 695, 701, 715, 
	722, 729, 736, 743, 750, 757, 766, 773, 
	780, 787, 795, 802, 809, 816, 823, 830, 
	837, 847, 854, 861, 867, 890, 897, 904, 
	913, 920, 927, 934, 941, 948, 955, 969, 
	976, 983, 990, 997, 1004, 1011, 1018, 1025, 
	1032, 1041, 1050, 1057, 1064, 1071, 1078, 1087, 
	1096, 1105, 1121, 1132, 1141, 1148, 1157, 1164, 
	1171, 1178, 1189, 1198, 1205, 1214, 1221, 1228, 
	1237, 1244, 1255, 1262, 1269, 1276, 1283, 1290, 
	1297, 1312, 1319, 1326, 1337, 1344, 1353, 1362, 
	1369, 1378, 1385, 1392, 1402, 1413, 1420, 1429, 
	1436, 1443, 1450, 1457, 1472, 1479, 1486, 1493, 
	1500, 1509, 1518, 1529, 1536, 1547, 1554, 1561, 
	1582, 1589, 1596, 1605, 1612, 1619, 1626, 1633, 
	1640, 1647, 1654, 1667, 1676, 1685, 1692, 1699, 
	1706, 1713, 1720, 1727, 1734, 1741, 1748, 1755, 
	1762, 1771, 1780, 1787, 1794, 1801, 1808, 1815, 
	1822, 1831, 1838, 1845, 1851, 1856, 1889, 1901, 
	1921, 1934, 1950, 1966, 1982, 1998, 2014, 2030, 
	2055, 2068, 2088, 2104, 2120, 2136, 2152, 2168, 
	2193, 2209, 2225, 2237, 2257, 2273, 2289, 2305, 
	2321, 2345, 2361, 2377, 2410, 2426, 2447, 2495, 
	2511, 2527, 2543, 2559, 2575, 2591, 2607, 2623, 
	2639, 2655, 2671, 2684, 2713, 2729, 2745, 2761, 
	2777, 2793, 2809, 2829, 2845, 2861, 2877, 2894, 
	2910, 2926, 2942, 2958, 2974, 2990, 3011, 3027, 
	3043, 3056, 3104, 3120, 3136, 3156, 3172, 3188, 
	3204, 3220, 3236, 3252, 3282, 3298, 3314, 3330, 
	3346, 3362, 3378, 3394, 3410, 3426, 3446, 3466, 
	3482, 3498, 3514, 3530, 3550, 3570, 3590, 3623, 
	3647, 3667, 3683, 3703, 3719, 3735, 3751, 3775, 
	3795, 3811, 3831, 3847, 3863, 3883, 3899, 3923, 
	3939, 3955, 3971, 3987, 4003, 4019, 4051, 4067, 
	4083, 4107, 4123, 4143, 4163, 4179, 4199, 4215, 
	4231, 4253, 4277, 4293, 4313, 4329, 4345, 4361, 
	4377, 4409, 4425, 4441, 4457, 4473, 4493, 4513, 
	4537, 4553, 4577, 4593, 4609, 4653, 4669, 4685, 
	4705, 4721, 4737, 4753, 4769, 4785, 4801, 4817, 
	4845, 4865, 4885, 4901, 4917, 4933, 4949, 4965, 
	4981, 4997, 5013, 5029, 5045, 5061, 5081, 5101, 
	5117, 5133, 5149, 5165, 5181, 5197, 5217, 5233
};
static const short _lexer_indicies[] = {
	1, 1, 0, 2, 1, 1, 0, 4, 
	4, 5, 6, 7, 8, 9, 10, 5, 
	6, 7, 8, 9, 10, 3, 11, 11, 
	3, 11, 11, 12, 12, 12, 3, 6, 
	6, 13, 13, 13, 3, 14, 14, 3, 
	14, 14, 15, 15, 15, 3, 16, 16, 
	3, 16, 16, 17, 17, 17, 3, 18, 
	19, 18, 19, 3, 18, 18, 20, 20, 
	20, 3, 19, 19, 21, 21, 21, 3, 
	22, 22, 3, 22, 22, 23, 23, 23, 
	3, 25, 25, 24, 24, 24, 0, 27, 
	27, 27, 26, 29, 30, 31, 32, 29, 
	30, 31, 32, 28, 34, 34, 35, 35, 
	35, 33, 36, 36, 37, 0, 39, 40, 
	41, 42, 43, 44, 45, 46, 47, 48, 
	49, 50, 51, 52, 53, 55, 56, 58, 
	59, 60, 61, 62, 63, 64, 65, 66, 
	67, 68, 66, 69, 70, 71, 72, 38, 
	73, 74, 75, 76, 77, 78, 79, 80, 
	81, 82, 83, 85, 86, 87, 88, 89, 
	90, 91, 92, 93, 94, 95, 96, 84, 
	74, 75, 76, 77, 78, 79, 80, 81, 
	82, 83, 85, 86, 87, 88, 89, 90, 
	91, 92, 93, 94, 95, 96, 97, 98, 
	99, 100, 101, 102, 103, 104, 105, 106, 
	107, 109, 110, 111, 112, 113, 114, 115, 
	116, 117, 118, 119, 120, 108, 98, 99, 
	100, 101, 102, 103, 104, 105, 106, 107, 
	109, 110, 111, 112, 113, 114, 115, 116, 
	117, 118, 119, 120, 38, 57, 84, 84, 
	108, 108, 54, 122, 121, 123, 123, 123, 
	0, 124, 125, 0, 125, 126, 128, 127, 
	4, 4, 5, 6, 7, 8, 9, 10, 
	5, 6, 7, 8, 9, 10, 129, 131, 
	130, 133, 25, 134, 133, 25, 134, 56, 
	57, 24, 24, 132, 135, 25, 135, 25, 
	56, 57, 24, 24, 132, 25, 25, 57, 
	24, 24, 132, 25, 25, 24, 24, 24, 
	136, 25, 25, 137, 24, 24, 24, 0, 
	27, 27, 27, 138, 139, 59, 141, 142, 
	143, 140, 145, 144, 147, 148, 146, 150, 
	149, 152, 153, 154, 155, 156, 157, 84, 
	153, 154, 155, 156, 157, 84, 84, 84, 
	151, 84, 84, 84, 84, 0, 159, 160, 
	84, 159, 160, 84, 84, 84, 158, 162, 
	84, 84, 84, 84, 161, 163, 84, 163, 
	84, 84, 84, 158, 164, 84, 164, 84, 
	84, 84, 158, 165, 84, 165, 84, 84, 
	84, 158, 166, 84, 166, 84, 84, 84, 
	158, 167, 84, 167, 84, 84, 84, 158, 
	168, 84, 168, 84, 84, 84, 158, 170, 
	171, 172, 173, 84, 171, 172, 173, 84, 
	84, 84, 169, 175, 84, 84, 84, 84, 
	174, 176, 177, 84, 176, 177, 84, 84, 
	84, 158, 178, 84, 178, 84, 84, 84, 
	158, 179, 84, 179, 84, 84, 84, 158, 
	180, 84, 180, 84, 84, 84, 158, 181, 
	84, 181, 84, 84, 84, 158, 182, 84, 
	182, 84, 84, 84, 158, 184, 185, 186, 
	187, 84, 185, 186, 187, 84, 84, 84, 
	183, 188, 84, 188, 84, 84, 84, 158, 
	189, 84, 189, 84, 84, 84, 158, 191, 
	84, 84, 84, 190, 192, 193, 84, 192, 
	193, 84, 84, 84, 158, 194, 84, 194, 
	84, 84, 84, 158, 195, 84, 195, 84, 
	84, 84, 158, 196, 84, 196, 84, 84, 
	84, 158, 197, 84, 197, 84, 84, 84, 
	158, 199, 200, 201, 84, 199, 200, 201, 
	84, 84, 84, 198, 203, 84, 203, 84, 
	84, 84, 202, 205, 84, 205, 84, 84, 
	84, 204, 207, 208, 209, 210, 211, 212, 
	84, 208, 209, 210, 211, 212, 84, 84, 
	84, 206, 213, 84, 213, 84, 84, 84, 
	158, 215, 216, 217, 84, 216, 217, 84, 
	84, 84, 214, 218, 219, 220, 221, 222, 
	223, 224, 225, 226, 84, 218, 219, 220, 
	221, 222, 223, 224, 225, 226, 84, 84, 
	84, 158, 227, 84, 227, 84, 84, 84, 
	158, 228, 84, 228, 84, 84, 84, 158, 
	229, 84, 229, 84, 84, 84, 158, 230, 
	84, 230, 84, 84, 84, 158, 231, 84, 
	231, 84, 84, 84, 158, 232, 84, 232, 
	84, 84, 84, 158, 233, 84, 233, 84, 
	84, 84, 158, 234, 84, 234, 84, 84, 
	84, 158, 235, 84, 235, 84, 84, 84, 
	158, 236, 84, 236, 84, 84, 84, 158, 
	237, 84, 237, 84, 84, 84, 158, 238, 
	84, 84, 84, 84, 158, 240, 241, 242, 
	243, 244, 84, 241, 242, 243, 244, 84, 
	84, 84, 239, 246, 84, 246, 84, 84, 
	84, 245, 247, 84, 247, 84, 84, 84, 
	158, 248, 84, 248, 84, 84, 84, 158, 
	249, 84, 249, 84, 84, 84, 158, 250, 
	84, 250, 84, 84, 84, 158, 251, 84, 
	251, 84, 84, 84, 158, 253, 254, 84, 
	253, 254, 84, 84, 84, 252, 255, 84, 
	255, 84, 84, 84, 158, 256, 84, 256, 
	84, 84, 84, 158, 257, 84, 257, 84, 
	84, 84, 158, 259, 260, 84, 260, 84, 
	84, 84, 258, 261, 84, 261, 84, 84, 
	84, 158, 262, 84, 262, 84, 84, 84, 
	158, 263, 84, 263, 84, 84, 84, 158, 
	264, 84, 264, 84, 84, 84, 158, 265, 
	84, 265, 84, 84, 84, 158, 266, 84, 
	266, 84, 84, 84, 158, 268, 269, 270, 
	84, 269, 270, 84, 84, 84, 267, 271, 
	84, 271, 84, 84, 84, 158, 272, 84, 
	272, 84, 84, 84, 158, 274, 84, 84, 
	84, 84, 273, 276, 277, 278, 279, 280, 
	281, 282, 283, 284, 84, 276, 277, 278, 
	279, 280, 281, 282, 283, 284, 84, 84, 
	84, 275, 285, 84, 285, 84, 84, 84, 
	158, 286, 84, 286, 84, 84, 84, 158, 
	288, 289, 84, 288, 289, 84, 84, 84, 
	287, 290, 84, 290, 84, 84, 84, 158, 
	291, 84, 291, 84, 84, 84, 158, 292, 
	84, 292, 84, 84, 84, 158, 293, 84, 
	293, 84, 84, 84, 158, 294, 84, 294, 
	84, 84, 84, 158, 295, 84, 295, 84, 
	84, 84, 158, 297, 298, 299, 300, 301, 
	84, 298, 299, 300, 301, 84, 84, 84, 
	296, 303, 84, 303, 84, 84, 84, 302, 
	304, 84, 304, 84, 84, 84, 158, 305, 
	84, 305, 84, 84, 84, 158, 306, 84, 
	306, 84, 84, 84, 158, 308, 84, 308, 
	84, 84, 84, 307, 310, 84, 310, 84, 
	84, 84, 309, 311, 84, 311, 84, 84, 
	84, 158, 312, 84, 312, 84, 84, 84, 
	158, 313, 84, 313, 84, 84, 84, 158, 
	314, 315, 84, 314, 315, 84, 84, 84, 
	158, 317, 318, 84, 317, 318, 84, 84, 
	84, 316, 319, 84, 319, 84, 84, 84, 
	158, 320, 84, 320, 84, 84, 84, 158, 
	321, 84, 321, 84, 84, 84, 158, 322, 
	84, 322, 84, 84, 84, 158, 324, 325, 
	84, 324, 325, 84, 84, 84, 323, 327, 
	328, 84, 327, 328, 84, 84, 84, 326, 
	329, 330, 84, 329, 330, 84, 84, 84, 
	158, 332, 333, 334, 335, 336, 337, 84, 
	333, 334, 335, 336, 337, 84, 84, 84, 
	331, 339, 340, 341, 84, 339, 340, 341, 
	84, 84, 84, 338, 343, 344, 84, 343, 
	344, 84, 84, 84, 342, 345, 84, 345, 
	84, 84, 84, 158, 347, 348, 84, 347, 
	348, 84, 84, 84, 346, 349, 84, 349, 
	84, 84, 84, 158, 350, 84, 350, 84, 
	84, 84, 158, 351, 84, 351, 84, 84, 
	84, 158, 352, 353, 354, 84, 352, 353, 
	354, 84, 84, 84, 158, 355, 356, 84, 
	355, 356, 84, 84, 84, 158, 357, 84, 
	357, 84, 84, 84, 158, 358, 359, 84, 
	358, 359, 84, 84, 84, 158, 360, 84, 
	360, 84, 84, 84, 158, 361, 84, 361, 
	84, 84, 84, 158, 362, 363, 84, 362, 
	363, 84, 84, 84, 158, 364, 84, 364, 
	84, 84, 84, 158, 366, 367, 368, 84, 
	366, 367, 368, 84, 84, 84, 365, 369, 
	84, 369, 84, 84, 84, 158, 370, 84, 
	370, 84, 84, 84, 158, 371, 84, 371, 
	84, 84, 84, 158, 372, 84, 372, 84, 
	84, 84, 158, 373, 84, 373, 84, 84, 
	84, 158, 374, 84, 374, 84, 84, 84, 
	158, 375, 376, 377, 378, 379, 84, 375, 
	376, 377, 378, 379, 84, 84, 84, 158, 
	380, 84, 380, 84, 84, 84, 158, 381, 
	84, 381, 84, 84, 84, 158, 382, 383, 
	384, 84, 382, 383, 384, 84, 84, 84, 
	158, 386, 84, 386, 84, 84, 84, 385, 
	387, 388, 84, 387, 388, 84, 84, 84, 
	158, 389, 390, 84, 389, 390, 84, 84, 
	84, 158, 392, 84, 392, 84, 84, 84, 
	391, 393, 394, 84, 393, 394, 84, 84, 
	84, 158, 396, 84, 396, 84, 84, 84, 
	395, 397, 84, 397, 84, 84, 84, 158, 
	399, 400, 401, 84, 400, 401, 84, 84, 
	84, 398, 403, 404, 405, 84, 403, 404, 
	405, 84, 84, 84, 402, 407, 84, 407, 
	84, 84, 84, 406, 408, 409, 84, 408, 
	409, 84, 84, 84, 158, 410, 84, 410, 
	84, 84, 84, 158, 411, 84, 411, 84, 
	84, 84, 158, 412, 84, 412, 84, 84, 
	84, 158, 413, 84, 413, 84, 84, 84, 
	158, 415, 416, 417, 418, 419, 84, 415, 
	416, 417, 418, 419, 84, 84, 84, 414, 
	420, 84, 420, 84, 84, 84, 158, 421, 
	84, 421, 84, 84, 84, 158, 422, 84, 
	422, 84, 84, 84, 158, 423, 84, 423, 
	84, 84, 84, 158, 424, 425, 84, 424, 
	425, 84, 84, 84, 158, 427, 428, 84, 
	427, 428, 84, 84, 84, 426, 430, 431, 
	432, 84, 430, 431, 432, 84, 84, 84, 
	429, 434, 84, 434, 84, 84, 84, 433, 
	436, 437, 438, 84, 436, 437, 438, 84, 
	84, 84, 435, 440, 84, 440, 84, 84, 
	84, 439, 441, 84, 441, 84, 84, 84, 
	158, 442, 443, 444, 445, 446, 447, 448, 
	449, 84, 442, 443, 444, 445, 446, 447, 
	448, 449, 84, 84, 84, 158, 450, 84, 
	450, 84, 84, 84, 158, 451, 84, 451, 
	84, 84, 84, 158, 452, 453, 84, 452, 
	453, 84, 84, 84, 158, 454, 84, 454, 
	84, 84, 84, 158, 455, 84, 455, 84, 
	84, 84, 158, 456, 84, 456, 84, 84, 
	84, 158, 457, 84, 457, 84, 84, 84, 
	158, 459, 84, 459, 84, 84, 84, 458, 
	460, 84, 460, 84, 84, 84, 158, 461, 
	84, 461, 84, 84, 84, 158, 462, 463, 
	464, 465, 84, 462, 463, 464, 465, 84, 
	84, 84, 158, 466, 467, 84, 466, 467, 
	84, 84, 84, 158, 469, 470, 84, 469, 
	470, 84, 84, 84, 468, 471, 84, 471, 
	84, 84, 84, 158, 472, 84, 472, 84, 
	84, 84, 158, 473, 84, 473, 84, 84, 
	84, 158, 474, 84, 474, 84, 84, 84, 
	158, 475, 84, 475, 84, 84, 84, 158, 
	476, 84, 476, 84, 84, 84, 158, 477, 
	84, 477, 84, 84, 84, 158, 478, 84, 
	478, 84, 84, 84, 158, 479, 84, 479, 
	84, 84, 84, 158, 481, 84, 481, 84, 
	84, 84, 480, 482, 84, 482, 84, 84, 
	84, 158, 483, 484, 84, 483, 484, 84, 
	84, 84, 158, 485, 486, 84, 485, 486, 
	84, 84, 84, 158, 487, 84, 487, 84, 
	84, 84, 158, 488, 84, 488, 84, 84, 
	84, 158, 489, 84, 489, 84, 84, 84, 
	158, 490, 84, 490, 84, 84, 84, 158, 
	491, 84, 491, 84, 84, 84, 158, 492, 
	84, 492, 84, 84, 84, 158, 493, 494, 
	84, 493, 494, 84, 84, 84, 158, 495, 
	84, 495, 84, 84, 84, 158, 496, 84, 
	496, 84, 84, 84, 158, 34, 34, 35, 
	35, 35, 497, 35, 35, 35, 35, 498, 
	152, 153, 154, 155, 156, 157, 84, 153, 
	154, 155, 156, 157, 36, 36, 37, 499, 
	500, 501, 502, 503, 108, 499, 500, 501, 
	502, 503, 84, 84, 84, 108, 108, 108, 
	151, 84, 36, 36, 37, 108, 84, 84, 
	84, 108, 108, 108, 0, 159, 160, 84, 
	159, 160, 36, 36, 37, 504, 505, 108, 
	504, 505, 84, 84, 84, 108, 108, 108, 
	158, 162, 84, 36, 36, 37, 108, 84, 
	84, 84, 108, 108, 108, 161, 163, 84, 
	163, 36, 36, 37, 506, 108, 506, 84, 
	84, 84, 108, 108, 108, 158, 164, 84, 
	164, 36, 36, 37, 507, 108, 507, 84, 
	84, 84, 108, 108, 108, 158, 165, 84, 
	165, 36, 36, 37, 508, 108, 508, 84, 
	84, 84, 108, 108, 108, 158, 166, 84, 
	166, 36, 36, 37, 509, 108, 509, 84, 
	84, 84, 108, 108, 108, 158, 167, 84, 
	167, 36, 36, 37, 510, 108, 510, 84, 
	84, 84, 108, 108, 108, 158, 168, 84, 
	168, 36, 36, 37, 511, 108, 511, 84, 
	84, 84, 108, 108, 108, 158, 170, 171, 
	172, 173, 84, 171, 172, 173, 36, 36, 
	37, 512, 513, 514, 108, 512, 513, 514, 
	84, 84, 84, 108, 108, 108, 169, 175, 
	84, 36, 36, 37, 108, 84, 84, 84, 
	108, 108, 108, 174, 176, 177, 84, 176, 
	177, 36, 36, 37, 515, 516, 108, 515, 
	516, 84, 84, 84, 108, 108, 108, 158, 
	178, 84, 178, 36, 36, 37, 517, 108, 
	517, 84, 84, 84, 108, 108, 108, 158, 
	179, 84, 179, 36, 36, 37, 518, 108, 
	518, 84, 84, 84, 108, 108, 108, 158, 
	180, 84, 180, 36, 36, 37, 519, 108, 
	519, 84, 84, 84, 108, 108, 108, 158, 
	181, 84, 181, 36, 36, 37, 520, 108, 
	520, 84, 84, 84, 108, 108, 108, 158, 
	182, 84, 182, 36, 36, 37, 521, 108, 
	521, 84, 84, 84, 108, 108, 108, 158, 
	184, 185, 186, 187, 84, 185, 186, 187, 
	36, 36, 37, 522, 523, 524, 108, 522, 
	523, 524, 84, 84, 84, 108, 108, 108, 
	183, 188, 84, 188, 36, 36, 37, 525, 
	108, 525, 84, 84, 84, 108, 108, 108, 
	158, 189, 84, 189, 36, 36, 37, 526, 
	108, 526, 84, 84, 84, 108, 108, 108, 
	158, 191, 36, 36, 37, 527, 84, 84, 
	84, 108, 108, 108, 190, 192, 193, 84, 
	192, 193, 36, 36, 37, 528, 529, 108, 
	528, 529, 84, 84, 84, 108, 108, 108, 
	158, 194, 84, 194, 36, 36, 37, 530, 
	108, 530, 84, 84, 84, 108, 108, 108, 
	158, 195, 84, 195, 36, 36, 37, 531, 
	108, 531, 84, 84, 84, 108, 108, 108, 
	158, 196, 84, 196, 36, 36, 37, 532, 
	108, 532, 84, 84, 84, 108, 108, 108, 
	158, 197, 84, 197, 36, 36, 37, 533, 
	108, 533, 84, 84, 84, 108, 108, 108, 
	158, 199, 200, 201, 84, 199, 200, 201, 
	36, 36, 37, 534, 535, 536, 108, 534, 
	535, 536, 84, 84, 84, 108, 108, 108, 
	198, 203, 84, 203, 36, 36, 37, 537, 
	108, 537, 84, 84, 84, 108, 108, 108, 
	202, 205, 84, 205, 36, 36, 37, 538, 
	108, 538, 84, 84, 84, 108, 108, 108, 
	204, 207, 208, 209, 210, 211, 212, 84, 
	208, 209, 210, 211, 212, 36, 36, 37, 
	539, 540, 541, 542, 543, 108, 539, 540, 
	541, 542, 543, 84, 84, 84, 108, 108, 
	108, 206, 213, 84, 213, 36, 36, 37, 
	544, 108, 544, 84, 84, 84, 108, 108, 
	108, 158, 215, 216, 217, 84, 216, 217, 
	36, 36, 37, 545, 546, 108, 545, 546, 
	84, 84, 84, 108, 108, 108, 214, 218, 
	219, 220, 221, 222, 223, 224, 225, 226, 
	84, 218, 219, 220, 221, 222, 223, 224, 
	225, 226, 36, 36, 37, 547, 548, 549, 
	550, 551, 552, 553, 554, 555, 108, 547, 
	548, 549, 550, 551, 552, 553, 554, 555, 
	84, 84, 84, 108, 108, 108, 158, 227, 
	84, 227, 36, 36, 37, 556, 108, 556, 
	84, 84, 84, 108, 108, 108, 158, 228, 
	84, 228, 36, 36, 37, 557, 108, 557, 
	84, 84, 84, 108, 108, 108, 158, 229, 
	84, 229, 36, 36, 37, 558, 108, 558, 
	84, 84, 84, 108, 108, 108, 158, 230, 
	84, 230, 36, 36, 37, 559, 108, 559, 
	84, 84, 84, 108, 108, 108, 158, 231, 
	84, 231, 36, 36, 37, 560, 108, 560, 
	84, 84, 84, 108, 108, 108, 158, 232, 
	84, 232, 36, 36, 37, 561, 108, 561, 
	84, 84, 84, 108, 108, 108, 158, 233, 
	84, 233, 36, 36, 37, 562, 108, 562, 
	84, 84, 84, 108, 108, 108, 158, 234, 
	84, 234, 36, 36, 37, 563, 108, 563, 
	84, 84, 84, 108, 108, 108, 158, 235, 
	84, 235, 36, 36, 37, 564, 108, 564, 
	84, 84, 84, 108, 108, 108, 158, 236, 
	84, 236, 36, 36, 37, 565, 108, 565, 
	84, 84, 84, 108, 108, 108, 158, 237, 
	84, 237, 36, 36, 37, 566, 108, 566, 
	84, 84, 84, 108, 108, 108, 158, 238, 
	84, 36, 36, 37, 108, 84, 84, 84, 
	108, 108, 108, 158, 240, 241, 242, 243, 
	244, 84, 241, 242, 243, 244, 36, 36, 
	37, 567, 568, 569, 570, 108, 567, 568, 
	569, 570, 84, 84, 84, 108, 108, 108, 
	239, 246, 84, 246, 36, 36, 37, 571, 
	108, 571, 84, 84, 84, 108, 108, 108, 
	245, 247, 84, 247, 36, 36, 37, 572, 
	108, 572, 84, 84, 84, 108, 108, 108, 
	158, 248, 84, 248, 36, 36, 37, 573, 
	108, 573, 84, 84, 84, 108, 108, 108, 
	158, 249, 84, 249, 36, 36, 37, 574, 
	108, 574, 84, 84, 84, 108, 108, 108, 
	158, 250, 84, 250, 36, 36, 37, 575, 
	108, 575, 84, 84, 84, 108, 108, 108, 
	158, 251, 84, 251, 36, 36, 37, 576, 
	108, 576, 84, 84, 84, 108, 108, 108, 
	158, 253, 254, 84, 253, 254, 36, 36, 
	37, 577, 578, 108, 577, 578, 84, 84, 
	84, 108, 108, 108, 252, 255, 84, 255, 
	36, 36, 37, 579, 108, 579, 84, 84, 
	84, 108, 108, 108, 158, 256, 84, 256, 
	36, 36, 37, 580, 108, 580, 84, 84, 
	84, 108, 108, 108, 158, 257, 84, 257, 
	36, 36, 37, 581, 108, 581, 84, 84, 
	84, 108, 108, 108, 158, 259, 260, 84, 
	260, 36, 36, 37, 582, 108, 582, 84, 
	84, 84, 108, 108, 108, 258, 261, 84, 
	261, 36, 36, 37, 583, 108, 583, 84, 
	84, 84, 108, 108, 108, 158, 262, 84, 
	262, 36, 36, 37, 584, 108, 584, 84, 
	84, 84, 108, 108, 108, 158, 263, 84, 
	263, 36, 36, 37, 585, 108, 585, 84, 
	84, 84, 108, 108, 108, 158, 264, 84, 
	264, 36, 36, 37, 586, 108, 586, 84, 
	84, 84, 108, 108, 108, 158, 265, 84, 
	265, 36, 36, 37, 587, 108, 587, 84, 
	84, 84, 108, 108, 108, 158, 266, 84, 
	266, 36, 36, 37, 588, 108, 588, 84, 
	84, 84, 108, 108, 108, 158, 268, 269, 
	270, 84, 269, 270, 36, 36, 37, 589, 
	590, 108, 589, 590, 84, 84, 84, 108, 
	108, 108, 267, 271, 84, 271, 36, 36, 
	37, 591, 108, 591, 84, 84, 84, 108, 
	108, 108, 158, 272, 84, 272, 36, 36, 
	37, 592, 108, 592, 84, 84, 84, 108, 
	108, 108, 158, 274, 84, 36, 36, 37, 
	108, 84, 84, 84, 108, 108, 108, 273, 
	276, 277, 278, 279, 280, 281, 282, 283, 
	284, 84, 276, 277, 278, 279, 280, 281, 
	282, 283, 284, 36, 36, 37, 593, 594, 
	595, 596, 597, 598, 599, 600, 601, 108, 
	593, 594, 595, 596, 597, 598, 599, 600, 
	601, 84, 84, 84, 108, 108, 108, 275, 
	285, 84, 285, 36, 36, 37, 602, 108, 
	602, 84, 84, 84, 108, 108, 108, 158, 
	286, 84, 286, 36, 36, 37, 603, 108, 
	603, 84, 84, 84, 108, 108, 108, 158, 
	288, 289, 84, 288, 289, 36, 36, 37, 
	604, 605, 108, 604, 605, 84, 84, 84, 
	108, 108, 108, 287, 290, 84, 290, 36, 
	36, 37, 606, 108, 606, 84, 84, 84, 
	108, 108, 108, 158, 291, 84, 291, 36, 
	36, 37, 607, 108, 607, 84, 84, 84, 
	108, 108, 108, 158, 292, 84, 292, 36, 
	36, 37, 608, 108, 608, 84, 84, 84, 
	108, 108, 108, 158, 293, 84, 293, 36, 
	36, 37, 609, 108, 609, 84, 84, 84, 
	108, 108, 108, 158, 294, 84, 294, 36, 
	36, 37, 610, 108, 610, 84, 84, 84, 
	108, 108, 108, 158, 295, 84, 295, 36, 
	36, 37, 611, 108, 611, 84, 84, 84, 
	108, 108, 108, 158, 297, 298, 299, 300, 
	301, 84, 298, 299, 300, 301, 36, 36, 
	612, 37, 613, 614, 615, 616, 108, 613, 
	614, 615, 616, 84, 84, 84, 108, 108, 
	108, 296, 303, 84, 303, 36, 36, 37, 
	617, 108, 617, 84, 84, 84, 108, 108, 
	108, 302, 304, 84, 304, 36, 36, 37, 
	618, 108, 618, 84, 84, 84, 108, 108, 
	108, 158, 305, 84, 305, 36, 36, 37, 
	619, 108, 619, 84, 84, 84, 108, 108, 
	108, 158, 306, 84, 306, 36, 36, 37, 
	620, 108, 620, 84, 84, 84, 108, 108, 
	108, 158, 308, 84, 308, 36, 36, 37, 
	621, 108, 621, 84, 84, 84, 108, 108, 
	108, 307, 310, 84, 310, 36, 36, 37, 
	622, 108, 622, 84, 84, 84, 108, 108, 
	108, 309, 311, 84, 311, 36, 36, 37, 
	623, 108, 623, 84, 84, 84, 108, 108, 
	108, 158, 312, 84, 312, 36, 36, 37, 
	624, 108, 624, 84, 84, 84, 108, 108, 
	108, 158, 313, 84, 313, 36, 36, 37, 
	625, 108, 625, 84, 84, 84, 108, 108, 
	108, 158, 314, 315, 84, 314, 315, 36, 
	36, 37, 626, 627, 108, 626, 627, 84, 
	84, 84, 108, 108, 108, 158, 317, 318, 
	84, 317, 318, 36, 36, 37, 628, 629, 
	108, 628, 629, 84, 84, 84, 108, 108, 
	108, 316, 319, 84, 319, 36, 36, 37, 
	630, 108, 630, 84, 84, 84, 108, 108, 
	108, 158, 320, 84, 320, 36, 36, 37, 
	631, 108, 631, 84, 84, 84, 108, 108, 
	108, 158, 321, 84, 321, 36, 36, 37, 
	632, 108, 632, 84, 84, 84, 108, 108, 
	108, 158, 322, 84, 322, 36, 36, 37, 
	633, 108, 633, 84, 84, 84, 108, 108, 
	108, 158, 324, 325, 84, 324, 325, 36, 
	36, 37, 634, 635, 108, 634, 635, 84, 
	84, 84, 108, 108, 108, 323, 327, 328, 
	84, 327, 328, 36, 36, 37, 636, 637, 
	108, 636, 637, 84, 84, 84, 108, 108, 
	108, 326, 329, 330, 84, 329, 330, 36, 
	36, 37, 638, 639, 108, 638, 639, 84, 
	84, 84, 108, 108, 108, 158, 332, 333, 
	334, 335, 336, 337, 84, 333, 334, 335, 
	336, 337, 36, 36, 37, 640, 641, 642, 
	643, 644, 108, 640, 641, 642, 643, 644, 
	84, 84, 84, 108, 108, 108, 331, 339, 
	340, 341, 84, 339, 340, 341, 36, 36, 
	37, 645, 646, 647, 108, 645, 646, 647, 
	84, 84, 84, 108, 108, 108, 338, 343, 
	344, 84, 343, 344, 36, 36, 37, 648, 
	649, 108, 648, 649, 84, 84, 84, 108, 
	108, 108, 342, 345, 84, 345, 36, 36, 
	37, 650, 108, 650, 84, 84, 84, 108, 
	108, 108, 158, 347, 348, 84, 347, 348, 
	36, 36, 37, 651, 652, 108, 651, 652, 
	84, 84, 84, 108, 108, 108, 346, 349, 
	84, 349, 36, 36, 37, 653, 108, 653, 
	84, 84, 84, 108, 108, 108, 158, 350, 
	84, 350, 36, 36, 37, 654, 108, 654, 
	84, 84, 84, 108, 108, 108, 158, 351, 
	84, 351, 36, 36, 37, 655, 108, 655, 
	84, 84, 84, 108, 108, 108, 158, 352, 
	353, 354, 84, 352, 353, 354, 36, 36, 
	37, 656, 657, 658, 108, 656, 657, 658, 
	84, 84, 84, 108, 108, 108, 158, 355, 
	356, 84, 355, 356, 36, 36, 37, 659, 
	660, 108, 659, 660, 84, 84, 84, 108, 
	108, 108, 158, 357, 84, 357, 36, 36, 
	37, 661, 108, 661, 84, 84, 84, 108, 
	108, 108, 158, 358, 359, 84, 358, 359, 
	36, 36, 37, 662, 663, 108, 662, 663, 
	84, 84, 84, 108, 108, 108, 158, 360, 
	84, 360, 36, 36, 37, 664, 108, 664, 
	84, 84, 84, 108, 108, 108, 158, 361, 
	84, 361, 36, 36, 37, 665, 108, 665, 
	84, 84, 84, 108, 108, 108, 158, 362, 
	363, 84, 362, 363, 36, 36, 37, 666, 
	667, 108, 666, 667, 84, 84, 84, 108, 
	108, 108, 158, 364, 84, 364, 36, 36, 
	37, 668, 108, 668, 84, 84, 84, 108, 
	108, 108, 158, 366, 367, 368, 84, 366, 
	367, 368, 36, 36, 37, 669, 670, 671, 
	108, 669, 670, 671, 84, 84, 84, 108, 
	108, 108, 365, 369, 84, 369, 36, 36, 
	37, 672, 108, 672, 84, 84, 84, 108, 
	108, 108, 158, 370, 84, 370, 36, 36, 
	37, 673, 108, 673, 84, 84, 84, 108, 
	108, 108, 158, 371, 84, 371, 36, 36, 
	37, 674, 108, 674, 84, 84, 84, 108, 
	108, 108, 158, 372, 84, 372, 36, 36, 
	37, 675, 108, 675, 84, 84, 84, 108, 
	108, 108, 158, 373, 84, 373, 36, 36, 
	37, 676, 108, 676, 84, 84, 84, 108, 
	108, 108, 158, 374, 84, 374, 36, 36, 
	37, 677, 108, 677, 84, 84, 84, 108, 
	108, 108, 158, 375, 376, 377, 378, 379, 
	84, 375, 376, 377, 378, 379, 36, 36, 
	37, 678, 679, 680, 681, 682, 108, 678, 
	679, 680, 681, 682, 84, 84, 84, 108, 
	108, 108, 158, 380, 84, 380, 36, 36, 
	37, 683, 108, 683, 84, 84, 84, 108, 
	108, 108, 158, 381, 84, 381, 36, 36, 
	37, 684, 108, 684, 84, 84, 84, 108, 
	108, 108, 158, 382, 383, 384, 84, 382, 
	383, 384, 36, 36, 37, 685, 686, 687, 
	108, 685, 686, 687, 84, 84, 84, 108, 
	108, 108, 158, 386, 84, 386, 36, 36, 
	37, 688, 108, 688, 84, 84, 84, 108, 
	108, 108, 385, 387, 388, 84, 387, 388, 
	36, 36, 37, 689, 690, 108, 689, 690, 
	84, 84, 84, 108, 108, 108, 158, 389, 
	390, 84, 389, 390, 36, 36, 37, 691, 
	692, 108, 691, 692, 84, 84, 84, 108, 
	108, 108, 158, 392, 84, 392, 36, 36, 
	37, 693, 108, 693, 84, 84, 84, 108, 
	108, 108, 391, 393, 394, 84, 393, 394, 
	36, 36, 37, 694, 695, 108, 694, 695, 
	84, 84, 84, 108, 108, 108, 158, 396, 
	84, 396, 36, 36, 37, 696, 108, 696, 
	84, 84, 84, 108, 108, 108, 395, 397, 
	84, 397, 36, 36, 37, 697, 108, 697, 
	84, 84, 84, 108, 108, 108, 158, 399, 
	400, 401, 84, 400, 401, 36, 36, 698, 
	37, 699, 700, 108, 699, 700, 84, 84, 
	84, 108, 108, 108, 398, 403, 404, 405, 
	84, 403, 404, 405, 36, 36, 37, 701, 
	702, 703, 108, 701, 702, 703, 84, 84, 
	84, 108, 108, 108, 402, 407, 84, 407, 
	36, 36, 37, 704, 108, 704, 84, 84, 
	84, 108, 108, 108, 406, 408, 409, 84, 
	408, 409, 36, 36, 37, 705, 706, 108, 
	705, 706, 84, 84, 84, 108, 108, 108, 
	158, 410, 84, 410, 36, 36, 37, 707, 
	108, 707, 84, 84, 84, 108, 108, 108, 
	158, 411, 84, 411, 36, 36, 37, 708, 
	108, 708, 84, 84, 84, 108, 108, 108, 
	158, 412, 84, 412, 36, 36, 37, 709, 
	108, 709, 84, 84, 84, 108, 108, 108, 
	158, 413, 84, 413, 36, 36, 37, 710, 
	108, 710, 84, 84, 84, 108, 108, 108, 
	158, 415, 416, 417, 418, 419, 84, 415, 
	416, 417, 418, 419, 36, 36, 37, 711, 
	712, 713, 714, 715, 108, 711, 712, 713, 
	714, 715, 84, 84, 84, 108, 108, 108, 
	414, 420, 84, 420, 36, 36, 37, 716, 
	108, 716, 84, 84, 84, 108, 108, 108, 
	158, 421, 84, 421, 36, 36, 37, 717, 
	108, 717, 84, 84, 84, 108, 108, 108, 
	158, 422, 84, 422, 36, 36, 37, 718, 
	108, 718, 84, 84, 84, 108, 108, 108, 
	158, 423, 84, 423, 36, 36, 37, 719, 
	108, 719, 84, 84, 84, 108, 108, 108, 
	158, 424, 425, 84, 424, 425, 36, 36, 
	37, 720, 721, 108, 720, 721, 84, 84, 
	84, 108, 108, 108, 158, 427, 428, 84, 
	427, 428, 36, 36, 37, 722, 723, 108, 
	722, 723, 84, 84, 84, 108, 108, 108, 
	426, 430, 431, 432, 84, 430, 431, 432, 
	36, 36, 37, 724, 725, 726, 108, 724, 
	725, 726, 84, 84, 84, 108, 108, 108, 
	429, 434, 84, 434, 36, 36, 37, 727, 
	108, 727, 84, 84, 84, 108, 108, 108, 
	433, 436, 437, 438, 84, 436, 437, 438, 
	36, 36, 37, 728, 729, 730, 108, 728, 
	729, 730, 84, 84, 84, 108, 108, 108, 
	435, 440, 84, 440, 36, 36, 37, 731, 
	108, 731, 84, 84, 84, 108, 108, 108, 
	439, 441, 84, 441, 36, 36, 37, 732, 
	108, 732, 84, 84, 84, 108, 108, 108, 
	158, 442, 443, 444, 445, 446, 447, 448, 
	449, 84, 442, 443, 444, 445, 446, 447, 
	448, 449, 36, 36, 37, 733, 734, 735, 
	736, 737, 738, 739, 740, 108, 733, 734, 
	735, 736, 737, 738, 739, 740, 84, 84, 
	84, 108, 108, 108, 158, 450, 84, 450, 
	36, 36, 37, 741, 108, 741, 84, 84, 
	84, 108, 108, 108, 158, 451, 84, 451, 
	36, 36, 37, 742, 108, 742, 84, 84, 
	84, 108, 108, 108, 158, 452, 453, 84, 
	452, 453, 36, 36, 37, 743, 744, 108, 
	743, 744, 84, 84, 84, 108, 108, 108, 
	158, 454, 84, 454, 36, 36, 37, 745, 
	108, 745, 84, 84, 84, 108, 108, 108, 
	158, 455, 84, 455, 36, 36, 37, 746, 
	108, 746, 84, 84, 84, 108, 108, 108, 
	158, 456, 84, 456, 36, 36, 37, 747, 
	108, 747, 84, 84, 84, 108, 108, 108, 
	158, 457, 84, 457, 36, 36, 37, 748, 
	108, 748, 84, 84, 84, 108, 108, 108, 
	158, 459, 84, 459, 36, 36, 37, 749, 
	108, 749, 84, 84, 84, 108, 108, 108, 
	458, 460, 84, 460, 36, 36, 37, 750, 
	108, 750, 84, 84, 84, 108, 108, 108, 
	158, 461, 84, 461, 36, 36, 37, 751, 
	108, 751, 84, 84, 84, 108, 108, 108, 
	158, 462, 463, 464, 465, 84, 462, 463, 
	464, 465, 36, 36, 37, 752, 753, 754, 
	755, 108, 752, 753, 754, 755, 84, 84, 
	84, 108, 108, 108, 158, 466, 467, 84, 
	466, 467, 36, 36, 37, 756, 757, 108, 
	756, 757, 84, 84, 84, 108, 108, 108, 
	158, 469, 470, 84, 469, 470, 36, 36, 
	37, 758, 759, 108, 758, 759, 84, 84, 
	84, 108, 108, 108, 468, 471, 84, 471, 
	36, 36, 37, 760, 108, 760, 84, 84, 
	84, 108, 108, 108, 158, 472, 84, 472, 
	36, 36, 37, 761, 108, 761, 84, 84, 
	84, 108, 108, 108, 158, 473, 84, 473, 
	36, 36, 37, 762, 108, 762, 84, 84, 
	84, 108, 108, 108, 158, 474, 84, 474, 
	36, 36, 37, 763, 108, 763, 84, 84, 
	84, 108, 108, 108, 158, 475, 84, 475, 
	36, 36, 37, 764, 108, 764, 84, 84, 
	84, 108, 108, 108, 158, 476, 84, 476, 
	36, 36, 37, 765, 108, 765, 84, 84, 
	84, 108, 108, 108, 158, 477, 84, 477, 
	36, 36, 37, 766, 108, 766, 84, 84, 
	84, 108, 108, 108, 158, 478, 84, 478, 
	36, 36, 37, 767, 108, 767, 84, 84, 
	84, 108, 108, 108, 158, 479, 84, 479, 
	36, 36, 37, 768, 108, 768, 84, 84, 
	84, 108, 108, 108, 158, 481, 84, 481, 
	36, 36, 37, 769, 108, 769, 84, 84, 
	84, 108, 108, 108, 480, 482, 84, 482, 
	36, 36, 37, 770, 108, 770, 84, 84, 
	84, 108, 108, 108, 158, 483, 484, 84, 
	483, 484, 36, 36, 37, 771, 772, 108, 
	771, 772, 84, 84, 84, 108, 108, 108, 
	158, 485, 486, 84, 485, 486, 36, 36, 
	37, 773, 774, 108, 773, 774, 84, 84, 
	84, 108, 108, 108, 158, 487, 84, 487, 
	36, 36, 37, 775, 108, 775, 84, 84, 
	84, 108, 108, 108, 158, 488, 84, 488, 
	36, 36, 37, 776, 108, 776, 84, 84, 
	84, 108, 108, 108, 158, 489, 84, 489, 
	36, 36, 37, 777, 108, 777, 84, 84, 
	84, 108, 108, 108, 158, 490, 84, 490, 
	36, 36, 37, 778, 108, 778, 84, 84, 
	84, 108, 108, 108, 158, 491, 84, 491, 
	36, 36, 37, 779, 108, 779, 84, 84, 
	84, 108, 108, 108, 158, 492, 84, 492, 
	36, 36, 37, 780, 108, 780, 84, 84, 
	84, 108, 108, 108, 158, 493, 494, 84, 
	493, 494, 36, 36, 37, 781, 782, 108, 
	781, 782, 84, 84, 84, 108, 108, 108, 
	158, 495, 84, 495, 36, 36, 37, 783, 
	108, 783, 84, 84, 84, 108, 108, 108, 
	158, 496, 84, 496, 36, 36, 37, 784, 
	108, 784, 84, 84, 84, 108, 108, 108, 
	158, 0
};
static const short _lexer_trans_targs[] = {
	21, 2, 21, 21, 3, 4, 6, 7, 
	9, 11, 14, 5, 21, 21, 8, 21, 
	10, 21, 12, 13, 21, 21, 15, 21, 
	16, 21, 21, 34, 21, 21, 21, 21, 
	21, 21, 19, 228, 20, 21, 21, 21, 
	22, 21, 21, 23, 24, 26, 21, 27, 
	21, 28, 21, 21, 21, 21, 0, 29, 
	30, 31, 21, 35, 36, 37, 38, 21, 
	24, 21, 21, 21, 21, 21, 39, 21, 
	21, 21, 40, 50, 58, 70, 86, 97, 
	99, 104, 108, 136, 41, 137, 153, 160, 
	163, 172, 179, 191, 212, 216, 41, 224, 
	41, 227, 229, 239, 247, 259, 275, 286, 
	288, 293, 297, 325, 230, 326, 342, 349, 
	352, 361, 368, 380, 401, 405, 230, 413, 
	230, 21, 21, 23, 1, 25, 21, 21, 
	21, 21, 21, 21, 21, 33, 17, 32, 
	21, 33, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 42, 43, 44, 46, 47, 21, 41, 
	41, 21, 21, 45, 41, 41, 48, 49, 
	41, 21, 21, 51, 52, 56, 21, 21, 
	53, 41, 54, 55, 41, 57, 41, 21, 
	21, 59, 66, 67, 60, 61, 21, 62, 
	63, 64, 41, 65, 41, 41, 21, 68, 
	69, 41, 21, 41, 21, 41, 21, 21, 
	71, 72, 41, 83, 85, 41, 21, 21, 
	41, 73, 41, 41, 74, 78, 41, 41, 
	41, 80, 41, 75, 76, 77, 41, 79, 
	41, 81, 82, 41, 84, 41, 18, 21, 
	21, 87, 88, 90, 93, 21, 41, 89, 
	41, 91, 92, 41, 21, 94, 41, 95, 
	96, 41, 21, 21, 98, 41, 100, 101, 
	102, 103, 41, 21, 21, 105, 107, 106, 
	41, 21, 21, 21, 109, 111, 117, 41, 
	118, 128, 129, 134, 135, 110, 41, 21, 
	112, 114, 113, 41, 115, 116, 41, 41, 
	21, 41, 119, 123, 124, 125, 21, 120, 
	121, 122, 41, 21, 41, 21, 41, 126, 
	127, 41, 41, 41, 21, 130, 132, 131, 
	41, 133, 41, 21, 41, 41, 21, 41, 
	41, 41, 41, 21, 21, 138, 143, 41, 
	145, 41, 21, 139, 141, 41, 21, 41, 
	140, 41, 21, 41, 142, 41, 144, 41, 
	146, 148, 150, 147, 41, 41, 149, 41, 
	41, 151, 152, 41, 41, 21, 154, 155, 
	159, 41, 156, 157, 158, 41, 41, 41, 
	161, 162, 41, 41, 41, 41, 164, 165, 
	170, 21, 41, 166, 168, 167, 41, 21, 
	41, 169, 41, 21, 41, 171, 21, 41, 
	41, 41, 21, 41, 173, 174, 21, 41, 
	175, 178, 176, 177, 41, 41, 21, 180, 
	184, 186, 188, 190, 181, 182, 183, 41, 
	41, 185, 21, 41, 41, 21, 41, 187, 
	41, 21, 41, 21, 41, 189, 41, 21, 
	41, 41, 192, 193, 194, 202, 41, 203, 
	204, 207, 41, 41, 195, 199, 196, 197, 
	198, 41, 21, 200, 201, 41, 41, 41, 
	41, 41, 41, 41, 21, 41, 205, 206, 
	41, 208, 209, 210, 211, 41, 213, 214, 
	21, 215, 41, 217, 218, 41, 41, 219, 
	220, 221, 222, 223, 41, 225, 226, 41, 
	41, 21, 21, 231, 232, 233, 235, 236, 
	230, 230, 234, 230, 230, 237, 238, 230, 
	240, 241, 245, 242, 230, 243, 244, 230, 
	246, 230, 248, 255, 256, 249, 250, 251, 
	252, 253, 230, 254, 230, 230, 257, 258, 
	230, 230, 230, 260, 261, 230, 272, 274, 
	230, 230, 262, 230, 230, 263, 267, 230, 
	230, 230, 269, 230, 264, 265, 266, 230, 
	268, 230, 270, 271, 230, 273, 230, 276, 
	277, 279, 282, 230, 278, 230, 280, 281, 
	230, 283, 230, 284, 285, 230, 287, 230, 
	289, 290, 291, 292, 230, 294, 296, 295, 
	230, 298, 300, 306, 230, 307, 317, 318, 
	323, 324, 299, 230, 301, 303, 302, 230, 
	304, 305, 230, 230, 230, 308, 312, 313, 
	314, 309, 310, 311, 230, 230, 230, 315, 
	316, 230, 230, 230, 319, 321, 320, 230, 
	322, 230, 230, 230, 230, 230, 230, 230, 
	327, 332, 230, 334, 230, 328, 330, 230, 
	230, 329, 230, 230, 331, 230, 333, 230, 
	335, 337, 339, 336, 230, 230, 338, 230, 
	230, 340, 341, 230, 230, 343, 344, 348, 
	230, 345, 346, 347, 230, 230, 230, 350, 
	351, 230, 230, 230, 230, 353, 354, 359, 
	230, 355, 357, 356, 230, 230, 358, 230, 
	230, 360, 230, 230, 230, 230, 362, 363, 
	230, 364, 367, 365, 366, 230, 230, 369, 
	373, 375, 377, 379, 370, 371, 372, 230, 
	230, 374, 230, 230, 230, 376, 230, 230, 
	230, 378, 230, 230, 230, 381, 382, 383, 
	391, 230, 392, 393, 396, 230, 230, 384, 
	388, 385, 386, 387, 230, 389, 390, 230, 
	230, 230, 230, 230, 230, 230, 230, 394, 
	395, 230, 397, 398, 399, 400, 230, 402, 
	403, 404, 230, 406, 407, 230, 230, 408, 
	409, 410, 411, 412, 230, 414, 415, 230, 
	230
};
static const short _lexer_trans_actions[] = {
	251, 0, 111, 243, 0, 0, 0, 0, 
	0, 0, 0, 0, 83, 95, 0, 85, 
	0, 91, 0, 0, 87, 89, 0, 93, 
	0, 109, 249, 0, 247, 97, 101, 103, 
	99, 245, 0, 0, 0, 107, 105, 7, 
	0, 115, 9, 775, 256, 0, 113, 5, 
	13, 0, 15, 17, 19, 23, 0, 763, 
	763, 763, 25, 0, 0, 0, 0, 41, 
	775, 43, 117, 45, 47, 51, 0, 55, 
	57, 21, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 760, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 292, 0, 
	262, 5, 322, 295, 268, 298, 301, 325, 
	760, 304, 328, 760, 760, 313, 280, 760, 
	760, 277, 334, 760, 760, 760, 292, 760, 
	262, 119, 33, 766, 0, 0, 241, 121, 
	11, 123, 125, 49, 235, 769, 0, 769, 
	239, 772, 237, 229, 129, 27, 29, 31, 
	131, 35, 133, 39, 37, 135, 53, 155, 
	71, 0, 0, 0, 0, 0, 231, 448, 
	451, 173, 81, 0, 685, 454, 0, 0, 
	253, 145, 59, 0, 0, 0, 163, 75, 
	0, 457, 0, 0, 370, 0, 688, 137, 
	61, 0, 0, 0, 0, 0, 181, 0, 
	0, 0, 748, 0, 751, 463, 183, 0, 
	0, 481, 185, 472, 187, 478, 147, 63, 
	0, 0, 490, 0, 5, 484, 165, 77, 
	487, 0, 373, 376, 0, 0, 388, 385, 
	391, 0, 397, 0, 0, 0, 379, 0, 
	382, 0, 0, 394, 0, 493, 0, 149, 
	65, 0, 0, 0, 0, 189, 337, 0, 
	400, 0, 0, 403, 191, 0, 502, 0, 
	0, 406, 157, 73, 0, 754, 0, 0, 
	0, 0, 409, 151, 67, 0, 0, 0, 
	505, 167, 79, 159, 0, 0, 0, 508, 
	0, 0, 0, 0, 0, 0, 691, 179, 
	0, 0, 0, 415, 0, 0, 418, 331, 
	193, 655, 0, 0, 0, 0, 195, 0, 
	0, 0, 421, 197, 520, 199, 526, 0, 
	0, 757, 694, 697, 175, 0, 0, 0, 
	700, 0, 703, 169, 307, 316, 171, 310, 
	319, 529, 532, 153, 69, 0, 0, 286, 
	0, 283, 201, 0, 0, 712, 203, 541, 
	0, 706, 205, 547, 0, 709, 0, 424, 
	0, 0, 0, 0, 715, 721, 0, 718, 
	724, 0, 0, 430, 427, 143, 0, 0, 
	0, 658, 0, 0, 0, 433, 727, 265, 
	0, 0, 289, 259, 550, 553, 0, 0, 
	0, 207, 436, 0, 0, 0, 559, 223, 
	664, 0, 562, 225, 670, 0, 209, 673, 
	568, 571, 141, 274, 0, 0, 139, 574, 
	0, 0, 0, 0, 439, 577, 161, 0, 
	0, 0, 0, 0, 0, 0, 0, 730, 
	580, 0, 211, 586, 589, 213, 595, 0, 
	604, 215, 601, 217, 610, 0, 619, 219, 
	616, 622, 0, 0, 0, 0, 358, 0, 
	0, 0, 625, 628, 0, 0, 0, 0, 
	0, 442, 221, 0, 0, 733, 634, 640, 
	637, 676, 643, 646, 177, 649, 0, 0, 
	736, 0, 0, 0, 0, 739, 0, 0, 
	227, 0, 682, 0, 0, 742, 745, 0, 
	0, 0, 0, 0, 445, 0, 0, 652, 
	367, 127, 233, 760, 355, 760, 760, 760, 
	448, 451, 760, 685, 454, 760, 760, 253, 
	340, 760, 760, 760, 457, 760, 760, 370, 
	760, 688, 760, 760, 466, 760, 460, 760, 
	760, 760, 748, 760, 751, 463, 469, 475, 
	481, 472, 478, 760, 343, 490, 760, 760, 
	484, 487, 760, 373, 376, 760, 760, 388, 
	385, 391, 760, 397, 760, 760, 760, 379, 
	760, 382, 760, 760, 394, 760, 493, 496, 
	760, 760, 499, 337, 760, 400, 760, 760, 
	403, 760, 502, 760, 760, 406, 760, 754, 
	760, 760, 760, 760, 409, 760, 346, 760, 
	505, 760, 412, 760, 508, 511, 760, 361, 
	349, 352, 760, 691, 760, 760, 760, 415, 
	760, 760, 418, 331, 655, 514, 517, 523, 
	760, 760, 760, 760, 421, 520, 526, 760, 
	760, 757, 694, 697, 760, 760, 760, 700, 
	760, 703, 307, 316, 310, 319, 529, 532, 
	535, 760, 286, 760, 283, 538, 544, 712, 
	541, 760, 706, 547, 760, 709, 760, 424, 
	760, 760, 760, 760, 715, 721, 760, 718, 
	724, 760, 760, 430, 427, 760, 760, 760, 
	658, 760, 760, 760, 433, 727, 265, 760, 
	760, 289, 259, 550, 553, 556, 760, 760, 
	436, 760, 760, 661, 559, 664, 667, 562, 
	670, 565, 673, 568, 571, 274, 271, 760, 
	574, 760, 760, 760, 760, 439, 577, 760, 
	760, 592, 607, 760, 760, 760, 760, 730, 
	580, 583, 586, 589, 595, 598, 604, 601, 
	610, 613, 619, 616, 622, 760, 760, 760, 
	760, 358, 760, 364, 760, 625, 628, 760, 
	631, 760, 760, 760, 442, 760, 760, 733, 
	634, 640, 637, 676, 643, 646, 649, 760, 
	760, 736, 760, 760, 760, 760, 739, 760, 
	679, 760, 682, 760, 760, 742, 745, 760, 
	760, 760, 760, 760, 445, 760, 760, 652, 
	367
};
static const short _lexer_to_state_actions[] = {
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 1, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0
};
static const short _lexer_from_state_actions[] = {
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 3, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0
};
static const short _lexer_eof_trans[] = {
	0, 1, 1, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	1, 27, 29, 34, 1, 0, 122, 1, 
	1, 127, 128, 130, 131, 133, 133, 133, 
	137, 1, 139, 140, 141, 145, 147, 150, 
	152, 1, 159, 162, 159, 159, 159, 159, 
	159, 159, 170, 175, 159, 159, 159, 159, 
	159, 159, 184, 159, 159, 191, 159, 159, 
	159, 159, 159, 199, 203, 205, 207, 159, 
	215, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 240, 246, 
	159, 159, 159, 159, 159, 253, 159, 159, 
	159, 259, 159, 159, 159, 159, 159, 159, 
	268, 159, 159, 274, 276, 159, 159, 288, 
	159, 159, 159, 159, 159, 159, 297, 303, 
	159, 159, 159, 308, 310, 159, 159, 159, 
	159, 317, 159, 159, 159, 159, 324, 327, 
	159, 332, 339, 343, 159, 347, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 366, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 386, 159, 159, 392, 
	159, 396, 159, 399, 403, 407, 159, 159, 
	159, 159, 159, 415, 159, 159, 159, 159, 
	159, 427, 430, 434, 436, 440, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 459, 
	159, 159, 159, 159, 469, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 481, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 498, 499, 152, 1, 159, 
	162, 159, 159, 159, 159, 159, 159, 170, 
	175, 159, 159, 159, 159, 159, 159, 184, 
	159, 159, 191, 159, 159, 159, 159, 159, 
	199, 203, 205, 207, 159, 215, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 240, 246, 159, 159, 159, 
	159, 159, 253, 159, 159, 159, 259, 159, 
	159, 159, 159, 159, 159, 268, 159, 159, 
	274, 276, 159, 159, 288, 159, 159, 159, 
	159, 159, 159, 297, 303, 159, 159, 159, 
	308, 310, 159, 159, 159, 159, 317, 159, 
	159, 159, 159, 324, 327, 159, 332, 339, 
	343, 159, 347, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 366, 159, 
	159, 159, 159, 159, 159, 159, 159, 159, 
	159, 386, 159, 159, 392, 159, 396, 159, 
	399, 403, 407, 159, 159, 159, 159, 159, 
	415, 159, 159, 159, 159, 159, 427, 430, 
	434, 436, 440, 159, 159, 159, 159, 159, 
	159, 159, 159, 159, 459, 159, 159, 159, 
	159, 469, 159, 159, 159, 159, 159, 159, 
	159, 159, 159, 481, 159, 159, 159, 159, 
	159, 159, 159, 159, 159, 159, 159, 159
};
static const int lexer_start = 21;
static const int lexer_error = 0;
static const int lexer_en_main = 21;
static void set_scan_buf( char *text, Bool _at_bol )
{
 str_set( input_buf, text );
 p = str_data(input_buf);
 at_bol = _at_bol;
 pe = str_data(input_buf) + str_len(input_buf);
 eof = pe;
	{
	cs = lexer_start;
	ts = 0;
	te = 0;
	act = 0;
	}
}
static tokid_t _scan_get( void )
{
	{
	int _klen;
	unsigned int _trans;
	short _widec;
	const short *_acts;
	unsigned int _nacts;
	const short *_keys;
	if ( p == pe )
		goto _test_eof;
	if ( cs == 0 )
		goto _out;
_resume:
	_acts = _lexer_actions + _lexer_from_state_actions[cs];
	_nacts = (unsigned int) *_acts++;
	while ( _nacts-- > 0 ) {
		switch ( *_acts++ ) {
	case 1:
	{ts = p;}
	break;
		}
	}
	_widec = (*p);
	_klen = _lexer_cond_lengths[cs];
	_keys = _lexer_cond_keys + (_lexer_cond_offsets[cs]*2);
	if ( _klen > 0 ) {
		const short *_lower = _keys;
		const short *_mid;
		const short *_upper = _keys + (_klen<<1) - 2;
		while (1) {
			if ( _upper < _lower )
				break;
			_mid = _lower + (((_upper-_lower) >> 1) & ~1);
			if ( _widec < _mid[0] )
				_upper = _mid - 2;
			else if ( _widec > _mid[1] )
				_lower = _mid + 2;
			else {
				switch ( _lexer_cond_spaces[_lexer_cond_offsets[cs] + ((_mid - _keys)>>1)] ) {
	case 0: {
		_widec = (short)(128 + ((*p) - -128));
		if ( 
 at_bol  ) _widec += 256;
		break;
	}
				}
				break;
			}
		}
	}
	_keys = _lexer_trans_keys + _lexer_key_offsets[cs];
	_trans = _lexer_index_offsets[cs];
	_klen = _lexer_single_lengths[cs];
	if ( _klen > 0 ) {
		const short *_lower = _keys;
		const short *_mid;
		const short *_upper = _keys + _klen - 1;
		while (1) {
			if ( _upper < _lower )
				break;
			_mid = _lower + ((_upper-_lower) >> 1);
			if ( _widec < *_mid )
				_upper = _mid - 1;
			else if ( _widec > *_mid )
				_lower = _mid + 1;
			else {
				_trans += (unsigned int)(_mid - _keys);
				goto _match;
			}
		}
		_keys += _klen;
		_trans += _klen;
	}
	_klen = _lexer_range_lengths[cs];
	if ( _klen > 0 ) {
		const short *_lower = _keys;
		const short *_mid;
		const short *_upper = _keys + (_klen<<1) - 2;
		while (1) {
			if ( _upper < _lower )
				break;
			_mid = _lower + (((_upper-_lower) >> 1) & ~1);
			if ( _widec < _mid[0] )
				_upper = _mid - 2;
			else if ( _widec > _mid[1] )
				_lower = _mid + 2;
			else {
				_trans += (unsigned int)((_mid - _keys)>>1);
				goto _match;
			}
		}
		_trans += _klen;
	}
_match:
	_trans = _lexer_indicies[_trans];
_eof_trans:
	cs = _lexer_trans_targs[_trans];
	if ( _lexer_trans_actions[_trans] == 0 )
		goto _again;
	_acts = _lexer_actions + _lexer_trans_actions[_trans];
	_nacts = (unsigned int) *_acts++;
	while ( _nacts-- > 0 )
	{
		switch ( *_acts++ )
		{
	case 2:
	{te = p+1;}
	break;
	case 3:
	{act = 1;}
	break;
	case 4:
	{act = 5;}
	break;
	case 5:
	{act = 37;}
	break;
	case 6:
	{act = 38;}
	break;
	case 7:
	{act = 39;}
	break;
	case 8:
	{act = 40;}
	break;
	case 9:
	{act = 41;}
	break;
	case 10:
	{act = 42;}
	break;
	case 11:
	{act = 43;}
	break;
	case 12:
	{act = 44;}
	break;
	case 13:
	{act = 45;}
	break;
	case 14:
	{act = 46;}
	break;
	case 15:
	{act = 47;}
	break;
	case 16:
	{act = 48;}
	break;
	case 17:
	{act = 49;}
	break;
	case 18:
	{act = 50;}
	break;
	case 19:
	{act = 51;}
	break;
	case 20:
	{act = 52;}
	break;
	case 21:
	{act = 53;}
	break;
	case 22:
	{act = 54;}
	break;
	case 23:
	{act = 55;}
	break;
	case 24:
	{act = 56;}
	break;
	case 25:
	{act = 57;}
	break;
	case 26:
	{act = 58;}
	break;
	case 27:
	{act = 59;}
	break;
	case 28:
	{act = 60;}
	break;
	case 29:
	{act = 61;}
	break;
	case 30:
	{act = 62;}
	break;
	case 31:
	{act = 63;}
	break;
	case 32:
	{act = 64;}
	break;
	case 33:
	{act = 65;}
	break;
	case 34:
	{act = 66;}
	break;
	case 35:
	{act = 67;}
	break;
	case 36:
	{act = 68;}
	break;
	case 37:
	{act = 69;}
	break;
	case 38:
	{act = 70;}
	break;
	case 39:
	{act = 71;}
	break;
	case 40:
	{act = 72;}
	break;
	case 41:
	{act = 73;}
	break;
	case 42:
	{act = 93;}
	break;
	case 43:
	{act = 94;}
	break;
	case 44:
	{act = 95;}
	break;
	case 45:
	{act = 96;}
	break;
	case 46:
	{act = 97;}
	break;
	case 47:
	{act = 98;}
	break;
	case 48:
	{act = 99;}
	break;
	case 49:
	{act = 100;}
	break;
	case 50:
	{act = 101;}
	break;
	case 51:
	{act = 102;}
	break;
	case 52:
	{act = 103;}
	break;
	case 53:
	{act = 104;}
	break;
	case 54:
	{act = 105;}
	break;
	case 55:
	{act = 106;}
	break;
	case 56:
	{act = 107;}
	break;
	case 57:
	{act = 108;}
	break;
	case 58:
	{act = 109;}
	break;
	case 59:
	{act = 110;}
	break;
	case 60:
	{act = 111;}
	break;
	case 61:
	{act = 112;}
	break;
	case 62:
	{act = 113;}
	break;
	case 63:
	{act = 114;}
	break;
	case 64:
	{act = 115;}
	break;
	case 65:
	{act = 116;}
	break;
	case 66:
	{act = 117;}
	break;
	case 67:
	{act = 118;}
	break;
	case 68:
	{act = 123;}
	break;
	case 69:
	{act = 124;}
	break;
	case 70:
	{act = 125;}
	break;
	case 71:
	{act = 126;}
	break;
	case 72:
	{act = 127;}
	break;
	case 73:
	{act = 128;}
	break;
	case 74:
	{act = 129;}
	break;
	case 75:
	{act = 130;}
	break;
	case 76:
	{act = 131;}
	break;
	case 77:
	{act = 132;}
	break;
	case 78:
	{act = 133;}
	break;
	case 79:
	{act = 134;}
	break;
	case 80:
	{act = 135;}
	break;
	case 81:
	{act = 136;}
	break;
	case 82:
	{act = 137;}
	break;
	case 83:
	{act = 138;}
	break;
	case 84:
	{act = 139;}
	break;
	case 85:
	{act = 140;}
	break;
	case 86:
	{act = 141;}
	break;
	case 87:
	{act = 142;}
	break;
	case 88:
	{act = 143;}
	break;
	case 89:
	{act = 144;}
	break;
	case 90:
	{act = 145;}
	break;
	case 91:
	{act = 146;}
	break;
	case 92:
	{act = 147;}
	break;
	case 93:
	{act = 148;}
	break;
	case 94:
	{act = 149;}
	break;
	case 95:
	{act = 150;}
	break;
	case 96:
	{act = 151;}
	break;
	case 97:
	{act = 152;}
	break;
	case 98:
	{act = 153;}
	break;
	case 99:
	{act = 154;}
	break;
	case 100:
	{act = 155;}
	break;
	case 101:
	{act = 156;}
	break;
	case 102:
	{act = 157;}
	break;
	case 103:
	{act = 158;}
	break;
	case 104:
	{act = 159;}
	break;
	case 105:
	{act = 160;}
	break;
	case 106:
	{act = 161;}
	break;
	case 107:
	{act = 162;}
	break;
	case 108:
	{act = 163;}
	break;
	case 109:
	{act = 164;}
	break;
	case 110:
	{act = 165;}
	break;
	case 111:
	{act = 166;}
	break;
	case 112:
	{act = 167;}
	break;
	case 113:
	{act = 168;}
	break;
	case 114:
	{act = 169;}
	break;
	case 115:
	{act = 170;}
	break;
	case 116:
	{act = 171;}
	break;
	case 117:
	{act = 172;}
	break;
	case 118:
	{act = 173;}
	break;
	case 119:
	{act = 174;}
	break;
	case 120:
	{act = 175;}
	break;
	case 121:
	{act = 176;}
	break;
	case 122:
	{act = 177;}
	break;
	case 123:
	{act = 178;}
	break;
	case 124:
	{act = 179;}
	break;
	case 125:
	{act = 180;}
	break;
	case 126:
	{act = 181;}
	break;
	case 127:
	{act = 182;}
	break;
	case 128:
	{act = 183;}
	break;
	case 129:
	{act = 184;}
	break;
	case 130:
	{act = 185;}
	break;
	case 131:
	{act = 186;}
	break;
	case 132:
	{act = 187;}
	break;
	case 133:
	{act = 188;}
	break;
	case 134:
	{act = 189;}
	break;
	case 135:
	{act = 190;}
	break;
	case 136:
	{act = 191;}
	break;
	case 137:
	{act = 192;}
	break;
	case 138:
	{act = 193;}
	break;
	case 139:
	{act = 194;}
	break;
	case 140:
	{act = 195;}
	break;
	case 141:
	{act = 196;}
	break;
	case 142:
	{act = 197;}
	break;
	case 143:
	{act = 198;}
	break;
	case 144:
	{act = 199;}
	break;
	case 145:
	{act = 200;}
	break;
	case 146:
	{act = 201;}
	break;
	case 147:
	{act = 202;}
	break;
	case 148:
	{act = 203;}
	break;
	case 149:
	{act = 204;}
	break;
	case 150:
	{act = 205;}
	break;
	case 151:
	{act = 206;}
	break;
	case 152:
	{act = 207;}
	break;
	case 153:
	{act = 208;}
	break;
	case 154:
	{act = 209;}
	break;
	case 155:
	{act = 210;}
	break;
	case 156:
	{act = 211;}
	break;
	case 157:
	{act = 212;}
	break;
	case 158:
	{act = 213;}
	break;
	case 159:
	{act = 214;}
	break;
	case 160:
	{act = 215;}
	break;
	case 161:
	{act = 216;}
	break;
	case 162:
	{act = 217;}
	break;
	case 163:
	{act = 218;}
	break;
	case 164:
	{act = 219;}
	break;
	case 165:
	{act = 220;}
	break;
	case 166:
	{act = 221;}
	break;
	case 167:
	{act = 222;}
	break;
	case 168:
	{act = 223;}
	break;
	case 169:
	{act = 224;}
	break;
	case 170:
	{act = 225;}
	break;
	case 171:
	{act = 226;}
	break;
	case 172:
	{act = 229;}
	break;
	case 173:
	{act = 231;}
	break;
	case 174:
	{act = 233;}
	break;
	case 175:
	{act = 235;}
	break;
	case 176:
	{act = 237;}
	break;
	case 177:
	{act = 241;}
	break;
	case 178:
	{te = p+1;{
	sym.tok = TK_NEWLINE;
	;
	{p++; goto _out; }
}}
	break;
	case 179:
	{te = p+1;{
	sym.tok = TK_CONST_EXPR;
	;
	{p++; goto _out; }
}}
	break;
	case 180:
	{te = p+1;{
	sym.tok = TK_LOG_AND;
	;
	{p++; goto _out; }
}}
	break;
	case 181:
	{te = p+1;{
	sym.tok = TK_RPAREN;
	;
	{p++; goto _out; }
}}
	break;
	case 182:
	{te = p+1;{
	sym.tok = TK_PLUS;
	;
	{p++; goto _out; }
}}
	break;
	case 183:
	{te = p+1;{
	sym.tok = TK_COMMA;
	;
	{p++; goto _out; }
}}
	break;
	case 184:
	{te = p+1;{
	sym.tok = TK_MINUS;
	;
	{p++; goto _out; }
}}
	break;
	case 185:
	{te = p+1;{
	sym.tok = TK_DOT;
	;
	{p++; goto _out; }
}}
	break;
	case 186:
	{te = p+1;{
	sym.tok = TK_DIVIDE;
	;
	{p++; goto _out; }
}}
	break;
	case 187:
	{te = p+1;{
	sym.tok = TK_COLON;
	;
	{p++; goto _out; }
}}
	break;
	case 188:
	{te = p+1;{
	sym.tok = TK_LEFT_SHIFT;
	;
	{p++; goto _out; }
}}
	break;
	case 189:
	{te = p+1;{
	sym.tok = TK_LESS_EQ;
	;
	{p++; goto _out; }
}}
	break;
	case 190:
	{te = p+1;{
	sym.tok = TK_NOT_EQ;
	;
	{p++; goto _out; }
}}
	break;
	case 191:
	{te = p+1;{
	sym.tok = TK_NOT_EQ;
	;
	{p++; goto _out; }
}}
	break;
	case 192:
	{te = p+1;{
	sym.tok = TK_EQUAL;
	;
	{p++; goto _out; }
}}
	break;
	case 193:
	{te = p+1;{
	sym.tok = TK_RIGHT_SHIFT;
	;
	{p++; goto _out; }
}}
	break;
	case 194:
	{te = p+1;{
	sym.tok = TK_GREATER_EQ;
	;
	{p++; goto _out; }
}}
	break;
	case 195:
	{te = p+1;{
	sym.tok = TK_QUESTION;
	;
	{p++; goto _out; }
}}
	break;
	case 196:
	{te = p+1;{
	sym.tok = TK_LSQUARE;
	;
	{p++; goto _out; }
}}
	break;
	case 197:
	{te = p+1;{
	sym.tok = TK_RSQUARE;
	;
	{p++; goto _out; }
}}
	break;
	case 198:
	{te = p+1;{
	sym.tok = TK_BIN_XOR;
	;
	{p++; goto _out; }
}}
	break;
	case 199:
	{te = p+1;{
	sym.tok = TK_POWER;
	;
	{p++; goto _out; }
}}
	break;
	case 200:
	{te = p+1;{
	sym.tok = TK_LCURLY;
	;
	{p++; goto _out; }
}}
	break;
	case 201:
	{te = p+1;{
	sym.tok = TK_LOG_OR;
	;
	{p++; goto _out; }
}}
	break;
	case 202:
	{te = p+1;{
	sym.tok = TK_RCURLY;
	;
	{p++; goto _out; }
}}
	break;
	case 203:
	{te = p+1;{
	sym.tok = TK_BIN_NOT;
	;
	{p++; goto _out; }
}}
	break;
	case 204:
	{te = p+1;{
	sym.tok = TK_B1;
	;
	{p++; goto _out; }
}}
	break;
	case 205:
	{te = p+1;{
	sym.tok = TK_C1;
	;
	{p++; goto _out; }
}}
	break;
	case 206:
	{te = p+1;{
	sym.tok = TK_D1;
	;
	{p++; goto _out; }
}}
	break;
	case 207:
	{te = p+1;{
	sym.tok = TK_E1;
	;
	{p++; goto _out; }
}}
	break;
	case 208:
	{te = p+1;{
	sym.tok = TK_H1;
	;
	{p++; goto _out; }
}}
	break;
	case 209:
	{te = p+1;{
	sym.tok = TK_L1;
	;
	{p++; goto _out; }
}}
	break;
	case 210:
	{te = p+1;{
	sym.tok = TK_A1;
	;
	{p++; goto _out; }
}}
	break;
	case 211:
	{te = p+1;{
	sym.tok = TK_F1;
	;
	{p++; goto _out; }
}}
	break;
	case 212:
	{te = p+1;{
	sym.tok = TK_BC1;
	;
	{p++; goto _out; }
}}
	break;
	case 213:
	{te = p+1;{
	sym.tok = TK_DE1;
	;
	{p++; goto _out; }
}}
	break;
	case 214:
	{te = p+1;{
	sym.tok = TK_HL1;
	;
	{p++; goto _out; }
}}
	break;
	case 215:
	{te = p+1;{
	sym.tok = TK_AF1;
	;
	{p++; goto _out; }
}}
	break;
	case 216:
	{te = p+1;{
	sym.tok = TK_IND_BC;
	p--; te--;
	{p++; goto _out; }
}}
	break;
	case 217:
	{te = p+1;{
	sym.tok = TK_IND_DE;
	p--; te--;
	{p++; goto _out; }
}}
	break;
	case 218:
	{te = p+1;{
	sym.tok = TK_IND_IX;
	p--; te--;
	{p++; goto _out; }
}}
	break;
	case 219:
	{te = p+1;{
	sym.tok = TK_IND_IY;
	p--; te--;
	{p++; goto _out; }
}}
	break;
	case 220:
	{te = p+1;{
	sym.tok = TK_IND_HL;
	p--; te--;
	{p++; goto _out; }
}}
	break;
	case 221:
	{te = p+1;{
	sym.tok = TK_IND_SP;
	p--; te--;
	{p++; goto _out; }
}}
	break;
	case 222:
	{te = p+1;{
	sym.tok = TK_IND_C;
	p--; te--;
	{p++; goto _out; }
}}
	break;
	case 223:
	{te = p+1;{
	sym.tok = TK_DS_B;
	;
	{p++; goto _out; }
}}
	break;
	case 224:
	{te = p+1;{
	sym.tok = TK_DS_W;
	;
	{p++; goto _out; }
}}
	break;
	case 225:
	{te = p+1;{
	sym.tok = TK_DS_P;
	;
	{p++; goto _out; }
}}
	break;
	case 226:
	{te = p+1;{
	sym.tok = TK_DS_Q;
	;
	{p++; goto _out; }
}}
	break;
	case 227:
	{te = p+1;}
	break;
	case 228:
	{te = p+1;{
  while ( ts[ 0] == '.' || isspace(ts[ 0]) ) ts++;
  while ( te[-1] == ':' || isspace(te[-1]) ) te--;
  sym.tok = TK_LABEL;
  {p++; goto _out; }
 }}
	break;
	case 229:
	{te = p+1;{
  sym.tok = TK_NUMBER;
  sym.number = scan_num( ts, te - ts - 1, 16 );
  ts = te = p;
  {p++; goto _out; }
 }}
	break;
	case 230:
	{te = p+1;{
  sym.tok = TK_NUMBER;
  sym.number = scan_num( ts + 2, te - ts - 3, 2 );
  ts = te = p;
  {p++; goto _out; }
 }}
	break;
	case 231:
	{te = p+1;{
  sym.tok = TK_NUMBER;
  if ( get_sym_string() &&
                             te - ts == 1 )
  {
   sym.number = *ts;
  }
  else
  {
   sym.number = 0;
   error_invalid_squoted_string();
  }
  ts = te = p;
  {p++; goto _out; }
 }}
	break;
	case 232:
	{te = p+1;{
  sym.tok = TK_STRING;
  if ( ! get_sym_string() )
   error_unclosed_string();
  {p++; goto _out; }
 }}
	break;
	case 233:
	{te = p+1;{
  sym.tok = TK_NIL;
  skip_to_newline();
  ts = te = p;
  {p++; goto _out; }
 }}
	break;
	case 234:
	{te = p;p--;{
	sym.tok = TK_LOG_NOT;
	;
	{p++; goto _out; }
}}
	break;
	case 235:
	{te = p;p--;{
	sym.tok = TK_BIN_AND;
	;
	{p++; goto _out; }
}}
	break;
	case 236:
	{te = p;p--;{
	sym.tok = TK_LPAREN;
	;
	{p++; goto _out; }
}}
	break;
	case 237:
	{te = p;p--;{
	sym.tok = TK_MULTIPLY;
	;
	{p++; goto _out; }
}}
	break;
	case 238:
	{te = p;p--;{
	sym.tok = TK_DOT;
	;
	{p++; goto _out; }
}}
	break;
	case 239:
	{te = p;p--;{
	sym.tok = TK_LESS;
	;
	{p++; goto _out; }
}}
	break;
	case 240:
	{te = p;p--;{
	sym.tok = TK_EQUAL;
	;
	{p++; goto _out; }
}}
	break;
	case 241:
	{te = p;p--;{
	sym.tok = TK_GREATER;
	;
	{p++; goto _out; }
}}
	break;
	case 242:
	{te = p;p--;{
	sym.tok = TK_BIN_OR;
	;
	{p++; goto _out; }
}}
	break;
	case 243:
	{te = p;p--;{
	sym.tok = TK_C;
	;
	{p++; goto _out; }
}}
	break;
	case 244:
	{te = p;p--;{
	sym.tok = TK_PO;
	;
	{p++; goto _out; }
}}
	break;
	case 245:
	{te = p;p--;{
	sym.tok = TK_P;
	;
	{p++; goto _out; }
}}
	break;
	case 246:
	{te = p;p--;{
	sym.tok = TK_M;
	;
	{p++; goto _out; }
}}
	break;
	case 247:
	{te = p;p--;{
	sym.tok = TK_B;
	;
	{p++; goto _out; }
}}
	break;
	case 248:
	{te = p;p--;{
	sym.tok = TK_D;
	;
	{p++; goto _out; }
}}
	break;
	case 249:
	{te = p;p--;{
	sym.tok = TK_E;
	;
	{p++; goto _out; }
}}
	break;
	case 250:
	{te = p;p--;{
	sym.tok = TK_H;
	;
	{p++; goto _out; }
}}
	break;
	case 251:
	{te = p;p--;{
	sym.tok = TK_L;
	;
	{p++; goto _out; }
}}
	break;
	case 252:
	{te = p;p--;{
	sym.tok = TK_A;
	;
	{p++; goto _out; }
}}
	break;
	case 253:
	{te = p;p--;{
	sym.tok = TK_F;
	;
	{p++; goto _out; }
}}
	break;
	case 254:
	{te = p;p--;{
	sym.tok = TK_I;
	;
	{p++; goto _out; }
}}
	break;
	case 255:
	{te = p;p--;{
	sym.tok = TK_R;
	;
	{p++; goto _out; }
}}
	break;
	case 256:
	{te = p;p--;{
	sym.tok = TK_BC;
	;
	{p++; goto _out; }
}}
	break;
	case 257:
	{te = p;p--;{
	sym.tok = TK_DE;
	;
	{p++; goto _out; }
}}
	break;
	case 258:
	{te = p;p--;{
	sym.tok = TK_HL;
	;
	{p++; goto _out; }
}}
	break;
	case 259:
	{te = p;p--;{
	sym.tok = TK_IX;
	;
	{p++; goto _out; }
}}
	break;
	case 260:
	{te = p;p--;{
	sym.tok = TK_IY;
	;
	{p++; goto _out; }
}}
	break;
	case 261:
	{te = p;p--;{
	sym.tok = TK_AF;
	;
	{p++; goto _out; }
}}
	break;
	case 262:
	{te = p;p--;{
	sym.tok = TK_IP;
	;
	{p++; goto _out; }
}}
	break;
	case 263:
	{te = p;p--;{
	sym.tok = TK_SU;
	;
	{p++; goto _out; }
}}
	break;
	case 264:
	{te = p;p--;{
	if (expect_opcode) {
		sym.tok = TK_IF;
		sym.tok_opcode = TK_IF;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_IF;
	}
	{p++; goto _out; }
}}
	break;
	case 265:
	{te = p;p--;{
	if (expect_opcode) {
		sym.tok = TK_CALL;
		sym.tok_opcode = TK_CALL;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_CALL;
	}
	{p++; goto _out; }
}}
	break;
	case 266:
	{te = p;p--;{
	if (expect_opcode) {
		sym.tok = TK_CP;
		sym.tok_opcode = TK_CP;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_CP;
	}
	{p++; goto _out; }
}}
	break;
	case 267:
	{te = p;p--;{
	if (expect_opcode) {
		sym.tok = TK_CPD;
		sym.tok_opcode = TK_CPD;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_CPD;
	}
	{p++; goto _out; }
}}
	break;
	case 268:
	{te = p;p--;{
	if (expect_opcode) {
		sym.tok = TK_CPI;
		sym.tok_opcode = TK_CPI;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_CPI;
	}
	{p++; goto _out; }
}}
	break;
	case 269:
	{te = p;p--;{
	if (expect_opcode) {
		sym.tok = TK_EI;
		sym.tok_opcode = TK_EI;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_EI;
	}
	{p++; goto _out; }
}}
	break;
	case 270:
	{te = p;p--;{
	if (expect_opcode) {
		sym.tok = TK_EX;
		sym.tok_opcode = TK_EX;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_EX;
	}
	{p++; goto _out; }
}}
	break;
	case 271:
	{te = p;p--;{
	if (expect_opcode) {
		sym.tok = TK_IN;
		sym.tok_opcode = TK_IN;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_IN;
	}
	{p++; goto _out; }
}}
	break;
	case 272:
	{te = p;p--;{
	if (expect_opcode) {
		sym.tok = TK_INC;
		sym.tok_opcode = TK_INC;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_INC;
	}
	{p++; goto _out; }
}}
	break;
	case 273:
	{te = p;p--;{
	if (expect_opcode) {
		sym.tok = TK_IND;
		sym.tok_opcode = TK_IND;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_IND;
	}
	{p++; goto _out; }
}}
	break;
	case 274:
	{te = p;p--;{
	if (expect_opcode) {
		sym.tok = TK_INI;
		sym.tok_opcode = TK_INI;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_INI;
	}
	{p++; goto _out; }
}}
	break;
	case 275:
	{te = p;p--;{
	if (expect_opcode) {
		sym.tok = TK_LD;
		sym.tok_opcode = TK_LD;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_LD;
	}
	{p++; goto _out; }
}}
	break;
	case 276:
	{te = p;p--;{
	if (expect_opcode) {
		sym.tok = TK_LDD;
		sym.tok_opcode = TK_LDD;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_LDD;
	}
	{p++; goto _out; }
}}
	break;
	case 277:
	{te = p;p--;{
	if (expect_opcode) {
		sym.tok = TK_LDI;
		sym.tok_opcode = TK_LDI;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_LDI;
	}
	{p++; goto _out; }
}}
	break;
	case 278:
	{te = p;p--;{
	if (expect_opcode) {
		sym.tok = TK_OR;
		sym.tok_opcode = TK_OR;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_OR;
	}
	{p++; goto _out; }
}}
	break;
	case 279:
	{te = p;p--;{
	if (expect_opcode) {
		sym.tok = TK_OUT;
		sym.tok_opcode = TK_OUT;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_OUT;
	}
	{p++; goto _out; }
}}
	break;
	case 280:
	{te = p;p--;{
	if (expect_opcode) {
		sym.tok = TK_RET;
		sym.tok_opcode = TK_RET;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_RET;
	}
	{p++; goto _out; }
}}
	break;
	case 281:
	{te = p;p--;{
	if (expect_opcode) {
		sym.tok = TK_RL;
		sym.tok_opcode = TK_RL;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_RL;
	}
	{p++; goto _out; }
}}
	break;
	case 282:
	{te = p;p--;{
	if (expect_opcode) {
		sym.tok = TK_RLC;
		sym.tok_opcode = TK_RLC;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_RLC;
	}
	{p++; goto _out; }
}}
	break;
	case 283:
	{te = p;p--;{
	if (expect_opcode) {
		sym.tok = TK_RR;
		sym.tok_opcode = TK_RR;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_RR;
	}
	{p++; goto _out; }
}}
	break;
	case 284:
	{te = p;p--;{
	if (expect_opcode) {
		sym.tok = TK_RRC;
		sym.tok_opcode = TK_RRC;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_RRC;
	}
	{p++; goto _out; }
}}
	break;
	case 285:
	{te = p;p--;{
	if (expect_opcode) {
		sym.tok = TK_SET;
		sym.tok_opcode = TK_SET;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_SET;
	}
	{p++; goto _out; }
}}
	break;
	case 286:
	{te = p;p--;{
	if (expect_opcode) {
		sym.tok = TK_OTDM;
		sym.tok_opcode = TK_OTDM;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_OTDM;
	}
	{p++; goto _out; }
}}
	break;
	case 287:
	{te = p;p--;{
	if (expect_opcode) {
		sym.tok = TK_OTIM;
		sym.tok_opcode = TK_OTIM;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_OTIM;
	}
	{p++; goto _out; }
}}
	break;
	case 288:
	{te = p;p--;{
	if (expect_opcode) {
		sym.tok = TK_TST;
		sym.tok_opcode = TK_TST;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_TST;
	}
	{p++; goto _out; }
}}
	break;
	case 289:
	{te = p;p--;}
	break;
	case 290:
	{te = p;p--;{
  sym.tok = TK_NAME;
  {p++; goto _out; }
 }}
	break;
	case 291:
	{te = p;p--;{
  while ( ts[ 0] == '.' || isspace(ts[ 0]) ) ts++;
  while ( te[-1] == ':' || isspace(te[-1]) ) te--;
  sym.tok = TK_LABEL;
  {p++; goto _out; }
 }}
	break;
	case 292:
	{te = p;p--;{
  sym.tok = TK_NUMBER;
  sym.number = scan_num( ts, te - ts, 10 );
  ts = te = p;
  {p++; goto _out; }
 }}
	break;
	case 293:
	{te = p;p--;{
  sym.tok = TK_NUMBER;
  sym.number = scan_num( ts + 2, te - ts - 2, 16 );
  ts = te = p;
  {p++; goto _out; }
 }}
	break;
	case 294:
	{te = p;p--;{
  sym.tok = TK_NUMBER;
  sym.number = scan_num( ts, te - ts - 1, 2 );
  ts = te = p;
  {p++; goto _out; }
 }}
	break;
	case 295:
	{te = p;p--;{
  sym.tok = TK_NUMBER;
  sym.number = scan_num( ts + 1, te - ts - 1, 2 );
  ts = te = p;
  {p++; goto _out; }
 }}
	break;
	case 296:
	{{p = ((te))-1;}{
	sym.tok = TK_LPAREN;
	;
	{p++; goto _out; }
}}
	break;
	case 297:
	{{p = ((te))-1;}{
	sym.tok = TK_DOT;
	;
	{p++; goto _out; }
}}
	break;
	case 298:
	{{p = ((te))-1;}{
  sym.tok = TK_NAME;
  {p++; goto _out; }
 }}
	break;
	case 299:
	{{p = ((te))-1;}{
  sym.tok = TK_NUMBER;
  sym.number = scan_num( ts, te - ts, 10 );
  ts = te = p;
  {p++; goto _out; }
 }}
	break;
	case 300:
	{	switch( act ) {
	case 1:
	{{p = ((te))-1;}
	sym.tok = TK_ASMPC;
	;
	{p++; goto _out; }
}
	break;
	case 5:
	{{p = ((te))-1;}
	sym.tok = TK_MOD;
	;
	{p++; goto _out; }
}
	break;
	case 37:
	{{p = ((te))-1;}
	sym.tok = TK_NZ;
	;
	{p++; goto _out; }
}
	break;
	case 38:
	{{p = ((te))-1;}
	sym.tok = TK_Z;
	;
	{p++; goto _out; }
}
	break;
	case 39:
	{{p = ((te))-1;}
	sym.tok = TK_NC;
	;
	{p++; goto _out; }
}
	break;
	case 40:
	{{p = ((te))-1;}
	sym.tok = TK_C;
	;
	{p++; goto _out; }
}
	break;
	case 41:
	{{p = ((te))-1;}
	sym.tok = TK_PO;
	;
	{p++; goto _out; }
}
	break;
	case 42:
	{{p = ((te))-1;}
	sym.tok = TK_PE;
	;
	{p++; goto _out; }
}
	break;
	case 43:
	{{p = ((te))-1;}
	sym.tok = TK_P;
	;
	{p++; goto _out; }
}
	break;
	case 44:
	{{p = ((te))-1;}
	sym.tok = TK_M;
	;
	{p++; goto _out; }
}
	break;
	case 45:
	{{p = ((te))-1;}
	sym.tok = TK_LZ;
	;
	{p++; goto _out; }
}
	break;
	case 46:
	{{p = ((te))-1;}
	sym.tok = TK_LO;
	;
	{p++; goto _out; }
}
	break;
	case 47:
	{{p = ((te))-1;}
	sym.tok = TK_NV;
	;
	{p++; goto _out; }
}
	break;
	case 48:
	{{p = ((te))-1;}
	sym.tok = TK_V;
	;
	{p++; goto _out; }
}
	break;
	case 49:
	{{p = ((te))-1;}
	sym.tok = TK_B;
	;
	{p++; goto _out; }
}
	break;
	case 50:
	{{p = ((te))-1;}
	sym.tok = TK_D;
	;
	{p++; goto _out; }
}
	break;
	case 51:
	{{p = ((te))-1;}
	sym.tok = TK_E;
	;
	{p++; goto _out; }
}
	break;
	case 52:
	{{p = ((te))-1;}
	sym.tok = TK_H;
	;
	{p++; goto _out; }
}
	break;
	case 53:
	{{p = ((te))-1;}
	sym.tok = TK_IXH;
	;
	{p++; goto _out; }
}
	break;
	case 54:
	{{p = ((te))-1;}
	sym.tok = TK_IYH;
	;
	{p++; goto _out; }
}
	break;
	case 55:
	{{p = ((te))-1;}
	sym.tok = TK_L;
	;
	{p++; goto _out; }
}
	break;
	case 56:
	{{p = ((te))-1;}
	sym.tok = TK_IXL;
	;
	{p++; goto _out; }
}
	break;
	case 57:
	{{p = ((te))-1;}
	sym.tok = TK_IYL;
	;
	{p++; goto _out; }
}
	break;
	case 58:
	{{p = ((te))-1;}
	sym.tok = TK_A;
	;
	{p++; goto _out; }
}
	break;
	case 59:
	{{p = ((te))-1;}
	sym.tok = TK_F;
	;
	{p++; goto _out; }
}
	break;
	case 60:
	{{p = ((te))-1;}
	sym.tok = TK_I;
	;
	{p++; goto _out; }
}
	break;
	case 61:
	{{p = ((te))-1;}
	sym.tok = TK_IIR;
	;
	{p++; goto _out; }
}
	break;
	case 62:
	{{p = ((te))-1;}
	sym.tok = TK_R;
	;
	{p++; goto _out; }
}
	break;
	case 63:
	{{p = ((te))-1;}
	sym.tok = TK_EIR;
	;
	{p++; goto _out; }
}
	break;
	case 64:
	{{p = ((te))-1;}
	sym.tok = TK_BC;
	;
	{p++; goto _out; }
}
	break;
	case 65:
	{{p = ((te))-1;}
	sym.tok = TK_DE;
	;
	{p++; goto _out; }
}
	break;
	case 66:
	{{p = ((te))-1;}
	sym.tok = TK_HL;
	;
	{p++; goto _out; }
}
	break;
	case 67:
	{{p = ((te))-1;}
	sym.tok = TK_IX;
	;
	{p++; goto _out; }
}
	break;
	case 68:
	{{p = ((te))-1;}
	sym.tok = TK_IY;
	;
	{p++; goto _out; }
}
	break;
	case 69:
	{{p = ((te))-1;}
	sym.tok = TK_AF;
	;
	{p++; goto _out; }
}
	break;
	case 70:
	{{p = ((te))-1;}
	sym.tok = TK_SP;
	;
	{p++; goto _out; }
}
	break;
	case 71:
	{{p = ((te))-1;}
	sym.tok = TK_IP;
	;
	{p++; goto _out; }
}
	break;
	case 72:
	{{p = ((te))-1;}
	sym.tok = TK_SU;
	;
	{p++; goto _out; }
}
	break;
	case 73:
	{{p = ((te))-1;}
	sym.tok = TK_XPC;
	;
	{p++; goto _out; }
}
	break;
	case 93:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_BINARY;
		sym.tok_opcode = TK_BINARY;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_BINARY;
	}
	{p++; goto _out; }
}
	break;
	case 94:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_DEFB;
		sym.tok_opcode = TK_DEFB;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_DEFB;
	}
	{p++; goto _out; }
}
	break;
	case 95:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_DEFC;
		sym.tok_opcode = TK_DEFC;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_DEFC;
	}
	{p++; goto _out; }
}
	break;
	case 96:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_DEFGROUP;
		sym.tok_opcode = TK_DEFGROUP;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_DEFGROUP;
	}
	{p++; goto _out; }
}
	break;
	case 97:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_DEFINE;
		sym.tok_opcode = TK_DEFINE;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_DEFINE;
	}
	{p++; goto _out; }
}
	break;
	case 98:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_DEFQ;
		sym.tok_opcode = TK_DEFQ;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_DEFQ;
	}
	{p++; goto _out; }
}
	break;
	case 99:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_DEFM;
		sym.tok_opcode = TK_DEFM;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_DEFM;
	}
	{p++; goto _out; }
}
	break;
	case 100:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_DEFS;
		sym.tok_opcode = TK_DEFS;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_DEFS;
	}
	{p++; goto _out; }
}
	break;
	case 101:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_DEFVARS;
		sym.tok_opcode = TK_DEFVARS;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_DEFVARS;
	}
	{p++; goto _out; }
}
	break;
	case 102:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_DEFW;
		sym.tok_opcode = TK_DEFW;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_DEFW;
	}
	{p++; goto _out; }
}
	break;
	case 103:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_ELSE;
		sym.tok_opcode = TK_ELSE;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_ELSE;
	}
	{p++; goto _out; }
}
	break;
	case 104:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_ENDIF;
		sym.tok_opcode = TK_ENDIF;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_ENDIF;
	}
	{p++; goto _out; }
}
	break;
	case 105:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_EXTERN;
		sym.tok_opcode = TK_EXTERN;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_EXTERN;
	}
	{p++; goto _out; }
}
	break;
	case 106:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_GLOBAL;
		sym.tok_opcode = TK_GLOBAL;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_GLOBAL;
	}
	{p++; goto _out; }
}
	break;
	case 107:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_IF;
		sym.tok_opcode = TK_IF;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_IF;
	}
	{p++; goto _out; }
}
	break;
	case 108:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_IFDEF;
		sym.tok_opcode = TK_IFDEF;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_IFDEF;
	}
	{p++; goto _out; }
}
	break;
	case 109:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_IFNDEF;
		sym.tok_opcode = TK_IFNDEF;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_IFNDEF;
	}
	{p++; goto _out; }
}
	break;
	case 110:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_INCLUDE;
		sym.tok_opcode = TK_INCLUDE;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_INCLUDE;
	}
	{p++; goto _out; }
}
	break;
	case 111:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_LINE;
		sym.tok_opcode = TK_LINE;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_LINE;
	}
	{p++; goto _out; }
}
	break;
	case 112:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_LSTOFF;
		sym.tok_opcode = TK_LSTOFF;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_LSTOFF;
	}
	{p++; goto _out; }
}
	break;
	case 113:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_LSTON;
		sym.tok_opcode = TK_LSTON;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_LSTON;
	}
	{p++; goto _out; }
}
	break;
	case 114:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_MODULE;
		sym.tok_opcode = TK_MODULE;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_MODULE;
	}
	{p++; goto _out; }
}
	break;
	case 115:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_ORG;
		sym.tok_opcode = TK_ORG;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_ORG;
	}
	{p++; goto _out; }
}
	break;
	case 116:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_PUBLIC;
		sym.tok_opcode = TK_PUBLIC;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_PUBLIC;
	}
	{p++; goto _out; }
}
	break;
	case 117:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_SECTION;
		sym.tok_opcode = TK_SECTION;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_SECTION;
	}
	{p++; goto _out; }
}
	break;
	case 118:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_UNDEFINE;
		sym.tok_opcode = TK_UNDEFINE;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_UNDEFINE;
	}
	{p++; goto _out; }
}
	break;
	case 123:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_ADC;
		sym.tok_opcode = TK_ADC;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_ADC;
	}
	{p++; goto _out; }
}
	break;
	case 124:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_ADD;
		sym.tok_opcode = TK_ADD;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_ADD;
	}
	{p++; goto _out; }
}
	break;
	case 125:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_AND;
		sym.tok_opcode = TK_AND;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_AND;
	}
	{p++; goto _out; }
}
	break;
	case 126:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_BIT;
		sym.tok_opcode = TK_BIT;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_BIT;
	}
	{p++; goto _out; }
}
	break;
	case 127:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_CALL;
		sym.tok_opcode = TK_CALL;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_CALL;
	}
	{p++; goto _out; }
}
	break;
	case 128:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_CCF;
		sym.tok_opcode = TK_CCF;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_CCF;
	}
	{p++; goto _out; }
}
	break;
	case 129:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_CP;
		sym.tok_opcode = TK_CP;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_CP;
	}
	{p++; goto _out; }
}
	break;
	case 130:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_CPD;
		sym.tok_opcode = TK_CPD;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_CPD;
	}
	{p++; goto _out; }
}
	break;
	case 131:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_CPDR;
		sym.tok_opcode = TK_CPDR;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_CPDR;
	}
	{p++; goto _out; }
}
	break;
	case 132:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_CPI;
		sym.tok_opcode = TK_CPI;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_CPI;
	}
	{p++; goto _out; }
}
	break;
	case 133:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_CPIR;
		sym.tok_opcode = TK_CPIR;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_CPIR;
	}
	{p++; goto _out; }
}
	break;
	case 134:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_CPL;
		sym.tok_opcode = TK_CPL;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_CPL;
	}
	{p++; goto _out; }
}
	break;
	case 135:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_DAA;
		sym.tok_opcode = TK_DAA;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_DAA;
	}
	{p++; goto _out; }
}
	break;
	case 136:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_DEC;
		sym.tok_opcode = TK_DEC;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_DEC;
	}
	{p++; goto _out; }
}
	break;
	case 137:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_DI;
		sym.tok_opcode = TK_DI;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_DI;
	}
	{p++; goto _out; }
}
	break;
	case 138:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_DJNZ;
		sym.tok_opcode = TK_DJNZ;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_DJNZ;
	}
	{p++; goto _out; }
}
	break;
	case 139:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_EI;
		sym.tok_opcode = TK_EI;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_EI;
	}
	{p++; goto _out; }
}
	break;
	case 140:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_EX;
		sym.tok_opcode = TK_EX;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_EX;
	}
	{p++; goto _out; }
}
	break;
	case 141:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_EXX;
		sym.tok_opcode = TK_EXX;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_EXX;
	}
	{p++; goto _out; }
}
	break;
	case 142:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_HALT;
		sym.tok_opcode = TK_HALT;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_HALT;
	}
	{p++; goto _out; }
}
	break;
	case 143:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_IM;
		sym.tok_opcode = TK_IM;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_IM;
	}
	{p++; goto _out; }
}
	break;
	case 144:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_IN;
		sym.tok_opcode = TK_IN;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_IN;
	}
	{p++; goto _out; }
}
	break;
	case 145:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_INC;
		sym.tok_opcode = TK_INC;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_INC;
	}
	{p++; goto _out; }
}
	break;
	case 146:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_IND;
		sym.tok_opcode = TK_IND;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_IND;
	}
	{p++; goto _out; }
}
	break;
	case 147:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_INDR;
		sym.tok_opcode = TK_INDR;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_INDR;
	}
	{p++; goto _out; }
}
	break;
	case 148:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_INI;
		sym.tok_opcode = TK_INI;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_INI;
	}
	{p++; goto _out; }
}
	break;
	case 149:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_INIR;
		sym.tok_opcode = TK_INIR;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_INIR;
	}
	{p++; goto _out; }
}
	break;
	case 150:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_JP;
		sym.tok_opcode = TK_JP;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_JP;
	}
	{p++; goto _out; }
}
	break;
	case 151:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_JR;
		sym.tok_opcode = TK_JR;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_JR;
	}
	{p++; goto _out; }
}
	break;
	case 152:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_LD;
		sym.tok_opcode = TK_LD;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_LD;
	}
	{p++; goto _out; }
}
	break;
	case 153:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_LDD;
		sym.tok_opcode = TK_LDD;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_LDD;
	}
	{p++; goto _out; }
}
	break;
	case 154:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_LDDR;
		sym.tok_opcode = TK_LDDR;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_LDDR;
	}
	{p++; goto _out; }
}
	break;
	case 155:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_LDI;
		sym.tok_opcode = TK_LDI;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_LDI;
	}
	{p++; goto _out; }
}
	break;
	case 156:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_LDIR;
		sym.tok_opcode = TK_LDIR;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_LDIR;
	}
	{p++; goto _out; }
}
	break;
	case 157:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_NEG;
		sym.tok_opcode = TK_NEG;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_NEG;
	}
	{p++; goto _out; }
}
	break;
	case 158:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_NOP;
		sym.tok_opcode = TK_NOP;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_NOP;
	}
	{p++; goto _out; }
}
	break;
	case 159:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_OR;
		sym.tok_opcode = TK_OR;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_OR;
	}
	{p++; goto _out; }
}
	break;
	case 160:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_OTDR;
		sym.tok_opcode = TK_OTDR;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_OTDR;
	}
	{p++; goto _out; }
}
	break;
	case 161:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_OTIR;
		sym.tok_opcode = TK_OTIR;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_OTIR;
	}
	{p++; goto _out; }
}
	break;
	case 162:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_OUT;
		sym.tok_opcode = TK_OUT;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_OUT;
	}
	{p++; goto _out; }
}
	break;
	case 163:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_OUTD;
		sym.tok_opcode = TK_OUTD;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_OUTD;
	}
	{p++; goto _out; }
}
	break;
	case 164:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_OUTI;
		sym.tok_opcode = TK_OUTI;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_OUTI;
	}
	{p++; goto _out; }
}
	break;
	case 165:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_POP;
		sym.tok_opcode = TK_POP;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_POP;
	}
	{p++; goto _out; }
}
	break;
	case 166:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_PUSH;
		sym.tok_opcode = TK_PUSH;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_PUSH;
	}
	{p++; goto _out; }
}
	break;
	case 167:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_RES;
		sym.tok_opcode = TK_RES;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_RES;
	}
	{p++; goto _out; }
}
	break;
	case 168:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_RET;
		sym.tok_opcode = TK_RET;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_RET;
	}
	{p++; goto _out; }
}
	break;
	case 169:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_RETI;
		sym.tok_opcode = TK_RETI;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_RETI;
	}
	{p++; goto _out; }
}
	break;
	case 170:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_RETN;
		sym.tok_opcode = TK_RETN;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_RETN;
	}
	{p++; goto _out; }
}
	break;
	case 171:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_RL;
		sym.tok_opcode = TK_RL;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_RL;
	}
	{p++; goto _out; }
}
	break;
	case 172:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_RLA;
		sym.tok_opcode = TK_RLA;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_RLA;
	}
	{p++; goto _out; }
}
	break;
	case 173:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_RLC;
		sym.tok_opcode = TK_RLC;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_RLC;
	}
	{p++; goto _out; }
}
	break;
	case 174:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_RLCA;
		sym.tok_opcode = TK_RLCA;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_RLCA;
	}
	{p++; goto _out; }
}
	break;
	case 175:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_RLD;
		sym.tok_opcode = TK_RLD;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_RLD;
	}
	{p++; goto _out; }
}
	break;
	case 176:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_RR;
		sym.tok_opcode = TK_RR;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_RR;
	}
	{p++; goto _out; }
}
	break;
	case 177:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_RRA;
		sym.tok_opcode = TK_RRA;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_RRA;
	}
	{p++; goto _out; }
}
	break;
	case 178:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_RRC;
		sym.tok_opcode = TK_RRC;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_RRC;
	}
	{p++; goto _out; }
}
	break;
	case 179:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_RRCA;
		sym.tok_opcode = TK_RRCA;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_RRCA;
	}
	{p++; goto _out; }
}
	break;
	case 180:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_RRD;
		sym.tok_opcode = TK_RRD;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_RRD;
	}
	{p++; goto _out; }
}
	break;
	case 181:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_RST;
		sym.tok_opcode = TK_RST;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_RST;
	}
	{p++; goto _out; }
}
	break;
	case 182:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_SBC;
		sym.tok_opcode = TK_SBC;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_SBC;
	}
	{p++; goto _out; }
}
	break;
	case 183:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_SCF;
		sym.tok_opcode = TK_SCF;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_SCF;
	}
	{p++; goto _out; }
}
	break;
	case 184:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_SET;
		sym.tok_opcode = TK_SET;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_SET;
	}
	{p++; goto _out; }
}
	break;
	case 185:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_SLA;
		sym.tok_opcode = TK_SLA;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_SLA;
	}
	{p++; goto _out; }
}
	break;
	case 186:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_SLL;
		sym.tok_opcode = TK_SLL;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_SLL;
	}
	{p++; goto _out; }
}
	break;
	case 187:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_SLI;
		sym.tok_opcode = TK_SLI;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_SLI;
	}
	{p++; goto _out; }
}
	break;
	case 188:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_SRA;
		sym.tok_opcode = TK_SRA;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_SRA;
	}
	{p++; goto _out; }
}
	break;
	case 189:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_SRL;
		sym.tok_opcode = TK_SRL;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_SRL;
	}
	{p++; goto _out; }
}
	break;
	case 190:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_SUB;
		sym.tok_opcode = TK_SUB;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_SUB;
	}
	{p++; goto _out; }
}
	break;
	case 191:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_XOR;
		sym.tok_opcode = TK_XOR;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_XOR;
	}
	{p++; goto _out; }
}
	break;
	case 192:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_IN0;
		sym.tok_opcode = TK_IN0;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_IN0;
	}
	{p++; goto _out; }
}
	break;
	case 193:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_MLT;
		sym.tok_opcode = TK_MLT;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_MLT;
	}
	{p++; goto _out; }
}
	break;
	case 194:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_OTDM;
		sym.tok_opcode = TK_OTDM;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_OTDM;
	}
	{p++; goto _out; }
}
	break;
	case 195:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_OTDMR;
		sym.tok_opcode = TK_OTDMR;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_OTDMR;
	}
	{p++; goto _out; }
}
	break;
	case 196:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_OTIM;
		sym.tok_opcode = TK_OTIM;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_OTIM;
	}
	{p++; goto _out; }
}
	break;
	case 197:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_OTIMR;
		sym.tok_opcode = TK_OTIMR;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_OTIMR;
	}
	{p++; goto _out; }
}
	break;
	case 198:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_OUT0;
		sym.tok_opcode = TK_OUT0;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_OUT0;
	}
	{p++; goto _out; }
}
	break;
	case 199:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_SLP;
		sym.tok_opcode = TK_SLP;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_SLP;
	}
	{p++; goto _out; }
}
	break;
	case 200:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_TST;
		sym.tok_opcode = TK_TST;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_TST;
	}
	{p++; goto _out; }
}
	break;
	case 201:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_TSTIO;
		sym.tok_opcode = TK_TSTIO;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_TSTIO;
	}
	{p++; goto _out; }
}
	break;
	case 202:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_ALTD;
		sym.tok_opcode = TK_ALTD;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_ALTD;
	}
	{p++; goto _out; }
}
	break;
	case 203:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_BOOL;
		sym.tok_opcode = TK_BOOL;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_BOOL;
	}
	{p++; goto _out; }
}
	break;
	case 204:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_IDET;
		sym.tok_opcode = TK_IDET;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_IDET;
	}
	{p++; goto _out; }
}
	break;
	case 205:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_IOE;
		sym.tok_opcode = TK_IOE;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_IOE;
	}
	{p++; goto _out; }
}
	break;
	case 206:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_IOI;
		sym.tok_opcode = TK_IOI;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_IOI;
	}
	{p++; goto _out; }
}
	break;
	case 207:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_IPRES;
		sym.tok_opcode = TK_IPRES;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_IPRES;
	}
	{p++; goto _out; }
}
	break;
	case 208:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_IPSET;
		sym.tok_opcode = TK_IPSET;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_IPSET;
	}
	{p++; goto _out; }
}
	break;
	case 209:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_LDDSR;
		sym.tok_opcode = TK_LDDSR;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_LDDSR;
	}
	{p++; goto _out; }
}
	break;
	case 210:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_LDISR;
		sym.tok_opcode = TK_LDISR;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_LDISR;
	}
	{p++; goto _out; }
}
	break;
	case 211:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_LDP;
		sym.tok_opcode = TK_LDP;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_LDP;
	}
	{p++; goto _out; }
}
	break;
	case 212:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_LSDR;
		sym.tok_opcode = TK_LSDR;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_LSDR;
	}
	{p++; goto _out; }
}
	break;
	case 213:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_LSIR;
		sym.tok_opcode = TK_LSIR;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_LSIR;
	}
	{p++; goto _out; }
}
	break;
	case 214:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_LSDDR;
		sym.tok_opcode = TK_LSDDR;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_LSDDR;
	}
	{p++; goto _out; }
}
	break;
	case 215:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_LSIDR;
		sym.tok_opcode = TK_LSIDR;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_LSIDR;
	}
	{p++; goto _out; }
}
	break;
	case 216:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_MUL;
		sym.tok_opcode = TK_MUL;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_MUL;
	}
	{p++; goto _out; }
}
	break;
	case 217:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_RDMODE;
		sym.tok_opcode = TK_RDMODE;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_RDMODE;
	}
	{p++; goto _out; }
}
	break;
	case 218:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_SETUSR;
		sym.tok_opcode = TK_SETUSR;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_SETUSR;
	}
	{p++; goto _out; }
}
	break;
	case 219:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_SURES;
		sym.tok_opcode = TK_SURES;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_SURES;
	}
	{p++; goto _out; }
}
	break;
	case 220:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_SYSCALL;
		sym.tok_opcode = TK_SYSCALL;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_SYSCALL;
	}
	{p++; goto _out; }
}
	break;
	case 221:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_UMA;
		sym.tok_opcode = TK_UMA;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_UMA;
	}
	{p++; goto _out; }
}
	break;
	case 222:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_UMS;
		sym.tok_opcode = TK_UMS;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_UMS;
	}
	{p++; goto _out; }
}
	break;
	case 223:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_CALL_OZ;
		sym.tok_opcode = TK_CALL_OZ;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_CALL_OZ;
	}
	{p++; goto _out; }
}
	break;
	case 224:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_CALL_PKG;
		sym.tok_opcode = TK_CALL_PKG;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_CALL_PKG;
	}
	{p++; goto _out; }
}
	break;
	case 225:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_FPP;
		sym.tok_opcode = TK_FPP;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_FPP;
	}
	{p++; goto _out; }
}
	break;
	case 226:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_INVOKE;
		sym.tok_opcode = TK_INVOKE;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_INVOKE;
	}
	{p++; goto _out; }
}
	break;
	case 229:
	{{p = ((te))-1;}
  sym.tok = TK_NAME;
  {p++; goto _out; }
 }
	break;
	case 231:
	{{p = ((te))-1;}
  sym.tok = TK_NUMBER;
  sym.number = scan_num( ts, te - ts, 10 );
  ts = te = p;
  {p++; goto _out; }
 }
	break;
	case 233:
	{{p = ((te))-1;}
  sym.tok = TK_NUMBER;
  sym.number = scan_num( ts + 1, te - ts - 1, 16 );
  ts = te = p;
  {p++; goto _out; }
 }
	break;
	case 235:
	{{p = ((te))-1;}
  sym.tok = TK_NUMBER;
  sym.number = scan_num( ts, te - ts - 1, 2 );
  ts = te = p;
  {p++; goto _out; }
 }
	break;
	case 237:
	{{p = ((te))-1;}
  sym.tok = TK_NUMBER;
  sym.number = scan_num( ts + 2, te - ts - 2, 2 );
  ts = te = p;
  {p++; goto _out; }
 }
	break;
	case 241:
	{{p = ((te))-1;}
  sym.tok = TK_NIL;
  skip_to_newline();
  ts = te = p;
  {p++; goto _out; }
 }
	break;
	}
	}
	break;
		}
	}
_again:
	_acts = _lexer_actions + _lexer_to_state_actions[cs];
	_nacts = (unsigned int) *_acts++;
	while ( _nacts-- > 0 ) {
		switch ( *_acts++ ) {
	case 0:
	{ts = 0;}
	break;
		}
	}
	if ( cs == 0 )
		goto _out;
	if ( ++p != pe )
		goto _resume;
	_test_eof: {}
	if ( p == eof )
	{
	if ( _lexer_eof_trans[cs] > 0 ) {
		_trans = _lexer_eof_trans[cs] - 1;
		goto _eof_trans;
	}
	}
	_out: {}
	}
 return sym.tok;
}
