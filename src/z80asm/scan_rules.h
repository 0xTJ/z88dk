static const short _lexer_actions[] = {
	0, 1, 0, 1, 1, 1, 2, 1, 
	207, 1, 208, 1, 209, 1, 210, 1, 
	211, 1, 212, 1, 213, 1, 214, 1, 
	215, 1, 216, 1, 217, 1, 218, 1, 
	219, 1, 220, 1, 221, 1, 222, 1, 
	223, 1, 224, 1, 225, 1, 226, 1, 
	227, 1, 228, 1, 229, 1, 230, 1, 
	231, 1, 232, 1, 233, 1, 234, 1, 
	235, 1, 236, 1, 237, 1, 238, 1, 
	239, 1, 240, 1, 241, 1, 242, 1, 
	243, 1, 244, 1, 245, 1, 246, 1, 
	247, 1, 248, 1, 249, 1, 250, 1, 
	251, 1, 252, 1, 253, 1, 254, 1, 
	255, 1, 256, 1, 257, 1, 258, 1, 
	259, 1, 260, 1, 261, 1, 262, 1, 
	263, 1, 264, 1, 265, 1, 266, 1, 
	267, 1, 268, 1, 269, 1, 270, 1, 
	271, 1, 272, 1, 273, 1, 274, 1, 
	275, 1, 276, 1, 277, 1, 278, 1, 
	279, 1, 280, 1, 281, 1, 282, 1, 
	283, 1, 284, 1, 285, 1, 286, 1, 
	287, 1, 288, 1, 289, 1, 290, 1, 
	291, 1, 292, 1, 293, 1, 294, 1, 
	295, 1, 296, 1, 297, 1, 298, 1, 
	299, 1, 300, 1, 301, 1, 302, 1, 
	303, 1, 304, 1, 305, 1, 306, 1, 
	307, 1, 308, 1, 309, 1, 310, 1, 
	311, 1, 312, 1, 313, 1, 314, 1, 
	315, 1, 316, 1, 317, 1, 318, 1, 
	319, 1, 320, 1, 321, 1, 322, 1, 
	323, 1, 324, 1, 325, 1, 326, 1, 
	327, 1, 328, 1, 329, 1, 330, 1, 
	331, 1, 332, 1, 333, 1, 334, 1, 
	335, 1, 336, 1, 337, 1, 338, 1, 
	339, 1, 340, 1, 341, 1, 342, 1, 
	343, 1, 344, 1, 345, 1, 346, 1, 
	347, 1, 348, 1, 349, 2, 2, 3, 
	2, 2, 4, 2, 2, 5, 2, 2, 
	6, 2, 2, 7, 2, 2, 8, 2, 
	2, 9, 2, 2, 10, 2, 2, 11, 
	2, 2, 12, 2, 2, 13, 2, 2, 
	14, 2, 2, 15, 2, 2, 16, 2, 
	2, 17, 2, 2, 18, 2, 2, 19, 
	2, 2, 20, 2, 2, 21, 2, 2, 
	22, 2, 2, 23, 2, 2, 24, 2, 
	2, 25, 2, 2, 26, 2, 2, 27, 
	2, 2, 28, 2, 2, 29, 2, 2, 
	30, 2, 2, 31, 2, 2, 32, 2, 
	2, 33, 2, 2, 34, 2, 2, 35, 
	2, 2, 36, 2, 2, 37, 2, 2, 
	38, 2, 2, 39, 2, 2, 40, 2, 
	2, 41, 2, 2, 42, 2, 2, 43, 
	2, 2, 44, 2, 2, 45, 2, 2, 
	46, 2, 2, 47, 2, 2, 48, 2, 
	2, 49, 2, 2, 50, 2, 2, 51, 
	2, 2, 52, 2, 2, 53, 2, 2, 
	54, 2, 2, 55, 2, 2, 56, 2, 
	2, 57, 2, 2, 58, 2, 2, 59, 
	2, 2, 60, 2, 2, 61, 2, 2, 
	62, 2, 2, 63, 2, 2, 64, 2, 
	2, 65, 2, 2, 66, 2, 2, 67, 
	2, 2, 68, 2, 2, 69, 2, 2, 
	70, 2, 2, 71, 2, 2, 72, 2, 
	2, 73, 2, 2, 74, 2, 2, 75, 
	2, 2, 76, 2, 2, 77, 2, 2, 
	78, 2, 2, 79, 2, 2, 80, 2, 
	2, 81, 2, 2, 82, 2, 2, 83, 
	2, 2, 84, 2, 2, 85, 2, 2, 
	86, 2, 2, 87, 2, 2, 88, 2, 
	2, 89, 2, 2, 90, 2, 2, 91, 
	2, 2, 92, 2, 2, 93, 2, 2, 
	94, 2, 2, 95, 2, 2, 96, 2, 
	2, 97, 2, 2, 98, 2, 2, 99, 
	2, 2, 100, 2, 2, 101, 2, 2, 
	102, 2, 2, 103, 2, 2, 104, 2, 
	2, 105, 2, 2, 106, 2, 2, 107, 
	2, 2, 108, 2, 2, 109, 2, 2, 
	110, 2, 2, 111, 2, 2, 112, 2, 
	2, 113, 2, 2, 114, 2, 2, 115, 
	2, 2, 116, 2, 2, 117, 2, 2, 
	118, 2, 2, 119, 2, 2, 120, 2, 
	2, 121, 2, 2, 122, 2, 2, 123, 
	2, 2, 124, 2, 2, 125, 2, 2, 
	126, 2, 2, 127, 2, 2, 128, 2, 
	2, 129, 2, 2, 130, 2, 2, 131, 
	2, 2, 132, 2, 2, 133, 2, 2, 
	134, 2, 2, 135, 2, 2, 136, 2, 
	2, 137, 2, 2, 138, 2, 2, 139, 
	2, 2, 140, 2, 2, 141, 2, 2, 
	142, 2, 2, 143, 2, 2, 144, 2, 
	2, 145, 2, 2, 146, 2, 2, 147, 
	2, 2, 148, 2, 2, 149, 2, 2, 
	150, 2, 2, 151, 2, 2, 152, 2, 
	2, 153, 2, 2, 154, 2, 2, 155, 
	2, 2, 156, 2, 2, 157, 2, 2, 
	158, 2, 2, 159, 2, 2, 160, 2, 
	2, 161, 2, 2, 162, 2, 2, 163, 
	2, 2, 164, 2, 2, 165, 2, 2, 
	166, 2, 2, 167, 2, 2, 168, 2, 
	2, 169, 2, 2, 170, 2, 2, 171, 
	2, 2, 172, 2, 2, 173, 2, 2, 
	174, 2, 2, 175, 2, 2, 176, 2, 
	2, 177, 2, 2, 178, 2, 2, 179, 
	2, 2, 180, 2, 2, 181, 2, 2, 
	182, 2, 2, 183, 2, 2, 184, 2, 
	2, 185, 2, 2, 186, 2, 2, 187, 
	2, 2, 188, 2, 2, 189, 2, 2, 
	190, 2, 2, 191, 2, 2, 192, 2, 
	2, 193, 2, 2, 194, 2, 2, 195, 
	2, 2, 196, 2, 2, 197, 2, 2, 
	198, 2, 2, 199, 2, 2, 200, 2, 
	2, 201, 2, 2, 202, 2, 2, 203, 
	2, 2, 204, 2, 2, 205, 2, 2, 
	206
};
static const short _lexer_cond_offsets[] = {
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 5, 8, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 17, 21, 28, 35, 
	42, 49, 56, 63, 70, 77, 84, 91, 
	98, 105, 112, 119, 126, 133, 140, 147, 
	154, 161, 168, 175, 182, 189, 196, 203, 
	210, 217, 224, 231, 238, 245, 252, 259, 
	266, 273, 280, 287, 294, 301, 308, 315, 
	322, 329, 336, 343, 350, 357, 364, 371, 
	378, 385, 392, 399, 406, 413, 420, 427, 
	434, 441, 448, 455, 462, 469, 476, 483, 
	490, 497, 504, 511, 518, 525, 532, 539, 
	546, 553, 560, 567, 574, 581, 588, 595, 
	602, 609, 616, 623, 630, 637, 644, 651, 
	658, 665, 672, 679, 686, 693, 700, 707, 
	714, 721, 728, 735, 742, 749, 756, 763, 
	770, 777, 784, 791, 798, 805, 812, 819, 
	826, 833, 840, 847, 854, 861, 868, 875, 
	882, 889, 896, 903, 910, 917, 924, 931, 
	938, 945, 952, 959, 966, 973, 980, 987, 
	994, 1001, 1008, 1015, 1022, 1029, 1036, 1043, 
	1050, 1057, 1064, 1071, 1078, 1085, 1092, 1099, 
	1106, 1113, 1120, 1127, 1134, 1141, 1148, 1155, 
	1162, 1169, 1176, 1183, 1190, 1197, 1204, 1211, 
	1218, 1225, 1232, 1239, 1246, 1253, 1260, 1267, 
	1274, 1281, 1288, 1295, 1302, 1309, 1316, 1323, 
	1330, 1337, 1344, 1351, 1358, 1365, 1372, 1379, 
	1386, 1393, 1400, 1407, 1414, 1421, 1428, 1435, 
	1442, 1449, 1456, 1463, 1470, 1477, 1484, 1491, 
	1498, 1505, 1512, 1519, 1526, 1533, 1540, 1547, 
	1554, 1561, 1568, 1575, 1582, 1589, 1596, 1603, 
	1610, 1617, 1624, 1631, 1638, 1645, 1652, 1659
};
static const char _lexer_cond_lengths[] = {
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 5, 3, 4, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 5, 4, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7
};
static const short _lexer_cond_keys[] = {
	9, 9, 32, 32, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 58, 58, 
	46, 46, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 65, 90, 95, 95, 
	97, 122, 48, 57, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 0
};
static const char _lexer_cond_spaces[] = {
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0
};
static const short _lexer_key_offsets[] = {
	0, 0, 2, 5, 19, 21, 26, 31, 
	33, 38, 40, 45, 49, 54, 59, 61, 
	66, 74, 80, 88, 95, 98, 236, 237, 
	243, 246, 248, 249, 263, 264, 278, 290, 
	298, 306, 316, 322, 323, 326, 327, 329, 
	330, 349, 356, 364, 375, 383, 392, 401, 
	410, 419, 428, 437, 451, 459, 470, 479, 
	488, 497, 506, 515, 529, 538, 547, 554, 
	565, 574, 583, 592, 601, 609, 622, 631, 
	640, 658, 667, 681, 706, 715, 724, 733, 
	742, 751, 760, 769, 778, 787, 796, 805, 
	814, 822, 838, 847, 856, 865, 874, 883, 
	892, 903, 912, 921, 930, 942, 951, 960, 
	969, 978, 987, 996, 1005, 1014, 1023, 1032, 
	1044, 1053, 1062, 1070, 1095, 1104, 1113, 1124, 
	1133, 1142, 1151, 1160, 1169, 1178, 1194, 1203, 
	1212, 1221, 1230, 1239, 1248, 1257, 1266, 1275, 
	1286, 1297, 1306, 1315, 1324, 1333, 1344, 1355, 
	1366, 1384, 1397, 1410, 1419, 1428, 1441, 1452, 
	1461, 1470, 1479, 1488, 1497, 1506, 1515, 1524, 
	1533, 1542, 1555, 1566, 1575, 1586, 1595, 1604, 
	1615, 1624, 1641, 1650, 1659, 1668, 1677, 1686, 
	1695, 1710, 1719, 1728, 1737, 1746, 1755, 1772, 
	1783, 1792, 1801, 1810, 1819, 1828, 1841, 1850, 
	1861, 1872, 1881, 1892, 1901, 1910, 1922, 1931, 
	1940, 1955, 1964, 1973, 1982, 1993, 2002, 2011, 
	2020, 2029, 2040, 2049, 2058, 2067, 2076, 2093, 
	2102, 2111, 2120, 2129, 2140, 2151, 2164, 2172, 
	2181, 2189, 2202, 2210, 2219, 2227, 2236, 2261, 
	2270, 2279, 2287, 2298, 2307, 2316, 2325, 2334, 
	2345, 2354, 2363, 2372, 2387, 2398, 2409, 2418, 
	2427, 2436, 2445, 2454, 2463, 2472, 2481, 2490, 
	2499, 2508, 2517, 2528, 2537, 2546, 2555, 2564, 
	2573, 2584, 2595, 2604, 2613, 2622, 2631, 2640, 
	2649, 2660, 2669, 2678, 2685, 2692, 2732, 2749, 
	2768, 2793, 2811, 2832, 2853, 2874, 2895, 2916, 
	2937, 2967, 2985, 3010, 3031, 3052, 3073, 3094, 
	3115, 3145, 3166, 3187, 3204, 3229, 3250, 3271, 
	3292, 3313, 3331, 3360, 3381, 3402, 3440, 3461, 
	3491, 3544, 3565, 3586, 3607, 3628, 3649, 3670, 
	3691, 3712, 3733, 3754, 3775, 3796, 3814, 3848, 
	3869, 3890, 3911, 3932, 3953, 3974, 3999, 4020, 
	4041, 4062, 4088, 4109, 4130, 4151, 4172, 4193, 
	4214, 4235, 4256, 4277, 4298, 4324, 4345, 4366, 
	4384, 4437, 4458, 4479, 4504, 4525, 4546, 4567, 
	4588, 4609, 4630, 4665, 4686, 4707, 4728, 4749, 
	4770, 4791, 4812, 4833, 4854, 4879, 4904, 4925, 
	4946, 4967, 4988, 5013, 5038, 5063, 5101, 5130, 
	5159, 5180, 5201, 5230, 5255, 5276, 5297, 5318, 
	5339, 5360, 5381, 5402, 5423, 5444, 5465, 5494, 
	5519, 5540, 5565, 5586, 5607, 5632, 5653, 5690, 
	5711, 5732, 5753, 5774, 5795, 5816, 5849, 5870, 
	5891, 5912, 5933, 5954, 5991, 6016, 6037, 6058, 
	6079, 6100, 6121, 6150, 6171, 6196, 6221, 6242, 
	6267, 6288, 6309, 6336, 6357, 6378, 6411, 6432, 
	6453, 6474, 6499, 6520, 6541, 6562, 6583, 6608, 
	6629, 6650, 6671, 6692, 6729, 6750, 6771, 6792, 
	6813, 6838, 6863, 6892, 6910, 6931, 6949, 6978, 
	6996, 7017, 7035, 7056, 7109, 7130, 7151, 7169, 
	7194, 7215, 7236, 7257, 7278, 7303, 7324, 7345, 
	7366, 7399, 7424, 7449, 7470, 7491, 7512, 7533, 
	7554, 7575, 7596, 7617, 7638, 7659, 7680, 7701, 
	7726, 7747, 7768, 7789, 7810, 7831, 7856, 7881, 
	7902, 7923, 7944, 7965, 7986, 8007, 8032, 8053
};
static const short _lexer_trans_keys[] = {
	35, 45, 34, 35, 45, 9, 32, 66, 
	67, 68, 72, 73, 83, 98, 99, 100, 
	104, 105, 115, 67, 99, 9, 32, 41, 
	43, 45, 9, 32, 41, 43, 45, 69, 
	101, 9, 32, 41, 43, 45, 76, 108, 
	9, 32, 41, 43, 45, 88, 89, 120, 
	121, 9, 32, 41, 43, 45, 9, 32, 
	41, 43, 45, 80, 112, 9, 32, 41, 
	43, 45, 72, 104, 48, 57, 65, 70, 
	97, 102, 48, 57, 65, 70, 97, 102, 
	66, 80, 81, 87, 98, 112, 113, 119, 
	521, 544, 607, 577, 602, 609, 634, 521, 
	544, 570, 10, 33, 34, 35, 36, 37, 
	38, 39, 40, 41, 42, 43, 44, 45, 
	47, 48, 49, 58, 59, 60, 61, 62, 
	63, 64, 91, 92, 93, 94, 96, 123, 
	124, 125, 126, 127, 302, 321, 322, 323, 
	324, 325, 326, 327, 328, 329, 330, 332, 
	333, 334, 335, 336, 338, 339, 340, 341, 
	342, 344, 346, 351, 353, 354, 355, 356, 
	357, 358, 359, 360, 361, 362, 364, 365, 
	366, 367, 368, 370, 371, 372, 373, 374, 
	376, 378, 558, 577, 578, 579, 580, 581, 
	582, 583, 584, 585, 586, 588, 589, 590, 
	591, 592, 594, 595, 596, 597, 598, 600, 
	602, 607, 609, 610, 611, 612, 613, 614, 
	615, 616, 617, 618, 620, 621, 622, 623, 
	624, 626, 627, 628, 629, 630, 632, 634, 
	-128, 32, 50, 57, 331, 345, 363, 377, 
	587, 601, 619, 633, 61, 48, 57, 65, 
	70, 97, 102, 34, 48, 49, 48, 49, 
	38, 9, 32, 66, 67, 68, 72, 73, 
	83, 98, 99, 100, 104, 105, 115, 42, 
	66, 72, 88, 98, 104, 120, 48, 49, 
	50, 57, 65, 70, 97, 102, 66, 72, 
	98, 104, 48, 49, 50, 57, 65, 70, 
	97, 102, 72, 104, 48, 57, 65, 70, 
	97, 102, 72, 104, 48, 57, 65, 70, 
	97, 102, 72, 104, 48, 49, 50, 57, 
	65, 70, 97, 102, 48, 57, 65, 70, 
	97, 102, 10, 60, 61, 62, 61, 61, 
	62, 124, 39, 51, 68, 70, 76, 78, 
	83, 95, 100, 102, 108, 110, 115, 48, 
	57, 65, 90, 97, 122, 95, 48, 57, 
	65, 90, 97, 122, 50, 95, 48, 57, 
	65, 90, 97, 122, 67, 68, 95, 99, 
	100, 48, 57, 65, 90, 97, 122, 39, 
	95, 48, 57, 65, 90, 97, 122, 84, 
	95, 116, 48, 57, 65, 90, 97, 122, 
	68, 95, 100, 48, 57, 65, 90, 97, 
	122, 68, 95, 100, 48, 57, 65, 90, 
	97, 122, 77, 95, 109, 48, 57, 65, 
	90, 97, 122, 80, 95, 112, 48, 57, 
	65, 90, 97, 122, 67, 95, 99, 48, 
	57, 65, 90, 97, 122, 39, 67, 73, 
	79, 95, 99, 105, 111, 48, 57, 65, 
	90, 97, 122, 39, 95, 48, 57, 65, 
	90, 97, 122, 78, 84, 95, 110, 116, 
	48, 57, 65, 90, 97, 122, 65, 95, 
	97, 48, 57, 66, 90, 98, 122, 82, 
	95, 114, 48, 57, 65, 90, 97, 122, 
	89, 95, 121, 48, 57, 65, 90, 97, 
	122, 79, 95, 111, 48, 57, 65, 90, 
	97, 122, 76, 95, 108, 48, 57, 65, 
	90, 97, 122, 39, 65, 67, 80, 95, 
	97, 99, 112, 48, 57, 66, 90, 98, 
	122, 76, 95, 108, 48, 57, 65, 90, 
	97, 122, 76, 95, 108, 48, 57, 65, 
	90, 97, 122, 95, 48, 57, 65, 90, 
	97, 122, 79, 80, 95, 111, 112, 48, 
	57, 65, 90, 97, 122, 90, 95, 122, 
	48, 57, 65, 89, 97, 121, 75, 95, 
	107, 48, 57, 65, 90, 97, 122, 71, 
	95, 103, 48, 57, 65, 90, 97, 122, 
	70, 95, 102, 48, 57, 65, 90, 97, 
	122, 39, 95, 48, 57, 65, 90, 97, 
	122, 68, 73, 76, 95, 100, 105, 108, 
	48, 57, 65, 90, 97, 122, 82, 95, 
	114, 48, 57, 65, 90, 97, 122, 82, 
	95, 114, 48, 57, 65, 90, 97, 122, 
	39, 65, 69, 73, 74, 83, 95, 97, 
	101, 105, 106, 115, 48, 57, 66, 90, 
	98, 122, 65, 95, 97, 48, 57, 66, 
	90, 98, 122, 39, 67, 70, 72, 95, 
	99, 102, 104, 48, 57, 65, 90, 97, 
	122, 66, 67, 71, 73, 77, 81, 83, 
	86, 87, 95, 98, 99, 103, 105, 109, 
	113, 115, 118, 119, 48, 57, 65, 90, 
	97, 122, 82, 95, 114, 48, 57, 65, 
	90, 97, 122, 79, 95, 111, 48, 57, 
	65, 90, 97, 122, 85, 95, 117, 48, 
	57, 65, 90, 97, 122, 80, 95, 112, 
	48, 57, 65, 90, 97, 122, 78, 95, 
	110, 48, 57, 65, 90, 97, 122, 69, 
	95, 101, 48, 57, 65, 90, 97, 122, 
	65, 95, 97, 48, 57, 66, 90, 98, 
	122, 82, 95, 114, 48, 57, 65, 90, 
	97, 122, 83, 95, 115, 48, 57, 65, 
	90, 97, 122, 76, 95, 108, 48, 57, 
	65, 90, 97, 122, 78, 95, 110, 48, 
	57, 65, 90, 97, 122, 90, 95, 122, 
	48, 57, 65, 89, 97, 121, 46, 95, 
	48, 57, 65, 90, 97, 122, 39, 73, 
	76, 78, 88, 95, 105, 108, 110, 120, 
	48, 57, 65, 90, 97, 122, 82, 95, 
	114, 48, 57, 65, 90, 97, 122, 83, 
	95, 115, 48, 57, 65, 90, 97, 122, 
	69, 95, 101, 48, 57, 65, 90, 97, 
	122, 68, 95, 100, 48, 57, 65, 90, 
	97, 122, 73, 95, 105, 48, 57, 65, 
	90, 97, 122, 70, 95, 102, 48, 57, 
	65, 90, 97, 122, 84, 88, 95, 116, 
	120, 48, 57, 65, 90, 97, 122, 69, 
	95, 101, 48, 57, 65, 90, 97, 122, 
	82, 95, 114, 48, 57, 65, 90, 97, 
	122, 78, 95, 110, 48, 57, 65, 90, 
	97, 122, 39, 73, 80, 95, 105, 112, 
	48, 57, 65, 90, 97, 122, 76, 95, 
	108, 48, 57, 65, 90, 97, 122, 76, 
	95, 108, 48, 57, 65, 90, 97, 122, 
	68, 95, 100, 48, 57, 65, 90, 97, 
	122, 69, 95, 101, 48, 57, 65, 90, 
	97, 122, 80, 95, 112, 48, 57, 65, 
	90, 97, 122, 76, 95, 108, 48, 57, 
	65, 90, 97, 122, 79, 95, 111, 48, 
	57, 65, 90, 97, 122, 66, 95, 98, 
	48, 57, 65, 90, 97, 122, 65, 95, 
	97, 48, 57, 66, 90, 98, 122, 76, 
	95, 108, 48, 57, 65, 90, 97, 122, 
	39, 65, 76, 95, 97, 108, 48, 57, 
	66, 90, 98, 122, 76, 95, 108, 48, 
	57, 65, 90, 97, 122, 84, 95, 116, 
	48, 57, 65, 90, 97, 122, 39, 95, 
	48, 57, 65, 90, 97, 122, 68, 70, 
	73, 77, 78, 79, 80, 88, 89, 95, 
	100, 102, 105, 109, 110, 111, 112, 120, 
	121, 48, 57, 65, 90, 97, 122, 69, 
	95, 101, 48, 57, 65, 90, 97, 122, 
	84, 95, 116, 48, 57, 65, 90, 97, 
	122, 68, 78, 95, 100, 110, 48, 57, 
	65, 90, 97, 122, 69, 95, 101, 48, 
	57, 65, 90, 97, 122, 70, 95, 102, 
	48, 57, 65, 90, 97, 122, 68, 95, 
	100, 48, 57, 65, 90, 97, 122, 69, 
	95, 101, 48, 57, 65, 90, 97, 122, 
	70, 95, 102, 48, 57, 65, 90, 97, 
	122, 82, 95, 114, 48, 57, 65, 90, 
	97, 122, 48, 67, 68, 73, 86, 95, 
	99, 100, 105, 118, 49, 57, 65, 90, 
	97, 122, 76, 95, 108, 48, 57, 65, 
	90, 97, 122, 85, 95, 117, 48, 57, 
	65, 90, 97, 122, 68, 95, 100, 48, 
	57, 65, 90, 97, 122, 69, 95, 101, 
	48, 57, 65, 90, 97, 122, 82, 95, 
	114, 48, 57, 65, 90, 97, 122, 82, 
	95, 114, 48, 57, 65, 90, 97, 122, 
	79, 95, 111, 48, 57, 65, 90, 97, 
	122, 75, 95, 107, 48, 57, 65, 90, 
	97, 122, 69, 95, 101, 48, 57, 65, 
	90, 97, 122, 69, 73, 95, 101, 105, 
	48, 57, 65, 90, 97, 122, 82, 83, 
	95, 114, 115, 48, 57, 65, 90, 97, 
	122, 69, 95, 101, 48, 57, 65, 90, 
	97, 122, 83, 95, 115, 48, 57, 65, 
	90, 97, 122, 69, 95, 101, 48, 57, 
	65, 90, 97, 122, 84, 95, 116, 48, 
	57, 65, 90, 97, 122, 72, 76, 95, 
	104, 108, 48, 57, 65, 90, 97, 122, 
	72, 76, 95, 104, 108, 48, 57, 65, 
	90, 97, 122, 80, 82, 95, 112, 114, 
	48, 57, 65, 90, 97, 122, 39, 68, 
	73, 79, 83, 90, 95, 100, 105, 111, 
	115, 122, 48, 57, 65, 89, 97, 121, 
	68, 73, 80, 95, 100, 105, 112, 48, 
	57, 65, 90, 97, 122, 82, 83, 88, 
	95, 114, 115, 120, 48, 57, 65, 90, 
	97, 122, 88, 95, 120, 48, 57, 65, 
	90, 97, 122, 82, 95, 114, 48, 57, 
	65, 90, 97, 122, 82, 83, 88, 95, 
	114, 115, 120, 48, 57, 65, 90, 97, 
	122, 83, 88, 95, 115, 120, 48, 57, 
	65, 90, 97, 122, 67, 95, 99, 48, 
	57, 65, 90, 97, 122, 65, 95, 97, 
	48, 57, 66, 90, 98, 122, 76, 95, 
	108, 48, 57, 65, 90, 97, 122, 69, 
	95, 101, 48, 57, 65, 90, 97, 122, 
	82, 95, 114, 48, 57, 65, 90, 97, 
	122, 73, 95, 105, 48, 57, 65, 90, 
	97, 122, 82, 95, 114, 48, 57, 65, 
	90, 97, 122, 88, 95, 120, 48, 57, 
	65, 90, 97, 122, 78, 95, 110, 48, 
	57, 65, 90, 97, 122, 69, 95, 101, 
	48, 57, 65, 90, 97, 122, 68, 73, 
	84, 95, 100, 105, 116, 48, 57, 65, 
	90, 97, 122, 68, 82, 95, 100, 114, 
	48, 57, 65, 90, 97, 122, 82, 95, 
	114, 48, 57, 65, 90, 97, 122, 68, 
	82, 95, 100, 114, 48, 57, 65, 90, 
	97, 122, 82, 95, 114, 48, 57, 65, 
	90, 97, 122, 79, 95, 111, 48, 57, 
	65, 90, 97, 122, 70, 78, 95, 102, 
	110, 48, 57, 65, 90, 97, 122, 70, 
	95, 102, 48, 57, 65, 90, 97, 122, 
	73, 76, 77, 79, 85, 95, 105, 108, 
	109, 111, 117, 48, 57, 65, 90, 97, 
	122, 82, 95, 114, 48, 57, 65, 90, 
	97, 122, 82, 95, 114, 48, 57, 65, 
	90, 97, 122, 79, 95, 111, 48, 57, 
	65, 90, 97, 122, 82, 95, 114, 48, 
	57, 65, 90, 97, 122, 84, 95, 116, 
	48, 57, 65, 90, 97, 122, 85, 95, 
	117, 48, 57, 65, 90, 97, 122, 48, 
	49, 50, 51, 52, 53, 54, 55, 95, 
	56, 57, 65, 90, 97, 122, 68, 95, 
	100, 48, 57, 65, 90, 97, 122, 85, 
	95, 117, 48, 57, 65, 90, 97, 122, 
	76, 95, 108, 48, 57, 65, 90, 97, 
	122, 69, 95, 101, 48, 57, 65, 90, 
	97, 122, 76, 95, 108, 48, 57, 65, 
	90, 97, 122, 67, 69, 79, 86, 90, 
	95, 99, 101, 111, 118, 122, 48, 57, 
	65, 89, 97, 121, 71, 88, 95, 103, 
	120, 48, 57, 65, 90, 97, 122, 84, 
	95, 116, 48, 57, 65, 90, 97, 122, 
	82, 95, 114, 48, 57, 65, 90, 97, 
	122, 69, 95, 101, 48, 57, 65, 90, 
	97, 122, 71, 95, 103, 48, 57, 65, 
	90, 97, 122, 80, 95, 112, 48, 57, 
	65, 90, 97, 122, 82, 84, 85, 95, 
	114, 116, 117, 48, 57, 65, 90, 97, 
	122, 71, 95, 103, 48, 57, 65, 90, 
	97, 122, 68, 73, 95, 100, 105, 48, 
	57, 65, 90, 97, 122, 77, 82, 95, 
	109, 114, 48, 57, 65, 90, 97, 122, 
	82, 95, 114, 48, 57, 65, 90, 97, 
	122, 77, 82, 95, 109, 114, 48, 57, 
	65, 90, 97, 122, 82, 95, 114, 48, 
	57, 65, 90, 97, 122, 84, 95, 116, 
	48, 57, 65, 90, 97, 122, 48, 68, 
	73, 95, 100, 105, 49, 57, 65, 90, 
	97, 122, 78, 95, 110, 48, 57, 65, 
	90, 97, 122, 66, 95, 98, 48, 57, 
	65, 90, 97, 122, 69, 73, 79, 85, 
	95, 101, 105, 111, 117, 48, 57, 65, 
	90, 97, 122, 88, 95, 120, 48, 57, 
	65, 90, 97, 122, 69, 95, 101, 48, 
	57, 65, 90, 97, 122, 76, 95, 108, 
	48, 57, 65, 90, 97, 122, 65, 68, 
	95, 97, 100, 48, 57, 66, 90, 98, 
	122, 68, 95, 100, 48, 57, 65, 90, 
	97, 122, 78, 95, 110, 48, 57, 65, 
	90, 97, 122, 80, 95, 112, 48, 57, 
	65, 90, 97, 122, 88, 95, 120, 48, 
	57, 65, 90, 97, 122, 66, 83, 95, 
	98, 115, 48, 57, 65, 90, 97, 122, 
	76, 95, 108, 48, 57, 65, 90, 97, 
	122, 73, 95, 105, 48, 57, 65, 90, 
	97, 122, 67, 95, 99, 48, 57, 65, 
	90, 97, 122, 72, 95, 104, 48, 57, 
	65, 90, 97, 122, 68, 69, 76, 82, 
	83, 95, 100, 101, 108, 114, 115, 48, 
	57, 65, 90, 97, 122, 77, 95, 109, 
	48, 57, 65, 90, 97, 122, 79, 95, 
	111, 48, 57, 65, 90, 97, 122, 68, 
	95, 100, 48, 57, 65, 90, 97, 122, 
	69, 95, 101, 48, 57, 65, 90, 97, 
	122, 83, 84, 95, 115, 116, 48, 57, 
	65, 90, 97, 122, 73, 78, 95, 105, 
	110, 48, 57, 65, 90, 97, 122, 65, 
	67, 68, 95, 97, 99, 100, 48, 57, 
	66, 90, 98, 122, 39, 95, 48, 57, 
	65, 90, 97, 122, 65, 95, 97, 48, 
	57, 66, 90, 98, 122, 39, 95, 48, 
	57, 65, 90, 97, 122, 65, 67, 68, 
	95, 97, 99, 100, 48, 57, 66, 90, 
	98, 122, 39, 95, 48, 57, 65, 90, 
	97, 122, 65, 95, 97, 48, 57, 66, 
	90, 98, 122, 39, 95, 48, 57, 65, 
	90, 97, 122, 84, 95, 116, 48, 57, 
	65, 90, 97, 122, 66, 67, 69, 76, 
	80, 82, 85, 87, 89, 95, 98, 99, 
	101, 108, 112, 114, 117, 119, 121, 48, 
	57, 65, 90, 97, 122, 67, 95, 99, 
	48, 57, 65, 90, 97, 122, 70, 95, 
	102, 48, 57, 65, 90, 97, 122, 39, 
	95, 48, 57, 65, 90, 97, 122, 67, 
	84, 95, 99, 116, 48, 57, 65, 90, 
	97, 122, 84, 95, 116, 48, 57, 65, 
	90, 97, 122, 73, 95, 105, 48, 57, 
	65, 90, 97, 122, 79, 95, 111, 48, 
	57, 65, 90, 97, 122, 78, 95, 110, 
	48, 57, 65, 90, 97, 122, 65, 85, 
	95, 97, 117, 48, 57, 66, 90, 98, 
	122, 69, 95, 101, 48, 57, 65, 90, 
	97, 122, 83, 95, 115, 48, 57, 65, 
	90, 97, 122, 82, 95, 114, 48, 57, 
	65, 90, 97, 122, 65, 73, 76, 80, 
	95, 97, 105, 108, 112, 48, 57, 66, 
	90, 98, 122, 65, 76, 95, 97, 108, 
	48, 57, 66, 90, 98, 122, 66, 82, 
	95, 98, 114, 48, 57, 65, 90, 97, 
	122, 69, 95, 101, 48, 57, 65, 90, 
	97, 122, 83, 95, 115, 48, 57, 65, 
	90, 97, 122, 65, 95, 97, 48, 57, 
	66, 90, 98, 122, 80, 95, 112, 48, 
	57, 65, 90, 97, 122, 78, 95, 110, 
	48, 57, 65, 90, 97, 122, 73, 95, 
	105, 48, 57, 65, 90, 97, 122, 66, 
	95, 98, 48, 57, 65, 90, 97, 122, 
	83, 95, 115, 48, 57, 65, 90, 97, 
	122, 67, 95, 99, 48, 57, 65, 90, 
	97, 122, 65, 95, 97, 48, 57, 66, 
	90, 98, 122, 76, 95, 108, 48, 57, 
	65, 90, 97, 122, 76, 95, 108, 48, 
	57, 65, 90, 97, 122, 69, 83, 95, 
	101, 115, 48, 57, 65, 90, 97, 122, 
	83, 95, 115, 48, 57, 65, 90, 97, 
	122, 84, 95, 116, 48, 57, 65, 90, 
	97, 122, 84, 95, 116, 48, 57, 65, 
	90, 97, 122, 73, 95, 105, 48, 57, 
	65, 90, 97, 122, 79, 95, 111, 48, 
	57, 65, 90, 97, 122, 77, 78, 95, 
	109, 110, 48, 57, 65, 90, 97, 122, 
	65, 83, 95, 97, 115, 48, 57, 66, 
	90, 98, 122, 68, 95, 100, 48, 57, 
	65, 90, 97, 122, 69, 95, 101, 48, 
	57, 65, 90, 97, 122, 70, 95, 102, 
	48, 57, 65, 90, 97, 122, 73, 95, 
	105, 48, 57, 65, 90, 97, 122, 78, 
	95, 110, 48, 57, 65, 90, 97, 122, 
	69, 95, 101, 48, 57, 65, 90, 97, 
	122, 79, 80, 95, 111, 112, 48, 57, 
	65, 90, 97, 122, 82, 95, 114, 48, 
	57, 65, 90, 97, 122, 67, 95, 99, 
	48, 57, 65, 90, 97, 122, 521, 544, 
	607, 577, 602, 609, 634, 607, 560, 569, 
	577, 602, 609, 634, 39, 307, 324, 326, 
	332, 334, 339, 351, 356, 358, 364, 366, 
	371, 521, 544, 563, 570, 580, 582, 588, 
	590, 595, 607, 612, 614, 620, 622, 627, 
	304, 313, 321, 346, 353, 378, 560, 569, 
	577, 602, 609, 634, 351, 521, 544, 570, 
	607, 304, 313, 321, 346, 353, 378, 560, 
	569, 577, 602, 609, 634, 306, 351, 521, 
	544, 562, 570, 607, 304, 313, 321, 346, 
	353, 378, 560, 569, 577, 602, 609, 634, 
	323, 324, 351, 355, 356, 521, 544, 570, 
	579, 580, 607, 611, 612, 304, 313, 321, 
	346, 353, 378, 560, 569, 577, 602, 609, 
	634, 39, 351, 521, 544, 570, 607, 304, 
	313, 321, 346, 353, 378, 560, 569, 577, 
	602, 609, 634, 340, 351, 372, 521, 544, 
	570, 596, 607, 628, 304, 313, 321, 346, 
	353, 378, 560, 569, 577, 602, 609, 634, 
	324, 351, 356, 521, 544, 570, 580, 607, 
	612, 304, 313, 321, 346, 353, 378, 560, 
	569, 577, 602, 609, 634, 324, 351, 356, 
	521, 544, 570, 580, 607, 612, 304, 313, 
	321, 346, 353, 378, 560, 569, 577, 602, 
	609, 634, 333, 351, 365, 521, 544, 570, 
	589, 607, 621, 304, 313, 321, 346, 353, 
	378, 560, 569, 577, 602, 609, 634, 336, 
	351, 368, 521, 544, 570, 592, 607, 624, 
	304, 313, 321, 346, 353, 378, 560, 569, 
	577, 602, 609, 634, 323, 351, 355, 521, 
	544, 570, 579, 607, 611, 304, 313, 321, 
	346, 353, 378, 560, 569, 577, 602, 609, 
	634, 39, 323, 329, 335, 351, 355, 361, 
	367, 521, 544, 570, 579, 585, 591, 607, 
	611, 617, 623, 304, 313, 321, 346, 353, 
	378, 560, 569, 577, 602, 609, 634, 39, 
	351, 521, 544, 570, 607, 304, 313, 321, 
	346, 353, 378, 560, 569, 577, 602, 609, 
	634, 334, 340, 351, 366, 372, 521, 544, 
	570, 590, 596, 607, 622, 628, 304, 313, 
	321, 346, 353, 378, 560, 569, 577, 602, 
	609, 634, 321, 351, 353, 521, 544, 570, 
	577, 607, 609, 304, 313, 322, 346, 354, 
	378, 560, 569, 578, 602, 610, 634, 338, 
	351, 370, 521, 544, 570, 594, 607, 626, 
	304, 313, 321, 346, 353, 378, 560, 569, 
	577, 602, 609, 634, 345, 351, 377, 521, 
	544, 570, 601, 607, 633, 304, 313, 321, 
	346, 353, 378, 560, 569, 577, 602, 609, 
	634, 335, 351, 367, 521, 544, 570, 591, 
	607, 623, 304, 313, 321, 346, 353, 378, 
	560, 569, 577, 602, 609, 634, 332, 351, 
	364, 521, 544, 570, 588, 607, 620, 304, 
	313, 321, 346, 353, 378, 560, 569, 577, 
	602, 609, 634, 39, 321, 323, 336, 351, 
	353, 355, 368, 521, 544, 570, 577, 579, 
	592, 607, 609, 611, 624, 304, 313, 322, 
	346, 354, 378, 560, 569, 578, 602, 610, 
	634, 332, 351, 364, 521, 544, 570, 588, 
	607, 620, 304, 313, 321, 346, 353, 378, 
	560, 569, 577, 602, 609, 634, 332, 351, 
	364, 521, 544, 570, 588, 607, 620, 304, 
	313, 321, 346, 353, 378, 560, 569, 577, 
	602, 609, 634, 351, 521, 544, 570, 607, 
	304, 313, 321, 346, 353, 378, 560, 569, 
	577, 602, 609, 634, 335, 336, 351, 367, 
	368, 521, 544, 570, 591, 592, 607, 623, 
	624, 304, 313, 321, 346, 353, 378, 560, 
	569, 577, 602, 609, 634, 346, 351, 378, 
	521, 544, 570, 602, 607, 634, 304, 313, 
	321, 345, 353, 377, 560, 569, 577, 601, 
	609, 633, 331, 351, 363, 521, 544, 570, 
	587, 607, 619, 304, 313, 321, 346, 353, 
	378, 560, 569, 577, 602, 609, 634, 327, 
	351, 359, 521, 544, 570, 583, 607, 615, 
	304, 313, 321, 346, 353, 378, 560, 569, 
	577, 602, 609, 634, 326, 351, 358, 521, 
	544, 570, 582, 607, 614, 304, 313, 321, 
	346, 353, 378, 560, 569, 577, 602, 609, 
	634, 39, 351, 521, 544, 570, 607, 304, 
	313, 321, 346, 353, 378, 560, 569, 577, 
	602, 609, 634, 324, 329, 332, 351, 356, 
	361, 364, 521, 544, 570, 580, 585, 588, 
	607, 612, 617, 620, 304, 313, 321, 346, 
	353, 378, 560, 569, 577, 602, 609, 634, 
	338, 351, 370, 521, 544, 570, 594, 607, 
	626, 304, 313, 321, 346, 353, 378, 560, 
	569, 577, 602, 609, 634, 338, 351, 370, 
	521, 544, 570, 594, 607, 626, 304, 313, 
	321, 346, 353, 378, 560, 569, 577, 602, 
	609, 634, 39, 321, 325, 329, 330, 339, 
	351, 353, 357, 361, 362, 371, 521, 544, 
	570, 577, 581, 585, 586, 595, 607, 609, 
	613, 617, 618, 627, 304, 313, 322, 346, 
	354, 378, 560, 569, 578, 602, 610, 634, 
	321, 351, 353, 521, 544, 570, 577, 607, 
	609, 304, 313, 322, 346, 354, 378, 560, 
	569, 578, 602, 610, 634, 39, 323, 326, 
	328, 351, 355, 358, 360, 521, 544, 570, 
	579, 582, 584, 607, 611, 614, 616, 304, 
	313, 321, 346, 353, 378, 560, 569, 577, 
	602, 609, 634, 322, 323, 327, 329, 333, 
	337, 339, 342, 343, 351, 354, 355, 359, 
	361, 365, 369, 371, 374, 375, 521, 544, 
	570, 578, 579, 583, 585, 589, 593, 595, 
	598, 599, 607, 610, 611, 615, 617, 621, 
	625, 627, 630, 631, 304, 313, 321, 346, 
	353, 378, 560, 569, 577, 602, 609, 634, 
	338, 351, 370, 521, 544, 570, 594, 607, 
	626, 304, 313, 321, 346, 353, 378, 560, 
	569, 577, 602, 609, 634, 335, 351, 367, 
	521, 544, 570, 591, 607, 623, 304, 313, 
	321, 346, 353, 378, 560, 569, 577, 602, 
	609, 634, 341, 351, 373, 521, 544, 570, 
	597, 607, 629, 304, 313, 321, 346, 353, 
	378, 560, 569, 577, 602, 609, 634, 336, 
	351, 368, 521, 544, 570, 592, 607, 624, 
	304, 313, 321, 346, 353, 378, 560, 569, 
	577, 602, 609, 634, 334, 351, 366, 521, 
	544, 570, 590, 607, 622, 304, 313, 321, 
	346, 353, 378, 560, 569, 577, 602, 609, 
	634, 325, 351, 357, 521, 544, 570, 581, 
	607, 613, 304, 313, 321, 346, 353, 378, 
	560, 569, 577, 602, 609, 634, 321, 351, 
	353, 521, 544, 570, 577, 607, 609, 304, 
	313, 322, 346, 354, 378, 560, 569, 578, 
	602, 610, 634, 338, 351, 370, 521, 544, 
	570, 594, 607, 626, 304, 313, 321, 346, 
	353, 378, 560, 569, 577, 602, 609, 634, 
	339, 351, 371, 521, 544, 570, 595, 607, 
	627, 304, 313, 321, 346, 353, 378, 560, 
	569, 577, 602, 609, 634, 332, 351, 364, 
	521, 544, 570, 588, 607, 620, 304, 313, 
	321, 346, 353, 378, 560, 569, 577, 602, 
	609, 634, 334, 351, 366, 521, 544, 570, 
	590, 607, 622, 304, 313, 321, 346, 353, 
	378, 560, 569, 577, 602, 609, 634, 346, 
	351, 378, 521, 544, 570, 602, 607, 634, 
	304, 313, 321, 345, 353, 377, 560, 569, 
	577, 601, 609, 633, 46, 351, 521, 544, 
	570, 607, 304, 313, 321, 346, 353, 378, 
	560, 569, 577, 602, 609, 634, 39, 329, 
	332, 334, 344, 351, 361, 364, 366, 376, 
	521, 544, 570, 585, 588, 590, 600, 607, 
	617, 620, 622, 632, 304, 313, 321, 346, 
	353, 378, 560, 569, 577, 602, 609, 634, 
	338, 351, 370, 521, 544, 570, 594, 607, 
	626, 304, 313, 321, 346, 353, 378, 560, 
	569, 577, 602, 609, 634, 339, 351, 371, 
	521, 544, 570, 595, 607, 627, 304, 313, 
	321, 346, 353, 378, 560, 569, 577, 602, 
	609, 634, 325, 351, 357, 521, 544, 570, 
	581, 607, 613, 304, 313, 321, 346, 353, 
	378, 560, 569, 577, 602, 609, 634, 324, 
	351, 356, 521, 544, 570, 580, 607, 612, 
	304, 313, 321, 346, 353, 378, 560, 569, 
	577, 602, 609, 634, 329, 351, 361, 521, 
	544, 570, 585, 607, 617, 304, 313, 321, 
	346, 353, 378, 560, 569, 577, 602, 609, 
	634, 326, 351, 358, 521, 544, 570, 582, 
	607, 614, 304, 313, 321, 346, 353, 378, 
	560, 569, 577, 602, 609, 634, 340, 344, 
	351, 372, 376, 521, 544, 570, 596, 600, 
	607, 628, 632, 304, 313, 321, 346, 353, 
	378, 560, 569, 577, 602, 609, 634, 325, 
	351, 357, 521, 544, 570, 581, 607, 613, 
	304, 313, 321, 346, 353, 378, 560, 569, 
	577, 602, 609, 634, 338, 351, 370, 521, 
	544, 570, 594, 607, 626, 304, 313, 321, 
	346, 353, 378, 560, 569, 577, 602, 609, 
	634, 334, 351, 366, 521, 544, 570, 590, 
	607, 622, 304, 313, 321, 346, 353, 378, 
	560, 569, 577, 602, 609, 634, 39, 329, 
	336, 351, 361, 368, 521, 544, 570, 585, 
	592, 607, 617, 624, 304, 313, 321, 346, 
	353, 378, 560, 569, 577, 602, 609, 634, 
	332, 351, 364, 521, 544, 570, 588, 607, 
	620, 304, 313, 321, 346, 353, 378, 560, 
	569, 577, 602, 609, 634, 332, 351, 364, 
	521, 544, 570, 588, 607, 620, 304, 313, 
	321, 346, 353, 378, 560, 569, 577, 602, 
	609, 634, 324, 351, 356, 521, 544, 570, 
	580, 607, 612, 304, 313, 321, 346, 353, 
	378, 560, 569, 577, 602, 609, 634, 325, 
	351, 357, 521, 544, 570, 581, 607, 613, 
	304, 313, 321, 346, 353, 378, 560, 569, 
	577, 602, 609, 634, 336, 351, 368, 521, 
	544, 570, 592, 607, 624, 304, 313, 321, 
	346, 353, 378, 560, 569, 577, 602, 609, 
	634, 332, 351, 364, 521, 544, 570, 588, 
	607, 620, 304, 313, 321, 346, 353, 378, 
	560, 569, 577, 602, 609, 634, 335, 351, 
	367, 521, 544, 570, 591, 607, 623, 304, 
	313, 321, 346, 353, 378, 560, 569, 577, 
	602, 609, 634, 322, 351, 354, 521, 544, 
	570, 578, 607, 610, 304, 313, 321, 346, 
	353, 378, 560, 569, 577, 602, 609, 634, 
	321, 351, 353, 521, 544, 570, 577, 607, 
	609, 304, 313, 322, 346, 354, 378, 560, 
	569, 578, 602, 610, 634, 332, 351, 364, 
	521, 544, 570, 588, 607, 620, 304, 313, 
	321, 346, 353, 378, 560, 569, 577, 602, 
	609, 634, 39, 321, 332, 351, 353, 364, 
	521, 544, 570, 577, 588, 607, 609, 620, 
	304, 313, 322, 346, 354, 378, 560, 569, 
	578, 602, 610, 634, 332, 351, 364, 521, 
	544, 570, 588, 607, 620, 304, 313, 321, 
	346, 353, 378, 560, 569, 577, 602, 609, 
	634, 340, 351, 372, 521, 544, 570, 596, 
	607, 628, 304, 313, 321, 346, 353, 378, 
	560, 569, 577, 602, 609, 634, 39, 351, 
	521, 544, 570, 607, 304, 313, 321, 346, 
	353, 378, 560, 569, 577, 602, 609, 634, 
	324, 326, 329, 333, 334, 335, 336, 344, 
	345, 351, 356, 358, 361, 365, 366, 367, 
	368, 376, 377, 521, 544, 570, 580, 582, 
	585, 589, 590, 591, 592, 600, 601, 607, 
	612, 614, 617, 621, 622, 623, 624, 632, 
	633, 304, 313, 321, 346, 353, 378, 560, 
	569, 577, 602, 609, 634, 325, 351, 357, 
	521, 544, 570, 581, 607, 613, 304, 313, 
	321, 346, 353, 378, 560, 569, 577, 602, 
	609, 634, 340, 351, 372, 521, 544, 570, 
	596, 607, 628, 304, 313, 321, 346, 353, 
	378, 560, 569, 577, 602, 609, 634, 324, 
	334, 351, 356, 366, 521, 544, 570, 580, 
	590, 607, 612, 622, 304, 313, 321, 346, 
	353, 378, 560, 569, 577, 602, 609, 634, 
	325, 351, 357, 521, 544, 570, 581, 607, 
	613, 304, 313, 321, 346, 353, 378, 560, 
	569, 577, 602, 609, 634, 326, 351, 358, 
	521, 544, 570, 582, 607, 614, 304, 313, 
	321, 346, 353, 378, 560, 569, 577, 602, 
	609, 634, 324, 351, 356, 521, 544, 570, 
	580, 607, 612, 304, 313, 321, 346, 353, 
	378, 560, 569, 577, 602, 609, 634, 325, 
	351, 357, 521, 544, 570, 581, 607, 613, 
	304, 313, 321, 346, 353, 378, 560, 569, 
	577, 602, 609, 634, 326, 351, 358, 521, 
	544, 570, 582, 607, 614, 304, 313, 321, 
	346, 353, 378, 560, 569, 577, 602, 609, 
	634, 338, 351, 370, 521, 544, 570, 594, 
	607, 626, 304, 313, 321, 346, 353, 378, 
	560, 569, 577, 602, 609, 634, 304, 323, 
	324, 329, 342, 351, 355, 356, 361, 374, 
	521, 544, 560, 570, 579, 580, 585, 598, 
	607, 611, 612, 617, 630, 305, 313, 321, 
	346, 353, 378, 561, 569, 577, 602, 609, 
	634, 332, 351, 364, 521, 544, 570, 588, 
	607, 620, 304, 313, 321, 346, 353, 378, 
	560, 569, 577, 602, 609, 634, 341, 351, 
	373, 521, 544, 570, 597, 607, 629, 304, 
	313, 321, 346, 353, 378, 560, 569, 577, 
	602, 609, 634, 324, 351, 356, 521, 544, 
	570, 580, 607, 612, 304, 313, 321, 346, 
	353, 378, 560, 569, 577, 602, 609, 634, 
	325, 351, 357, 521, 544, 570, 581, 607, 
	613, 304, 313, 321, 346, 353, 378, 560, 
	569, 577, 602, 609, 634, 338, 351, 370, 
	521, 544, 570, 594, 607, 626, 304, 313, 
	321, 346, 353, 378, 560, 569, 577, 602, 
	609, 634, 338, 351, 370, 521, 544, 570, 
	594, 607, 626, 304, 313, 321, 346, 353, 
	378, 560, 569, 577, 602, 609, 634, 335, 
	351, 367, 521, 544, 570, 591, 607, 623, 
	304, 313, 321, 346, 353, 378, 560, 569, 
	577, 602, 609, 634, 331, 351, 363, 521, 
	544, 570, 587, 607, 619, 304, 313, 321, 
	346, 353, 378, 560, 569, 577, 602, 609, 
	634, 325, 351, 357, 521, 544, 570, 581, 
	607, 613, 304, 313, 321, 346, 353, 378, 
	560, 569, 577, 602, 609, 634, 325, 329, 
	351, 357, 361, 521, 544, 570, 581, 585, 
	607, 613, 617, 304, 313, 321, 346, 353, 
	378, 560, 569, 577, 602, 609, 634, 338, 
	339, 351, 370, 371, 521, 544, 570, 594, 
	595, 607, 626, 627, 304, 313, 321, 346, 
	353, 378, 560, 569, 577, 602, 609, 634, 
	325, 351, 357, 521, 544, 570, 581, 607, 
	613, 304, 313, 321, 346, 353, 378, 560, 
	569, 577, 602, 609, 634, 339, 351, 371, 
	521, 544, 570, 595, 607, 627, 304, 313, 
	321, 346, 353, 378, 560, 569, 577, 602, 
	609, 634, 325, 351, 357, 521, 544, 570, 
	581, 607, 613, 304, 313, 321, 346, 353, 
	378, 560, 569, 577, 602, 609, 634, 340, 
	351, 372, 521, 544, 570, 596, 607, 628, 
	304, 313, 321, 346, 353, 378, 560, 569, 
	577, 602, 609, 634, 328, 332, 351, 360, 
	364, 521, 544, 570, 584, 588, 607, 616, 
	620, 304, 313, 321, 346, 353, 378, 560, 
	569, 577, 602, 609, 634, 328, 332, 351, 
	360, 364, 521, 544, 570, 584, 588, 607, 
	616, 620, 304, 313, 321, 346, 353, 378, 
	560, 569, 577, 602, 609, 634, 336, 338, 
	351, 368, 370, 521, 544, 570, 592, 594, 
	607, 624, 626, 304, 313, 321, 346, 353, 
	378, 560, 569, 577, 602, 609, 634, 39, 
	324, 329, 335, 339, 346, 351, 356, 361, 
	367, 371, 378, 521, 544, 570, 580, 585, 
	591, 595, 602, 607, 612, 617, 623, 627, 
	634, 304, 313, 321, 345, 353, 377, 560, 
	569, 577, 601, 609, 633, 324, 329, 336, 
	351, 356, 361, 368, 521, 544, 570, 580, 
	585, 592, 607, 612, 617, 624, 304, 313, 
	321, 346, 353, 378, 560, 569, 577, 602, 
	609, 634, 338, 339, 344, 351, 370, 371, 
	376, 521, 544, 570, 594, 595, 600, 607, 
	626, 627, 632, 304, 313, 321, 346, 353, 
	378, 560, 569, 577, 602, 609, 634, 344, 
	351, 376, 521, 544, 570, 600, 607, 632, 
	304, 313, 321, 346, 353, 378, 560, 569, 
	577, 602, 609, 634, 338, 351, 370, 521, 
	544, 570, 594, 607, 626, 304, 313, 321, 
	346, 353, 378, 560, 569, 577, 602, 609, 
	634, 338, 339, 344, 351, 370, 371, 376, 
	521, 544, 570, 594, 595, 600, 607, 626, 
	627, 632, 304, 313, 321, 346, 353, 378, 
	560, 569, 577, 602, 609, 634, 339, 344, 
	351, 371, 376, 521, 544, 570, 595, 600, 
	607, 627, 632, 304, 313, 321, 346, 353, 
	378, 560, 569, 577, 602, 609, 634, 323, 
	351, 355, 521, 544, 570, 579, 607, 611, 
	304, 313, 321, 346, 353, 378, 560, 569, 
	577, 602, 609, 634, 321, 351, 353, 521, 
	544, 570, 577, 607, 609, 304, 313, 322, 
	346, 354, 378, 560, 569, 578, 602, 610, 
	634, 332, 351, 364, 521, 544, 570, 588, 
	607, 620, 304, 313, 321, 346, 353, 378, 
	560, 569, 577, 602, 609, 634, 325, 351, 
	357, 521, 544, 570, 581, 607, 613, 304, 
	313, 321, 346, 353, 378, 560, 569, 577, 
	602, 609, 634, 338, 351, 370, 521, 544, 
	570, 594, 607, 626, 304, 313, 321, 346, 
	353, 378, 560, 569, 577, 602, 609, 634, 
	329, 351, 361, 521, 544, 570, 585, 607, 
	617, 304, 313, 321, 346, 353, 378, 560, 
	569, 577, 602, 609, 634, 338, 351, 370, 
	521, 544, 570, 594, 607, 626, 304, 313, 
	321, 346, 353, 378, 560, 569, 577, 602, 
	609, 634, 344, 351, 376, 521, 544, 570, 
	600, 607, 632, 304, 313, 321, 346, 353, 
	378, 560, 569, 577, 602, 609, 634, 334, 
	351, 366, 521, 544, 570, 590, 607, 622, 
	304, 313, 321, 346, 353, 378, 560, 569, 
	577, 602, 609, 634, 325, 351, 357, 521, 
	544, 570, 581, 607, 613, 304, 313, 321, 
	346, 353, 378, 560, 569, 577, 602, 609, 
	634, 324, 329, 340, 351, 356, 361, 372, 
	521, 544, 570, 580, 585, 596, 607, 612, 
	617, 628, 304, 313, 321, 346, 353, 378, 
	560, 569, 577, 602, 609, 634, 324, 338, 
	351, 356, 370, 521, 544, 570, 580, 594, 
	607, 612, 626, 304, 313, 321, 346, 353, 
	378, 560, 569, 577, 602, 609, 634, 338, 
	351, 370, 521, 544, 570, 594, 607, 626, 
	304, 313, 321, 346, 353, 378, 560, 569, 
	577, 602, 609, 634, 324, 338, 351, 356, 
	370, 521, 544, 570, 580, 594, 607, 612, 
	626, 304, 313, 321, 346, 353, 378, 560, 
	569, 577, 602, 609, 634, 338, 351, 370, 
	521, 544, 570, 594, 607, 626, 304, 313, 
	321, 346, 353, 378, 560, 569, 577, 602, 
	609, 634, 335, 351, 367, 521, 544, 570, 
	591, 607, 623, 304, 313, 321, 346, 353, 
	378, 560, 569, 577, 602, 609, 634, 326, 
	334, 351, 358, 366, 521, 544, 570, 582, 
	590, 607, 614, 622, 304, 313, 321, 346, 
	353, 378, 560, 569, 577, 602, 609, 634, 
	326, 351, 358, 521, 544, 570, 582, 607, 
	614, 304, 313, 321, 346, 353, 378, 560, 
	569, 577, 602, 609, 634, 329, 332, 333, 
	335, 341, 351, 361, 364, 365, 367, 373, 
	521, 544, 570, 585, 588, 589, 591, 597, 
	607, 617, 620, 621, 623, 629, 304, 313, 
	321, 346, 353, 378, 560, 569, 577, 602, 
	609, 634, 338, 351, 370, 521, 544, 570, 
	594, 607, 626, 304, 313, 321, 346, 353, 
	378, 560, 569, 577, 602, 609, 634, 338, 
	351, 370, 521, 544, 570, 594, 607, 626, 
	304, 313, 321, 346, 353, 378, 560, 569, 
	577, 602, 609, 634, 335, 351, 367, 521, 
	544, 570, 591, 607, 623, 304, 313, 321, 
	346, 353, 378, 560, 569, 577, 602, 609, 
	634, 338, 351, 370, 521, 544, 570, 594, 
	607, 626, 304, 313, 321, 346, 353, 378, 
	560, 569, 577, 602, 609, 634, 340, 351, 
	372, 521, 544, 570, 596, 607, 628, 304, 
	313, 321, 346, 353, 378, 560, 569, 577, 
	602, 609, 634, 341, 351, 373, 521, 544, 
	570, 597, 607, 629, 304, 313, 321, 346, 
	353, 378, 560, 569, 577, 602, 609, 634, 
	304, 305, 306, 307, 308, 309, 310, 311, 
	351, 521, 544, 560, 561, 562, 563, 564, 
	565, 566, 567, 570, 607, 312, 313, 321, 
	346, 353, 378, 568, 569, 577, 602, 609, 
	634, 324, 351, 356, 521, 544, 570, 580, 
	607, 612, 304, 313, 321, 346, 353, 378, 
	560, 569, 577, 602, 609, 634, 341, 351, 
	373, 521, 544, 570, 597, 607, 629, 304, 
	313, 321, 346, 353, 378, 560, 569, 577, 
	602, 609, 634, 332, 351, 364, 521, 544, 
	570, 588, 607, 620, 304, 313, 321, 346, 
	353, 378, 560, 569, 577, 602, 609, 634, 
	325, 351, 357, 521, 544, 570, 581, 607, 
	613, 304, 313, 321, 346, 353, 378, 560, 
	569, 577, 602, 609, 634, 332, 351, 364, 
	521, 544, 570, 588, 607, 620, 304, 313, 
	321, 346, 353, 378, 560, 569, 577, 602, 
	609, 634, 323, 325, 335, 342, 346, 351, 
	355, 357, 367, 374, 378, 521, 544, 570, 
	579, 581, 591, 598, 602, 607, 611, 613, 
	623, 630, 634, 304, 313, 321, 345, 353, 
	377, 560, 569, 577, 601, 609, 633, 327, 
	344, 351, 359, 376, 521, 544, 570, 583, 
	600, 607, 615, 632, 304, 313, 321, 346, 
	353, 378, 560, 569, 577, 602, 609, 634, 
	340, 351, 372, 521, 544, 570, 596, 607, 
	628, 304, 313, 321, 346, 353, 378, 560, 
	569, 577, 602, 609, 634, 338, 351, 370, 
	521, 544, 570, 594, 607, 626, 304, 313, 
	321, 346, 353, 378, 560, 569, 577, 602, 
	609, 634, 325, 351, 357, 521, 544, 570, 
	581, 607, 613, 304, 313, 321, 346, 353, 
	378, 560, 569, 577, 602, 609, 634, 327, 
	351, 359, 521, 544, 570, 583, 607, 615, 
	304, 313, 321, 346, 353, 378, 560, 569, 
	577, 602, 609, 634, 336, 351, 368, 521, 
	544, 570, 592, 607, 624, 304, 313, 321, 
	346, 353, 378, 560, 569, 577, 602, 609, 
	634, 338, 340, 341, 351, 370, 372, 373, 
	521, 544, 570, 594, 596, 597, 607, 626, 
	628, 629, 304, 313, 321, 346, 353, 378, 
	560, 569, 577, 602, 609, 634, 327, 351, 
	359, 521, 544, 570, 583, 607, 615, 304, 
	313, 321, 346, 353, 378, 560, 569, 577, 
	602, 609, 634, 324, 329, 351, 356, 361, 
	521, 544, 570, 580, 585, 607, 612, 617, 
	304, 313, 321, 346, 353, 378, 560, 569, 
	577, 602, 609, 634, 333, 338, 351, 365, 
	370, 521, 544, 570, 589, 594, 607, 621, 
	626, 304, 313, 321, 346, 353, 378, 560, 
	569, 577, 602, 609, 634, 338, 351, 370, 
	521, 544, 570, 594, 607, 626, 304, 313, 
	321, 346, 353, 378, 560, 569, 577, 602, 
	609, 634, 333, 338, 351, 365, 370, 521, 
	544, 570, 589, 594, 607, 621, 626, 304, 
	313, 321, 346, 353, 378, 560, 569, 577, 
	602, 609, 634, 338, 351, 370, 521, 544, 
	570, 594, 607, 626, 304, 313, 321, 346, 
	353, 378, 560, 569, 577, 602, 609, 634, 
	340, 351, 372, 521, 544, 570, 596, 607, 
	628, 304, 313, 321, 346, 353, 378, 560, 
	569, 577, 602, 609, 634, 304, 324, 329, 
	351, 356, 361, 521, 544, 560, 570, 580, 
	585, 607, 612, 617, 305, 313, 321, 346, 
	353, 378, 561, 569, 577, 602, 609, 634, 
	334, 351, 366, 521, 544, 570, 590, 607, 
	622, 304, 313, 321, 346, 353, 378, 560, 
	569, 577, 602, 609, 634, 322, 351, 354, 
	521, 544, 570, 578, 607, 610, 304, 313, 
	321, 346, 353, 378, 560, 569, 577, 602, 
	609, 634, 325, 329, 335, 341, 351, 357, 
	361, 367, 373, 521, 544, 570, 581, 585, 
	591, 597, 607, 613, 617, 623, 629, 304, 
	313, 321, 346, 353, 378, 560, 569, 577, 
	602, 609, 634, 344, 351, 376, 521, 544, 
	570, 600, 607, 632, 304, 313, 321, 346, 
	353, 378, 560, 569, 577, 602, 609, 634, 
	325, 351, 357, 521, 544, 570, 581, 607, 
	613, 304, 313, 321, 346, 353, 378, 560, 
	569, 577, 602, 609, 634, 332, 351, 364, 
	521, 544, 570, 588, 607, 620, 304, 313, 
	321, 346, 353, 378, 560, 569, 577, 602, 
	609, 634, 321, 324, 351, 353, 356, 521, 
	544, 570, 577, 580, 607, 609, 612, 304, 
	313, 322, 346, 354, 378, 560, 569, 578, 
	602, 610, 634, 324, 351, 356, 521, 544, 
	570, 580, 607, 612, 304, 313, 321, 346, 
	353, 378, 560, 569, 577, 602, 609, 634, 
	334, 351, 366, 521, 544, 570, 590, 607, 
	622, 304, 313, 321, 346, 353, 378, 560, 
	569, 577, 602, 609, 634, 336, 351, 368, 
	521, 544, 570, 592, 607, 624, 304, 313, 
	321, 346, 353, 378, 560, 569, 577, 602, 
	609, 634, 344, 351, 376, 521, 544, 570, 
	600, 607, 632, 304, 313, 321, 346, 353, 
	378, 560, 569, 577, 602, 609, 634, 322, 
	339, 351, 354, 371, 521, 544, 570, 578, 
	595, 607, 610, 627, 304, 313, 321, 346, 
	353, 378, 560, 569, 577, 602, 609, 634, 
	332, 351, 364, 521, 544, 570, 588, 607, 
	620, 304, 313, 321, 346, 353, 378, 560, 
	569, 577, 602, 609, 634, 329, 351, 361, 
	521, 544, 570, 585, 607, 617, 304, 313, 
	321, 346, 353, 378, 560, 569, 577, 602, 
	609, 634, 323, 351, 355, 521, 544, 570, 
	579, 607, 611, 304, 313, 321, 346, 353, 
	378, 560, 569, 577, 602, 609, 634, 328, 
	351, 360, 521, 544, 570, 584, 607, 616, 
	304, 313, 321, 346, 353, 378, 560, 569, 
	577, 602, 609, 634, 324, 325, 332, 338, 
	339, 351, 356, 357, 364, 370, 371, 521, 
	544, 570, 580, 581, 588, 594, 595, 607, 
	612, 613, 620, 626, 627, 304, 313, 321, 
	346, 353, 378, 560, 569, 577, 602, 609, 
	634, 333, 351, 365, 521, 544, 570, 589, 
	607, 621, 304, 313, 321, 346, 353, 378, 
	560, 569, 577, 602, 609, 634, 335, 351, 
	367, 521, 544, 570, 591, 607, 623, 304, 
	313, 321, 346, 353, 378, 560, 569, 577, 
	602, 609, 634, 324, 351, 356, 521, 544, 
	570, 580, 607, 612, 304, 313, 321, 346, 
	353, 378, 560, 569, 577, 602, 609, 634, 
	325, 351, 357, 521, 544, 570, 581, 607, 
	613, 304, 313, 321, 346, 353, 378, 560, 
	569, 577, 602, 609, 634, 339, 340, 351, 
	371, 372, 521, 544, 570, 595, 596, 607, 
	627, 628, 304, 313, 321, 346, 353, 378, 
	560, 569, 577, 602, 609, 634, 329, 334, 
	351, 361, 366, 521, 544, 570, 585, 590, 
	607, 617, 622, 304, 313, 321, 346, 353, 
	378, 560, 569, 577, 602, 609, 634, 321, 
	323, 324, 351, 353, 355, 356, 521, 544, 
	570, 577, 579, 580, 607, 609, 611, 612, 
	304, 313, 322, 346, 354, 378, 560, 569, 
	578, 602, 610, 634, 39, 351, 521, 544, 
	570, 607, 304, 313, 321, 346, 353, 378, 
	560, 569, 577, 602, 609, 634, 321, 351, 
	353, 521, 544, 570, 577, 607, 609, 304, 
	313, 322, 346, 354, 378, 560, 569, 578, 
	602, 610, 634, 39, 351, 521, 544, 570, 
	607, 304, 313, 321, 346, 353, 378, 560, 
	569, 577, 602, 609, 634, 321, 323, 324, 
	351, 353, 355, 356, 521, 544, 570, 577, 
	579, 580, 607, 609, 611, 612, 304, 313, 
	322, 346, 354, 378, 560, 569, 578, 602, 
	610, 634, 39, 351, 521, 544, 570, 607, 
	304, 313, 321, 346, 353, 378, 560, 569, 
	577, 602, 609, 634, 321, 351, 353, 521, 
	544, 570, 577, 607, 609, 304, 313, 322, 
	346, 354, 378, 560, 569, 578, 602, 610, 
	634, 39, 351, 521, 544, 570, 607, 304, 
	313, 321, 346, 353, 378, 560, 569, 577, 
	602, 609, 634, 340, 351, 372, 521, 544, 
	570, 596, 607, 628, 304, 313, 321, 346, 
	353, 378, 560, 569, 577, 602, 609, 634, 
	322, 323, 325, 332, 336, 338, 341, 343, 
	345, 351, 354, 355, 357, 364, 368, 370, 
	373, 375, 377, 521, 544, 570, 578, 579, 
	581, 588, 592, 594, 597, 599, 601, 607, 
	610, 611, 613, 620, 624, 626, 629, 631, 
	633, 304, 313, 321, 346, 353, 378, 560, 
	569, 577, 602, 609, 634, 323, 351, 355, 
	521, 544, 570, 579, 607, 611, 304, 313, 
	321, 346, 353, 378, 560, 569, 577, 602, 
	609, 634, 326, 351, 358, 521, 544, 570, 
	582, 607, 614, 304, 313, 321, 346, 353, 
	378, 560, 569, 577, 602, 609, 634, 39, 
	351, 521, 544, 570, 607, 304, 313, 321, 
	346, 353, 378, 560, 569, 577, 602, 609, 
	634, 323, 340, 351, 355, 372, 521, 544, 
	570, 579, 596, 607, 611, 628, 304, 313, 
	321, 346, 353, 378, 560, 569, 577, 602, 
	609, 634, 340, 351, 372, 521, 544, 570, 
	596, 607, 628, 304, 313, 321, 346, 353, 
	378, 560, 569, 577, 602, 609, 634, 329, 
	351, 361, 521, 544, 570, 585, 607, 617, 
	304, 313, 321, 346, 353, 378, 560, 569, 
	577, 602, 609, 634, 335, 351, 367, 521, 
	544, 570, 591, 607, 623, 304, 313, 321, 
	346, 353, 378, 560, 569, 577, 602, 609, 
	634, 334, 351, 366, 521, 544, 570, 590, 
	607, 622, 304, 313, 321, 346, 353, 378, 
	560, 569, 577, 602, 609, 634, 321, 341, 
	351, 353, 373, 521, 544, 570, 577, 597, 
	607, 609, 629, 304, 313, 322, 346, 354, 
	378, 560, 569, 578, 602, 610, 634, 325, 
	351, 357, 521, 544, 570, 581, 607, 613, 
	304, 313, 321, 346, 353, 378, 560, 569, 
	577, 602, 609, 634, 339, 351, 371, 521, 
	544, 570, 595, 607, 627, 304, 313, 321, 
	346, 353, 378, 560, 569, 577, 602, 609, 
	634, 338, 351, 370, 521, 544, 570, 594, 
	607, 626, 304, 313, 321, 346, 353, 378, 
	560, 569, 577, 602, 609, 634, 321, 329, 
	332, 336, 351, 353, 361, 364, 368, 521, 
	544, 570, 577, 585, 588, 592, 607, 609, 
	617, 620, 624, 304, 313, 322, 346, 354, 
	378, 560, 569, 578, 602, 610, 634, 321, 
	332, 351, 353, 364, 521, 544, 570, 577, 
	588, 607, 609, 620, 304, 313, 322, 346, 
	354, 378, 560, 569, 578, 602, 610, 634, 
	322, 338, 351, 354, 370, 521, 544, 570, 
	578, 594, 607, 610, 626, 304, 313, 321, 
	346, 353, 378, 560, 569, 577, 602, 609, 
	634, 325, 351, 357, 521, 544, 570, 581, 
	607, 613, 304, 313, 321, 346, 353, 378, 
	560, 569, 577, 602, 609, 634, 339, 351, 
	371, 521, 544, 570, 595, 607, 627, 304, 
	313, 321, 346, 353, 378, 560, 569, 577, 
	602, 609, 634, 321, 351, 353, 521, 544, 
	570, 577, 607, 609, 304, 313, 322, 346, 
	354, 378, 560, 569, 578, 602, 610, 634, 
	336, 351, 368, 521, 544, 570, 592, 607, 
	624, 304, 313, 321, 346, 353, 378, 560, 
	569, 577, 602, 609, 634, 334, 351, 366, 
	521, 544, 570, 590, 607, 622, 304, 313, 
	321, 346, 353, 378, 560, 569, 577, 602, 
	609, 634, 329, 351, 361, 521, 544, 570, 
	585, 607, 617, 304, 313, 321, 346, 353, 
	378, 560, 569, 577, 602, 609, 634, 322, 
	351, 354, 521, 544, 570, 578, 607, 610, 
	304, 313, 321, 346, 353, 378, 560, 569, 
	577, 602, 609, 634, 339, 351, 371, 521, 
	544, 570, 595, 607, 627, 304, 313, 321, 
	346, 353, 378, 560, 569, 577, 602, 609, 
	634, 323, 351, 355, 521, 544, 570, 579, 
	607, 611, 304, 313, 321, 346, 353, 378, 
	560, 569, 577, 602, 609, 634, 321, 351, 
	353, 521, 544, 570, 577, 607, 609, 304, 
	313, 322, 346, 354, 378, 560, 569, 578, 
	602, 610, 634, 332, 351, 364, 521, 544, 
	570, 588, 607, 620, 304, 313, 321, 346, 
	353, 378, 560, 569, 577, 602, 609, 634, 
	332, 351, 364, 521, 544, 570, 588, 607, 
	620, 304, 313, 321, 346, 353, 378, 560, 
	569, 577, 602, 609, 634, 325, 339, 351, 
	357, 371, 521, 544, 570, 581, 595, 607, 
	613, 627, 304, 313, 321, 346, 353, 378, 
	560, 569, 577, 602, 609, 634, 339, 351, 
	371, 521, 544, 570, 595, 607, 627, 304, 
	313, 321, 346, 353, 378, 560, 569, 577, 
	602, 609, 634, 340, 351, 372, 521, 544, 
	570, 596, 607, 628, 304, 313, 321, 346, 
	353, 378, 560, 569, 577, 602, 609, 634, 
	340, 351, 372, 521, 544, 570, 596, 607, 
	628, 304, 313, 321, 346, 353, 378, 560, 
	569, 577, 602, 609, 634, 329, 351, 361, 
	521, 544, 570, 585, 607, 617, 304, 313, 
	321, 346, 353, 378, 560, 569, 577, 602, 
	609, 634, 335, 351, 367, 521, 544, 570, 
	591, 607, 623, 304, 313, 321, 346, 353, 
	378, 560, 569, 577, 602, 609, 634, 333, 
	334, 351, 365, 366, 521, 544, 570, 589, 
	590, 607, 621, 622, 304, 313, 321, 346, 
	353, 378, 560, 569, 577, 602, 609, 634, 
	321, 339, 351, 353, 371, 521, 544, 570, 
	577, 595, 607, 609, 627, 304, 313, 322, 
	346, 354, 378, 560, 569, 578, 602, 610, 
	634, 324, 351, 356, 521, 544, 570, 580, 
	607, 612, 304, 313, 321, 346, 353, 378, 
	560, 569, 577, 602, 609, 634, 325, 351, 
	357, 521, 544, 570, 581, 607, 613, 304, 
	313, 321, 346, 353, 378, 560, 569, 577, 
	602, 609, 634, 326, 351, 358, 521, 544, 
	570, 582, 607, 614, 304, 313, 321, 346, 
	353, 378, 560, 569, 577, 602, 609, 634, 
	329, 351, 361, 521, 544, 570, 585, 607, 
	617, 304, 313, 321, 346, 353, 378, 560, 
	569, 577, 602, 609, 634, 334, 351, 366, 
	521, 544, 570, 590, 607, 622, 304, 313, 
	321, 346, 353, 378, 560, 569, 577, 602, 
	609, 634, 325, 351, 357, 521, 544, 570, 
	581, 607, 613, 304, 313, 321, 346, 353, 
	378, 560, 569, 577, 602, 609, 634, 335, 
	336, 351, 367, 368, 521, 544, 570, 591, 
	592, 607, 623, 624, 304, 313, 321, 346, 
	353, 378, 560, 569, 577, 602, 609, 634, 
	338, 351, 370, 521, 544, 570, 594, 607, 
	626, 304, 313, 321, 346, 353, 378, 560, 
	569, 577, 602, 609, 634, 323, 351, 355, 
	521, 544, 570, 579, 607, 611, 304, 313, 
	321, 346, 353, 378, 560, 569, 577, 602, 
	609, 634, 0
};
static const char _lexer_single_lengths[] = {
	0, 2, 3, 14, 2, 5, 5, 2, 
	5, 2, 5, 4, 5, 5, 2, 5, 
	2, 0, 8, 3, 3, 126, 1, 0, 
	1, 0, 1, 14, 1, 6, 4, 2, 
	2, 2, 0, 1, 3, 1, 2, 1, 
	13, 1, 2, 5, 2, 3, 3, 3, 
	3, 3, 3, 8, 2, 5, 3, 3, 
	3, 3, 3, 8, 3, 3, 1, 5, 
	3, 3, 3, 3, 2, 7, 3, 3, 
	12, 3, 8, 19, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	2, 10, 3, 3, 3, 3, 3, 3, 
	5, 3, 3, 3, 6, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 6, 
	3, 3, 2, 19, 3, 3, 5, 3, 
	3, 3, 3, 3, 3, 10, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 5, 
	5, 3, 3, 3, 3, 5, 5, 5, 
	12, 7, 7, 3, 3, 7, 5, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 7, 5, 3, 5, 3, 3, 5, 
	3, 11, 3, 3, 3, 3, 3, 3, 
	9, 3, 3, 3, 3, 3, 11, 5, 
	3, 3, 3, 3, 3, 7, 3, 5, 
	5, 3, 5, 3, 3, 6, 3, 3, 
	9, 3, 3, 3, 5, 3, 3, 3, 
	3, 5, 3, 3, 3, 3, 11, 3, 
	3, 3, 3, 5, 5, 7, 2, 3, 
	2, 7, 2, 3, 2, 3, 19, 3, 
	3, 2, 5, 3, 3, 3, 3, 5, 
	3, 3, 3, 9, 5, 5, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 5, 3, 3, 3, 3, 3, 
	5, 5, 3, 3, 3, 3, 3, 3, 
	5, 3, 3, 3, 1, 28, 5, 7, 
	13, 6, 9, 9, 9, 9, 9, 9, 
	18, 6, 13, 9, 9, 9, 9, 9, 
	18, 9, 9, 5, 13, 9, 9, 9, 
	9, 6, 17, 9, 9, 26, 9, 18, 
	41, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 6, 22, 9, 
	9, 9, 9, 9, 9, 13, 9, 9, 
	9, 14, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 14, 9, 9, 6, 
	41, 9, 9, 13, 9, 9, 9, 9, 
	9, 9, 23, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 13, 13, 9, 9, 
	9, 9, 13, 13, 13, 26, 17, 17, 
	9, 9, 17, 13, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 17, 13, 
	9, 13, 9, 9, 13, 9, 25, 9, 
	9, 9, 9, 9, 9, 21, 9, 9, 
	9, 9, 9, 25, 13, 9, 9, 9, 
	9, 9, 17, 9, 13, 13, 9, 13, 
	9, 9, 15, 9, 9, 21, 9, 9, 
	9, 13, 9, 9, 9, 9, 13, 9, 
	9, 9, 9, 25, 9, 9, 9, 9, 
	13, 13, 17, 6, 9, 6, 17, 6, 
	9, 6, 9, 41, 9, 9, 6, 13, 
	9, 9, 9, 9, 13, 9, 9, 9, 
	21, 13, 13, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 13, 
	9, 9, 9, 9, 9, 13, 13, 9, 
	9, 9, 9, 9, 9, 13, 9, 9
};
static const char _lexer_range_lengths[] = {
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	3, 3, 0, 2, 0, 6, 0, 3, 
	1, 1, 0, 0, 0, 4, 4, 3, 
	3, 4, 3, 0, 0, 0, 0, 0, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 2, 3, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6
};
static const short _lexer_index_offsets[] = {
	0, 0, 3, 7, 22, 25, 31, 37, 
	40, 46, 49, 55, 60, 66, 72, 75, 
	81, 87, 91, 100, 106, 110, 243, 245, 
	249, 252, 254, 256, 271, 273, 284, 293, 
	299, 305, 312, 316, 318, 322, 324, 327, 
	329, 346, 351, 357, 366, 372, 379, 386, 
	393, 400, 407, 414, 426, 432, 441, 448, 
	455, 462, 469, 476, 488, 495, 502, 507, 
	516, 523, 530, 537, 544, 550, 561, 568, 
	575, 591, 598, 610, 633, 640, 647, 654, 
	661, 668, 675, 682, 689, 696, 703, 710, 
	717, 723, 737, 744, 751, 758, 765, 772, 
	779, 788, 795, 802, 809, 819, 826, 833, 
	840, 847, 854, 861, 868, 875, 882, 889, 
	899, 906, 913, 919, 942, 949, 956, 965, 
	972, 979, 986, 993, 1000, 1007, 1021, 1028, 
	1035, 1042, 1049, 1056, 1063, 1070, 1077, 1084, 
	1093, 1102, 1109, 1116, 1123, 1130, 1139, 1148, 
	1157, 1173, 1184, 1195, 1202, 1209, 1220, 1229, 
	1236, 1243, 1250, 1257, 1264, 1271, 1278, 1285, 
	1292, 1299, 1310, 1319, 1326, 1335, 1342, 1349, 
	1358, 1365, 1380, 1387, 1394, 1401, 1408, 1415, 
	1422, 1435, 1442, 1449, 1456, 1463, 1470, 1485, 
	1494, 1501, 1508, 1515, 1522, 1529, 1540, 1547, 
	1556, 1565, 1572, 1581, 1588, 1595, 1605, 1612, 
	1619, 1632, 1639, 1646, 1653, 1662, 1669, 1676, 
	1683, 1690, 1699, 1706, 1713, 1720, 1727, 1742, 
	1749, 1756, 1763, 1770, 1779, 1788, 1799, 1805, 
	1812, 1818, 1829, 1835, 1842, 1848, 1855, 1878, 
	1885, 1892, 1898, 1907, 1914, 1921, 1928, 1935, 
	1944, 1951, 1958, 1965, 1978, 1987, 1996, 2003, 
	2010, 2017, 2024, 2031, 2038, 2045, 2052, 2059, 
	2066, 2073, 2080, 2089, 2096, 2103, 2110, 2117, 
	2124, 2133, 2142, 2149, 2156, 2163, 2170, 2177, 
	2184, 2193, 2200, 2207, 2213, 2218, 2253, 2265, 
	2279, 2299, 2312, 2328, 2344, 2360, 2376, 2392, 
	2408, 2433, 2446, 2466, 2482, 2498, 2514, 2530, 
	2546, 2571, 2587, 2603, 2615, 2635, 2651, 2667, 
	2683, 2699, 2712, 2736, 2752, 2768, 2801, 2817, 
	2842, 2890, 2906, 2922, 2938, 2954, 2970, 2986, 
	3002, 3018, 3034, 3050, 3066, 3082, 3095, 3124, 
	3140, 3156, 3172, 3188, 3204, 3220, 3240, 3256, 
	3272, 3288, 3309, 3325, 3341, 3357, 3373, 3389, 
	3405, 3421, 3437, 3453, 3469, 3490, 3506, 3522, 
	3535, 3583, 3599, 3615, 3635, 3651, 3667, 3683, 
	3699, 3715, 3731, 3761, 3777, 3793, 3809, 3825, 
	3841, 3857, 3873, 3889, 3905, 3925, 3945, 3961, 
	3977, 3993, 4009, 4029, 4049, 4069, 4102, 4126, 
	4150, 4166, 4182, 4206, 4226, 4242, 4258, 4274, 
	4290, 4306, 4322, 4338, 4354, 4370, 4386, 4410, 
	4430, 4446, 4466, 4482, 4498, 4518, 4534, 4566, 
	4582, 4598, 4614, 4630, 4646, 4662, 4690, 4706, 
	4722, 4738, 4754, 4770, 4802, 4822, 4838, 4854, 
	4870, 4886, 4902, 4926, 4942, 4962, 4982, 4998, 
	5018, 5034, 5050, 5072, 5088, 5104, 5132, 5148, 
	5164, 5180, 5200, 5216, 5232, 5248, 5264, 5284, 
	5300, 5316, 5332, 5348, 5380, 5396, 5412, 5428, 
	5444, 5464, 5484, 5508, 5521, 5537, 5550, 5574, 
	5587, 5603, 5616, 5632, 5680, 5696, 5712, 5725, 
	5745, 5761, 5777, 5793, 5809, 5829, 5845, 5861, 
	5877, 5905, 5925, 5945, 5961, 5977, 5993, 6009, 
	6025, 6041, 6057, 6073, 6089, 6105, 6121, 6137, 
	6157, 6173, 6189, 6205, 6221, 6237, 6257, 6277, 
	6293, 6309, 6325, 6341, 6357, 6373, 6393, 6409
};
static const short _lexer_indicies[] = {
	1, 1, 0, 2, 1, 1, 0, 4, 
	4, 5, 6, 7, 8, 9, 10, 5, 
	6, 7, 8, 9, 10, 3, 11, 11, 
	3, 11, 11, 12, 12, 12, 3, 6, 
	6, 13, 13, 13, 3, 14, 14, 3, 
	14, 14, 15, 15, 15, 3, 16, 16, 
	3, 16, 16, 17, 17, 17, 3, 18, 
	19, 18, 19, 3, 18, 18, 20, 20, 
	20, 3, 19, 19, 21, 21, 21, 3, 
	22, 22, 3, 22, 22, 23, 23, 23, 
	3, 25, 25, 24, 24, 24, 0, 27, 
	27, 27, 26, 29, 30, 31, 32, 29, 
	30, 31, 32, 28, 34, 34, 35, 35, 
	35, 33, 36, 36, 37, 0, 39, 40, 
	41, 42, 43, 44, 45, 46, 47, 48, 
	49, 50, 51, 52, 53, 55, 56, 58, 
	59, 60, 61, 62, 63, 64, 65, 66, 
	67, 68, 66, 69, 70, 71, 72, 38, 
	73, 74, 75, 76, 77, 78, 79, 80, 
	81, 82, 83, 85, 86, 87, 88, 89, 
	90, 91, 92, 93, 94, 95, 96, 84, 
	74, 75, 76, 77, 78, 79, 80, 81, 
	82, 83, 85, 86, 87, 88, 89, 90, 
	91, 92, 93, 94, 95, 96, 97, 98, 
	99, 100, 101, 102, 103, 104, 105, 106, 
	107, 109, 110, 111, 112, 113, 114, 115, 
	116, 117, 118, 119, 120, 108, 98, 99, 
	100, 101, 102, 103, 104, 105, 106, 107, 
	109, 110, 111, 112, 113, 114, 115, 116, 
	117, 118, 119, 120, 38, 57, 84, 84, 
	108, 108, 54, 122, 121, 123, 123, 123, 
	0, 124, 125, 0, 125, 126, 128, 127, 
	4, 4, 5, 6, 7, 8, 9, 10, 
	5, 6, 7, 8, 9, 10, 129, 131, 
	130, 133, 25, 134, 133, 25, 134, 56, 
	57, 24, 24, 132, 135, 25, 135, 25, 
	56, 57, 24, 24, 132, 25, 25, 57, 
	24, 24, 132, 25, 25, 24, 24, 24, 
	136, 25, 25, 137, 24, 24, 24, 0, 
	27, 27, 27, 138, 139, 59, 141, 142, 
	143, 140, 145, 144, 147, 148, 146, 150, 
	149, 152, 153, 154, 155, 156, 157, 158, 
	84, 154, 155, 156, 157, 158, 84, 84, 
	84, 151, 84, 84, 84, 84, 0, 160, 
	84, 84, 84, 84, 159, 161, 162, 84, 
	161, 162, 84, 84, 84, 159, 164, 84, 
	84, 84, 84, 163, 165, 84, 165, 84, 
	84, 84, 159, 166, 84, 166, 84, 84, 
	84, 159, 167, 84, 167, 84, 84, 84, 
	159, 168, 84, 168, 84, 84, 84, 159, 
	169, 84, 169, 84, 84, 84, 159, 170, 
	84, 170, 84, 84, 84, 159, 172, 173, 
	174, 175, 84, 173, 174, 175, 84, 84, 
	84, 171, 177, 84, 84, 84, 84, 176, 
	178, 179, 84, 178, 179, 84, 84, 84, 
	159, 180, 84, 180, 84, 84, 84, 159, 
	181, 84, 181, 84, 84, 84, 159, 182, 
	84, 182, 84, 84, 84, 159, 183, 84, 
	183, 84, 84, 84, 159, 184, 84, 184, 
	84, 84, 84, 159, 186, 187, 188, 189, 
	84, 187, 188, 189, 84, 84, 84, 185, 
	190, 84, 190, 84, 84, 84, 159, 191, 
	84, 191, 84, 84, 84, 159, 193, 84, 
	84, 84, 192, 194, 195, 84, 194, 195, 
	84, 84, 84, 159, 196, 84, 196, 84, 
	84, 84, 159, 197, 84, 197, 84, 84, 
	84, 159, 198, 84, 198, 84, 84, 84, 
	159, 199, 84, 199, 84, 84, 84, 159, 
	201, 84, 84, 84, 84, 200, 203, 204, 
	205, 84, 203, 204, 205, 84, 84, 84, 
	202, 207, 84, 207, 84, 84, 84, 206, 
	209, 84, 209, 84, 84, 84, 208, 211, 
	212, 213, 214, 215, 216, 84, 212, 213, 
	214, 215, 216, 84, 84, 84, 210, 217, 
	84, 217, 84, 84, 84, 159, 219, 220, 
	221, 222, 84, 220, 221, 222, 84, 84, 
	84, 218, 223, 224, 225, 226, 227, 228, 
	229, 230, 231, 84, 223, 224, 225, 226, 
	227, 228, 229, 230, 231, 84, 84, 84, 
	159, 232, 84, 232, 84, 84, 84, 159, 
	233, 84, 233, 84, 84, 84, 159, 234, 
	84, 234, 84, 84, 84, 159, 235, 84, 
	235, 84, 84, 84, 159, 236, 84, 236, 
	84, 84, 84, 159, 237, 84, 237, 84, 
	84, 84, 159, 238, 84, 238, 84, 84, 
	84, 159, 239, 84, 239, 84, 84, 84, 
	159, 240, 84, 240, 84, 84, 84, 159, 
	241, 84, 241, 84, 84, 84, 159, 242, 
	84, 242, 84, 84, 84, 159, 243, 84, 
	243, 84, 84, 84, 159, 244, 84, 84, 
	84, 84, 159, 246, 247, 248, 249, 250, 
	84, 247, 248, 249, 250, 84, 84, 84, 
	245, 252, 84, 252, 84, 84, 84, 251, 
	253, 84, 253, 84, 84, 84, 159, 254, 
	84, 254, 84, 84, 84, 159, 255, 84, 
	255, 84, 84, 84, 159, 256, 84, 256, 
	84, 84, 84, 159, 257, 84, 257, 84, 
	84, 84, 159, 259, 260, 84, 259, 260, 
	84, 84, 84, 258, 261, 84, 261, 84, 
	84, 84, 159, 262, 84, 262, 84, 84, 
	84, 159, 263, 84, 263, 84, 84, 84, 
	159, 265, 266, 267, 84, 266, 267, 84, 
	84, 84, 264, 268, 84, 268, 84, 84, 
	84, 159, 269, 84, 269, 84, 84, 84, 
	159, 271, 84, 271, 84, 84, 84, 270, 
	272, 84, 272, 84, 84, 84, 159, 273, 
	84, 273, 84, 84, 84, 159, 274, 84, 
	274, 84, 84, 84, 159, 275, 84, 275, 
	84, 84, 84, 159, 276, 84, 276, 84, 
	84, 84, 159, 277, 84, 277, 84, 84, 
	84, 159, 278, 84, 278, 84, 84, 84, 
	159, 280, 281, 282, 84, 281, 282, 84, 
	84, 84, 279, 283, 84, 283, 84, 84, 
	84, 159, 284, 84, 284, 84, 84, 84, 
	159, 286, 84, 84, 84, 84, 285, 288, 
	289, 290, 291, 292, 293, 294, 295, 296, 
	84, 288, 289, 290, 291, 292, 293, 294, 
	295, 296, 84, 84, 84, 287, 297, 84, 
	297, 84, 84, 84, 159, 298, 84, 298, 
	84, 84, 84, 159, 300, 301, 84, 300, 
	301, 84, 84, 84, 299, 302, 84, 302, 
	84, 84, 84, 159, 303, 84, 303, 84, 
	84, 84, 159, 304, 84, 304, 84, 84, 
	84, 159, 305, 84, 305, 84, 84, 84, 
	159, 306, 84, 306, 84, 84, 84, 159, 
	307, 84, 307, 84, 84, 84, 159, 309, 
	310, 311, 312, 313, 84, 310, 311, 312, 
	313, 84, 84, 84, 308, 315, 84, 315, 
	84, 84, 84, 314, 316, 84, 316, 84, 
	84, 84, 159, 317, 84, 317, 84, 84, 
	84, 159, 318, 84, 318, 84, 84, 84, 
	159, 320, 84, 320, 84, 84, 84, 319, 
	322, 84, 322, 84, 84, 84, 321, 323, 
	84, 323, 84, 84, 84, 159, 324, 84, 
	324, 84, 84, 84, 159, 325, 84, 325, 
	84, 84, 84, 159, 326, 327, 84, 326, 
	327, 84, 84, 84, 159, 329, 330, 84, 
	329, 330, 84, 84, 84, 328, 331, 84, 
	331, 84, 84, 84, 159, 332, 84, 332, 
	84, 84, 84, 159, 333, 84, 333, 84, 
	84, 84, 159, 334, 84, 334, 84, 84, 
	84, 159, 336, 337, 84, 336, 337, 84, 
	84, 84, 335, 339, 340, 84, 339, 340, 
	84, 84, 84, 338, 341, 342, 84, 341, 
	342, 84, 84, 84, 159, 344, 345, 346, 
	347, 348, 349, 84, 345, 346, 347, 348, 
	349, 84, 84, 84, 343, 351, 352, 353, 
	84, 351, 352, 353, 84, 84, 84, 350, 
	355, 356, 357, 84, 355, 356, 357, 84, 
	84, 84, 354, 359, 84, 359, 84, 84, 
	84, 358, 360, 84, 360, 84, 84, 84, 
	159, 362, 363, 364, 84, 362, 363, 364, 
	84, 84, 84, 361, 366, 367, 84, 366, 
	367, 84, 84, 84, 365, 368, 84, 368, 
	84, 84, 84, 159, 369, 84, 369, 84, 
	84, 84, 159, 370, 84, 370, 84, 84, 
	84, 159, 371, 84, 371, 84, 84, 84, 
	159, 372, 84, 372, 84, 84, 84, 159, 
	374, 84, 374, 84, 84, 84, 373, 375, 
	84, 375, 84, 84, 84, 159, 376, 84, 
	376, 84, 84, 84, 159, 377, 84, 377, 
	84, 84, 84, 159, 378, 84, 378, 84, 
	84, 84, 159, 379, 380, 381, 84, 379, 
	380, 381, 84, 84, 84, 159, 382, 383, 
	84, 382, 383, 84, 84, 84, 159, 384, 
	84, 384, 84, 84, 84, 159, 385, 386, 
	84, 385, 386, 84, 84, 84, 159, 387, 
	84, 387, 84, 84, 84, 159, 388, 84, 
	388, 84, 84, 84, 159, 389, 390, 84, 
	389, 390, 84, 84, 84, 159, 391, 84, 
	391, 84, 84, 84, 159, 393, 394, 395, 
	396, 397, 84, 393, 394, 395, 396, 397, 
	84, 84, 84, 392, 398, 84, 398, 84, 
	84, 84, 159, 399, 84, 399, 84, 84, 
	84, 159, 400, 84, 400, 84, 84, 84, 
	159, 401, 84, 401, 84, 84, 84, 159, 
	402, 84, 402, 84, 84, 84, 159, 403, 
	84, 403, 84, 84, 84, 159, 405, 406, 
	407, 408, 409, 410, 411, 412, 84, 84, 
	84, 84, 404, 413, 84, 413, 84, 84, 
	84, 159, 414, 84, 414, 84, 84, 84, 
	159, 415, 84, 415, 84, 84, 84, 159, 
	416, 84, 416, 84, 84, 84, 159, 417, 
	84, 417, 84, 84, 84, 159, 418, 419, 
	420, 421, 422, 84, 418, 419, 420, 421, 
	422, 84, 84, 84, 159, 423, 424, 84, 
	423, 424, 84, 84, 84, 159, 425, 84, 
	425, 84, 84, 84, 159, 426, 84, 426, 
	84, 84, 84, 159, 427, 84, 427, 84, 
	84, 84, 159, 428, 84, 428, 84, 84, 
	84, 159, 429, 84, 429, 84, 84, 84, 
	159, 430, 431, 432, 84, 430, 431, 432, 
	84, 84, 84, 159, 434, 84, 434, 84, 
	84, 84, 433, 435, 436, 84, 435, 436, 
	84, 84, 84, 159, 437, 438, 84, 437, 
	438, 84, 84, 84, 159, 440, 84, 440, 
	84, 84, 84, 439, 441, 442, 84, 441, 
	442, 84, 84, 84, 159, 444, 84, 444, 
	84, 84, 84, 443, 445, 84, 445, 84, 
	84, 84, 159, 447, 448, 449, 84, 448, 
	449, 84, 84, 84, 446, 451, 84, 451, 
	84, 84, 84, 450, 452, 84, 452, 84, 
	84, 84, 159, 454, 455, 456, 457, 84, 
	454, 455, 456, 457, 84, 84, 84, 453, 
	458, 84, 458, 84, 84, 84, 159, 459, 
	84, 459, 84, 84, 84, 159, 460, 84, 
	460, 84, 84, 84, 159, 461, 462, 84, 
	461, 462, 84, 84, 84, 159, 463, 84, 
	463, 84, 84, 84, 159, 464, 84, 464, 
	84, 84, 84, 159, 466, 84, 466, 84, 
	84, 84, 465, 468, 84, 468, 84, 84, 
	84, 467, 469, 470, 84, 469, 470, 84, 
	84, 84, 159, 471, 84, 471, 84, 84, 
	84, 159, 472, 84, 472, 84, 84, 84, 
	159, 473, 84, 473, 84, 84, 84, 159, 
	474, 84, 474, 84, 84, 84, 159, 476, 
	477, 478, 479, 480, 84, 476, 477, 478, 
	479, 480, 84, 84, 84, 475, 481, 84, 
	481, 84, 84, 84, 159, 482, 84, 482, 
	84, 84, 84, 159, 483, 84, 483, 84, 
	84, 84, 159, 484, 84, 484, 84, 84, 
	84, 159, 485, 486, 84, 485, 486, 84, 
	84, 84, 159, 488, 489, 84, 488, 489, 
	84, 84, 84, 487, 491, 492, 493, 84, 
	491, 492, 493, 84, 84, 84, 490, 495, 
	84, 84, 84, 84, 494, 497, 84, 497, 
	84, 84, 84, 496, 499, 84, 84, 84, 
	84, 498, 501, 502, 503, 84, 501, 502, 
	503, 84, 84, 84, 500, 505, 84, 84, 
	84, 84, 504, 507, 84, 507, 84, 84, 
	84, 506, 509, 84, 84, 84, 84, 508, 
	510, 84, 510, 84, 84, 84, 159, 511, 
	512, 513, 514, 515, 516, 517, 518, 519, 
	84, 511, 512, 513, 514, 515, 516, 517, 
	518, 519, 84, 84, 84, 159, 520, 84, 
	520, 84, 84, 84, 159, 521, 84, 521, 
	84, 84, 84, 159, 523, 84, 84, 84, 
	84, 522, 524, 525, 84, 524, 525, 84, 
	84, 84, 159, 526, 84, 526, 84, 84, 
	84, 159, 527, 84, 527, 84, 84, 84, 
	159, 528, 84, 528, 84, 84, 84, 159, 
	529, 84, 529, 84, 84, 84, 159, 531, 
	532, 84, 531, 532, 84, 84, 84, 530, 
	533, 84, 533, 84, 84, 84, 159, 534, 
	84, 534, 84, 84, 84, 159, 535, 84, 
	535, 84, 84, 84, 159, 536, 537, 538, 
	539, 84, 536, 537, 538, 539, 84, 84, 
	84, 159, 540, 541, 84, 540, 541, 84, 
	84, 84, 159, 543, 544, 84, 543, 544, 
	84, 84, 84, 542, 545, 84, 545, 84, 
	84, 84, 159, 546, 84, 546, 84, 84, 
	84, 159, 547, 84, 547, 84, 84, 84, 
	159, 548, 84, 548, 84, 84, 84, 159, 
	550, 84, 550, 84, 84, 84, 549, 551, 
	84, 551, 84, 84, 84, 159, 552, 84, 
	552, 84, 84, 84, 159, 553, 84, 553, 
	84, 84, 84, 159, 554, 84, 554, 84, 
	84, 84, 159, 555, 84, 555, 84, 84, 
	84, 159, 556, 84, 556, 84, 84, 84, 
	159, 557, 84, 557, 84, 84, 84, 159, 
	558, 559, 84, 558, 559, 84, 84, 84, 
	159, 560, 84, 560, 84, 84, 84, 159, 
	561, 84, 561, 84, 84, 84, 159, 562, 
	84, 562, 84, 84, 84, 159, 564, 84, 
	564, 84, 84, 84, 563, 565, 84, 565, 
	84, 84, 84, 159, 566, 567, 84, 566, 
	567, 84, 84, 84, 159, 568, 569, 84, 
	568, 569, 84, 84, 84, 159, 570, 84, 
	570, 84, 84, 84, 159, 571, 84, 571, 
	84, 84, 84, 159, 572, 84, 572, 84, 
	84, 84, 159, 573, 84, 573, 84, 84, 
	84, 159, 574, 84, 574, 84, 84, 84, 
	159, 575, 84, 575, 84, 84, 84, 159, 
	576, 577, 84, 576, 577, 84, 84, 84, 
	159, 578, 84, 578, 84, 84, 84, 159, 
	579, 84, 579, 84, 84, 84, 159, 34, 
	34, 35, 35, 35, 580, 35, 35, 35, 
	35, 581, 152, 153, 154, 155, 156, 157, 
	158, 84, 154, 155, 156, 157, 158, 36, 
	36, 582, 37, 583, 584, 585, 586, 587, 
	108, 583, 584, 585, 586, 587, 84, 84, 
	84, 108, 108, 108, 151, 84, 36, 36, 
	37, 108, 84, 84, 84, 108, 108, 108, 
	0, 160, 84, 36, 36, 588, 37, 108, 
	84, 84, 84, 108, 108, 108, 159, 161, 
	162, 84, 161, 162, 36, 36, 37, 589, 
	590, 108, 589, 590, 84, 84, 84, 108, 
	108, 108, 159, 164, 84, 36, 36, 37, 
	108, 84, 84, 84, 108, 108, 108, 163, 
	165, 84, 165, 36, 36, 37, 591, 108, 
	591, 84, 84, 84, 108, 108, 108, 159, 
	166, 84, 166, 36, 36, 37, 592, 108, 
	592, 84, 84, 84, 108, 108, 108, 159, 
	167, 84, 167, 36, 36, 37, 593, 108, 
	593, 84, 84, 84, 108, 108, 108, 159, 
	168, 84, 168, 36, 36, 37, 594, 108, 
	594, 84, 84, 84, 108, 108, 108, 159, 
	169, 84, 169, 36, 36, 37, 595, 108, 
	595, 84, 84, 84, 108, 108, 108, 159, 
	170, 84, 170, 36, 36, 37, 596, 108, 
	596, 84, 84, 84, 108, 108, 108, 159, 
	172, 173, 174, 175, 84, 173, 174, 175, 
	36, 36, 37, 597, 598, 599, 108, 597, 
	598, 599, 84, 84, 84, 108, 108, 108, 
	171, 177, 84, 36, 36, 37, 108, 84, 
	84, 84, 108, 108, 108, 176, 178, 179, 
	84, 178, 179, 36, 36, 37, 600, 601, 
	108, 600, 601, 84, 84, 84, 108, 108, 
	108, 159, 180, 84, 180, 36, 36, 37, 
	602, 108, 602, 84, 84, 84, 108, 108, 
	108, 159, 181, 84, 181, 36, 36, 37, 
	603, 108, 603, 84, 84, 84, 108, 108, 
	108, 159, 182, 84, 182, 36, 36, 37, 
	604, 108, 604, 84, 84, 84, 108, 108, 
	108, 159, 183, 84, 183, 36, 36, 37, 
	605, 108, 605, 84, 84, 84, 108, 108, 
	108, 159, 184, 84, 184, 36, 36, 37, 
	606, 108, 606, 84, 84, 84, 108, 108, 
	108, 159, 186, 187, 188, 189, 84, 187, 
	188, 189, 36, 36, 37, 607, 608, 609, 
	108, 607, 608, 609, 84, 84, 84, 108, 
	108, 108, 185, 190, 84, 190, 36, 36, 
	37, 610, 108, 610, 84, 84, 84, 108, 
	108, 108, 159, 191, 84, 191, 36, 36, 
	37, 611, 108, 611, 84, 84, 84, 108, 
	108, 108, 159, 193, 36, 36, 37, 612, 
	84, 84, 84, 108, 108, 108, 192, 194, 
	195, 84, 194, 195, 36, 36, 37, 613, 
	614, 108, 613, 614, 84, 84, 84, 108, 
	108, 108, 159, 196, 84, 196, 36, 36, 
	37, 615, 108, 615, 84, 84, 84, 108, 
	108, 108, 159, 197, 84, 197, 36, 36, 
	37, 616, 108, 616, 84, 84, 84, 108, 
	108, 108, 159, 198, 84, 198, 36, 36, 
	37, 617, 108, 617, 84, 84, 84, 108, 
	108, 108, 159, 199, 84, 199, 36, 36, 
	37, 618, 108, 618, 84, 84, 84, 108, 
	108, 108, 159, 201, 84, 36, 36, 37, 
	108, 84, 84, 84, 108, 108, 108, 200, 
	203, 204, 205, 84, 203, 204, 205, 36, 
	36, 37, 619, 620, 621, 108, 619, 620, 
	621, 84, 84, 84, 108, 108, 108, 202, 
	207, 84, 207, 36, 36, 37, 622, 108, 
	622, 84, 84, 84, 108, 108, 108, 206, 
	209, 84, 209, 36, 36, 37, 623, 108, 
	623, 84, 84, 84, 108, 108, 108, 208, 
	211, 212, 213, 214, 215, 216, 84, 212, 
	213, 214, 215, 216, 36, 36, 37, 624, 
	625, 626, 627, 628, 108, 624, 625, 626, 
	627, 628, 84, 84, 84, 108, 108, 108, 
	210, 217, 84, 217, 36, 36, 37, 629, 
	108, 629, 84, 84, 84, 108, 108, 108, 
	159, 219, 220, 221, 222, 84, 220, 221, 
	222, 36, 36, 37, 630, 631, 632, 108, 
	630, 631, 632, 84, 84, 84, 108, 108, 
	108, 218, 223, 224, 225, 226, 227, 228, 
	229, 230, 231, 84, 223, 224, 225, 226, 
	227, 228, 229, 230, 231, 36, 36, 37, 
	633, 634, 635, 636, 637, 638, 639, 640, 
	641, 108, 633, 634, 635, 636, 637, 638, 
	639, 640, 641, 84, 84, 84, 108, 108, 
	108, 159, 232, 84, 232, 36, 36, 37, 
	642, 108, 642, 84, 84, 84, 108, 108, 
	108, 159, 233, 84, 233, 36, 36, 37, 
	643, 108, 643, 84, 84, 84, 108, 108, 
	108, 159, 234, 84, 234, 36, 36, 37, 
	644, 108, 644, 84, 84, 84, 108, 108, 
	108, 159, 235, 84, 235, 36, 36, 37, 
	645, 108, 645, 84, 84, 84, 108, 108, 
	108, 159, 236, 84, 236, 36, 36, 37, 
	646, 108, 646, 84, 84, 84, 108, 108, 
	108, 159, 237, 84, 237, 36, 36, 37, 
	647, 108, 647, 84, 84, 84, 108, 108, 
	108, 159, 238, 84, 238, 36, 36, 37, 
	648, 108, 648, 84, 84, 84, 108, 108, 
	108, 159, 239, 84, 239, 36, 36, 37, 
	649, 108, 649, 84, 84, 84, 108, 108, 
	108, 159, 240, 84, 240, 36, 36, 37, 
	650, 108, 650, 84, 84, 84, 108, 108, 
	108, 159, 241, 84, 241, 36, 36, 37, 
	651, 108, 651, 84, 84, 84, 108, 108, 
	108, 159, 242, 84, 242, 36, 36, 37, 
	652, 108, 652, 84, 84, 84, 108, 108, 
	108, 159, 243, 84, 243, 36, 36, 37, 
	653, 108, 653, 84, 84, 84, 108, 108, 
	108, 159, 244, 84, 36, 36, 37, 108, 
	84, 84, 84, 108, 108, 108, 159, 246, 
	247, 248, 249, 250, 84, 247, 248, 249, 
	250, 36, 36, 37, 654, 655, 656, 657, 
	108, 654, 655, 656, 657, 84, 84, 84, 
	108, 108, 108, 245, 252, 84, 252, 36, 
	36, 37, 658, 108, 658, 84, 84, 84, 
	108, 108, 108, 251, 253, 84, 253, 36, 
	36, 37, 659, 108, 659, 84, 84, 84, 
	108, 108, 108, 159, 254, 84, 254, 36, 
	36, 37, 660, 108, 660, 84, 84, 84, 
	108, 108, 108, 159, 255, 84, 255, 36, 
	36, 37, 661, 108, 661, 84, 84, 84, 
	108, 108, 108, 159, 256, 84, 256, 36, 
	36, 37, 662, 108, 662, 84, 84, 84, 
	108, 108, 108, 159, 257, 84, 257, 36, 
	36, 37, 663, 108, 663, 84, 84, 84, 
	108, 108, 108, 159, 259, 260, 84, 259, 
	260, 36, 36, 37, 664, 665, 108, 664, 
	665, 84, 84, 84, 108, 108, 108, 258, 
	261, 84, 261, 36, 36, 37, 666, 108, 
	666, 84, 84, 84, 108, 108, 108, 159, 
	262, 84, 262, 36, 36, 37, 667, 108, 
	667, 84, 84, 84, 108, 108, 108, 159, 
	263, 84, 263, 36, 36, 37, 668, 108, 
	668, 84, 84, 84, 108, 108, 108, 159, 
	265, 266, 267, 84, 266, 267, 36, 36, 
	37, 669, 670, 108, 669, 670, 84, 84, 
	84, 108, 108, 108, 264, 268, 84, 268, 
	36, 36, 37, 671, 108, 671, 84, 84, 
	84, 108, 108, 108, 159, 269, 84, 269, 
	36, 36, 37, 672, 108, 672, 84, 84, 
	84, 108, 108, 108, 159, 271, 84, 271, 
	36, 36, 37, 673, 108, 673, 84, 84, 
	84, 108, 108, 108, 270, 272, 84, 272, 
	36, 36, 37, 674, 108, 674, 84, 84, 
	84, 108, 108, 108, 159, 273, 84, 273, 
	36, 36, 37, 675, 108, 675, 84, 84, 
	84, 108, 108, 108, 159, 274, 84, 274, 
	36, 36, 37, 676, 108, 676, 84, 84, 
	84, 108, 108, 108, 159, 275, 84, 275, 
	36, 36, 37, 677, 108, 677, 84, 84, 
	84, 108, 108, 108, 159, 276, 84, 276, 
	36, 36, 37, 678, 108, 678, 84, 84, 
	84, 108, 108, 108, 159, 277, 84, 277, 
	36, 36, 37, 679, 108, 679, 84, 84, 
	84, 108, 108, 108, 159, 278, 84, 278, 
	36, 36, 37, 680, 108, 680, 84, 84, 
	84, 108, 108, 108, 159, 280, 281, 282, 
	84, 281, 282, 36, 36, 37, 681, 682, 
	108, 681, 682, 84, 84, 84, 108, 108, 
	108, 279, 283, 84, 283, 36, 36, 37, 
	683, 108, 683, 84, 84, 84, 108, 108, 
	108, 159, 284, 84, 284, 36, 36, 37, 
	684, 108, 684, 84, 84, 84, 108, 108, 
	108, 159, 286, 84, 36, 36, 37, 108, 
	84, 84, 84, 108, 108, 108, 285, 288, 
	289, 290, 291, 292, 293, 294, 295, 296, 
	84, 288, 289, 290, 291, 292, 293, 294, 
	295, 296, 36, 36, 37, 685, 686, 687, 
	688, 689, 690, 691, 692, 693, 108, 685, 
	686, 687, 688, 689, 690, 691, 692, 693, 
	84, 84, 84, 108, 108, 108, 287, 297, 
	84, 297, 36, 36, 37, 694, 108, 694, 
	84, 84, 84, 108, 108, 108, 159, 298, 
	84, 298, 36, 36, 37, 695, 108, 695, 
	84, 84, 84, 108, 108, 108, 159, 300, 
	301, 84, 300, 301, 36, 36, 37, 696, 
	697, 108, 696, 697, 84, 84, 84, 108, 
	108, 108, 299, 302, 84, 302, 36, 36, 
	37, 698, 108, 698, 84, 84, 84, 108, 
	108, 108, 159, 303, 84, 303, 36, 36, 
	37, 699, 108, 699, 84, 84, 84, 108, 
	108, 108, 159, 304, 84, 304, 36, 36, 
	37, 700, 108, 700, 84, 84, 84, 108, 
	108, 108, 159, 305, 84, 305, 36, 36, 
	37, 701, 108, 701, 84, 84, 84, 108, 
	108, 108, 159, 306, 84, 306, 36, 36, 
	37, 702, 108, 702, 84, 84, 84, 108, 
	108, 108, 159, 307, 84, 307, 36, 36, 
	37, 703, 108, 703, 84, 84, 84, 108, 
	108, 108, 159, 309, 310, 311, 312, 313, 
	84, 310, 311, 312, 313, 36, 36, 704, 
	37, 705, 706, 707, 708, 108, 705, 706, 
	707, 708, 84, 84, 84, 108, 108, 108, 
	308, 315, 84, 315, 36, 36, 37, 709, 
	108, 709, 84, 84, 84, 108, 108, 108, 
	314, 316, 84, 316, 36, 36, 37, 710, 
	108, 710, 84, 84, 84, 108, 108, 108, 
	159, 317, 84, 317, 36, 36, 37, 711, 
	108, 711, 84, 84, 84, 108, 108, 108, 
	159, 318, 84, 318, 36, 36, 37, 712, 
	108, 712, 84, 84, 84, 108, 108, 108, 
	159, 320, 84, 320, 36, 36, 37, 713, 
	108, 713, 84, 84, 84, 108, 108, 108, 
	319, 322, 84, 322, 36, 36, 37, 714, 
	108, 714, 84, 84, 84, 108, 108, 108, 
	321, 323, 84, 323, 36, 36, 37, 715, 
	108, 715, 84, 84, 84, 108, 108, 108, 
	159, 324, 84, 324, 36, 36, 37, 716, 
	108, 716, 84, 84, 84, 108, 108, 108, 
	159, 325, 84, 325, 36, 36, 37, 717, 
	108, 717, 84, 84, 84, 108, 108, 108, 
	159, 326, 327, 84, 326, 327, 36, 36, 
	37, 718, 719, 108, 718, 719, 84, 84, 
	84, 108, 108, 108, 159, 329, 330, 84, 
	329, 330, 36, 36, 37, 720, 721, 108, 
	720, 721, 84, 84, 84, 108, 108, 108, 
	328, 331, 84, 331, 36, 36, 37, 722, 
	108, 722, 84, 84, 84, 108, 108, 108, 
	159, 332, 84, 332, 36, 36, 37, 723, 
	108, 723, 84, 84, 84, 108, 108, 108, 
	159, 333, 84, 333, 36, 36, 37, 724, 
	108, 724, 84, 84, 84, 108, 108, 108, 
	159, 334, 84, 334, 36, 36, 37, 725, 
	108, 725, 84, 84, 84, 108, 108, 108, 
	159, 336, 337, 84, 336, 337, 36, 36, 
	37, 726, 727, 108, 726, 727, 84, 84, 
	84, 108, 108, 108, 335, 339, 340, 84, 
	339, 340, 36, 36, 37, 728, 729, 108, 
	728, 729, 84, 84, 84, 108, 108, 108, 
	338, 341, 342, 84, 341, 342, 36, 36, 
	37, 730, 731, 108, 730, 731, 84, 84, 
	84, 108, 108, 108, 159, 344, 345, 346, 
	347, 348, 349, 84, 345, 346, 347, 348, 
	349, 36, 36, 37, 732, 733, 734, 735, 
	736, 108, 732, 733, 734, 735, 736, 84, 
	84, 84, 108, 108, 108, 343, 351, 352, 
	353, 84, 351, 352, 353, 36, 36, 37, 
	737, 738, 739, 108, 737, 738, 739, 84, 
	84, 84, 108, 108, 108, 350, 355, 356, 
	357, 84, 355, 356, 357, 36, 36, 37, 
	740, 741, 742, 108, 740, 741, 742, 84, 
	84, 84, 108, 108, 108, 354, 359, 84, 
	359, 36, 36, 37, 743, 108, 743, 84, 
	84, 84, 108, 108, 108, 358, 360, 84, 
	360, 36, 36, 37, 744, 108, 744, 84, 
	84, 84, 108, 108, 108, 159, 362, 363, 
	364, 84, 362, 363, 364, 36, 36, 37, 
	745, 746, 747, 108, 745, 746, 747, 84, 
	84, 84, 108, 108, 108, 361, 366, 367, 
	84, 366, 367, 36, 36, 37, 748, 749, 
	108, 748, 749, 84, 84, 84, 108, 108, 
	108, 365, 368, 84, 368, 36, 36, 37, 
	750, 108, 750, 84, 84, 84, 108, 108, 
	108, 159, 369, 84, 369, 36, 36, 37, 
	751, 108, 751, 84, 84, 84, 108, 108, 
	108, 159, 370, 84, 370, 36, 36, 37, 
	752, 108, 752, 84, 84, 84, 108, 108, 
	108, 159, 371, 84, 371, 36, 36, 37, 
	753, 108, 753, 84, 84, 84, 108, 108, 
	108, 159, 372, 84, 372, 36, 36, 37, 
	754, 108, 754, 84, 84, 84, 108, 108, 
	108, 159, 374, 84, 374, 36, 36, 37, 
	755, 108, 755, 84, 84, 84, 108, 108, 
	108, 373, 375, 84, 375, 36, 36, 37, 
	756, 108, 756, 84, 84, 84, 108, 108, 
	108, 159, 376, 84, 376, 36, 36, 37, 
	757, 108, 757, 84, 84, 84, 108, 108, 
	108, 159, 377, 84, 377, 36, 36, 37, 
	758, 108, 758, 84, 84, 84, 108, 108, 
	108, 159, 378, 84, 378, 36, 36, 37, 
	759, 108, 759, 84, 84, 84, 108, 108, 
	108, 159, 379, 380, 381, 84, 379, 380, 
	381, 36, 36, 37, 760, 761, 762, 108, 
	760, 761, 762, 84, 84, 84, 108, 108, 
	108, 159, 382, 383, 84, 382, 383, 36, 
	36, 37, 763, 764, 108, 763, 764, 84, 
	84, 84, 108, 108, 108, 159, 384, 84, 
	384, 36, 36, 37, 765, 108, 765, 84, 
	84, 84, 108, 108, 108, 159, 385, 386, 
	84, 385, 386, 36, 36, 37, 766, 767, 
	108, 766, 767, 84, 84, 84, 108, 108, 
	108, 159, 387, 84, 387, 36, 36, 37, 
	768, 108, 768, 84, 84, 84, 108, 108, 
	108, 159, 388, 84, 388, 36, 36, 37, 
	769, 108, 769, 84, 84, 84, 108, 108, 
	108, 159, 389, 390, 84, 389, 390, 36, 
	36, 37, 770, 771, 108, 770, 771, 84, 
	84, 84, 108, 108, 108, 159, 391, 84, 
	391, 36, 36, 37, 772, 108, 772, 84, 
	84, 84, 108, 108, 108, 159, 393, 394, 
	395, 396, 397, 84, 393, 394, 395, 396, 
	397, 36, 36, 37, 773, 774, 775, 776, 
	777, 108, 773, 774, 775, 776, 777, 84, 
	84, 84, 108, 108, 108, 392, 398, 84, 
	398, 36, 36, 37, 778, 108, 778, 84, 
	84, 84, 108, 108, 108, 159, 399, 84, 
	399, 36, 36, 37, 779, 108, 779, 84, 
	84, 84, 108, 108, 108, 159, 400, 84, 
	400, 36, 36, 37, 780, 108, 780, 84, 
	84, 84, 108, 108, 108, 159, 401, 84, 
	401, 36, 36, 37, 781, 108, 781, 84, 
	84, 84, 108, 108, 108, 159, 402, 84, 
	402, 36, 36, 37, 782, 108, 782, 84, 
	84, 84, 108, 108, 108, 159, 403, 84, 
	403, 36, 36, 37, 783, 108, 783, 84, 
	84, 84, 108, 108, 108, 159, 405, 406, 
	407, 408, 409, 410, 411, 412, 84, 36, 
	36, 784, 785, 786, 787, 788, 789, 790, 
	791, 37, 108, 84, 84, 84, 108, 108, 
	108, 404, 413, 84, 413, 36, 36, 37, 
	792, 108, 792, 84, 84, 84, 108, 108, 
	108, 159, 414, 84, 414, 36, 36, 37, 
	793, 108, 793, 84, 84, 84, 108, 108, 
	108, 159, 415, 84, 415, 36, 36, 37, 
	794, 108, 794, 84, 84, 84, 108, 108, 
	108, 159, 416, 84, 416, 36, 36, 37, 
	795, 108, 795, 84, 84, 84, 108, 108, 
	108, 159, 417, 84, 417, 36, 36, 37, 
	796, 108, 796, 84, 84, 84, 108, 108, 
	108, 159, 418, 419, 420, 421, 422, 84, 
	418, 419, 420, 421, 422, 36, 36, 37, 
	797, 798, 799, 800, 801, 108, 797, 798, 
	799, 800, 801, 84, 84, 84, 108, 108, 
	108, 159, 423, 424, 84, 423, 424, 36, 
	36, 37, 802, 803, 108, 802, 803, 84, 
	84, 84, 108, 108, 108, 159, 425, 84, 
	425, 36, 36, 37, 804, 108, 804, 84, 
	84, 84, 108, 108, 108, 159, 426, 84, 
	426, 36, 36, 37, 805, 108, 805, 84, 
	84, 84, 108, 108, 108, 159, 427, 84, 
	427, 36, 36, 37, 806, 108, 806, 84, 
	84, 84, 108, 108, 108, 159, 428, 84, 
	428, 36, 36, 37, 807, 108, 807, 84, 
	84, 84, 108, 108, 108, 159, 429, 84, 
	429, 36, 36, 37, 808, 108, 808, 84, 
	84, 84, 108, 108, 108, 159, 430, 431, 
	432, 84, 430, 431, 432, 36, 36, 37, 
	809, 810, 811, 108, 809, 810, 811, 84, 
	84, 84, 108, 108, 108, 159, 434, 84, 
	434, 36, 36, 37, 812, 108, 812, 84, 
	84, 84, 108, 108, 108, 433, 435, 436, 
	84, 435, 436, 36, 36, 37, 813, 814, 
	108, 813, 814, 84, 84, 84, 108, 108, 
	108, 159, 437, 438, 84, 437, 438, 36, 
	36, 37, 815, 816, 108, 815, 816, 84, 
	84, 84, 108, 108, 108, 159, 440, 84, 
	440, 36, 36, 37, 817, 108, 817, 84, 
	84, 84, 108, 108, 108, 439, 441, 442, 
	84, 441, 442, 36, 36, 37, 818, 819, 
	108, 818, 819, 84, 84, 84, 108, 108, 
	108, 159, 444, 84, 444, 36, 36, 37, 
	820, 108, 820, 84, 84, 84, 108, 108, 
	108, 443, 445, 84, 445, 36, 36, 37, 
	821, 108, 821, 84, 84, 84, 108, 108, 
	108, 159, 447, 448, 449, 84, 448, 449, 
	36, 36, 822, 37, 823, 824, 108, 823, 
	824, 84, 84, 84, 108, 108, 108, 446, 
	451, 84, 451, 36, 36, 37, 825, 108, 
	825, 84, 84, 84, 108, 108, 108, 450, 
	452, 84, 452, 36, 36, 37, 826, 108, 
	826, 84, 84, 84, 108, 108, 108, 159, 
	454, 455, 456, 457, 84, 454, 455, 456, 
	457, 36, 36, 37, 827, 828, 829, 830, 
	108, 827, 828, 829, 830, 84, 84, 84, 
	108, 108, 108, 453, 458, 84, 458, 36, 
	36, 37, 831, 108, 831, 84, 84, 84, 
	108, 108, 108, 159, 459, 84, 459, 36, 
	36, 37, 832, 108, 832, 84, 84, 84, 
	108, 108, 108, 159, 460, 84, 460, 36, 
	36, 37, 833, 108, 833, 84, 84, 84, 
	108, 108, 108, 159, 461, 462, 84, 461, 
	462, 36, 36, 37, 834, 835, 108, 834, 
	835, 84, 84, 84, 108, 108, 108, 159, 
	463, 84, 463, 36, 36, 37, 836, 108, 
	836, 84, 84, 84, 108, 108, 108, 159, 
	464, 84, 464, 36, 36, 37, 837, 108, 
	837, 84, 84, 84, 108, 108, 108, 159, 
	466, 84, 466, 36, 36, 37, 838, 108, 
	838, 84, 84, 84, 108, 108, 108, 465, 
	468, 84, 468, 36, 36, 37, 839, 108, 
	839, 84, 84, 84, 108, 108, 108, 467, 
	469, 470, 84, 469, 470, 36, 36, 37, 
	840, 841, 108, 840, 841, 84, 84, 84, 
	108, 108, 108, 159, 471, 84, 471, 36, 
	36, 37, 842, 108, 842, 84, 84, 84, 
	108, 108, 108, 159, 472, 84, 472, 36, 
	36, 37, 843, 108, 843, 84, 84, 84, 
	108, 108, 108, 159, 473, 84, 473, 36, 
	36, 37, 844, 108, 844, 84, 84, 84, 
	108, 108, 108, 159, 474, 84, 474, 36, 
	36, 37, 845, 108, 845, 84, 84, 84, 
	108, 108, 108, 159, 476, 477, 478, 479, 
	480, 84, 476, 477, 478, 479, 480, 36, 
	36, 37, 846, 847, 848, 849, 850, 108, 
	846, 847, 848, 849, 850, 84, 84, 84, 
	108, 108, 108, 475, 481, 84, 481, 36, 
	36, 37, 851, 108, 851, 84, 84, 84, 
	108, 108, 108, 159, 482, 84, 482, 36, 
	36, 37, 852, 108, 852, 84, 84, 84, 
	108, 108, 108, 159, 483, 84, 483, 36, 
	36, 37, 853, 108, 853, 84, 84, 84, 
	108, 108, 108, 159, 484, 84, 484, 36, 
	36, 37, 854, 108, 854, 84, 84, 84, 
	108, 108, 108, 159, 485, 486, 84, 485, 
	486, 36, 36, 37, 855, 856, 108, 855, 
	856, 84, 84, 84, 108, 108, 108, 159, 
	488, 489, 84, 488, 489, 36, 36, 37, 
	857, 858, 108, 857, 858, 84, 84, 84, 
	108, 108, 108, 487, 491, 492, 493, 84, 
	491, 492, 493, 36, 36, 37, 859, 860, 
	861, 108, 859, 860, 861, 84, 84, 84, 
	108, 108, 108, 490, 495, 84, 36, 36, 
	37, 108, 84, 84, 84, 108, 108, 108, 
	494, 497, 84, 497, 36, 36, 37, 862, 
	108, 862, 84, 84, 84, 108, 108, 108, 
	496, 499, 84, 36, 36, 37, 108, 84, 
	84, 84, 108, 108, 108, 498, 501, 502, 
	503, 84, 501, 502, 503, 36, 36, 37, 
	863, 864, 865, 108, 863, 864, 865, 84, 
	84, 84, 108, 108, 108, 500, 505, 84, 
	36, 36, 37, 108, 84, 84, 84, 108, 
	108, 108, 504, 507, 84, 507, 36, 36, 
	37, 866, 108, 866, 84, 84, 84, 108, 
	108, 108, 506, 509, 84, 36, 36, 37, 
	108, 84, 84, 84, 108, 108, 108, 508, 
	510, 84, 510, 36, 36, 37, 867, 108, 
	867, 84, 84, 84, 108, 108, 108, 159, 
	511, 512, 513, 514, 515, 516, 517, 518, 
	519, 84, 511, 512, 513, 514, 515, 516, 
	517, 518, 519, 36, 36, 37, 868, 869, 
	870, 871, 872, 873, 874, 875, 876, 108, 
	868, 869, 870, 871, 872, 873, 874, 875, 
	876, 84, 84, 84, 108, 108, 108, 159, 
	520, 84, 520, 36, 36, 37, 877, 108, 
	877, 84, 84, 84, 108, 108, 108, 159, 
	521, 84, 521, 36, 36, 37, 878, 108, 
	878, 84, 84, 84, 108, 108, 108, 159, 
	523, 84, 36, 36, 37, 108, 84, 84, 
	84, 108, 108, 108, 522, 524, 525, 84, 
	524, 525, 36, 36, 37, 879, 880, 108, 
	879, 880, 84, 84, 84, 108, 108, 108, 
	159, 526, 84, 526, 36, 36, 37, 881, 
	108, 881, 84, 84, 84, 108, 108, 108, 
	159, 527, 84, 527, 36, 36, 37, 882, 
	108, 882, 84, 84, 84, 108, 108, 108, 
	159, 528, 84, 528, 36, 36, 37, 883, 
	108, 883, 84, 84, 84, 108, 108, 108, 
	159, 529, 84, 529, 36, 36, 37, 884, 
	108, 884, 84, 84, 84, 108, 108, 108, 
	159, 531, 532, 84, 531, 532, 36, 36, 
	37, 885, 886, 108, 885, 886, 84, 84, 
	84, 108, 108, 108, 530, 533, 84, 533, 
	36, 36, 37, 887, 108, 887, 84, 84, 
	84, 108, 108, 108, 159, 534, 84, 534, 
	36, 36, 37, 888, 108, 888, 84, 84, 
	84, 108, 108, 108, 159, 535, 84, 535, 
	36, 36, 37, 889, 108, 889, 84, 84, 
	84, 108, 108, 108, 159, 536, 537, 538, 
	539, 84, 536, 537, 538, 539, 36, 36, 
	37, 890, 891, 892, 893, 108, 890, 891, 
	892, 893, 84, 84, 84, 108, 108, 108, 
	159, 540, 541, 84, 540, 541, 36, 36, 
	37, 894, 895, 108, 894, 895, 84, 84, 
	84, 108, 108, 108, 159, 543, 544, 84, 
	543, 544, 36, 36, 37, 896, 897, 108, 
	896, 897, 84, 84, 84, 108, 108, 108, 
	542, 545, 84, 545, 36, 36, 37, 898, 
	108, 898, 84, 84, 84, 108, 108, 108, 
	159, 546, 84, 546, 36, 36, 37, 899, 
	108, 899, 84, 84, 84, 108, 108, 108, 
	159, 547, 84, 547, 36, 36, 37, 900, 
	108, 900, 84, 84, 84, 108, 108, 108, 
	159, 548, 84, 548, 36, 36, 37, 901, 
	108, 901, 84, 84, 84, 108, 108, 108, 
	159, 550, 84, 550, 36, 36, 37, 902, 
	108, 902, 84, 84, 84, 108, 108, 108, 
	549, 551, 84, 551, 36, 36, 37, 903, 
	108, 903, 84, 84, 84, 108, 108, 108, 
	159, 552, 84, 552, 36, 36, 37, 904, 
	108, 904, 84, 84, 84, 108, 108, 108, 
	159, 553, 84, 553, 36, 36, 37, 905, 
	108, 905, 84, 84, 84, 108, 108, 108, 
	159, 554, 84, 554, 36, 36, 37, 906, 
	108, 906, 84, 84, 84, 108, 108, 108, 
	159, 555, 84, 555, 36, 36, 37, 907, 
	108, 907, 84, 84, 84, 108, 108, 108, 
	159, 556, 84, 556, 36, 36, 37, 908, 
	108, 908, 84, 84, 84, 108, 108, 108, 
	159, 557, 84, 557, 36, 36, 37, 909, 
	108, 909, 84, 84, 84, 108, 108, 108, 
	159, 558, 559, 84, 558, 559, 36, 36, 
	37, 910, 911, 108, 910, 911, 84, 84, 
	84, 108, 108, 108, 159, 560, 84, 560, 
	36, 36, 37, 912, 108, 912, 84, 84, 
	84, 108, 108, 108, 159, 561, 84, 561, 
	36, 36, 37, 913, 108, 913, 84, 84, 
	84, 108, 108, 108, 159, 562, 84, 562, 
	36, 36, 37, 914, 108, 914, 84, 84, 
	84, 108, 108, 108, 159, 564, 84, 564, 
	36, 36, 37, 915, 108, 915, 84, 84, 
	84, 108, 108, 108, 563, 565, 84, 565, 
	36, 36, 37, 916, 108, 916, 84, 84, 
	84, 108, 108, 108, 159, 566, 567, 84, 
	566, 567, 36, 36, 37, 917, 918, 108, 
	917, 918, 84, 84, 84, 108, 108, 108, 
	159, 568, 569, 84, 568, 569, 36, 36, 
	37, 919, 920, 108, 919, 920, 84, 84, 
	84, 108, 108, 108, 159, 570, 84, 570, 
	36, 36, 37, 921, 108, 921, 84, 84, 
	84, 108, 108, 108, 159, 571, 84, 571, 
	36, 36, 37, 922, 108, 922, 84, 84, 
	84, 108, 108, 108, 159, 572, 84, 572, 
	36, 36, 37, 923, 108, 923, 84, 84, 
	84, 108, 108, 108, 159, 573, 84, 573, 
	36, 36, 37, 924, 108, 924, 84, 84, 
	84, 108, 108, 108, 159, 574, 84, 574, 
	36, 36, 37, 925, 108, 925, 84, 84, 
	84, 108, 108, 108, 159, 575, 84, 575, 
	36, 36, 37, 926, 108, 926, 84, 84, 
	84, 108, 108, 108, 159, 576, 577, 84, 
	576, 577, 36, 36, 37, 927, 928, 108, 
	927, 928, 84, 84, 84, 108, 108, 108, 
	159, 578, 84, 578, 36, 36, 37, 929, 
	108, 929, 84, 84, 84, 108, 108, 108, 
	159, 579, 84, 579, 36, 36, 37, 930, 
	108, 930, 84, 84, 84, 108, 108, 108, 
	159, 0
};
static const short _lexer_trans_targs[] = {
	21, 2, 21, 21, 3, 4, 6, 7, 
	9, 11, 14, 5, 21, 21, 8, 21, 
	10, 21, 12, 13, 21, 21, 15, 21, 
	16, 21, 21, 34, 21, 21, 21, 21, 
	21, 21, 19, 276, 20, 21, 21, 21, 
	22, 21, 21, 23, 24, 26, 21, 27, 
	21, 28, 21, 21, 21, 21, 0, 29, 
	30, 31, 21, 35, 36, 37, 38, 21, 
	24, 21, 21, 21, 21, 21, 39, 21, 
	21, 21, 40, 51, 59, 72, 89, 100, 
	106, 111, 115, 143, 41, 144, 169, 182, 
	189, 200, 214, 230, 258, 264, 41, 272, 
	41, 275, 277, 288, 296, 309, 326, 337, 
	343, 348, 352, 380, 278, 381, 406, 419, 
	426, 437, 451, 467, 495, 501, 278, 509, 
	278, 21, 21, 23, 1, 25, 21, 21, 
	21, 21, 21, 21, 21, 33, 17, 32, 
	21, 33, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 42, 43, 44, 45, 47, 48, 21, 
	41, 41, 41, 21, 21, 46, 41, 41, 
	49, 50, 41, 21, 21, 52, 53, 57, 
	21, 21, 54, 41, 55, 56, 41, 58, 
	41, 21, 21, 60, 67, 69, 61, 62, 
	21, 63, 64, 65, 41, 66, 41, 68, 
	21, 21, 21, 70, 71, 41, 21, 41, 
	21, 41, 21, 21, 73, 74, 41, 86, 
	88, 41, 21, 21, 41, 75, 85, 41, 
	41, 76, 80, 41, 41, 41, 82, 41, 
	77, 78, 79, 41, 81, 41, 83, 84, 
	41, 41, 87, 41, 18, 21, 21, 90, 
	91, 93, 96, 21, 41, 92, 41, 94, 
	95, 41, 21, 97, 41, 98, 99, 41, 
	21, 21, 101, 105, 102, 103, 21, 104, 
	41, 41, 107, 108, 109, 110, 41, 21, 
	21, 112, 114, 113, 41, 21, 21, 21, 
	116, 118, 124, 41, 125, 135, 136, 141, 
	142, 117, 41, 21, 119, 121, 120, 41, 
	122, 123, 41, 41, 21, 41, 126, 130, 
	131, 132, 21, 127, 128, 129, 41, 21, 
	41, 21, 41, 133, 134, 41, 41, 41, 
	21, 137, 139, 138, 41, 140, 41, 21, 
	41, 41, 21, 41, 41, 41, 41, 21, 
	21, 145, 159, 41, 161, 41, 21, 146, 
	149, 156, 21, 147, 148, 41, 21, 41, 
	41, 21, 150, 155, 41, 21, 151, 41, 
	152, 153, 154, 41, 41, 21, 157, 158, 
	41, 160, 41, 162, 164, 166, 163, 41, 
	41, 165, 41, 41, 167, 168, 41, 41, 
	21, 170, 174, 175, 177, 181, 171, 172, 
	173, 41, 41, 176, 21, 41, 41, 41, 
	41, 41, 41, 41, 41, 178, 179, 180, 
	41, 41, 41, 183, 188, 41, 41, 41, 
	184, 185, 186, 187, 41, 41, 190, 191, 
	196, 21, 41, 192, 194, 193, 41, 21, 
	41, 195, 41, 21, 41, 197, 21, 41, 
	41, 198, 21, 199, 41, 21, 41, 201, 
	207, 209, 202, 203, 204, 205, 206, 41, 
	41, 21, 208, 21, 41, 210, 213, 211, 
	212, 41, 41, 21, 215, 219, 221, 225, 
	229, 216, 217, 218, 41, 41, 220, 21, 
	41, 41, 21, 222, 223, 41, 21, 21, 
	21, 224, 21, 21, 21, 226, 227, 41, 
	21, 21, 21, 228, 21, 21, 41, 231, 
	232, 234, 243, 41, 244, 245, 248, 253, 
	41, 233, 21, 21, 235, 239, 236, 237, 
	238, 41, 21, 240, 241, 41, 242, 41, 
	41, 41, 41, 41, 41, 41, 21, 41, 
	246, 247, 41, 249, 250, 21, 251, 252, 
	41, 254, 255, 256, 257, 41, 259, 261, 
	260, 41, 262, 21, 263, 41, 265, 266, 
	41, 41, 267, 268, 269, 270, 271, 41, 
	273, 274, 41, 41, 21, 21, 279, 280, 
	281, 282, 284, 285, 278, 278, 278, 283, 
	278, 278, 286, 287, 278, 289, 290, 294, 
	291, 278, 292, 293, 278, 295, 278, 297, 
	304, 306, 298, 299, 300, 301, 302, 278, 
	303, 278, 305, 307, 308, 278, 278, 278, 
	310, 311, 278, 323, 325, 278, 278, 312, 
	322, 278, 278, 313, 317, 278, 278, 278, 
	319, 278, 314, 315, 316, 278, 318, 278, 
	320, 321, 278, 278, 324, 278, 327, 328, 
	330, 333, 278, 329, 278, 331, 332, 278, 
	334, 278, 335, 336, 278, 338, 342, 339, 
	340, 341, 278, 278, 344, 345, 346, 347, 
	278, 349, 351, 350, 278, 353, 355, 361, 
	278, 362, 372, 373, 378, 379, 354, 278, 
	356, 358, 357, 278, 359, 360, 278, 278, 
	278, 363, 367, 368, 369, 364, 365, 366, 
	278, 278, 278, 370, 371, 278, 278, 278, 
	374, 376, 375, 278, 377, 278, 278, 278, 
	278, 278, 278, 278, 382, 396, 278, 398, 
	278, 383, 386, 393, 384, 385, 278, 278, 
	278, 387, 392, 278, 388, 278, 389, 390, 
	391, 278, 278, 394, 395, 278, 397, 278, 
	399, 401, 403, 400, 278, 278, 402, 278, 
	278, 404, 405, 278, 278, 407, 411, 412, 
	414, 418, 408, 409, 410, 278, 278, 413, 
	278, 278, 278, 278, 278, 278, 278, 278, 
	415, 416, 417, 278, 278, 278, 420, 425, 
	278, 278, 278, 421, 422, 423, 424, 278, 
	278, 427, 428, 433, 278, 429, 431, 430, 
	278, 278, 432, 278, 278, 434, 278, 278, 
	435, 436, 278, 278, 438, 444, 446, 439, 
	440, 441, 442, 443, 278, 278, 445, 278, 
	447, 450, 448, 449, 278, 278, 452, 456, 
	458, 462, 466, 453, 454, 455, 278, 278, 
	457, 278, 278, 459, 460, 278, 461, 463, 
	464, 278, 465, 278, 468, 469, 471, 480, 
	278, 481, 482, 485, 490, 278, 470, 472, 
	476, 473, 474, 475, 278, 477, 478, 278, 
	479, 278, 278, 278, 278, 278, 278, 278, 
	278, 483, 484, 278, 486, 487, 488, 489, 
	278, 491, 492, 493, 494, 278, 496, 498, 
	497, 278, 499, 500, 278, 502, 503, 278, 
	278, 504, 505, 506, 507, 508, 278, 510, 
	511, 278, 278
};
static const short _lexer_trans_actions[] = {
	291, 0, 123, 283, 0, 0, 0, 0, 
	0, 0, 0, 0, 83, 95, 0, 85, 
	0, 91, 0, 0, 87, 89, 0, 93, 
	0, 121, 289, 0, 287, 97, 101, 103, 
	99, 285, 0, 0, 0, 119, 117, 7, 
	0, 127, 9, 902, 296, 0, 125, 5, 
	13, 0, 15, 17, 19, 23, 0, 890, 
	890, 890, 25, 0, 0, 0, 0, 41, 
	902, 43, 129, 45, 47, 51, 0, 55, 
	57, 21, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 887, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 332, 0, 
	302, 5, 362, 335, 308, 338, 341, 365, 
	887, 344, 368, 887, 887, 353, 320, 887, 
	887, 317, 374, 887, 887, 887, 332, 887, 
	302, 131, 33, 893, 0, 0, 281, 133, 
	11, 135, 137, 49, 275, 896, 0, 896, 
	279, 899, 277, 269, 141, 27, 29, 31, 
	143, 35, 145, 39, 37, 147, 53, 167, 
	71, 0, 0, 0, 0, 0, 0, 271, 
	410, 494, 497, 185, 81, 0, 812, 500, 
	0, 0, 293, 157, 59, 0, 0, 0, 
	175, 75, 0, 503, 0, 0, 416, 0, 
	815, 149, 61, 0, 0, 0, 0, 0, 
	193, 0, 0, 0, 875, 0, 878, 0, 
	195, 105, 197, 0, 0, 527, 199, 518, 
	201, 524, 159, 63, 0, 0, 536, 0, 
	5, 530, 177, 77, 533, 0, 0, 419, 
	422, 0, 0, 434, 431, 437, 0, 443, 
	0, 0, 0, 425, 0, 428, 0, 0, 
	440, 413, 0, 539, 0, 161, 65, 0, 
	0, 0, 0, 203, 377, 0, 446, 0, 
	0, 449, 205, 0, 548, 0, 0, 452, 
	169, 73, 0, 0, 0, 0, 257, 0, 
	731, 881, 0, 0, 0, 0, 455, 163, 
	67, 0, 0, 0, 551, 179, 79, 171, 
	0, 0, 0, 554, 0, 0, 0, 0, 
	0, 0, 818, 191, 0, 0, 0, 461, 
	0, 0, 464, 371, 207, 782, 0, 0, 
	0, 0, 209, 0, 0, 0, 467, 211, 
	566, 213, 572, 0, 0, 884, 821, 824, 
	187, 0, 0, 0, 827, 0, 830, 181, 
	347, 356, 183, 350, 359, 575, 578, 165, 
	69, 0, 0, 326, 0, 323, 215, 0, 
	0, 0, 217, 0, 0, 716, 219, 719, 
	833, 221, 0, 0, 710, 223, 0, 713, 
	0, 0, 0, 722, 836, 267, 0, 0, 
	725, 0, 470, 0, 0, 0, 0, 842, 
	848, 0, 845, 851, 0, 0, 476, 473, 
	155, 0, 0, 0, 0, 0, 0, 0, 
	0, 734, 785, 0, 259, 758, 761, 764, 
	767, 770, 773, 776, 779, 0, 0, 0, 
	479, 854, 305, 0, 0, 329, 299, 596, 
	0, 0, 0, 0, 740, 599, 0, 0, 
	0, 225, 482, 0, 0, 0, 605, 261, 
	791, 0, 608, 263, 797, 0, 227, 800, 
	614, 0, 229, 0, 707, 153, 314, 0, 
	0, 0, 0, 0, 0, 0, 0, 746, 
	743, 151, 0, 231, 737, 0, 0, 0, 
	0, 485, 623, 173, 0, 0, 0, 0, 
	0, 0, 0, 0, 857, 626, 0, 233, 
	632, 635, 235, 0, 0, 650, 237, 107, 
	239, 0, 241, 109, 243, 0, 0, 665, 
	245, 111, 247, 0, 249, 113, 668, 0, 
	0, 0, 0, 398, 0, 0, 0, 0, 
	671, 0, 251, 115, 0, 0, 0, 0, 
	0, 488, 253, 0, 0, 749, 0, 860, 
	680, 686, 683, 803, 689, 692, 189, 695, 
	0, 0, 863, 0, 0, 255, 0, 0, 
	701, 0, 0, 0, 0, 866, 0, 0, 
	0, 752, 0, 265, 0, 809, 0, 0, 
	869, 872, 0, 0, 0, 0, 0, 491, 
	0, 0, 698, 407, 139, 273, 887, 887, 
	395, 887, 887, 887, 410, 494, 497, 887, 
	812, 500, 887, 887, 293, 380, 887, 887, 
	887, 503, 887, 887, 416, 887, 815, 887, 
	887, 512, 887, 506, 887, 887, 887, 875, 
	887, 878, 509, 515, 521, 527, 518, 524, 
	887, 383, 536, 887, 887, 530, 533, 887, 
	887, 419, 422, 887, 887, 434, 431, 437, 
	887, 443, 887, 887, 887, 425, 887, 428, 
	887, 887, 440, 413, 887, 539, 542, 887, 
	887, 545, 377, 887, 446, 887, 887, 449, 
	887, 548, 887, 887, 452, 887, 887, 887, 
	728, 887, 731, 881, 887, 887, 887, 887, 
	455, 887, 386, 887, 551, 887, 458, 887, 
	554, 557, 887, 401, 389, 392, 887, 818, 
	887, 887, 887, 461, 887, 887, 464, 371, 
	782, 560, 563, 569, 887, 887, 887, 887, 
	467, 566, 572, 887, 887, 884, 821, 824, 
	887, 887, 887, 827, 887, 830, 347, 356, 
	350, 359, 575, 578, 581, 887, 326, 887, 
	323, 584, 590, 839, 587, 887, 716, 719, 
	833, 593, 887, 710, 887, 713, 887, 887, 
	887, 722, 836, 887, 887, 725, 887, 470, 
	887, 887, 887, 887, 842, 848, 887, 845, 
	851, 887, 887, 476, 473, 887, 887, 887, 
	887, 887, 887, 887, 887, 734, 785, 755, 
	758, 761, 764, 767, 770, 773, 776, 779, 
	887, 887, 887, 479, 854, 305, 887, 887, 
	329, 299, 596, 887, 887, 887, 887, 740, 
	599, 602, 887, 887, 482, 887, 887, 788, 
	605, 791, 794, 608, 797, 611, 800, 614, 
	617, 887, 707, 314, 887, 311, 887, 887, 
	887, 887, 887, 887, 746, 743, 620, 737, 
	887, 887, 887, 887, 485, 623, 887, 887, 
	638, 653, 887, 887, 887, 887, 857, 626, 
	629, 632, 635, 641, 644, 650, 647, 656, 
	659, 665, 662, 668, 887, 887, 887, 887, 
	398, 887, 404, 887, 887, 671, 674, 887, 
	677, 887, 887, 887, 488, 887, 887, 749, 
	887, 860, 680, 686, 683, 803, 689, 692, 
	695, 887, 887, 863, 887, 704, 887, 887, 
	701, 887, 887, 887, 887, 866, 887, 887, 
	887, 752, 806, 887, 809, 887, 887, 869, 
	872, 887, 887, 887, 887, 887, 491, 887, 
	887, 698, 407
};
static const short _lexer_to_state_actions[] = {
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 1, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0
};
static const short _lexer_from_state_actions[] = {
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 3, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0
};
static const short _lexer_eof_trans[] = {
	0, 1, 1, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	1, 27, 29, 34, 1, 0, 122, 1, 
	1, 127, 128, 130, 131, 133, 133, 133, 
	137, 1, 139, 140, 141, 145, 147, 150, 
	152, 1, 160, 160, 164, 160, 160, 160, 
	160, 160, 160, 172, 177, 160, 160, 160, 
	160, 160, 160, 186, 160, 160, 193, 160, 
	160, 160, 160, 160, 201, 203, 207, 209, 
	211, 160, 219, 160, 160, 160, 160, 160, 
	160, 160, 160, 160, 160, 160, 160, 160, 
	160, 246, 252, 160, 160, 160, 160, 160, 
	259, 160, 160, 160, 265, 160, 160, 271, 
	160, 160, 160, 160, 160, 160, 160, 280, 
	160, 160, 286, 288, 160, 160, 300, 160, 
	160, 160, 160, 160, 160, 309, 315, 160, 
	160, 160, 320, 322, 160, 160, 160, 160, 
	329, 160, 160, 160, 160, 336, 339, 160, 
	344, 351, 355, 359, 160, 362, 366, 160, 
	160, 160, 160, 160, 374, 160, 160, 160, 
	160, 160, 160, 160, 160, 160, 160, 160, 
	160, 393, 160, 160, 160, 160, 160, 160, 
	405, 160, 160, 160, 160, 160, 160, 160, 
	160, 160, 160, 160, 160, 160, 434, 160, 
	160, 440, 160, 444, 160, 447, 451, 160, 
	454, 160, 160, 160, 160, 160, 160, 466, 
	468, 160, 160, 160, 160, 160, 476, 160, 
	160, 160, 160, 160, 488, 491, 495, 497, 
	499, 501, 505, 507, 509, 160, 160, 160, 
	160, 523, 160, 160, 160, 160, 160, 531, 
	160, 160, 160, 160, 160, 543, 160, 160, 
	160, 160, 550, 160, 160, 160, 160, 160, 
	160, 160, 160, 160, 160, 160, 564, 160, 
	160, 160, 160, 160, 160, 160, 160, 160, 
	160, 160, 160, 581, 582, 152, 1, 160, 
	160, 164, 160, 160, 160, 160, 160, 160, 
	172, 177, 160, 160, 160, 160, 160, 160, 
	186, 160, 160, 193, 160, 160, 160, 160, 
	160, 201, 203, 207, 209, 211, 160, 219, 
	160, 160, 160, 160, 160, 160, 160, 160, 
	160, 160, 160, 160, 160, 160, 246, 252, 
	160, 160, 160, 160, 160, 259, 160, 160, 
	160, 265, 160, 160, 271, 160, 160, 160, 
	160, 160, 160, 160, 280, 160, 160, 286, 
	288, 160, 160, 300, 160, 160, 160, 160, 
	160, 160, 309, 315, 160, 160, 160, 320, 
	322, 160, 160, 160, 160, 329, 160, 160, 
	160, 160, 336, 339, 160, 344, 351, 355, 
	359, 160, 362, 366, 160, 160, 160, 160, 
	160, 374, 160, 160, 160, 160, 160, 160, 
	160, 160, 160, 160, 160, 160, 393, 160, 
	160, 160, 160, 160, 160, 405, 160, 160, 
	160, 160, 160, 160, 160, 160, 160, 160, 
	160, 160, 160, 434, 160, 160, 440, 160, 
	444, 160, 447, 451, 160, 454, 160, 160, 
	160, 160, 160, 160, 466, 468, 160, 160, 
	160, 160, 160, 476, 160, 160, 160, 160, 
	160, 488, 491, 495, 497, 499, 501, 505, 
	507, 509, 160, 160, 160, 160, 523, 160, 
	160, 160, 160, 160, 531, 160, 160, 160, 
	160, 160, 543, 160, 160, 160, 160, 550, 
	160, 160, 160, 160, 160, 160, 160, 160, 
	160, 160, 160, 564, 160, 160, 160, 160, 
	160, 160, 160, 160, 160, 160, 160, 160
};
static const int lexer_start = 21;
static const int lexer_error = 0;
static const int lexer_en_main = 21;
static void set_scan_buf( char *text, Bool _at_bol )
{
 str_set( input_buf, text );
 p = str_data(input_buf);
 at_bol = _at_bol;
 pe = str_data(input_buf) + str_len(input_buf);
 eof = pe;
	{
	cs = lexer_start;
	ts = 0;
	te = 0;
	act = 0;
	}
}
static tokid_t _scan_get( void )
{
	{
	int _klen;
	unsigned int _trans;
	short _widec;
	const short *_acts;
	unsigned int _nacts;
	const short *_keys;
	if ( p == pe )
		goto _test_eof;
	if ( cs == 0 )
		goto _out;
_resume:
	_acts = _lexer_actions + _lexer_from_state_actions[cs];
	_nacts = (unsigned int) *_acts++;
	while ( _nacts-- > 0 ) {
		switch ( *_acts++ ) {
	case 1:
	{ts = p;}
	break;
		}
	}
	_widec = (*p);
	_klen = _lexer_cond_lengths[cs];
	_keys = _lexer_cond_keys + (_lexer_cond_offsets[cs]*2);
	if ( _klen > 0 ) {
		const short *_lower = _keys;
		const short *_mid;
		const short *_upper = _keys + (_klen<<1) - 2;
		while (1) {
			if ( _upper < _lower )
				break;
			_mid = _lower + (((_upper-_lower) >> 1) & ~1);
			if ( _widec < _mid[0] )
				_upper = _mid - 2;
			else if ( _widec > _mid[1] )
				_lower = _mid + 2;
			else {
				switch ( _lexer_cond_spaces[_lexer_cond_offsets[cs] + ((_mid - _keys)>>1)] ) {
	case 0: {
		_widec = (short)(128 + ((*p) - -128));
		if ( 
 at_bol  ) _widec += 256;
		break;
	}
				}
				break;
			}
		}
	}
	_keys = _lexer_trans_keys + _lexer_key_offsets[cs];
	_trans = _lexer_index_offsets[cs];
	_klen = _lexer_single_lengths[cs];
	if ( _klen > 0 ) {
		const short *_lower = _keys;
		const short *_mid;
		const short *_upper = _keys + _klen - 1;
		while (1) {
			if ( _upper < _lower )
				break;
			_mid = _lower + ((_upper-_lower) >> 1);
			if ( _widec < *_mid )
				_upper = _mid - 1;
			else if ( _widec > *_mid )
				_lower = _mid + 1;
			else {
				_trans += (unsigned int)(_mid - _keys);
				goto _match;
			}
		}
		_keys += _klen;
		_trans += _klen;
	}
	_klen = _lexer_range_lengths[cs];
	if ( _klen > 0 ) {
		const short *_lower = _keys;
		const short *_mid;
		const short *_upper = _keys + (_klen<<1) - 2;
		while (1) {
			if ( _upper < _lower )
				break;
			_mid = _lower + (((_upper-_lower) >> 1) & ~1);
			if ( _widec < _mid[0] )
				_upper = _mid - 2;
			else if ( _widec > _mid[1] )
				_lower = _mid + 2;
			else {
				_trans += (unsigned int)((_mid - _keys)>>1);
				goto _match;
			}
		}
		_trans += _klen;
	}
_match:
	_trans = _lexer_indicies[_trans];
_eof_trans:
	cs = _lexer_trans_targs[_trans];
	if ( _lexer_trans_actions[_trans] == 0 )
		goto _again;
	_acts = _lexer_actions + _lexer_trans_actions[_trans];
	_nacts = (unsigned int) *_acts++;
	while ( _nacts-- > 0 )
	{
		switch ( *_acts++ )
		{
	case 2:
	{te = p+1;}
	break;
	case 3:
	{act = 1;}
	break;
	case 4:
	{act = 5;}
	break;
	case 5:
	{act = 37;}
	break;
	case 6:
	{act = 38;}
	break;
	case 7:
	{act = 39;}
	break;
	case 8:
	{act = 40;}
	break;
	case 9:
	{act = 41;}
	break;
	case 10:
	{act = 42;}
	break;
	case 11:
	{act = 43;}
	break;
	case 12:
	{act = 44;}
	break;
	case 13:
	{act = 45;}
	break;
	case 14:
	{act = 46;}
	break;
	case 15:
	{act = 47;}
	break;
	case 16:
	{act = 48;}
	break;
	case 17:
	{act = 49;}
	break;
	case 18:
	{act = 50;}
	break;
	case 19:
	{act = 51;}
	break;
	case 20:
	{act = 52;}
	break;
	case 21:
	{act = 53;}
	break;
	case 22:
	{act = 54;}
	break;
	case 23:
	{act = 55;}
	break;
	case 24:
	{act = 56;}
	break;
	case 25:
	{act = 57;}
	break;
	case 26:
	{act = 58;}
	break;
	case 27:
	{act = 59;}
	break;
	case 28:
	{act = 60;}
	break;
	case 29:
	{act = 61;}
	break;
	case 30:
	{act = 62;}
	break;
	case 31:
	{act = 63;}
	break;
	case 32:
	{act = 64;}
	break;
	case 33:
	{act = 65;}
	break;
	case 34:
	{act = 66;}
	break;
	case 35:
	{act = 67;}
	break;
	case 36:
	{act = 68;}
	break;
	case 37:
	{act = 69;}
	break;
	case 38:
	{act = 70;}
	break;
	case 39:
	{act = 71;}
	break;
	case 40:
	{act = 72;}
	break;
	case 41:
	{act = 73;}
	break;
	case 42:
	{act = 93;}
	break;
	case 43:
	{act = 94;}
	break;
	case 44:
	{act = 95;}
	break;
	case 45:
	{act = 96;}
	break;
	case 46:
	{act = 97;}
	break;
	case 47:
	{act = 98;}
	break;
	case 48:
	{act = 99;}
	break;
	case 49:
	{act = 100;}
	break;
	case 50:
	{act = 101;}
	break;
	case 51:
	{act = 102;}
	break;
	case 52:
	{act = 103;}
	break;
	case 53:
	{act = 104;}
	break;
	case 54:
	{act = 105;}
	break;
	case 55:
	{act = 106;}
	break;
	case 56:
	{act = 107;}
	break;
	case 57:
	{act = 108;}
	break;
	case 58:
	{act = 109;}
	break;
	case 59:
	{act = 110;}
	break;
	case 60:
	{act = 111;}
	break;
	case 61:
	{act = 112;}
	break;
	case 62:
	{act = 113;}
	break;
	case 63:
	{act = 114;}
	break;
	case 64:
	{act = 115;}
	break;
	case 65:
	{act = 116;}
	break;
	case 66:
	{act = 117;}
	break;
	case 67:
	{act = 118;}
	break;
	case 68:
	{act = 119;}
	break;
	case 69:
	{act = 120;}
	break;
	case 70:
	{act = 125;}
	break;
	case 71:
	{act = 126;}
	break;
	case 72:
	{act = 127;}
	break;
	case 73:
	{act = 128;}
	break;
	case 74:
	{act = 129;}
	break;
	case 75:
	{act = 130;}
	break;
	case 76:
	{act = 132;}
	break;
	case 77:
	{act = 133;}
	break;
	case 78:
	{act = 134;}
	break;
	case 79:
	{act = 135;}
	break;
	case 80:
	{act = 136;}
	break;
	case 81:
	{act = 137;}
	break;
	case 82:
	{act = 138;}
	break;
	case 83:
	{act = 139;}
	break;
	case 84:
	{act = 140;}
	break;
	case 85:
	{act = 141;}
	break;
	case 86:
	{act = 142;}
	break;
	case 87:
	{act = 143;}
	break;
	case 88:
	{act = 144;}
	break;
	case 89:
	{act = 145;}
	break;
	case 90:
	{act = 146;}
	break;
	case 91:
	{act = 147;}
	break;
	case 92:
	{act = 148;}
	break;
	case 93:
	{act = 149;}
	break;
	case 94:
	{act = 150;}
	break;
	case 95:
	{act = 151;}
	break;
	case 96:
	{act = 152;}
	break;
	case 97:
	{act = 153;}
	break;
	case 98:
	{act = 154;}
	break;
	case 99:
	{act = 155;}
	break;
	case 100:
	{act = 156;}
	break;
	case 101:
	{act = 157;}
	break;
	case 102:
	{act = 158;}
	break;
	case 103:
	{act = 159;}
	break;
	case 104:
	{act = 160;}
	break;
	case 105:
	{act = 161;}
	break;
	case 106:
	{act = 162;}
	break;
	case 107:
	{act = 163;}
	break;
	case 108:
	{act = 164;}
	break;
	case 109:
	{act = 165;}
	break;
	case 110:
	{act = 166;}
	break;
	case 111:
	{act = 167;}
	break;
	case 112:
	{act = 168;}
	break;
	case 113:
	{act = 169;}
	break;
	case 114:
	{act = 170;}
	break;
	case 115:
	{act = 171;}
	break;
	case 116:
	{act = 172;}
	break;
	case 117:
	{act = 173;}
	break;
	case 118:
	{act = 174;}
	break;
	case 119:
	{act = 175;}
	break;
	case 120:
	{act = 177;}
	break;
	case 121:
	{act = 178;}
	break;
	case 122:
	{act = 180;}
	break;
	case 123:
	{act = 181;}
	break;
	case 124:
	{act = 182;}
	break;
	case 125:
	{act = 184;}
	break;
	case 126:
	{act = 185;}
	break;
	case 127:
	{act = 187;}
	break;
	case 128:
	{act = 188;}
	break;
	case 129:
	{act = 189;}
	break;
	case 130:
	{act = 190;}
	break;
	case 131:
	{act = 192;}
	break;
	case 132:
	{act = 193;}
	break;
	case 133:
	{act = 194;}
	break;
	case 134:
	{act = 195;}
	break;
	case 135:
	{act = 196;}
	break;
	case 136:
	{act = 197;}
	break;
	case 137:
	{act = 198;}
	break;
	case 138:
	{act = 199;}
	break;
	case 139:
	{act = 200;}
	break;
	case 140:
	{act = 201;}
	break;
	case 141:
	{act = 202;}
	break;
	case 142:
	{act = 203;}
	break;
	case 143:
	{act = 204;}
	break;
	case 144:
	{act = 205;}
	break;
	case 145:
	{act = 206;}
	break;
	case 146:
	{act = 207;}
	break;
	case 147:
	{act = 208;}
	break;
	case 148:
	{act = 209;}
	break;
	case 149:
	{act = 210;}
	break;
	case 150:
	{act = 211;}
	break;
	case 151:
	{act = 212;}
	break;
	case 152:
	{act = 213;}
	break;
	case 153:
	{act = 214;}
	break;
	case 154:
	{act = 215;}
	break;
	case 155:
	{act = 216;}
	break;
	case 156:
	{act = 217;}
	break;
	case 157:
	{act = 218;}
	break;
	case 158:
	{act = 219;}
	break;
	case 159:
	{act = 220;}
	break;
	case 160:
	{act = 221;}
	break;
	case 161:
	{act = 222;}
	break;
	case 162:
	{act = 223;}
	break;
	case 163:
	{act = 224;}
	break;
	case 164:
	{act = 225;}
	break;
	case 165:
	{act = 226;}
	break;
	case 166:
	{act = 227;}
	break;
	case 167:
	{act = 228;}
	break;
	case 168:
	{act = 229;}
	break;
	case 169:
	{act = 230;}
	break;
	case 170:
	{act = 231;}
	break;
	case 171:
	{act = 232;}
	break;
	case 172:
	{act = 233;}
	break;
	case 173:
	{act = 234;}
	break;
	case 174:
	{act = 235;}
	break;
	case 175:
	{act = 236;}
	break;
	case 176:
	{act = 237;}
	break;
	case 177:
	{act = 238;}
	break;
	case 178:
	{act = 239;}
	break;
	case 179:
	{act = 240;}
	break;
	case 180:
	{act = 241;}
	break;
	case 181:
	{act = 242;}
	break;
	case 182:
	{act = 243;}
	break;
	case 183:
	{act = 244;}
	break;
	case 184:
	{act = 245;}
	break;
	case 185:
	{act = 246;}
	break;
	case 186:
	{act = 247;}
	break;
	case 187:
	{act = 248;}
	break;
	case 188:
	{act = 249;}
	break;
	case 189:
	{act = 250;}
	break;
	case 190:
	{act = 251;}
	break;
	case 191:
	{act = 252;}
	break;
	case 192:
	{act = 253;}
	break;
	case 193:
	{act = 254;}
	break;
	case 194:
	{act = 255;}
	break;
	case 195:
	{act = 256;}
	break;
	case 196:
	{act = 257;}
	break;
	case 197:
	{act = 258;}
	break;
	case 198:
	{act = 259;}
	break;
	case 199:
	{act = 260;}
	break;
	case 200:
	{act = 261;}
	break;
	case 201:
	{act = 264;}
	break;
	case 202:
	{act = 266;}
	break;
	case 203:
	{act = 268;}
	break;
	case 204:
	{act = 270;}
	break;
	case 205:
	{act = 272;}
	break;
	case 206:
	{act = 276;}
	break;
	case 207:
	{te = p+1;{
	sym.tok = TK_NEWLINE;
	;
	{p++; goto _out; }
}}
	break;
	case 208:
	{te = p+1;{
	sym.tok = TK_CONST_EXPR;
	;
	{p++; goto _out; }
}}
	break;
	case 209:
	{te = p+1;{
	sym.tok = TK_LOG_AND;
	;
	{p++; goto _out; }
}}
	break;
	case 210:
	{te = p+1;{
	sym.tok = TK_RPAREN;
	;
	{p++; goto _out; }
}}
	break;
	case 211:
	{te = p+1;{
	sym.tok = TK_PLUS;
	;
	{p++; goto _out; }
}}
	break;
	case 212:
	{te = p+1;{
	sym.tok = TK_COMMA;
	;
	{p++; goto _out; }
}}
	break;
	case 213:
	{te = p+1;{
	sym.tok = TK_MINUS;
	;
	{p++; goto _out; }
}}
	break;
	case 214:
	{te = p+1;{
	sym.tok = TK_DOT;
	;
	{p++; goto _out; }
}}
	break;
	case 215:
	{te = p+1;{
	sym.tok = TK_DIVIDE;
	;
	{p++; goto _out; }
}}
	break;
	case 216:
	{te = p+1;{
	sym.tok = TK_COLON;
	;
	{p++; goto _out; }
}}
	break;
	case 217:
	{te = p+1;{
	sym.tok = TK_LEFT_SHIFT;
	;
	{p++; goto _out; }
}}
	break;
	case 218:
	{te = p+1;{
	sym.tok = TK_LESS_EQ;
	;
	{p++; goto _out; }
}}
	break;
	case 219:
	{te = p+1;{
	sym.tok = TK_NOT_EQ;
	;
	{p++; goto _out; }
}}
	break;
	case 220:
	{te = p+1;{
	sym.tok = TK_NOT_EQ;
	;
	{p++; goto _out; }
}}
	break;
	case 221:
	{te = p+1;{
	sym.tok = TK_EQUAL;
	;
	{p++; goto _out; }
}}
	break;
	case 222:
	{te = p+1;{
	sym.tok = TK_RIGHT_SHIFT;
	;
	{p++; goto _out; }
}}
	break;
	case 223:
	{te = p+1;{
	sym.tok = TK_GREATER_EQ;
	;
	{p++; goto _out; }
}}
	break;
	case 224:
	{te = p+1;{
	sym.tok = TK_QUESTION;
	;
	{p++; goto _out; }
}}
	break;
	case 225:
	{te = p+1;{
	sym.tok = TK_LSQUARE;
	;
	{p++; goto _out; }
}}
	break;
	case 226:
	{te = p+1;{
	sym.tok = TK_RSQUARE;
	;
	{p++; goto _out; }
}}
	break;
	case 227:
	{te = p+1;{
	sym.tok = TK_BIN_XOR;
	;
	{p++; goto _out; }
}}
	break;
	case 228:
	{te = p+1;{
	sym.tok = TK_POWER;
	;
	{p++; goto _out; }
}}
	break;
	case 229:
	{te = p+1;{
	sym.tok = TK_LCURLY;
	;
	{p++; goto _out; }
}}
	break;
	case 230:
	{te = p+1;{
	sym.tok = TK_LOG_OR;
	;
	{p++; goto _out; }
}}
	break;
	case 231:
	{te = p+1;{
	sym.tok = TK_RCURLY;
	;
	{p++; goto _out; }
}}
	break;
	case 232:
	{te = p+1;{
	sym.tok = TK_BIN_NOT;
	;
	{p++; goto _out; }
}}
	break;
	case 233:
	{te = p+1;{
	sym.tok = TK_B1;
	;
	{p++; goto _out; }
}}
	break;
	case 234:
	{te = p+1;{
	sym.tok = TK_C1;
	;
	{p++; goto _out; }
}}
	break;
	case 235:
	{te = p+1;{
	sym.tok = TK_D1;
	;
	{p++; goto _out; }
}}
	break;
	case 236:
	{te = p+1;{
	sym.tok = TK_E1;
	;
	{p++; goto _out; }
}}
	break;
	case 237:
	{te = p+1;{
	sym.tok = TK_H1;
	;
	{p++; goto _out; }
}}
	break;
	case 238:
	{te = p+1;{
	sym.tok = TK_L1;
	;
	{p++; goto _out; }
}}
	break;
	case 239:
	{te = p+1;{
	sym.tok = TK_A1;
	;
	{p++; goto _out; }
}}
	break;
	case 240:
	{te = p+1;{
	sym.tok = TK_F1;
	;
	{p++; goto _out; }
}}
	break;
	case 241:
	{te = p+1;{
	sym.tok = TK_BC1;
	;
	{p++; goto _out; }
}}
	break;
	case 242:
	{te = p+1;{
	sym.tok = TK_DE1;
	;
	{p++; goto _out; }
}}
	break;
	case 243:
	{te = p+1;{
	sym.tok = TK_HL1;
	;
	{p++; goto _out; }
}}
	break;
	case 244:
	{te = p+1;{
	sym.tok = TK_AF1;
	;
	{p++; goto _out; }
}}
	break;
	case 245:
	{te = p+1;{
	sym.tok = TK_IND_BC;
	p--; te--;
	{p++; goto _out; }
}}
	break;
	case 246:
	{te = p+1;{
	sym.tok = TK_IND_DE;
	p--; te--;
	{p++; goto _out; }
}}
	break;
	case 247:
	{te = p+1;{
	sym.tok = TK_IND_IX;
	p--; te--;
	{p++; goto _out; }
}}
	break;
	case 248:
	{te = p+1;{
	sym.tok = TK_IND_IY;
	p--; te--;
	{p++; goto _out; }
}}
	break;
	case 249:
	{te = p+1;{
	sym.tok = TK_IND_HL;
	p--; te--;
	{p++; goto _out; }
}}
	break;
	case 250:
	{te = p+1;{
	sym.tok = TK_IND_SP;
	p--; te--;
	{p++; goto _out; }
}}
	break;
	case 251:
	{te = p+1;{
	sym.tok = TK_IND_C;
	p--; te--;
	{p++; goto _out; }
}}
	break;
	case 252:
	{te = p+1;{
	sym.tok = TK_DS_B;
	;
	{p++; goto _out; }
}}
	break;
	case 253:
	{te = p+1;{
	sym.tok = TK_DS_W;
	;
	{p++; goto _out; }
}}
	break;
	case 254:
	{te = p+1;{
	sym.tok = TK_DS_P;
	;
	{p++; goto _out; }
}}
	break;
	case 255:
	{te = p+1;{
	sym.tok = TK_DS_Q;
	;
	{p++; goto _out; }
}}
	break;
	case 256:
	{te = p+1;{
	if (expect_opcode) {
		sym.tok = TK_CCF1;
		sym.tok_opcode = TK_CCF1;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_CCF1;
	}
	{p++; goto _out; }
}}
	break;
	case 257:
	{te = p+1;{
	if (expect_opcode) {
		sym.tok = TK_RLA1;
		sym.tok_opcode = TK_RLA1;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_RLA1;
	}
	{p++; goto _out; }
}}
	break;
	case 258:
	{te = p+1;{
	if (expect_opcode) {
		sym.tok = TK_RLCA1;
		sym.tok_opcode = TK_RLCA1;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_RLCA1;
	}
	{p++; goto _out; }
}}
	break;
	case 259:
	{te = p+1;{
	if (expect_opcode) {
		sym.tok = TK_RRA1;
		sym.tok_opcode = TK_RRA1;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_RRA1;
	}
	{p++; goto _out; }
}}
	break;
	case 260:
	{te = p+1;{
	if (expect_opcode) {
		sym.tok = TK_RRCA1;
		sym.tok_opcode = TK_RRCA1;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_RRCA1;
	}
	{p++; goto _out; }
}}
	break;
	case 261:
	{te = p+1;{
	if (expect_opcode) {
		sym.tok = TK_SCF1;
		sym.tok_opcode = TK_SCF1;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_SCF1;
	}
	{p++; goto _out; }
}}
	break;
	case 262:
	{te = p+1;}
	break;
	case 263:
	{te = p+1;{
  while ( ts[ 0] == '.' || isspace(ts[ 0]) ) ts++;
  while ( te[-1] == ':' || isspace(te[-1]) ) te--;
  sym.tok = TK_LABEL;
  {p++; goto _out; }
 }}
	break;
	case 264:
	{te = p+1;{
  sym.tok = TK_NUMBER;
  sym.number = scan_num( ts, te - ts - 1, 16 );
  ts = te = p;
  {p++; goto _out; }
 }}
	break;
	case 265:
	{te = p+1;{
  sym.tok = TK_NUMBER;
  sym.number = scan_num( ts + 2, te - ts - 3, 2 );
  ts = te = p;
  {p++; goto _out; }
 }}
	break;
	case 266:
	{te = p+1;{
  sym.tok = TK_NUMBER;
  if ( get_sym_string() &&
                             te - ts == 1 )
  {
   sym.number = *ts;
  }
  else
  {
   sym.number = 0;
   error_invalid_squoted_string();
  }
  ts = te = p;
  {p++; goto _out; }
 }}
	break;
	case 267:
	{te = p+1;{
  sym.tok = TK_STRING;
  if ( ! get_sym_string() )
   error_unclosed_string();
  {p++; goto _out; }
 }}
	break;
	case 268:
	{te = p+1;{
  sym.tok = TK_NIL;
  skip_to_newline();
  ts = te = p;
  {p++; goto _out; }
 }}
	break;
	case 269:
	{te = p;p--;{
	sym.tok = TK_LOG_NOT;
	;
	{p++; goto _out; }
}}
	break;
	case 270:
	{te = p;p--;{
	sym.tok = TK_BIN_AND;
	;
	{p++; goto _out; }
}}
	break;
	case 271:
	{te = p;p--;{
	sym.tok = TK_LPAREN;
	;
	{p++; goto _out; }
}}
	break;
	case 272:
	{te = p;p--;{
	sym.tok = TK_MULTIPLY;
	;
	{p++; goto _out; }
}}
	break;
	case 273:
	{te = p;p--;{
	sym.tok = TK_DOT;
	;
	{p++; goto _out; }
}}
	break;
	case 274:
	{te = p;p--;{
	sym.tok = TK_LESS;
	;
	{p++; goto _out; }
}}
	break;
	case 275:
	{te = p;p--;{
	sym.tok = TK_EQUAL;
	;
	{p++; goto _out; }
}}
	break;
	case 276:
	{te = p;p--;{
	sym.tok = TK_GREATER;
	;
	{p++; goto _out; }
}}
	break;
	case 277:
	{te = p;p--;{
	sym.tok = TK_BIN_OR;
	;
	{p++; goto _out; }
}}
	break;
	case 278:
	{te = p;p--;{
	sym.tok = TK_C;
	;
	{p++; goto _out; }
}}
	break;
	case 279:
	{te = p;p--;{
	sym.tok = TK_PO;
	;
	{p++; goto _out; }
}}
	break;
	case 280:
	{te = p;p--;{
	sym.tok = TK_P;
	;
	{p++; goto _out; }
}}
	break;
	case 281:
	{te = p;p--;{
	sym.tok = TK_M;
	;
	{p++; goto _out; }
}}
	break;
	case 282:
	{te = p;p--;{
	sym.tok = TK_B;
	;
	{p++; goto _out; }
}}
	break;
	case 283:
	{te = p;p--;{
	sym.tok = TK_D;
	;
	{p++; goto _out; }
}}
	break;
	case 284:
	{te = p;p--;{
	sym.tok = TK_E;
	;
	{p++; goto _out; }
}}
	break;
	case 285:
	{te = p;p--;{
	sym.tok = TK_H;
	;
	{p++; goto _out; }
}}
	break;
	case 286:
	{te = p;p--;{
	sym.tok = TK_L;
	;
	{p++; goto _out; }
}}
	break;
	case 287:
	{te = p;p--;{
	sym.tok = TK_A;
	;
	{p++; goto _out; }
}}
	break;
	case 288:
	{te = p;p--;{
	sym.tok = TK_F;
	;
	{p++; goto _out; }
}}
	break;
	case 289:
	{te = p;p--;{
	sym.tok = TK_I;
	;
	{p++; goto _out; }
}}
	break;
	case 290:
	{te = p;p--;{
	sym.tok = TK_R;
	;
	{p++; goto _out; }
}}
	break;
	case 291:
	{te = p;p--;{
	sym.tok = TK_BC;
	;
	{p++; goto _out; }
}}
	break;
	case 292:
	{te = p;p--;{
	sym.tok = TK_DE;
	;
	{p++; goto _out; }
}}
	break;
	case 293:
	{te = p;p--;{
	sym.tok = TK_HL;
	;
	{p++; goto _out; }
}}
	break;
	case 294:
	{te = p;p--;{
	sym.tok = TK_IX;
	;
	{p++; goto _out; }
}}
	break;
	case 295:
	{te = p;p--;{
	sym.tok = TK_IY;
	;
	{p++; goto _out; }
}}
	break;
	case 296:
	{te = p;p--;{
	sym.tok = TK_AF;
	;
	{p++; goto _out; }
}}
	break;
	case 297:
	{te = p;p--;{
	sym.tok = TK_IP;
	;
	{p++; goto _out; }
}}
	break;
	case 298:
	{te = p;p--;{
	sym.tok = TK_SU;
	;
	{p++; goto _out; }
}}
	break;
	case 299:
	{te = p;p--;{
	if (expect_opcode) {
		sym.tok = TK_IF;
		sym.tok_opcode = TK_IF;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_IF;
	}
	{p++; goto _out; }
}}
	break;
	case 300:
	{te = p;p--;{
	if (expect_opcode) {
		sym.tok = TK_CALL;
		sym.tok_opcode = TK_CALL;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_CALL;
	}
	{p++; goto _out; }
}}
	break;
	case 301:
	{te = p;p--;{
	if (expect_opcode) {
		sym.tok = TK_CCF;
		sym.tok_opcode = TK_CCF;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_CCF;
	}
	{p++; goto _out; }
}}
	break;
	case 302:
	{te = p;p--;{
	if (expect_opcode) {
		sym.tok = TK_CP;
		sym.tok_opcode = TK_CP;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_CP;
	}
	{p++; goto _out; }
}}
	break;
	case 303:
	{te = p;p--;{
	if (expect_opcode) {
		sym.tok = TK_CPD;
		sym.tok_opcode = TK_CPD;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_CPD;
	}
	{p++; goto _out; }
}}
	break;
	case 304:
	{te = p;p--;{
	if (expect_opcode) {
		sym.tok = TK_CPI;
		sym.tok_opcode = TK_CPI;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_CPI;
	}
	{p++; goto _out; }
}}
	break;
	case 305:
	{te = p;p--;{
	if (expect_opcode) {
		sym.tok = TK_EI;
		sym.tok_opcode = TK_EI;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_EI;
	}
	{p++; goto _out; }
}}
	break;
	case 306:
	{te = p;p--;{
	if (expect_opcode) {
		sym.tok = TK_EX;
		sym.tok_opcode = TK_EX;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_EX;
	}
	{p++; goto _out; }
}}
	break;
	case 307:
	{te = p;p--;{
	if (expect_opcode) {
		sym.tok = TK_IN;
		sym.tok_opcode = TK_IN;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_IN;
	}
	{p++; goto _out; }
}}
	break;
	case 308:
	{te = p;p--;{
	if (expect_opcode) {
		sym.tok = TK_INC;
		sym.tok_opcode = TK_INC;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_INC;
	}
	{p++; goto _out; }
}}
	break;
	case 309:
	{te = p;p--;{
	if (expect_opcode) {
		sym.tok = TK_IND;
		sym.tok_opcode = TK_IND;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_IND;
	}
	{p++; goto _out; }
}}
	break;
	case 310:
	{te = p;p--;{
	if (expect_opcode) {
		sym.tok = TK_INI;
		sym.tok_opcode = TK_INI;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_INI;
	}
	{p++; goto _out; }
}}
	break;
	case 311:
	{te = p;p--;{
	if (expect_opcode) {
		sym.tok = TK_LD;
		sym.tok_opcode = TK_LD;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_LD;
	}
	{p++; goto _out; }
}}
	break;
	case 312:
	{te = p;p--;{
	if (expect_opcode) {
		sym.tok = TK_LDD;
		sym.tok_opcode = TK_LDD;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_LDD;
	}
	{p++; goto _out; }
}}
	break;
	case 313:
	{te = p;p--;{
	if (expect_opcode) {
		sym.tok = TK_LDDR;
		sym.tok_opcode = TK_LDDR;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_LDDR;
	}
	{p++; goto _out; }
}}
	break;
	case 314:
	{te = p;p--;{
	if (expect_opcode) {
		sym.tok = TK_LDI;
		sym.tok_opcode = TK_LDI;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_LDI;
	}
	{p++; goto _out; }
}}
	break;
	case 315:
	{te = p;p--;{
	if (expect_opcode) {
		sym.tok = TK_LDIR;
		sym.tok_opcode = TK_LDIR;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_LDIR;
	}
	{p++; goto _out; }
}}
	break;
	case 316:
	{te = p;p--;{
	if (expect_opcode) {
		sym.tok = TK_OR;
		sym.tok_opcode = TK_OR;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_OR;
	}
	{p++; goto _out; }
}}
	break;
	case 317:
	{te = p;p--;{
	if (expect_opcode) {
		sym.tok = TK_OUT;
		sym.tok_opcode = TK_OUT;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_OUT;
	}
	{p++; goto _out; }
}}
	break;
	case 318:
	{te = p;p--;{
	if (expect_opcode) {
		sym.tok = TK_OUTI;
		sym.tok_opcode = TK_OUTI;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_OUTI;
	}
	{p++; goto _out; }
}}
	break;
	case 319:
	{te = p;p--;{
	if (expect_opcode) {
		sym.tok = TK_POP;
		sym.tok_opcode = TK_POP;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_POP;
	}
	{p++; goto _out; }
}}
	break;
	case 320:
	{te = p;p--;{
	if (expect_opcode) {
		sym.tok = TK_RET;
		sym.tok_opcode = TK_RET;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_RET;
	}
	{p++; goto _out; }
}}
	break;
	case 321:
	{te = p;p--;{
	if (expect_opcode) {
		sym.tok = TK_RL;
		sym.tok_opcode = TK_RL;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_RL;
	}
	{p++; goto _out; }
}}
	break;
	case 322:
	{te = p;p--;{
	if (expect_opcode) {
		sym.tok = TK_RLA;
		sym.tok_opcode = TK_RLA;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_RLA;
	}
	{p++; goto _out; }
}}
	break;
	case 323:
	{te = p;p--;{
	if (expect_opcode) {
		sym.tok = TK_RLC;
		sym.tok_opcode = TK_RLC;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_RLC;
	}
	{p++; goto _out; }
}}
	break;
	case 324:
	{te = p;p--;{
	if (expect_opcode) {
		sym.tok = TK_RLCA;
		sym.tok_opcode = TK_RLCA;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_RLCA;
	}
	{p++; goto _out; }
}}
	break;
	case 325:
	{te = p;p--;{
	if (expect_opcode) {
		sym.tok = TK_RR;
		sym.tok_opcode = TK_RR;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_RR;
	}
	{p++; goto _out; }
}}
	break;
	case 326:
	{te = p;p--;{
	if (expect_opcode) {
		sym.tok = TK_RRA;
		sym.tok_opcode = TK_RRA;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_RRA;
	}
	{p++; goto _out; }
}}
	break;
	case 327:
	{te = p;p--;{
	if (expect_opcode) {
		sym.tok = TK_RRC;
		sym.tok_opcode = TK_RRC;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_RRC;
	}
	{p++; goto _out; }
}}
	break;
	case 328:
	{te = p;p--;{
	if (expect_opcode) {
		sym.tok = TK_RRCA;
		sym.tok_opcode = TK_RRCA;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_RRCA;
	}
	{p++; goto _out; }
}}
	break;
	case 329:
	{te = p;p--;{
	if (expect_opcode) {
		sym.tok = TK_SCF;
		sym.tok_opcode = TK_SCF;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_SCF;
	}
	{p++; goto _out; }
}}
	break;
	case 330:
	{te = p;p--;{
	if (expect_opcode) {
		sym.tok = TK_SET;
		sym.tok_opcode = TK_SET;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_SET;
	}
	{p++; goto _out; }
}}
	break;
	case 331:
	{te = p;p--;{
	if (expect_opcode) {
		sym.tok = TK_SWAP;
		sym.tok_opcode = TK_SWAP;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_SWAP;
	}
	{p++; goto _out; }
}}
	break;
	case 332:
	{te = p;p--;{
	if (expect_opcode) {
		sym.tok = TK_FILL;
		sym.tok_opcode = TK_FILL;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_FILL;
	}
	{p++; goto _out; }
}}
	break;
	case 333:
	{te = p;p--;{
	if (expect_opcode) {
		sym.tok = TK_MMU;
		sym.tok_opcode = TK_MMU;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_MMU;
	}
	{p++; goto _out; }
}}
	break;
	case 334:
	{te = p;p--;{
	if (expect_opcode) {
		sym.tok = TK_OTDM;
		sym.tok_opcode = TK_OTDM;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_OTDM;
	}
	{p++; goto _out; }
}}
	break;
	case 335:
	{te = p;p--;{
	if (expect_opcode) {
		sym.tok = TK_OTIM;
		sym.tok_opcode = TK_OTIM;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_OTIM;
	}
	{p++; goto _out; }
}}
	break;
	case 336:
	{te = p;p--;{
	if (expect_opcode) {
		sym.tok = TK_TST;
		sym.tok_opcode = TK_TST;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_TST;
	}
	{p++; goto _out; }
}}
	break;
	case 337:
	{te = p;p--;{
	if (expect_opcode) {
		sym.tok = TK_LDP;
		sym.tok_opcode = TK_LDP;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_LDP;
	}
	{p++; goto _out; }
}}
	break;
	case 338:
	{te = p;p--;}
	break;
	case 339:
	{te = p;p--;{
  sym.tok = TK_NAME;
  {p++; goto _out; }
 }}
	break;
	case 340:
	{te = p;p--;{
  while ( ts[ 0] == '.' || isspace(ts[ 0]) ) ts++;
  while ( te[-1] == ':' || isspace(te[-1]) ) te--;
  sym.tok = TK_LABEL;
  {p++; goto _out; }
 }}
	break;
	case 341:
	{te = p;p--;{
  sym.tok = TK_NUMBER;
  sym.number = scan_num( ts, te - ts, 10 );
  ts = te = p;
  {p++; goto _out; }
 }}
	break;
	case 342:
	{te = p;p--;{
  sym.tok = TK_NUMBER;
  sym.number = scan_num( ts + 2, te - ts - 2, 16 );
  ts = te = p;
  {p++; goto _out; }
 }}
	break;
	case 343:
	{te = p;p--;{
  sym.tok = TK_NUMBER;
  sym.number = scan_num( ts, te - ts - 1, 2 );
  ts = te = p;
  {p++; goto _out; }
 }}
	break;
	case 344:
	{te = p;p--;{
  sym.tok = TK_NUMBER;
  sym.number = scan_num( ts + 1, te - ts - 1, 2 );
  ts = te = p;
  {p++; goto _out; }
 }}
	break;
	case 345:
	{{p = ((te))-1;}{
	sym.tok = TK_LPAREN;
	;
	{p++; goto _out; }
}}
	break;
	case 346:
	{{p = ((te))-1;}{
	sym.tok = TK_DOT;
	;
	{p++; goto _out; }
}}
	break;
	case 347:
	{{p = ((te))-1;}{
  sym.tok = TK_NAME;
  {p++; goto _out; }
 }}
	break;
	case 348:
	{{p = ((te))-1;}{
  sym.tok = TK_NUMBER;
  sym.number = scan_num( ts, te - ts, 10 );
  ts = te = p;
  {p++; goto _out; }
 }}
	break;
	case 349:
	{	switch( act ) {
	case 1:
	{{p = ((te))-1;}
	sym.tok = TK_ASMPC;
	;
	{p++; goto _out; }
}
	break;
	case 5:
	{{p = ((te))-1;}
	sym.tok = TK_MOD;
	;
	{p++; goto _out; }
}
	break;
	case 37:
	{{p = ((te))-1;}
	sym.tok = TK_NZ;
	;
	{p++; goto _out; }
}
	break;
	case 38:
	{{p = ((te))-1;}
	sym.tok = TK_Z;
	;
	{p++; goto _out; }
}
	break;
	case 39:
	{{p = ((te))-1;}
	sym.tok = TK_NC;
	;
	{p++; goto _out; }
}
	break;
	case 40:
	{{p = ((te))-1;}
	sym.tok = TK_C;
	;
	{p++; goto _out; }
}
	break;
	case 41:
	{{p = ((te))-1;}
	sym.tok = TK_PO;
	;
	{p++; goto _out; }
}
	break;
	case 42:
	{{p = ((te))-1;}
	sym.tok = TK_PE;
	;
	{p++; goto _out; }
}
	break;
	case 43:
	{{p = ((te))-1;}
	sym.tok = TK_P;
	;
	{p++; goto _out; }
}
	break;
	case 44:
	{{p = ((te))-1;}
	sym.tok = TK_M;
	;
	{p++; goto _out; }
}
	break;
	case 45:
	{{p = ((te))-1;}
	sym.tok = TK_LZ;
	;
	{p++; goto _out; }
}
	break;
	case 46:
	{{p = ((te))-1;}
	sym.tok = TK_LO;
	;
	{p++; goto _out; }
}
	break;
	case 47:
	{{p = ((te))-1;}
	sym.tok = TK_NV;
	;
	{p++; goto _out; }
}
	break;
	case 48:
	{{p = ((te))-1;}
	sym.tok = TK_V;
	;
	{p++; goto _out; }
}
	break;
	case 49:
	{{p = ((te))-1;}
	sym.tok = TK_B;
	;
	{p++; goto _out; }
}
	break;
	case 50:
	{{p = ((te))-1;}
	sym.tok = TK_D;
	;
	{p++; goto _out; }
}
	break;
	case 51:
	{{p = ((te))-1;}
	sym.tok = TK_E;
	;
	{p++; goto _out; }
}
	break;
	case 52:
	{{p = ((te))-1;}
	sym.tok = TK_H;
	;
	{p++; goto _out; }
}
	break;
	case 53:
	{{p = ((te))-1;}
	sym.tok = TK_IXH;
	;
	{p++; goto _out; }
}
	break;
	case 54:
	{{p = ((te))-1;}
	sym.tok = TK_IYH;
	;
	{p++; goto _out; }
}
	break;
	case 55:
	{{p = ((te))-1;}
	sym.tok = TK_L;
	;
	{p++; goto _out; }
}
	break;
	case 56:
	{{p = ((te))-1;}
	sym.tok = TK_IXL;
	;
	{p++; goto _out; }
}
	break;
	case 57:
	{{p = ((te))-1;}
	sym.tok = TK_IYL;
	;
	{p++; goto _out; }
}
	break;
	case 58:
	{{p = ((te))-1;}
	sym.tok = TK_A;
	;
	{p++; goto _out; }
}
	break;
	case 59:
	{{p = ((te))-1;}
	sym.tok = TK_F;
	;
	{p++; goto _out; }
}
	break;
	case 60:
	{{p = ((te))-1;}
	sym.tok = TK_I;
	;
	{p++; goto _out; }
}
	break;
	case 61:
	{{p = ((te))-1;}
	sym.tok = TK_IIR;
	;
	{p++; goto _out; }
}
	break;
	case 62:
	{{p = ((te))-1;}
	sym.tok = TK_R;
	;
	{p++; goto _out; }
}
	break;
	case 63:
	{{p = ((te))-1;}
	sym.tok = TK_EIR;
	;
	{p++; goto _out; }
}
	break;
	case 64:
	{{p = ((te))-1;}
	sym.tok = TK_BC;
	;
	{p++; goto _out; }
}
	break;
	case 65:
	{{p = ((te))-1;}
	sym.tok = TK_DE;
	;
	{p++; goto _out; }
}
	break;
	case 66:
	{{p = ((te))-1;}
	sym.tok = TK_HL;
	;
	{p++; goto _out; }
}
	break;
	case 67:
	{{p = ((te))-1;}
	sym.tok = TK_IX;
	;
	{p++; goto _out; }
}
	break;
	case 68:
	{{p = ((te))-1;}
	sym.tok = TK_IY;
	;
	{p++; goto _out; }
}
	break;
	case 69:
	{{p = ((te))-1;}
	sym.tok = TK_AF;
	;
	{p++; goto _out; }
}
	break;
	case 70:
	{{p = ((te))-1;}
	sym.tok = TK_SP;
	;
	{p++; goto _out; }
}
	break;
	case 71:
	{{p = ((te))-1;}
	sym.tok = TK_IP;
	;
	{p++; goto _out; }
}
	break;
	case 72:
	{{p = ((te))-1;}
	sym.tok = TK_SU;
	;
	{p++; goto _out; }
}
	break;
	case 73:
	{{p = ((te))-1;}
	sym.tok = TK_XPC;
	;
	{p++; goto _out; }
}
	break;
	case 93:
	{{p = ((te))-1;}
	sym.tok = TK_A32;
	;
	{p++; goto _out; }
}
	break;
	case 94:
	{{p = ((te))-1;}
	sym.tok = TK_DEHL;
	;
	{p++; goto _out; }
}
	break;
	case 95:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_BINARY;
		sym.tok_opcode = TK_BINARY;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_BINARY;
	}
	{p++; goto _out; }
}
	break;
	case 96:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_DEFB;
		sym.tok_opcode = TK_DEFB;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_DEFB;
	}
	{p++; goto _out; }
}
	break;
	case 97:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_DEFC;
		sym.tok_opcode = TK_DEFC;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_DEFC;
	}
	{p++; goto _out; }
}
	break;
	case 98:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_DEFGROUP;
		sym.tok_opcode = TK_DEFGROUP;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_DEFGROUP;
	}
	{p++; goto _out; }
}
	break;
	case 99:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_DEFINE;
		sym.tok_opcode = TK_DEFINE;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_DEFINE;
	}
	{p++; goto _out; }
}
	break;
	case 100:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_DEFQ;
		sym.tok_opcode = TK_DEFQ;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_DEFQ;
	}
	{p++; goto _out; }
}
	break;
	case 101:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_DEFM;
		sym.tok_opcode = TK_DEFM;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_DEFM;
	}
	{p++; goto _out; }
}
	break;
	case 102:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_DEFS;
		sym.tok_opcode = TK_DEFS;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_DEFS;
	}
	{p++; goto _out; }
}
	break;
	case 103:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_DEFVARS;
		sym.tok_opcode = TK_DEFVARS;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_DEFVARS;
	}
	{p++; goto _out; }
}
	break;
	case 104:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_DEFW;
		sym.tok_opcode = TK_DEFW;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_DEFW;
	}
	{p++; goto _out; }
}
	break;
	case 105:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_ELSE;
		sym.tok_opcode = TK_ELSE;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_ELSE;
	}
	{p++; goto _out; }
}
	break;
	case 106:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_ENDIF;
		sym.tok_opcode = TK_ENDIF;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_ENDIF;
	}
	{p++; goto _out; }
}
	break;
	case 107:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_EXTERN;
		sym.tok_opcode = TK_EXTERN;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_EXTERN;
	}
	{p++; goto _out; }
}
	break;
	case 108:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_GLOBAL;
		sym.tok_opcode = TK_GLOBAL;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_GLOBAL;
	}
	{p++; goto _out; }
}
	break;
	case 109:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_IF;
		sym.tok_opcode = TK_IF;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_IF;
	}
	{p++; goto _out; }
}
	break;
	case 110:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_IFDEF;
		sym.tok_opcode = TK_IFDEF;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_IFDEF;
	}
	{p++; goto _out; }
}
	break;
	case 111:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_IFNDEF;
		sym.tok_opcode = TK_IFNDEF;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_IFNDEF;
	}
	{p++; goto _out; }
}
	break;
	case 112:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_INCLUDE;
		sym.tok_opcode = TK_INCLUDE;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_INCLUDE;
	}
	{p++; goto _out; }
}
	break;
	case 113:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_LINE;
		sym.tok_opcode = TK_LINE;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_LINE;
	}
	{p++; goto _out; }
}
	break;
	case 114:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_LSTOFF;
		sym.tok_opcode = TK_LSTOFF;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_LSTOFF;
	}
	{p++; goto _out; }
}
	break;
	case 115:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_LSTON;
		sym.tok_opcode = TK_LSTON;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_LSTON;
	}
	{p++; goto _out; }
}
	break;
	case 116:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_MODULE;
		sym.tok_opcode = TK_MODULE;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_MODULE;
	}
	{p++; goto _out; }
}
	break;
	case 117:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_ORG;
		sym.tok_opcode = TK_ORG;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_ORG;
	}
	{p++; goto _out; }
}
	break;
	case 118:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_PUBLIC;
		sym.tok_opcode = TK_PUBLIC;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_PUBLIC;
	}
	{p++; goto _out; }
}
	break;
	case 119:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_SECTION;
		sym.tok_opcode = TK_SECTION;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_SECTION;
	}
	{p++; goto _out; }
}
	break;
	case 120:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_UNDEFINE;
		sym.tok_opcode = TK_UNDEFINE;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_UNDEFINE;
	}
	{p++; goto _out; }
}
	break;
	case 125:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_ADC;
		sym.tok_opcode = TK_ADC;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_ADC;
	}
	{p++; goto _out; }
}
	break;
	case 126:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_ADD;
		sym.tok_opcode = TK_ADD;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_ADD;
	}
	{p++; goto _out; }
}
	break;
	case 127:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_AND;
		sym.tok_opcode = TK_AND;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_AND;
	}
	{p++; goto _out; }
}
	break;
	case 128:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_BIT;
		sym.tok_opcode = TK_BIT;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_BIT;
	}
	{p++; goto _out; }
}
	break;
	case 129:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_CALL;
		sym.tok_opcode = TK_CALL;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_CALL;
	}
	{p++; goto _out; }
}
	break;
	case 130:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_CCF;
		sym.tok_opcode = TK_CCF;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_CCF;
	}
	{p++; goto _out; }
}
	break;
	case 132:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_CP;
		sym.tok_opcode = TK_CP;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_CP;
	}
	{p++; goto _out; }
}
	break;
	case 133:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_CPD;
		sym.tok_opcode = TK_CPD;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_CPD;
	}
	{p++; goto _out; }
}
	break;
	case 134:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_CPDR;
		sym.tok_opcode = TK_CPDR;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_CPDR;
	}
	{p++; goto _out; }
}
	break;
	case 135:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_CPI;
		sym.tok_opcode = TK_CPI;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_CPI;
	}
	{p++; goto _out; }
}
	break;
	case 136:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_CPIR;
		sym.tok_opcode = TK_CPIR;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_CPIR;
	}
	{p++; goto _out; }
}
	break;
	case 137:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_CPL;
		sym.tok_opcode = TK_CPL;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_CPL;
	}
	{p++; goto _out; }
}
	break;
	case 138:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_DAA;
		sym.tok_opcode = TK_DAA;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_DAA;
	}
	{p++; goto _out; }
}
	break;
	case 139:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_DEC;
		sym.tok_opcode = TK_DEC;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_DEC;
	}
	{p++; goto _out; }
}
	break;
	case 140:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_DI;
		sym.tok_opcode = TK_DI;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_DI;
	}
	{p++; goto _out; }
}
	break;
	case 141:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_DJNZ;
		sym.tok_opcode = TK_DJNZ;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_DJNZ;
	}
	{p++; goto _out; }
}
	break;
	case 142:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_EI;
		sym.tok_opcode = TK_EI;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_EI;
	}
	{p++; goto _out; }
}
	break;
	case 143:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_EX;
		sym.tok_opcode = TK_EX;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_EX;
	}
	{p++; goto _out; }
}
	break;
	case 144:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_EXX;
		sym.tok_opcode = TK_EXX;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_EXX;
	}
	{p++; goto _out; }
}
	break;
	case 145:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_HALT;
		sym.tok_opcode = TK_HALT;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_HALT;
	}
	{p++; goto _out; }
}
	break;
	case 146:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_IM;
		sym.tok_opcode = TK_IM;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_IM;
	}
	{p++; goto _out; }
}
	break;
	case 147:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_IN;
		sym.tok_opcode = TK_IN;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_IN;
	}
	{p++; goto _out; }
}
	break;
	case 148:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_INC;
		sym.tok_opcode = TK_INC;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_INC;
	}
	{p++; goto _out; }
}
	break;
	case 149:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_IND;
		sym.tok_opcode = TK_IND;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_IND;
	}
	{p++; goto _out; }
}
	break;
	case 150:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_INDR;
		sym.tok_opcode = TK_INDR;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_INDR;
	}
	{p++; goto _out; }
}
	break;
	case 151:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_INI;
		sym.tok_opcode = TK_INI;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_INI;
	}
	{p++; goto _out; }
}
	break;
	case 152:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_INIR;
		sym.tok_opcode = TK_INIR;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_INIR;
	}
	{p++; goto _out; }
}
	break;
	case 153:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_JP;
		sym.tok_opcode = TK_JP;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_JP;
	}
	{p++; goto _out; }
}
	break;
	case 154:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_JR;
		sym.tok_opcode = TK_JR;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_JR;
	}
	{p++; goto _out; }
}
	break;
	case 155:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_LD;
		sym.tok_opcode = TK_LD;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_LD;
	}
	{p++; goto _out; }
}
	break;
	case 156:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_LDD;
		sym.tok_opcode = TK_LDD;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_LDD;
	}
	{p++; goto _out; }
}
	break;
	case 157:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_LDDR;
		sym.tok_opcode = TK_LDDR;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_LDDR;
	}
	{p++; goto _out; }
}
	break;
	case 158:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_LDI;
		sym.tok_opcode = TK_LDI;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_LDI;
	}
	{p++; goto _out; }
}
	break;
	case 159:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_LDIR;
		sym.tok_opcode = TK_LDIR;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_LDIR;
	}
	{p++; goto _out; }
}
	break;
	case 160:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_NEG;
		sym.tok_opcode = TK_NEG;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_NEG;
	}
	{p++; goto _out; }
}
	break;
	case 161:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_NOP;
		sym.tok_opcode = TK_NOP;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_NOP;
	}
	{p++; goto _out; }
}
	break;
	case 162:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_OR;
		sym.tok_opcode = TK_OR;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_OR;
	}
	{p++; goto _out; }
}
	break;
	case 163:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_OTDR;
		sym.tok_opcode = TK_OTDR;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_OTDR;
	}
	{p++; goto _out; }
}
	break;
	case 164:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_OTIR;
		sym.tok_opcode = TK_OTIR;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_OTIR;
	}
	{p++; goto _out; }
}
	break;
	case 165:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_OUT;
		sym.tok_opcode = TK_OUT;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_OUT;
	}
	{p++; goto _out; }
}
	break;
	case 166:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_OUTD;
		sym.tok_opcode = TK_OUTD;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_OUTD;
	}
	{p++; goto _out; }
}
	break;
	case 167:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_OUTI;
		sym.tok_opcode = TK_OUTI;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_OUTI;
	}
	{p++; goto _out; }
}
	break;
	case 168:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_POP;
		sym.tok_opcode = TK_POP;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_POP;
	}
	{p++; goto _out; }
}
	break;
	case 169:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_PUSH;
		sym.tok_opcode = TK_PUSH;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_PUSH;
	}
	{p++; goto _out; }
}
	break;
	case 170:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_RES;
		sym.tok_opcode = TK_RES;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_RES;
	}
	{p++; goto _out; }
}
	break;
	case 171:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_RET;
		sym.tok_opcode = TK_RET;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_RET;
	}
	{p++; goto _out; }
}
	break;
	case 172:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_RETI;
		sym.tok_opcode = TK_RETI;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_RETI;
	}
	{p++; goto _out; }
}
	break;
	case 173:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_RETN;
		sym.tok_opcode = TK_RETN;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_RETN;
	}
	{p++; goto _out; }
}
	break;
	case 174:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_RL;
		sym.tok_opcode = TK_RL;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_RL;
	}
	{p++; goto _out; }
}
	break;
	case 175:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_RLA;
		sym.tok_opcode = TK_RLA;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_RLA;
	}
	{p++; goto _out; }
}
	break;
	case 177:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_RLC;
		sym.tok_opcode = TK_RLC;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_RLC;
	}
	{p++; goto _out; }
}
	break;
	case 178:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_RLCA;
		sym.tok_opcode = TK_RLCA;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_RLCA;
	}
	{p++; goto _out; }
}
	break;
	case 180:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_RLD;
		sym.tok_opcode = TK_RLD;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_RLD;
	}
	{p++; goto _out; }
}
	break;
	case 181:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_RR;
		sym.tok_opcode = TK_RR;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_RR;
	}
	{p++; goto _out; }
}
	break;
	case 182:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_RRA;
		sym.tok_opcode = TK_RRA;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_RRA;
	}
	{p++; goto _out; }
}
	break;
	case 184:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_RRC;
		sym.tok_opcode = TK_RRC;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_RRC;
	}
	{p++; goto _out; }
}
	break;
	case 185:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_RRCA;
		sym.tok_opcode = TK_RRCA;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_RRCA;
	}
	{p++; goto _out; }
}
	break;
	case 187:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_RRD;
		sym.tok_opcode = TK_RRD;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_RRD;
	}
	{p++; goto _out; }
}
	break;
	case 188:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_RST;
		sym.tok_opcode = TK_RST;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_RST;
	}
	{p++; goto _out; }
}
	break;
	case 189:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_SBC;
		sym.tok_opcode = TK_SBC;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_SBC;
	}
	{p++; goto _out; }
}
	break;
	case 190:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_SCF;
		sym.tok_opcode = TK_SCF;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_SCF;
	}
	{p++; goto _out; }
}
	break;
	case 192:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_SET;
		sym.tok_opcode = TK_SET;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_SET;
	}
	{p++; goto _out; }
}
	break;
	case 193:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_SLA;
		sym.tok_opcode = TK_SLA;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_SLA;
	}
	{p++; goto _out; }
}
	break;
	case 194:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_SLL;
		sym.tok_opcode = TK_SLL;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_SLL;
	}
	{p++; goto _out; }
}
	break;
	case 195:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_SLI;
		sym.tok_opcode = TK_SLI;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_SLI;
	}
	{p++; goto _out; }
}
	break;
	case 196:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_SRA;
		sym.tok_opcode = TK_SRA;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_SRA;
	}
	{p++; goto _out; }
}
	break;
	case 197:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_SRL;
		sym.tok_opcode = TK_SRL;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_SRL;
	}
	{p++; goto _out; }
}
	break;
	case 198:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_SUB;
		sym.tok_opcode = TK_SUB;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_SUB;
	}
	{p++; goto _out; }
}
	break;
	case 199:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_XOR;
		sym.tok_opcode = TK_XOR;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_XOR;
	}
	{p++; goto _out; }
}
	break;
	case 200:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_SWAPNIB;
		sym.tok_opcode = TK_SWAPNIB;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_SWAPNIB;
	}
	{p++; goto _out; }
}
	break;
	case 201:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_SWAP;
		sym.tok_opcode = TK_SWAP;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_SWAP;
	}
	{p++; goto _out; }
}
	break;
	case 202:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_OUTINB;
		sym.tok_opcode = TK_OUTINB;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_OUTINB;
	}
	{p++; goto _out; }
}
	break;
	case 203:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_LDIX;
		sym.tok_opcode = TK_LDIX;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_LDIX;
	}
	{p++; goto _out; }
}
	break;
	case 204:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_LDIRX;
		sym.tok_opcode = TK_LDIRX;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_LDIRX;
	}
	{p++; goto _out; }
}
	break;
	case 205:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_LDDX;
		sym.tok_opcode = TK_LDDX;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_LDDX;
	}
	{p++; goto _out; }
}
	break;
	case 206:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_LDDRX;
		sym.tok_opcode = TK_LDDRX;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_LDDRX;
	}
	{p++; goto _out; }
}
	break;
	case 207:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_LDIRSCALE;
		sym.tok_opcode = TK_LDIRSCALE;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_LDIRSCALE;
	}
	{p++; goto _out; }
}
	break;
	case 208:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_LDPIRX;
		sym.tok_opcode = TK_LDPIRX;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_LDPIRX;
	}
	{p++; goto _out; }
}
	break;
	case 209:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_FILL;
		sym.tok_opcode = TK_FILL;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_FILL;
	}
	{p++; goto _out; }
}
	break;
	case 210:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_FILLDE;
		sym.tok_opcode = TK_FILLDE;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_FILLDE;
	}
	{p++; goto _out; }
}
	break;
	case 211:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_MIRROR;
		sym.tok_opcode = TK_MIRROR;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_MIRROR;
	}
	{p++; goto _out; }
}
	break;
	case 212:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_POPX;
		sym.tok_opcode = TK_POPX;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_POPX;
	}
	{p++; goto _out; }
}
	break;
	case 213:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_NEXTREG;
		sym.tok_opcode = TK_NEXTREG;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_NEXTREG;
	}
	{p++; goto _out; }
}
	break;
	case 214:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_PIXELDN;
		sym.tok_opcode = TK_PIXELDN;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_PIXELDN;
	}
	{p++; goto _out; }
}
	break;
	case 215:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_PIXELAD;
		sym.tok_opcode = TK_PIXELAD;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_PIXELAD;
	}
	{p++; goto _out; }
}
	break;
	case 216:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_SETAE;
		sym.tok_opcode = TK_SETAE;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_SETAE;
	}
	{p++; goto _out; }
}
	break;
	case 217:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_TEST;
		sym.tok_opcode = TK_TEST;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_TEST;
	}
	{p++; goto _out; }
}
	break;
	case 218:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_MMU;
		sym.tok_opcode = TK_MMU;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_MMU;
	}
	{p++; goto _out; }
}
	break;
	case 219:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_MMU0;
		sym.tok_opcode = TK_MMU0;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_MMU0;
	}
	{p++; goto _out; }
}
	break;
	case 220:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_MMU1;
		sym.tok_opcode = TK_MMU1;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_MMU1;
	}
	{p++; goto _out; }
}
	break;
	case 221:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_MMU2;
		sym.tok_opcode = TK_MMU2;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_MMU2;
	}
	{p++; goto _out; }
}
	break;
	case 222:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_MMU3;
		sym.tok_opcode = TK_MMU3;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_MMU3;
	}
	{p++; goto _out; }
}
	break;
	case 223:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_MMU4;
		sym.tok_opcode = TK_MMU4;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_MMU4;
	}
	{p++; goto _out; }
}
	break;
	case 224:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_MMU5;
		sym.tok_opcode = TK_MMU5;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_MMU5;
	}
	{p++; goto _out; }
}
	break;
	case 225:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_MMU6;
		sym.tok_opcode = TK_MMU6;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_MMU6;
	}
	{p++; goto _out; }
}
	break;
	case 226:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_MMU7;
		sym.tok_opcode = TK_MMU7;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_MMU7;
	}
	{p++; goto _out; }
}
	break;
	case 227:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_IN0;
		sym.tok_opcode = TK_IN0;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_IN0;
	}
	{p++; goto _out; }
}
	break;
	case 228:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_MLT;
		sym.tok_opcode = TK_MLT;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_MLT;
	}
	{p++; goto _out; }
}
	break;
	case 229:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_OTDM;
		sym.tok_opcode = TK_OTDM;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_OTDM;
	}
	{p++; goto _out; }
}
	break;
	case 230:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_OTDMR;
		sym.tok_opcode = TK_OTDMR;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_OTDMR;
	}
	{p++; goto _out; }
}
	break;
	case 231:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_OTIM;
		sym.tok_opcode = TK_OTIM;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_OTIM;
	}
	{p++; goto _out; }
}
	break;
	case 232:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_OTIMR;
		sym.tok_opcode = TK_OTIMR;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_OTIMR;
	}
	{p++; goto _out; }
}
	break;
	case 233:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_OUT0;
		sym.tok_opcode = TK_OUT0;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_OUT0;
	}
	{p++; goto _out; }
}
	break;
	case 234:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_SLP;
		sym.tok_opcode = TK_SLP;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_SLP;
	}
	{p++; goto _out; }
}
	break;
	case 235:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_TST;
		sym.tok_opcode = TK_TST;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_TST;
	}
	{p++; goto _out; }
}
	break;
	case 236:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_TSTIO;
		sym.tok_opcode = TK_TSTIO;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_TSTIO;
	}
	{p++; goto _out; }
}
	break;
	case 237:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_ALTD;
		sym.tok_opcode = TK_ALTD;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_ALTD;
	}
	{p++; goto _out; }
}
	break;
	case 238:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_BOOL;
		sym.tok_opcode = TK_BOOL;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_BOOL;
	}
	{p++; goto _out; }
}
	break;
	case 239:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_IDET;
		sym.tok_opcode = TK_IDET;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_IDET;
	}
	{p++; goto _out; }
}
	break;
	case 240:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_IOE;
		sym.tok_opcode = TK_IOE;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_IOE;
	}
	{p++; goto _out; }
}
	break;
	case 241:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_IOI;
		sym.tok_opcode = TK_IOI;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_IOI;
	}
	{p++; goto _out; }
}
	break;
	case 242:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_IPRES;
		sym.tok_opcode = TK_IPRES;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_IPRES;
	}
	{p++; goto _out; }
}
	break;
	case 243:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_IPSET;
		sym.tok_opcode = TK_IPSET;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_IPSET;
	}
	{p++; goto _out; }
}
	break;
	case 244:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_LDDSR;
		sym.tok_opcode = TK_LDDSR;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_LDDSR;
	}
	{p++; goto _out; }
}
	break;
	case 245:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_LDISR;
		sym.tok_opcode = TK_LDISR;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_LDISR;
	}
	{p++; goto _out; }
}
	break;
	case 246:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_LDP;
		sym.tok_opcode = TK_LDP;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_LDP;
	}
	{p++; goto _out; }
}
	break;
	case 247:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_LSDR;
		sym.tok_opcode = TK_LSDR;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_LSDR;
	}
	{p++; goto _out; }
}
	break;
	case 248:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_LSIR;
		sym.tok_opcode = TK_LSIR;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_LSIR;
	}
	{p++; goto _out; }
}
	break;
	case 249:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_LSDDR;
		sym.tok_opcode = TK_LSDDR;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_LSDDR;
	}
	{p++; goto _out; }
}
	break;
	case 250:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_LSIDR;
		sym.tok_opcode = TK_LSIDR;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_LSIDR;
	}
	{p++; goto _out; }
}
	break;
	case 251:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_MUL;
		sym.tok_opcode = TK_MUL;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_MUL;
	}
	{p++; goto _out; }
}
	break;
	case 252:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_RDMODE;
		sym.tok_opcode = TK_RDMODE;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_RDMODE;
	}
	{p++; goto _out; }
}
	break;
	case 253:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_SETUSR;
		sym.tok_opcode = TK_SETUSR;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_SETUSR;
	}
	{p++; goto _out; }
}
	break;
	case 254:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_SURES;
		sym.tok_opcode = TK_SURES;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_SURES;
	}
	{p++; goto _out; }
}
	break;
	case 255:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_SYSCALL;
		sym.tok_opcode = TK_SYSCALL;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_SYSCALL;
	}
	{p++; goto _out; }
}
	break;
	case 256:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_UMA;
		sym.tok_opcode = TK_UMA;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_UMA;
	}
	{p++; goto _out; }
}
	break;
	case 257:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_UMS;
		sym.tok_opcode = TK_UMS;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_UMS;
	}
	{p++; goto _out; }
}
	break;
	case 258:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_CALL_OZ;
		sym.tok_opcode = TK_CALL_OZ;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_CALL_OZ;
	}
	{p++; goto _out; }
}
	break;
	case 259:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_CALL_PKG;
		sym.tok_opcode = TK_CALL_PKG;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_CALL_PKG;
	}
	{p++; goto _out; }
}
	break;
	case 260:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_FPP;
		sym.tok_opcode = TK_FPP;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_FPP;
	}
	{p++; goto _out; }
}
	break;
	case 261:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_INVOKE;
		sym.tok_opcode = TK_INVOKE;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_INVOKE;
	}
	{p++; goto _out; }
}
	break;
	case 264:
	{{p = ((te))-1;}
  sym.tok = TK_NAME;
  {p++; goto _out; }
 }
	break;
	case 266:
	{{p = ((te))-1;}
  sym.tok = TK_NUMBER;
  sym.number = scan_num( ts, te - ts, 10 );
  ts = te = p;
  {p++; goto _out; }
 }
	break;
	case 268:
	{{p = ((te))-1;}
  sym.tok = TK_NUMBER;
  sym.number = scan_num( ts + 1, te - ts - 1, 16 );
  ts = te = p;
  {p++; goto _out; }
 }
	break;
	case 270:
	{{p = ((te))-1;}
  sym.tok = TK_NUMBER;
  sym.number = scan_num( ts, te - ts - 1, 2 );
  ts = te = p;
  {p++; goto _out; }
 }
	break;
	case 272:
	{{p = ((te))-1;}
  sym.tok = TK_NUMBER;
  sym.number = scan_num( ts + 2, te - ts - 2, 2 );
  ts = te = p;
  {p++; goto _out; }
 }
	break;
	case 276:
	{{p = ((te))-1;}
  sym.tok = TK_NIL;
  skip_to_newline();
  ts = te = p;
  {p++; goto _out; }
 }
	break;
	}
	}
	break;
		}
	}
_again:
	_acts = _lexer_actions + _lexer_to_state_actions[cs];
	_nacts = (unsigned int) *_acts++;
	while ( _nacts-- > 0 ) {
		switch ( *_acts++ ) {
	case 0:
	{ts = 0;}
	break;
		}
	}
	if ( cs == 0 )
		goto _out;
	if ( ++p != pe )
		goto _resume;
	_test_eof: {}
	if ( p == eof )
	{
	if ( _lexer_eof_trans[cs] > 0 ) {
		_trans = _lexer_eof_trans[cs] - 1;
		goto _eof_trans;
	}
	}
	_out: {}
	}
 return sym.tok;
}
