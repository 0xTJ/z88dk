static const short _lexer_actions[] = {
	0, 1, 0, 1, 1, 1, 2, 1, 
	214, 1, 215, 1, 216, 1, 217, 1, 
	218, 1, 219, 1, 220, 1, 221, 1, 
	222, 1, 223, 1, 224, 1, 225, 1, 
	226, 1, 227, 1, 228, 1, 229, 1, 
	230, 1, 231, 1, 232, 1, 233, 1, 
	234, 1, 235, 1, 236, 1, 237, 1, 
	238, 1, 239, 1, 240, 1, 241, 1, 
	242, 1, 243, 1, 244, 1, 245, 1, 
	246, 1, 247, 1, 248, 1, 249, 1, 
	250, 1, 251, 1, 252, 1, 253, 1, 
	254, 1, 255, 1, 256, 1, 257, 1, 
	258, 1, 259, 1, 260, 1, 261, 1, 
	262, 1, 263, 1, 264, 1, 265, 1, 
	266, 1, 267, 1, 268, 1, 269, 1, 
	270, 1, 271, 1, 272, 1, 273, 1, 
	274, 1, 275, 1, 276, 1, 277, 1, 
	278, 1, 279, 1, 280, 1, 281, 1, 
	282, 1, 283, 1, 284, 1, 285, 1, 
	286, 1, 287, 1, 288, 1, 289, 1, 
	290, 1, 291, 1, 292, 1, 293, 1, 
	294, 1, 295, 1, 296, 1, 297, 1, 
	298, 1, 299, 1, 300, 1, 301, 1, 
	302, 1, 303, 1, 304, 1, 305, 1, 
	306, 1, 307, 1, 308, 1, 309, 1, 
	310, 1, 311, 1, 312, 1, 313, 1, 
	314, 1, 315, 1, 316, 1, 317, 1, 
	318, 1, 319, 1, 320, 1, 321, 1, 
	322, 1, 323, 1, 324, 1, 325, 1, 
	326, 1, 327, 1, 328, 1, 329, 1, 
	330, 1, 331, 1, 332, 1, 333, 1, 
	334, 1, 335, 1, 336, 1, 337, 1, 
	338, 1, 339, 1, 340, 1, 341, 1, 
	342, 1, 343, 1, 344, 1, 345, 1, 
	346, 1, 347, 1, 348, 1, 349, 1, 
	350, 1, 351, 1, 352, 1, 353, 1, 
	354, 1, 355, 1, 356, 2, 2, 3, 
	2, 2, 4, 2, 2, 5, 2, 2, 
	6, 2, 2, 7, 2, 2, 8, 2, 
	2, 9, 2, 2, 10, 2, 2, 11, 
	2, 2, 12, 2, 2, 13, 2, 2, 
	14, 2, 2, 15, 2, 2, 16, 2, 
	2, 17, 2, 2, 18, 2, 2, 19, 
	2, 2, 20, 2, 2, 21, 2, 2, 
	22, 2, 2, 23, 2, 2, 24, 2, 
	2, 25, 2, 2, 26, 2, 2, 27, 
	2, 2, 28, 2, 2, 29, 2, 2, 
	30, 2, 2, 31, 2, 2, 32, 2, 
	2, 33, 2, 2, 34, 2, 2, 35, 
	2, 2, 36, 2, 2, 37, 2, 2, 
	38, 2, 2, 39, 2, 2, 40, 2, 
	2, 41, 2, 2, 42, 2, 2, 43, 
	2, 2, 44, 2, 2, 45, 2, 2, 
	46, 2, 2, 47, 2, 2, 48, 2, 
	2, 49, 2, 2, 50, 2, 2, 51, 
	2, 2, 52, 2, 2, 53, 2, 2, 
	54, 2, 2, 55, 2, 2, 56, 2, 
	2, 57, 2, 2, 58, 2, 2, 59, 
	2, 2, 60, 2, 2, 61, 2, 2, 
	62, 2, 2, 63, 2, 2, 64, 2, 
	2, 65, 2, 2, 66, 2, 2, 67, 
	2, 2, 68, 2, 2, 69, 2, 2, 
	70, 2, 2, 71, 2, 2, 72, 2, 
	2, 73, 2, 2, 74, 2, 2, 75, 
	2, 2, 76, 2, 2, 77, 2, 2, 
	78, 2, 2, 79, 2, 2, 80, 2, 
	2, 81, 2, 2, 82, 2, 2, 83, 
	2, 2, 84, 2, 2, 85, 2, 2, 
	86, 2, 2, 87, 2, 2, 88, 2, 
	2, 89, 2, 2, 90, 2, 2, 91, 
	2, 2, 92, 2, 2, 93, 2, 2, 
	94, 2, 2, 95, 2, 2, 96, 2, 
	2, 97, 2, 2, 98, 2, 2, 99, 
	2, 2, 100, 2, 2, 101, 2, 2, 
	102, 2, 2, 103, 2, 2, 104, 2, 
	2, 105, 2, 2, 106, 2, 2, 107, 
	2, 2, 108, 2, 2, 109, 2, 2, 
	110, 2, 2, 111, 2, 2, 112, 2, 
	2, 113, 2, 2, 114, 2, 2, 115, 
	2, 2, 116, 2, 2, 117, 2, 2, 
	118, 2, 2, 119, 2, 2, 120, 2, 
	2, 121, 2, 2, 122, 2, 2, 123, 
	2, 2, 124, 2, 2, 125, 2, 2, 
	126, 2, 2, 127, 2, 2, 128, 2, 
	2, 129, 2, 2, 130, 2, 2, 131, 
	2, 2, 132, 2, 2, 133, 2, 2, 
	134, 2, 2, 135, 2, 2, 136, 2, 
	2, 137, 2, 2, 138, 2, 2, 139, 
	2, 2, 140, 2, 2, 141, 2, 2, 
	142, 2, 2, 143, 2, 2, 144, 2, 
	2, 145, 2, 2, 146, 2, 2, 147, 
	2, 2, 148, 2, 2, 149, 2, 2, 
	150, 2, 2, 151, 2, 2, 152, 2, 
	2, 153, 2, 2, 154, 2, 2, 155, 
	2, 2, 156, 2, 2, 157, 2, 2, 
	158, 2, 2, 159, 2, 2, 160, 2, 
	2, 161, 2, 2, 162, 2, 2, 163, 
	2, 2, 164, 2, 2, 165, 2, 2, 
	166, 2, 2, 167, 2, 2, 168, 2, 
	2, 169, 2, 2, 170, 2, 2, 171, 
	2, 2, 172, 2, 2, 173, 2, 2, 
	174, 2, 2, 175, 2, 2, 176, 2, 
	2, 177, 2, 2, 178, 2, 2, 179, 
	2, 2, 180, 2, 2, 181, 2, 2, 
	182, 2, 2, 183, 2, 2, 184, 2, 
	2, 185, 2, 2, 186, 2, 2, 187, 
	2, 2, 188, 2, 2, 189, 2, 2, 
	190, 2, 2, 191, 2, 2, 192, 2, 
	2, 193, 2, 2, 194, 2, 2, 195, 
	2, 2, 196, 2, 2, 197, 2, 2, 
	198, 2, 2, 199, 2, 2, 200, 2, 
	2, 201, 2, 2, 202, 2, 2, 203, 
	2, 2, 204, 2, 2, 205, 2, 2, 
	206, 2, 2, 207, 2, 2, 208, 2, 
	2, 209, 2, 2, 210, 2, 2, 211, 
	2, 2, 212, 2, 2, 213
};
static const short _lexer_cond_offsets[] = {
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 5, 8, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 17, 21, 28, 
	35, 42, 49, 56, 63, 70, 77, 84, 
	91, 98, 105, 112, 119, 126, 133, 140, 
	147, 154, 161, 168, 175, 182, 189, 196, 
	203, 210, 217, 224, 231, 238, 245, 252, 
	259, 266, 273, 280, 287, 294, 301, 308, 
	315, 322, 329, 336, 343, 350, 357, 364, 
	371, 378, 385, 392, 399, 406, 413, 420, 
	427, 434, 441, 448, 455, 462, 469, 476, 
	483, 490, 497, 504, 511, 518, 525, 532, 
	539, 546, 553, 560, 567, 574, 581, 588, 
	595, 602, 609, 616, 623, 630, 637, 644, 
	651, 658, 665, 672, 679, 686, 693, 700, 
	707, 714, 721, 728, 735, 742, 749, 756, 
	763, 770, 777, 784, 791, 798, 805, 812, 
	819, 826, 833, 840, 847, 854, 861, 868, 
	875, 882, 889, 896, 903, 910, 917, 924, 
	931, 938, 945, 952, 959, 966, 973, 980, 
	987, 994, 1001, 1008, 1015, 1022, 1029, 1036, 
	1043, 1050, 1057, 1064, 1071, 1078, 1085, 1092, 
	1099, 1106, 1113, 1120, 1127, 1134, 1141, 1148, 
	1155, 1162, 1169, 1176, 1183, 1190, 1197, 1204, 
	1211, 1218, 1225, 1232, 1239, 1246, 1253, 1260, 
	1267, 1274, 1281, 1288, 1295, 1302, 1309, 1316, 
	1323, 1330, 1337, 1344, 1351, 1358, 1365, 1372, 
	1379, 1386, 1393, 1400, 1407, 1414, 1421, 1428, 
	1435, 1442, 1449, 1456, 1463, 1470, 1477, 1484, 
	1491, 1498, 1505, 1512, 1519, 1526, 1533, 1540, 
	1547, 1554, 1561, 1568, 1575, 1582, 1589, 1596, 
	1603, 1610, 1617, 1624, 1631, 1638, 1645, 1652, 
	1659, 1666, 1673, 1680, 1687, 1694, 1701, 1708, 
	1715, 1722, 1729, 1736, 1743, 1750, 1757, 1764, 
	1771, 1778
};
static const char _lexer_cond_lengths[] = {
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 5, 3, 4, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 5, 4, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7
};
static const short _lexer_cond_keys[] = {
	9, 9, 32, 32, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 58, 58, 
	46, 46, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 65, 90, 95, 95, 
	97, 122, 48, 57, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 9, 9, 32, 32, 48, 57, 
	58, 58, 65, 90, 95, 95, 97, 122, 
	9, 9, 32, 32, 48, 57, 58, 58, 
	65, 90, 95, 95, 97, 122, 9, 9, 
	32, 32, 48, 57, 58, 58, 65, 90, 
	95, 95, 97, 122, 9, 9, 32, 32, 
	48, 57, 58, 58, 65, 90, 95, 95, 
	97, 122, 0
};
static const char _lexer_cond_spaces[] = {
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0
};
static const short _lexer_key_offsets[] = {
	0, 0, 2, 5, 19, 21, 26, 31, 
	33, 38, 40, 45, 49, 54, 59, 61, 
	66, 74, 80, 88, 95, 98, 236, 237, 
	243, 246, 248, 249, 263, 264, 278, 290, 
	298, 306, 316, 322, 323, 326, 327, 329, 
	330, 349, 356, 364, 375, 383, 392, 401, 
	410, 419, 428, 437, 451, 459, 470, 479, 
	488, 497, 506, 515, 529, 538, 547, 554, 
	565, 574, 583, 592, 601, 609, 622, 631, 
	640, 649, 658, 667, 676, 694, 703, 719, 
	744, 753, 762, 771, 780, 789, 798, 807, 
	816, 825, 834, 843, 852, 861, 870, 879, 
	888, 896, 912, 921, 930, 939, 948, 957, 
	966, 977, 986, 995, 1004, 1016, 1025, 1034, 
	1043, 1052, 1061, 1070, 1079, 1088, 1097, 1106, 
	1118, 1127, 1136, 1144, 1169, 1178, 1187, 1198, 
	1207, 1216, 1225, 1234, 1243, 1252, 1268, 1277, 
	1286, 1295, 1304, 1313, 1322, 1331, 1340, 1349, 
	1360, 1371, 1380, 1389, 1398, 1407, 1418, 1429, 
	1440, 1458, 1471, 1484, 1493, 1502, 1515, 1526, 
	1535, 1544, 1553, 1562, 1571, 1580, 1589, 1598, 
	1609, 1618, 1631, 1642, 1651, 1662, 1671, 1680, 
	1691, 1700, 1717, 1726, 1735, 1744, 1753, 1762, 
	1771, 1786, 1795, 1804, 1813, 1822, 1831, 1848, 
	1859, 1868, 1877, 1886, 1895, 1904, 1917, 1926, 
	1937, 1948, 1957, 1968, 1977, 1986, 1998, 2007, 
	2016, 2033, 2042, 2051, 2060, 2069, 2078, 2087, 
	2098, 2107, 2116, 2125, 2134, 2145, 2154, 2163, 
	2172, 2181, 2198, 2207, 2216, 2225, 2234, 2245, 
	2256, 2269, 2277, 2286, 2294, 2307, 2315, 2324, 
	2332, 2341, 2366, 2375, 2384, 2392, 2403, 2412, 
	2421, 2430, 2439, 2450, 2459, 2468, 2477, 2492, 
	2503, 2514, 2523, 2532, 2541, 2550, 2559, 2568, 
	2577, 2586, 2595, 2604, 2613, 2622, 2633, 2642, 
	2651, 2660, 2669, 2678, 2689, 2700, 2709, 2718, 
	2727, 2736, 2745, 2754, 2771, 2780, 2789, 2798, 
	2807, 2816, 2825, 2834, 2843, 2850, 2857, 2897, 
	2914, 2933, 2958, 2976, 2997, 3018, 3039, 3060, 
	3081, 3102, 3132, 3150, 3175, 3196, 3217, 3238, 
	3259, 3280, 3310, 3331, 3352, 3369, 3394, 3415, 
	3436, 3457, 3478, 3496, 3525, 3546, 3567, 3588, 
	3609, 3630, 3651, 3689, 3710, 3744, 3797, 3818, 
	3839, 3860, 3881, 3902, 3923, 3944, 3965, 3986, 
	4007, 4028, 4049, 4070, 4091, 4112, 4133, 4151, 
	4185, 4206, 4227, 4248, 4269, 4290, 4311, 4336, 
	4357, 4378, 4399, 4425, 4446, 4467, 4488, 4509, 
	4530, 4551, 4572, 4593, 4614, 4635, 4661, 4682, 
	4703, 4721, 4774, 4795, 4816, 4841, 4862, 4883, 
	4904, 4925, 4946, 4967, 5002, 5023, 5044, 5065, 
	5086, 5107, 5128, 5149, 5170, 5191, 5216, 5241, 
	5262, 5283, 5304, 5325, 5350, 5375, 5400, 5438, 
	5467, 5496, 5517, 5538, 5567, 5592, 5613, 5634, 
	5655, 5676, 5697, 5718, 5739, 5760, 5785, 5806, 
	5835, 5860, 5881, 5906, 5927, 5948, 5973, 5994, 
	6031, 6052, 6073, 6094, 6115, 6136, 6157, 6190, 
	6211, 6232, 6253, 6274, 6295, 6332, 6357, 6378, 
	6399, 6420, 6441, 6462, 6491, 6512, 6537, 6562, 
	6583, 6608, 6629, 6650, 6677, 6698, 6719, 6756, 
	6777, 6798, 6819, 6840, 6861, 6882, 6907, 6928, 
	6949, 6970, 6991, 7016, 7037, 7058, 7079, 7100, 
	7137, 7158, 7179, 7200, 7221, 7246, 7271, 7300, 
	7318, 7339, 7357, 7386, 7404, 7425, 7443, 7464, 
	7517, 7538, 7559, 7577, 7602, 7623, 7644, 7665, 
	7686, 7711, 7732, 7753, 7774, 7807, 7832, 7857, 
	7878, 7899, 7920, 7941, 7962, 7983, 8004, 8025, 
	8046, 8067, 8088, 8109, 8134, 8155, 8176, 8197, 
	8218, 8239, 8264, 8289, 8310, 8331, 8352, 8373, 
	8394, 8415, 8452, 8473, 8494, 8515, 8536, 8557, 
	8578, 8599
};
static const short _lexer_trans_keys[] = {
	35, 45, 34, 35, 45, 9, 32, 66, 
	67, 68, 72, 73, 83, 98, 99, 100, 
	104, 105, 115, 67, 99, 9, 32, 41, 
	43, 45, 9, 32, 41, 43, 45, 69, 
	101, 9, 32, 41, 43, 45, 76, 108, 
	9, 32, 41, 43, 45, 88, 89, 120, 
	121, 9, 32, 41, 43, 45, 9, 32, 
	41, 43, 45, 80, 112, 9, 32, 41, 
	43, 45, 72, 104, 48, 57, 65, 70, 
	97, 102, 48, 57, 65, 70, 97, 102, 
	66, 80, 81, 87, 98, 112, 113, 119, 
	521, 544, 607, 577, 602, 609, 634, 521, 
	544, 570, 10, 33, 34, 35, 36, 37, 
	38, 39, 40, 41, 42, 43, 44, 45, 
	47, 48, 49, 58, 59, 60, 61, 62, 
	63, 64, 91, 92, 93, 94, 96, 123, 
	124, 125, 126, 127, 302, 321, 322, 323, 
	324, 325, 326, 327, 328, 329, 330, 332, 
	333, 334, 335, 336, 338, 339, 340, 341, 
	342, 344, 346, 351, 353, 354, 355, 356, 
	357, 358, 359, 360, 361, 362, 364, 365, 
	366, 367, 368, 370, 371, 372, 373, 374, 
	376, 378, 558, 577, 578, 579, 580, 581, 
	582, 583, 584, 585, 586, 588, 589, 590, 
	591, 592, 594, 595, 596, 597, 598, 600, 
	602, 607, 609, 610, 611, 612, 613, 614, 
	615, 616, 617, 618, 620, 621, 622, 623, 
	624, 626, 627, 628, 629, 630, 632, 634, 
	-128, 32, 50, 57, 331, 345, 363, 377, 
	587, 601, 619, 633, 61, 48, 57, 65, 
	70, 97, 102, 34, 48, 49, 48, 49, 
	38, 9, 32, 66, 67, 68, 72, 73, 
	83, 98, 99, 100, 104, 105, 115, 42, 
	66, 72, 88, 98, 104, 120, 48, 49, 
	50, 57, 65, 70, 97, 102, 66, 72, 
	98, 104, 48, 49, 50, 57, 65, 70, 
	97, 102, 72, 104, 48, 57, 65, 70, 
	97, 102, 72, 104, 48, 57, 65, 70, 
	97, 102, 72, 104, 48, 49, 50, 57, 
	65, 70, 97, 102, 48, 57, 65, 70, 
	97, 102, 10, 60, 61, 62, 61, 61, 
	62, 124, 39, 51, 68, 70, 76, 78, 
	83, 95, 100, 102, 108, 110, 115, 48, 
	57, 65, 90, 97, 122, 95, 48, 57, 
	65, 90, 97, 122, 50, 95, 48, 57, 
	65, 90, 97, 122, 67, 68, 95, 99, 
	100, 48, 57, 65, 90, 97, 122, 39, 
	95, 48, 57, 65, 90, 97, 122, 84, 
	95, 116, 48, 57, 65, 90, 97, 122, 
	68, 95, 100, 48, 57, 65, 90, 97, 
	122, 68, 95, 100, 48, 57, 65, 90, 
	97, 122, 77, 95, 109, 48, 57, 65, 
	90, 97, 122, 80, 95, 112, 48, 57, 
	65, 90, 97, 122, 67, 95, 99, 48, 
	57, 65, 90, 97, 122, 39, 67, 73, 
	79, 95, 99, 105, 111, 48, 57, 65, 
	90, 97, 122, 39, 95, 48, 57, 65, 
	90, 97, 122, 78, 84, 95, 110, 116, 
	48, 57, 65, 90, 97, 122, 65, 95, 
	97, 48, 57, 66, 90, 98, 122, 82, 
	95, 114, 48, 57, 65, 90, 97, 122, 
	89, 95, 121, 48, 57, 65, 90, 97, 
	122, 79, 95, 111, 48, 57, 65, 90, 
	97, 122, 76, 95, 108, 48, 57, 65, 
	90, 97, 122, 39, 65, 67, 80, 95, 
	97, 99, 112, 48, 57, 66, 90, 98, 
	122, 76, 95, 108, 48, 57, 65, 90, 
	97, 122, 76, 95, 108, 48, 57, 65, 
	90, 97, 122, 95, 48, 57, 65, 90, 
	97, 122, 79, 80, 95, 111, 112, 48, 
	57, 65, 90, 97, 122, 90, 95, 122, 
	48, 57, 65, 89, 97, 121, 75, 95, 
	107, 48, 57, 65, 90, 97, 122, 71, 
	95, 103, 48, 57, 65, 90, 97, 122, 
	70, 95, 102, 48, 57, 65, 90, 97, 
	122, 39, 95, 48, 57, 65, 90, 97, 
	122, 68, 73, 76, 95, 100, 105, 108, 
	48, 57, 65, 90, 97, 122, 82, 95, 
	114, 48, 57, 65, 90, 97, 122, 82, 
	95, 114, 48, 57, 65, 90, 97, 122, 
	76, 95, 108, 48, 57, 65, 90, 97, 
	122, 73, 95, 105, 48, 57, 65, 90, 
	97, 122, 78, 95, 110, 48, 57, 65, 
	90, 97, 122, 69, 95, 101, 48, 57, 
	65, 90, 97, 122, 39, 65, 69, 73, 
	74, 83, 95, 97, 101, 105, 106, 115, 
	48, 57, 66, 90, 98, 122, 65, 95, 
	97, 48, 57, 66, 90, 98, 122, 39, 
	67, 70, 72, 80, 95, 99, 102, 104, 
	112, 48, 57, 65, 90, 97, 122, 66, 
	67, 71, 73, 77, 81, 83, 86, 87, 
	95, 98, 99, 103, 105, 109, 113, 115, 
	118, 119, 48, 57, 65, 90, 97, 122, 
	82, 95, 114, 48, 57, 65, 90, 97, 
	122, 79, 95, 111, 48, 57, 65, 90, 
	97, 122, 85, 95, 117, 48, 57, 65, 
	90, 97, 122, 80, 95, 112, 48, 57, 
	65, 90, 97, 122, 78, 95, 110, 48, 
	57, 65, 90, 97, 122, 69, 95, 101, 
	48, 57, 65, 90, 97, 122, 65, 95, 
	97, 48, 57, 66, 90, 98, 122, 82, 
	95, 114, 48, 57, 65, 90, 97, 122, 
	83, 95, 115, 48, 57, 65, 90, 97, 
	122, 76, 95, 108, 48, 57, 65, 90, 
	97, 122, 72, 95, 104, 48, 57, 65, 
	90, 97, 122, 65, 95, 97, 48, 57, 
	66, 90, 98, 122, 83, 95, 115, 48, 
	57, 65, 90, 97, 122, 69, 95, 101, 
	48, 57, 65, 90, 97, 122, 78, 95, 
	110, 48, 57, 65, 90, 97, 122, 90, 
	95, 122, 48, 57, 65, 89, 97, 121, 
	46, 95, 48, 57, 65, 90, 97, 122, 
	39, 73, 76, 78, 88, 95, 105, 108, 
	110, 120, 48, 57, 65, 90, 97, 122, 
	82, 95, 114, 48, 57, 65, 90, 97, 
	122, 83, 95, 115, 48, 57, 65, 90, 
	97, 122, 69, 95, 101, 48, 57, 65, 
	90, 97, 122, 68, 95, 100, 48, 57, 
	65, 90, 97, 122, 73, 95, 105, 48, 
	57, 65, 90, 97, 122, 70, 95, 102, 
	48, 57, 65, 90, 97, 122, 84, 88, 
	95, 116, 120, 48, 57, 65, 90, 97, 
	122, 69, 95, 101, 48, 57, 65, 90, 
	97, 122, 82, 95, 114, 48, 57, 65, 
	90, 97, 122, 78, 95, 110, 48, 57, 
	65, 90, 97, 122, 39, 73, 80, 95, 
	105, 112, 48, 57, 65, 90, 97, 122, 
	76, 95, 108, 48, 57, 65, 90, 97, 
	122, 76, 95, 108, 48, 57, 65, 90, 
	97, 122, 68, 95, 100, 48, 57, 65, 
	90, 97, 122, 69, 95, 101, 48, 57, 
	65, 90, 97, 122, 80, 95, 112, 48, 
	57, 65, 90, 97, 122, 76, 95, 108, 
	48, 57, 65, 90, 97, 122, 79, 95, 
	111, 48, 57, 65, 90, 97, 122, 66, 
	95, 98, 48, 57, 65, 90, 97, 122, 
	65, 95, 97, 48, 57, 66, 90, 98, 
	122, 76, 95, 108, 48, 57, 65, 90, 
	97, 122, 39, 65, 76, 95, 97, 108, 
	48, 57, 66, 90, 98, 122, 76, 95, 
	108, 48, 57, 65, 90, 97, 122, 84, 
	95, 116, 48, 57, 65, 90, 97, 122, 
	39, 95, 48, 57, 65, 90, 97, 122, 
	68, 70, 73, 77, 78, 79, 80, 88, 
	89, 95, 100, 102, 105, 109, 110, 111, 
	112, 120, 121, 48, 57, 65, 90, 97, 
	122, 69, 95, 101, 48, 57, 65, 90, 
	97, 122, 84, 95, 116, 48, 57, 65, 
	90, 97, 122, 68, 78, 95, 100, 110, 
	48, 57, 65, 90, 97, 122, 69, 95, 
	101, 48, 57, 65, 90, 97, 122, 70, 
	95, 102, 48, 57, 65, 90, 97, 122, 
	68, 95, 100, 48, 57, 65, 90, 97, 
	122, 69, 95, 101, 48, 57, 65, 90, 
	97, 122, 70, 95, 102, 48, 57, 65, 
	90, 97, 122, 82, 95, 114, 48, 57, 
	65, 90, 97, 122, 48, 67, 68, 73, 
	86, 95, 99, 100, 105, 118, 49, 57, 
	65, 90, 97, 122, 76, 95, 108, 48, 
	57, 65, 90, 97, 122, 85, 95, 117, 
	48, 57, 65, 90, 97, 122, 68, 95, 
	100, 48, 57, 65, 90, 97, 122, 69, 
	95, 101, 48, 57, 65, 90, 97, 122, 
	82, 95, 114, 48, 57, 65, 90, 97, 
	122, 82, 95, 114, 48, 57, 65, 90, 
	97, 122, 79, 95, 111, 48, 57, 65, 
	90, 97, 122, 75, 95, 107, 48, 57, 
	65, 90, 97, 122, 69, 95, 101, 48, 
	57, 65, 90, 97, 122, 69, 73, 95, 
	101, 105, 48, 57, 65, 90, 97, 122, 
	82, 83, 95, 114, 115, 48, 57, 65, 
	90, 97, 122, 69, 95, 101, 48, 57, 
	65, 90, 97, 122, 83, 95, 115, 48, 
	57, 65, 90, 97, 122, 69, 95, 101, 
	48, 57, 65, 90, 97, 122, 84, 95, 
	116, 48, 57, 65, 90, 97, 122, 72, 
	76, 95, 104, 108, 48, 57, 65, 90, 
	97, 122, 72, 76, 95, 104, 108, 48, 
	57, 65, 90, 97, 122, 80, 82, 95, 
	112, 114, 48, 57, 65, 90, 97, 122, 
	39, 68, 73, 79, 83, 90, 95, 100, 
	105, 111, 115, 122, 48, 57, 65, 89, 
	97, 121, 68, 73, 80, 95, 100, 105, 
	112, 48, 57, 65, 90, 97, 122, 82, 
	83, 88, 95, 114, 115, 120, 48, 57, 
	65, 90, 97, 122, 88, 95, 120, 48, 
	57, 65, 90, 97, 122, 82, 95, 114, 
	48, 57, 65, 90, 97, 122, 82, 83, 
	88, 95, 114, 115, 120, 48, 57, 65, 
	90, 97, 122, 83, 88, 95, 115, 120, 
	48, 57, 65, 90, 97, 122, 67, 95, 
	99, 48, 57, 65, 90, 97, 122, 65, 
	95, 97, 48, 57, 66, 90, 98, 122, 
	76, 95, 108, 48, 57, 65, 90, 97, 
	122, 69, 95, 101, 48, 57, 65, 90, 
	97, 122, 82, 95, 114, 48, 57, 65, 
	90, 97, 122, 73, 95, 105, 48, 57, 
	65, 90, 97, 122, 82, 95, 114, 48, 
	57, 65, 90, 97, 122, 88, 95, 120, 
	48, 57, 65, 90, 97, 122, 66, 78, 
	95, 98, 110, 48, 57, 65, 90, 97, 
	122, 69, 95, 101, 48, 57, 65, 90, 
	97, 122, 68, 73, 84, 95, 100, 105, 
	116, 48, 57, 65, 90, 97, 122, 68, 
	82, 95, 100, 114, 48, 57, 65, 90, 
	97, 122, 82, 95, 114, 48, 57, 65, 
	90, 97, 122, 68, 82, 95, 100, 114, 
	48, 57, 65, 90, 97, 122, 82, 95, 
	114, 48, 57, 65, 90, 97, 122, 79, 
	95, 111, 48, 57, 65, 90, 97, 122, 
	70, 78, 95, 102, 110, 48, 57, 65, 
	90, 97, 122, 70, 95, 102, 48, 57, 
	65, 90, 97, 122, 73, 76, 77, 79, 
	85, 95, 105, 108, 109, 111, 117, 48, 
	57, 65, 90, 97, 122, 82, 95, 114, 
	48, 57, 65, 90, 97, 122, 82, 95, 
	114, 48, 57, 65, 90, 97, 122, 79, 
	95, 111, 48, 57, 65, 90, 97, 122, 
	82, 95, 114, 48, 57, 65, 90, 97, 
	122, 84, 95, 116, 48, 57, 65, 90, 
	97, 122, 85, 95, 117, 48, 57, 65, 
	90, 97, 122, 48, 49, 50, 51, 52, 
	53, 54, 55, 95, 56, 57, 65, 90, 
	97, 122, 68, 95, 100, 48, 57, 65, 
	90, 97, 122, 85, 95, 117, 48, 57, 
	65, 90, 97, 122, 76, 95, 108, 48, 
	57, 65, 90, 97, 122, 69, 95, 101, 
	48, 57, 65, 90, 97, 122, 76, 95, 
	108, 48, 57, 65, 90, 97, 122, 67, 
	69, 79, 86, 90, 95, 99, 101, 111, 
	118, 122, 48, 57, 65, 89, 97, 121, 
	71, 88, 95, 103, 120, 48, 57, 65, 
	90, 97, 122, 84, 95, 116, 48, 57, 
	65, 90, 97, 122, 82, 95, 114, 48, 
	57, 65, 90, 97, 122, 69, 95, 101, 
	48, 57, 65, 90, 97, 122, 71, 95, 
	103, 48, 57, 65, 90, 97, 122, 80, 
	95, 112, 48, 57, 65, 90, 97, 122, 
	82, 84, 85, 95, 114, 116, 117, 48, 
	57, 65, 90, 97, 122, 71, 95, 103, 
	48, 57, 65, 90, 97, 122, 68, 73, 
	95, 100, 105, 48, 57, 65, 90, 97, 
	122, 77, 82, 95, 109, 114, 48, 57, 
	65, 90, 97, 122, 82, 95, 114, 48, 
	57, 65, 90, 97, 122, 77, 82, 95, 
	109, 114, 48, 57, 65, 90, 97, 122, 
	82, 95, 114, 48, 57, 65, 90, 97, 
	122, 84, 95, 116, 48, 57, 65, 90, 
	97, 122, 48, 68, 73, 95, 100, 105, 
	49, 57, 65, 90, 97, 122, 78, 95, 
	110, 48, 57, 65, 90, 97, 122, 66, 
	95, 98, 48, 57, 65, 90, 97, 122, 
	69, 72, 73, 79, 85, 95, 101, 104, 
	105, 111, 117, 48, 57, 65, 90, 97, 
	122, 65, 95, 97, 48, 57, 66, 90, 
	98, 122, 83, 95, 115, 48, 57, 65, 
	90, 97, 122, 69, 95, 101, 48, 57, 
	65, 90, 97, 122, 88, 95, 120, 48, 
	57, 65, 90, 97, 122, 69, 95, 101, 
	48, 57, 65, 90, 97, 122, 76, 95, 
	108, 48, 57, 65, 90, 97, 122, 65, 
	68, 95, 97, 100, 48, 57, 66, 90, 
	98, 122, 68, 95, 100, 48, 57, 65, 
	90, 97, 122, 78, 95, 110, 48, 57, 
	65, 90, 97, 122, 80, 95, 112, 48, 
	57, 65, 90, 97, 122, 88, 95, 120, 
	48, 57, 65, 90, 97, 122, 66, 83, 
	95, 98, 115, 48, 57, 65, 90, 97, 
	122, 76, 95, 108, 48, 57, 65, 90, 
	97, 122, 73, 95, 105, 48, 57, 65, 
	90, 97, 122, 67, 95, 99, 48, 57, 
	65, 90, 97, 122, 72, 95, 104, 48, 
	57, 65, 90, 97, 122, 68, 69, 76, 
	82, 83, 95, 100, 101, 108, 114, 115, 
	48, 57, 65, 90, 97, 122, 77, 95, 
	109, 48, 57, 65, 90, 97, 122, 79, 
	95, 111, 48, 57, 65, 90, 97, 122, 
	68, 95, 100, 48, 57, 65, 90, 97, 
	122, 69, 95, 101, 48, 57, 65, 90, 
	97, 122, 83, 84, 95, 115, 116, 48, 
	57, 65, 90, 97, 122, 73, 78, 95, 
	105, 110, 48, 57, 65, 90, 97, 122, 
	65, 67, 68, 95, 97, 99, 100, 48, 
	57, 66, 90, 98, 122, 39, 95, 48, 
	57, 65, 90, 97, 122, 65, 95, 97, 
	48, 57, 66, 90, 98, 122, 39, 95, 
	48, 57, 65, 90, 97, 122, 65, 67, 
	68, 95, 97, 99, 100, 48, 57, 66, 
	90, 98, 122, 39, 95, 48, 57, 65, 
	90, 97, 122, 65, 95, 97, 48, 57, 
	66, 90, 98, 122, 39, 95, 48, 57, 
	65, 90, 97, 122, 84, 95, 116, 48, 
	57, 65, 90, 97, 122, 66, 67, 69, 
	76, 80, 82, 85, 87, 89, 95, 98, 
	99, 101, 108, 112, 114, 117, 119, 121, 
	48, 57, 65, 90, 97, 122, 67, 95, 
	99, 48, 57, 65, 90, 97, 122, 70, 
	95, 102, 48, 57, 65, 90, 97, 122, 
	39, 95, 48, 57, 65, 90, 97, 122, 
	67, 84, 95, 99, 116, 48, 57, 65, 
	90, 97, 122, 84, 95, 116, 48, 57, 
	65, 90, 97, 122, 73, 95, 105, 48, 
	57, 65, 90, 97, 122, 79, 95, 111, 
	48, 57, 65, 90, 97, 122, 78, 95, 
	110, 48, 57, 65, 90, 97, 122, 65, 
	85, 95, 97, 117, 48, 57, 66, 90, 
	98, 122, 69, 95, 101, 48, 57, 65, 
	90, 97, 122, 83, 95, 115, 48, 57, 
	65, 90, 97, 122, 82, 95, 114, 48, 
	57, 65, 90, 97, 122, 65, 73, 76, 
	80, 95, 97, 105, 108, 112, 48, 57, 
	66, 90, 98, 122, 65, 76, 95, 97, 
	108, 48, 57, 66, 90, 98, 122, 66, 
	82, 95, 98, 114, 48, 57, 65, 90, 
	97, 122, 69, 95, 101, 48, 57, 65, 
	90, 97, 122, 83, 95, 115, 48, 57, 
	65, 90, 97, 122, 65, 95, 97, 48, 
	57, 66, 90, 98, 122, 80, 95, 112, 
	48, 57, 65, 90, 97, 122, 78, 95, 
	110, 48, 57, 65, 90, 97, 122, 73, 
	95, 105, 48, 57, 65, 90, 97, 122, 
	66, 95, 98, 48, 57, 65, 90, 97, 
	122, 83, 95, 115, 48, 57, 65, 90, 
	97, 122, 67, 95, 99, 48, 57, 65, 
	90, 97, 122, 65, 95, 97, 48, 57, 
	66, 90, 98, 122, 76, 95, 108, 48, 
	57, 65, 90, 97, 122, 76, 95, 108, 
	48, 57, 65, 90, 97, 122, 69, 83, 
	95, 101, 115, 48, 57, 65, 90, 97, 
	122, 83, 95, 115, 48, 57, 65, 90, 
	97, 122, 84, 95, 116, 48, 57, 65, 
	90, 97, 122, 84, 95, 116, 48, 57, 
	65, 90, 97, 122, 73, 95, 105, 48, 
	57, 65, 90, 97, 122, 79, 95, 111, 
	48, 57, 65, 90, 97, 122, 77, 78, 
	95, 109, 110, 48, 57, 65, 90, 97, 
	122, 65, 83, 95, 97, 115, 48, 57, 
	66, 90, 98, 122, 68, 95, 100, 48, 
	57, 65, 90, 97, 122, 69, 95, 101, 
	48, 57, 65, 90, 97, 122, 70, 95, 
	102, 48, 57, 65, 90, 97, 122, 73, 
	95, 105, 48, 57, 65, 90, 97, 122, 
	78, 95, 110, 48, 57, 65, 90, 97, 
	122, 69, 95, 101, 48, 57, 65, 90, 
	97, 122, 68, 76, 79, 80, 82, 95, 
	100, 108, 111, 112, 114, 48, 57, 65, 
	90, 97, 122, 69, 95, 101, 48, 57, 
	65, 90, 97, 122, 70, 95, 102, 48, 
	57, 65, 90, 97, 122, 73, 95, 105, 
	48, 57, 65, 90, 97, 122, 66, 95, 
	98, 48, 57, 65, 90, 97, 122, 82, 
	95, 114, 48, 57, 65, 90, 97, 122, 
	67, 95, 99, 48, 57, 65, 90, 97, 
	122, 69, 95, 101, 48, 57, 65, 90, 
	97, 122, 70, 95, 102, 48, 57, 65, 
	90, 97, 122, 521, 544, 607, 577, 602, 
	609, 634, 607, 560, 569, 577, 602, 609, 
	634, 39, 307, 324, 326, 332, 334, 339, 
	351, 356, 358, 364, 366, 371, 521, 544, 
	563, 570, 580, 582, 588, 590, 595, 607, 
	612, 614, 620, 622, 627, 304, 313, 321, 
	346, 353, 378, 560, 569, 577, 602, 609, 
	634, 351, 521, 544, 570, 607, 304, 313, 
	321, 346, 353, 378, 560, 569, 577, 602, 
	609, 634, 306, 351, 521, 544, 562, 570, 
	607, 304, 313, 321, 346, 353, 378, 560, 
	569, 577, 602, 609, 634, 323, 324, 351, 
	355, 356, 521, 544, 570, 579, 580, 607, 
	611, 612, 304, 313, 321, 346, 353, 378, 
	560, 569, 577, 602, 609, 634, 39, 351, 
	521, 544, 570, 607, 304, 313, 321, 346, 
	353, 378, 560, 569, 577, 602, 609, 634, 
	340, 351, 372, 521, 544, 570, 596, 607, 
	628, 304, 313, 321, 346, 353, 378, 560, 
	569, 577, 602, 609, 634, 324, 351, 356, 
	521, 544, 570, 580, 607, 612, 304, 313, 
	321, 346, 353, 378, 560, 569, 577, 602, 
	609, 634, 324, 351, 356, 521, 544, 570, 
	580, 607, 612, 304, 313, 321, 346, 353, 
	378, 560, 569, 577, 602, 609, 634, 333, 
	351, 365, 521, 544, 570, 589, 607, 621, 
	304, 313, 321, 346, 353, 378, 560, 569, 
	577, 602, 609, 634, 336, 351, 368, 521, 
	544, 570, 592, 607, 624, 304, 313, 321, 
	346, 353, 378, 560, 569, 577, 602, 609, 
	634, 323, 351, 355, 521, 544, 570, 579, 
	607, 611, 304, 313, 321, 346, 353, 378, 
	560, 569, 577, 602, 609, 634, 39, 323, 
	329, 335, 351, 355, 361, 367, 521, 544, 
	570, 579, 585, 591, 607, 611, 617, 623, 
	304, 313, 321, 346, 353, 378, 560, 569, 
	577, 602, 609, 634, 39, 351, 521, 544, 
	570, 607, 304, 313, 321, 346, 353, 378, 
	560, 569, 577, 602, 609, 634, 334, 340, 
	351, 366, 372, 521, 544, 570, 590, 596, 
	607, 622, 628, 304, 313, 321, 346, 353, 
	378, 560, 569, 577, 602, 609, 634, 321, 
	351, 353, 521, 544, 570, 577, 607, 609, 
	304, 313, 322, 346, 354, 378, 560, 569, 
	578, 602, 610, 634, 338, 351, 370, 521, 
	544, 570, 594, 607, 626, 304, 313, 321, 
	346, 353, 378, 560, 569, 577, 602, 609, 
	634, 345, 351, 377, 521, 544, 570, 601, 
	607, 633, 304, 313, 321, 346, 353, 378, 
	560, 569, 577, 602, 609, 634, 335, 351, 
	367, 521, 544, 570, 591, 607, 623, 304, 
	313, 321, 346, 353, 378, 560, 569, 577, 
	602, 609, 634, 332, 351, 364, 521, 544, 
	570, 588, 607, 620, 304, 313, 321, 346, 
	353, 378, 560, 569, 577, 602, 609, 634, 
	39, 321, 323, 336, 351, 353, 355, 368, 
	521, 544, 570, 577, 579, 592, 607, 609, 
	611, 624, 304, 313, 322, 346, 354, 378, 
	560, 569, 578, 602, 610, 634, 332, 351, 
	364, 521, 544, 570, 588, 607, 620, 304, 
	313, 321, 346, 353, 378, 560, 569, 577, 
	602, 609, 634, 332, 351, 364, 521, 544, 
	570, 588, 607, 620, 304, 313, 321, 346, 
	353, 378, 560, 569, 577, 602, 609, 634, 
	351, 521, 544, 570, 607, 304, 313, 321, 
	346, 353, 378, 560, 569, 577, 602, 609, 
	634, 335, 336, 351, 367, 368, 521, 544, 
	570, 591, 592, 607, 623, 624, 304, 313, 
	321, 346, 353, 378, 560, 569, 577, 602, 
	609, 634, 346, 351, 378, 521, 544, 570, 
	602, 607, 634, 304, 313, 321, 345, 353, 
	377, 560, 569, 577, 601, 609, 633, 331, 
	351, 363, 521, 544, 570, 587, 607, 619, 
	304, 313, 321, 346, 353, 378, 560, 569, 
	577, 602, 609, 634, 327, 351, 359, 521, 
	544, 570, 583, 607, 615, 304, 313, 321, 
	346, 353, 378, 560, 569, 577, 602, 609, 
	634, 326, 351, 358, 521, 544, 570, 582, 
	607, 614, 304, 313, 321, 346, 353, 378, 
	560, 569, 577, 602, 609, 634, 39, 351, 
	521, 544, 570, 607, 304, 313, 321, 346, 
	353, 378, 560, 569, 577, 602, 609, 634, 
	324, 329, 332, 351, 356, 361, 364, 521, 
	544, 570, 580, 585, 588, 607, 612, 617, 
	620, 304, 313, 321, 346, 353, 378, 560, 
	569, 577, 602, 609, 634, 338, 351, 370, 
	521, 544, 570, 594, 607, 626, 304, 313, 
	321, 346, 353, 378, 560, 569, 577, 602, 
	609, 634, 338, 351, 370, 521, 544, 570, 
	594, 607, 626, 304, 313, 321, 346, 353, 
	378, 560, 569, 577, 602, 609, 634, 332, 
	351, 364, 521, 544, 570, 588, 607, 620, 
	304, 313, 321, 346, 353, 378, 560, 569, 
	577, 602, 609, 634, 329, 351, 361, 521, 
	544, 570, 585, 607, 617, 304, 313, 321, 
	346, 353, 378, 560, 569, 577, 602, 609, 
	634, 334, 351, 366, 521, 544, 570, 590, 
	607, 622, 304, 313, 321, 346, 353, 378, 
	560, 569, 577, 602, 609, 634, 325, 351, 
	357, 521, 544, 570, 581, 607, 613, 304, 
	313, 321, 346, 353, 378, 560, 569, 577, 
	602, 609, 634, 39, 321, 325, 329, 330, 
	339, 351, 353, 357, 361, 362, 371, 521, 
	544, 570, 577, 581, 585, 586, 595, 607, 
	609, 613, 617, 618, 627, 304, 313, 322, 
	346, 354, 378, 560, 569, 578, 602, 610, 
	634, 321, 351, 353, 521, 544, 570, 577, 
	607, 609, 304, 313, 322, 346, 354, 378, 
	560, 569, 578, 602, 610, 634, 39, 323, 
	326, 328, 336, 351, 355, 358, 360, 368, 
	521, 544, 570, 579, 582, 584, 592, 607, 
	611, 614, 616, 624, 304, 313, 321, 346, 
	353, 378, 560, 569, 577, 602, 609, 634, 
	322, 323, 327, 329, 333, 337, 339, 342, 
	343, 351, 354, 355, 359, 361, 365, 369, 
	371, 374, 375, 521, 544, 570, 578, 579, 
	583, 585, 589, 593, 595, 598, 599, 607, 
	610, 611, 615, 617, 621, 625, 627, 630, 
	631, 304, 313, 321, 346, 353, 378, 560, 
	569, 577, 602, 609, 634, 338, 351, 370, 
	521, 544, 570, 594, 607, 626, 304, 313, 
	321, 346, 353, 378, 560, 569, 577, 602, 
	609, 634, 335, 351, 367, 521, 544, 570, 
	591, 607, 623, 304, 313, 321, 346, 353, 
	378, 560, 569, 577, 602, 609, 634, 341, 
	351, 373, 521, 544, 570, 597, 607, 629, 
	304, 313, 321, 346, 353, 378, 560, 569, 
	577, 602, 609, 634, 336, 351, 368, 521, 
	544, 570, 592, 607, 624, 304, 313, 321, 
	346, 353, 378, 560, 569, 577, 602, 609, 
	634, 334, 351, 366, 521, 544, 570, 590, 
	607, 622, 304, 313, 321, 346, 353, 378, 
	560, 569, 577, 602, 609, 634, 325, 351, 
	357, 521, 544, 570, 581, 607, 613, 304, 
	313, 321, 346, 353, 378, 560, 569, 577, 
	602, 609, 634, 321, 351, 353, 521, 544, 
	570, 577, 607, 609, 304, 313, 322, 346, 
	354, 378, 560, 569, 578, 602, 610, 634, 
	338, 351, 370, 521, 544, 570, 594, 607, 
	626, 304, 313, 321, 346, 353, 378, 560, 
	569, 577, 602, 609, 634, 339, 351, 371, 
	521, 544, 570, 595, 607, 627, 304, 313, 
	321, 346, 353, 378, 560, 569, 577, 602, 
	609, 634, 332, 351, 364, 521, 544, 570, 
	588, 607, 620, 304, 313, 321, 346, 353, 
	378, 560, 569, 577, 602, 609, 634, 328, 
	351, 360, 521, 544, 570, 584, 607, 616, 
	304, 313, 321, 346, 353, 378, 560, 569, 
	577, 602, 609, 634, 321, 351, 353, 521, 
	544, 570, 577, 607, 609, 304, 313, 322, 
	346, 354, 378, 560, 569, 578, 602, 610, 
	634, 339, 351, 371, 521, 544, 570, 595, 
	607, 627, 304, 313, 321, 346, 353, 378, 
	560, 569, 577, 602, 609, 634, 325, 351, 
	357, 521, 544, 570, 581, 607, 613, 304, 
	313, 321, 346, 353, 378, 560, 569, 577, 
	602, 609, 634, 334, 351, 366, 521, 544, 
	570, 590, 607, 622, 304, 313, 321, 346, 
	353, 378, 560, 569, 577, 602, 609, 634, 
	346, 351, 378, 521, 544, 570, 602, 607, 
	634, 304, 313, 321, 345, 353, 377, 560, 
	569, 577, 601, 609, 633, 46, 351, 521, 
	544, 570, 607, 304, 313, 321, 346, 353, 
	378, 560, 569, 577, 602, 609, 634, 39, 
	329, 332, 334, 344, 351, 361, 364, 366, 
	376, 521, 544, 570, 585, 588, 590, 600, 
	607, 617, 620, 622, 632, 304, 313, 321, 
	346, 353, 378, 560, 569, 577, 602, 609, 
	634, 338, 351, 370, 521, 544, 570, 594, 
	607, 626, 304, 313, 321, 346, 353, 378, 
	560, 569, 577, 602, 609, 634, 339, 351, 
	371, 521, 544, 570, 595, 607, 627, 304, 
	313, 321, 346, 353, 378, 560, 569, 577, 
	602, 609, 634, 325, 351, 357, 521, 544, 
	570, 581, 607, 613, 304, 313, 321, 346, 
	353, 378, 560, 569, 577, 602, 609, 634, 
	324, 351, 356, 521, 544, 570, 580, 607, 
	612, 304, 313, 321, 346, 353, 378, 560, 
	569, 577, 602, 609, 634, 329, 351, 361, 
	521, 544, 570, 585, 607, 617, 304, 313, 
	321, 346, 353, 378, 560, 569, 577, 602, 
	609, 634, 326, 351, 358, 521, 544, 570, 
	582, 607, 614, 304, 313, 321, 346, 353, 
	378, 560, 569, 577, 602, 609, 634, 340, 
	344, 351, 372, 376, 521, 544, 570, 596, 
	600, 607, 628, 632, 304, 313, 321, 346, 
	353, 378, 560, 569, 577, 602, 609, 634, 
	325, 351, 357, 521, 544, 570, 581, 607, 
	613, 304, 313, 321, 346, 353, 378, 560, 
	569, 577, 602, 609, 634, 338, 351, 370, 
	521, 544, 570, 594, 607, 626, 304, 313, 
	321, 346, 353, 378, 560, 569, 577, 602, 
	609, 634, 334, 351, 366, 521, 544, 570, 
	590, 607, 622, 304, 313, 321, 346, 353, 
	378, 560, 569, 577, 602, 609, 634, 39, 
	329, 336, 351, 361, 368, 521, 544, 570, 
	585, 592, 607, 617, 624, 304, 313, 321, 
	346, 353, 378, 560, 569, 577, 602, 609, 
	634, 332, 351, 364, 521, 544, 570, 588, 
	607, 620, 304, 313, 321, 346, 353, 378, 
	560, 569, 577, 602, 609, 634, 332, 351, 
	364, 521, 544, 570, 588, 607, 620, 304, 
	313, 321, 346, 353, 378, 560, 569, 577, 
	602, 609, 634, 324, 351, 356, 521, 544, 
	570, 580, 607, 612, 304, 313, 321, 346, 
	353, 378, 560, 569, 577, 602, 609, 634, 
	325, 351, 357, 521, 544, 570, 581, 607, 
	613, 304, 313, 321, 346, 353, 378, 560, 
	569, 577, 602, 609, 634, 336, 351, 368, 
	521, 544, 570, 592, 607, 624, 304, 313, 
	321, 346, 353, 378, 560, 569, 577, 602, 
	609, 634, 332, 351, 364, 521, 544, 570, 
	588, 607, 620, 304, 313, 321, 346, 353, 
	378, 560, 569, 577, 602, 609, 634, 335, 
	351, 367, 521, 544, 570, 591, 607, 623, 
	304, 313, 321, 346, 353, 378, 560, 569, 
	577, 602, 609, 634, 322, 351, 354, 521, 
	544, 570, 578, 607, 610, 304, 313, 321, 
	346, 353, 378, 560, 569, 577, 602, 609, 
	634, 321, 351, 353, 521, 544, 570, 577, 
	607, 609, 304, 313, 322, 346, 354, 378, 
	560, 569, 578, 602, 610, 634, 332, 351, 
	364, 521, 544, 570, 588, 607, 620, 304, 
	313, 321, 346, 353, 378, 560, 569, 577, 
	602, 609, 634, 39, 321, 332, 351, 353, 
	364, 521, 544, 570, 577, 588, 607, 609, 
	620, 304, 313, 322, 346, 354, 378, 560, 
	569, 578, 602, 610, 634, 332, 351, 364, 
	521, 544, 570, 588, 607, 620, 304, 313, 
	321, 346, 353, 378, 560, 569, 577, 602, 
	609, 634, 340, 351, 372, 521, 544, 570, 
	596, 607, 628, 304, 313, 321, 346, 353, 
	378, 560, 569, 577, 602, 609, 634, 39, 
	351, 521, 544, 570, 607, 304, 313, 321, 
	346, 353, 378, 560, 569, 577, 602, 609, 
	634, 324, 326, 329, 333, 334, 335, 336, 
	344, 345, 351, 356, 358, 361, 365, 366, 
	367, 368, 376, 377, 521, 544, 570, 580, 
	582, 585, 589, 590, 591, 592, 600, 601, 
	607, 612, 614, 617, 621, 622, 623, 624, 
	632, 633, 304, 313, 321, 346, 353, 378, 
	560, 569, 577, 602, 609, 634, 325, 351, 
	357, 521, 544, 570, 581, 607, 613, 304, 
	313, 321, 346, 353, 378, 560, 569, 577, 
	602, 609, 634, 340, 351, 372, 521, 544, 
	570, 596, 607, 628, 304, 313, 321, 346, 
	353, 378, 560, 569, 577, 602, 609, 634, 
	324, 334, 351, 356, 366, 521, 544, 570, 
	580, 590, 607, 612, 622, 304, 313, 321, 
	346, 353, 378, 560, 569, 577, 602, 609, 
	634, 325, 351, 357, 521, 544, 570, 581, 
	607, 613, 304, 313, 321, 346, 353, 378, 
	560, 569, 577, 602, 609, 634, 326, 351, 
	358, 521, 544, 570, 582, 607, 614, 304, 
	313, 321, 346, 353, 378, 560, 569, 577, 
	602, 609, 634, 324, 351, 356, 521, 544, 
	570, 580, 607, 612, 304, 313, 321, 346, 
	353, 378, 560, 569, 577, 602, 609, 634, 
	325, 351, 357, 521, 544, 570, 581, 607, 
	613, 304, 313, 321, 346, 353, 378, 560, 
	569, 577, 602, 609, 634, 326, 351, 358, 
	521, 544, 570, 582, 607, 614, 304, 313, 
	321, 346, 353, 378, 560, 569, 577, 602, 
	609, 634, 338, 351, 370, 521, 544, 570, 
	594, 607, 626, 304, 313, 321, 346, 353, 
	378, 560, 569, 577, 602, 609, 634, 304, 
	323, 324, 329, 342, 351, 355, 356, 361, 
	374, 521, 544, 560, 570, 579, 580, 585, 
	598, 607, 611, 612, 617, 630, 305, 313, 
	321, 346, 353, 378, 561, 569, 577, 602, 
	609, 634, 332, 351, 364, 521, 544, 570, 
	588, 607, 620, 304, 313, 321, 346, 353, 
	378, 560, 569, 577, 602, 609, 634, 341, 
	351, 373, 521, 544, 570, 597, 607, 629, 
	304, 313, 321, 346, 353, 378, 560, 569, 
	577, 602, 609, 634, 324, 351, 356, 521, 
	544, 570, 580, 607, 612, 304, 313, 321, 
	346, 353, 378, 560, 569, 577, 602, 609, 
	634, 325, 351, 357, 521, 544, 570, 581, 
	607, 613, 304, 313, 321, 346, 353, 378, 
	560, 569, 577, 602, 609, 634, 338, 351, 
	370, 521, 544, 570, 594, 607, 626, 304, 
	313, 321, 346, 353, 378, 560, 569, 577, 
	602, 609, 634, 338, 351, 370, 521, 544, 
	570, 594, 607, 626, 304, 313, 321, 346, 
	353, 378, 560, 569, 577, 602, 609, 634, 
	335, 351, 367, 521, 544, 570, 591, 607, 
	623, 304, 313, 321, 346, 353, 378, 560, 
	569, 577, 602, 609, 634, 331, 351, 363, 
	521, 544, 570, 587, 607, 619, 304, 313, 
	321, 346, 353, 378, 560, 569, 577, 602, 
	609, 634, 325, 351, 357, 521, 544, 570, 
	581, 607, 613, 304, 313, 321, 346, 353, 
	378, 560, 569, 577, 602, 609, 634, 325, 
	329, 351, 357, 361, 521, 544, 570, 581, 
	585, 607, 613, 617, 304, 313, 321, 346, 
	353, 378, 560, 569, 577, 602, 609, 634, 
	338, 339, 351, 370, 371, 521, 544, 570, 
	594, 595, 607, 626, 627, 304, 313, 321, 
	346, 353, 378, 560, 569, 577, 602, 609, 
	634, 325, 351, 357, 521, 544, 570, 581, 
	607, 613, 304, 313, 321, 346, 353, 378, 
	560, 569, 577, 602, 609, 634, 339, 351, 
	371, 521, 544, 570, 595, 607, 627, 304, 
	313, 321, 346, 353, 378, 560, 569, 577, 
	602, 609, 634, 325, 351, 357, 521, 544, 
	570, 581, 607, 613, 304, 313, 321, 346, 
	353, 378, 560, 569, 577, 602, 609, 634, 
	340, 351, 372, 521, 544, 570, 596, 607, 
	628, 304, 313, 321, 346, 353, 378, 560, 
	569, 577, 602, 609, 634, 328, 332, 351, 
	360, 364, 521, 544, 570, 584, 588, 607, 
	616, 620, 304, 313, 321, 346, 353, 378, 
	560, 569, 577, 602, 609, 634, 328, 332, 
	351, 360, 364, 521, 544, 570, 584, 588, 
	607, 616, 620, 304, 313, 321, 346, 353, 
	378, 560, 569, 577, 602, 609, 634, 336, 
	338, 351, 368, 370, 521, 544, 570, 592, 
	594, 607, 624, 626, 304, 313, 321, 346, 
	353, 378, 560, 569, 577, 602, 609, 634, 
	39, 324, 329, 335, 339, 346, 351, 356, 
	361, 367, 371, 378, 521, 544, 570, 580, 
	585, 591, 595, 602, 607, 612, 617, 623, 
	627, 634, 304, 313, 321, 345, 353, 377, 
	560, 569, 577, 601, 609, 633, 324, 329, 
	336, 351, 356, 361, 368, 521, 544, 570, 
	580, 585, 592, 607, 612, 617, 624, 304, 
	313, 321, 346, 353, 378, 560, 569, 577, 
	602, 609, 634, 338, 339, 344, 351, 370, 
	371, 376, 521, 544, 570, 594, 595, 600, 
	607, 626, 627, 632, 304, 313, 321, 346, 
	353, 378, 560, 569, 577, 602, 609, 634, 
	344, 351, 376, 521, 544, 570, 600, 607, 
	632, 304, 313, 321, 346, 353, 378, 560, 
	569, 577, 602, 609, 634, 338, 351, 370, 
	521, 544, 570, 594, 607, 626, 304, 313, 
	321, 346, 353, 378, 560, 569, 577, 602, 
	609, 634, 338, 339, 344, 351, 370, 371, 
	376, 521, 544, 570, 594, 595, 600, 607, 
	626, 627, 632, 304, 313, 321, 346, 353, 
	378, 560, 569, 577, 602, 609, 634, 339, 
	344, 351, 371, 376, 521, 544, 570, 595, 
	600, 607, 627, 632, 304, 313, 321, 346, 
	353, 378, 560, 569, 577, 602, 609, 634, 
	323, 351, 355, 521, 544, 570, 579, 607, 
	611, 304, 313, 321, 346, 353, 378, 560, 
	569, 577, 602, 609, 634, 321, 351, 353, 
	521, 544, 570, 577, 607, 609, 304, 313, 
	322, 346, 354, 378, 560, 569, 578, 602, 
	610, 634, 332, 351, 364, 521, 544, 570, 
	588, 607, 620, 304, 313, 321, 346, 353, 
	378, 560, 569, 577, 602, 609, 634, 325, 
	351, 357, 521, 544, 570, 581, 607, 613, 
	304, 313, 321, 346, 353, 378, 560, 569, 
	577, 602, 609, 634, 338, 351, 370, 521, 
	544, 570, 594, 607, 626, 304, 313, 321, 
	346, 353, 378, 560, 569, 577, 602, 609, 
	634, 329, 351, 361, 521, 544, 570, 585, 
	607, 617, 304, 313, 321, 346, 353, 378, 
	560, 569, 577, 602, 609, 634, 338, 351, 
	370, 521, 544, 570, 594, 607, 626, 304, 
	313, 321, 346, 353, 378, 560, 569, 577, 
	602, 609, 634, 344, 351, 376, 521, 544, 
	570, 600, 607, 632, 304, 313, 321, 346, 
	353, 378, 560, 569, 577, 602, 609, 634, 
	322, 334, 351, 354, 366, 521, 544, 570, 
	578, 590, 607, 610, 622, 304, 313, 321, 
	346, 353, 378, 560, 569, 577, 602, 609, 
	634, 325, 351, 357, 521, 544, 570, 581, 
	607, 613, 304, 313, 321, 346, 353, 378, 
	560, 569, 577, 602, 609, 634, 324, 329, 
	340, 351, 356, 361, 372, 521, 544, 570, 
	580, 585, 596, 607, 612, 617, 628, 304, 
	313, 321, 346, 353, 378, 560, 569, 577, 
	602, 609, 634, 324, 338, 351, 356, 370, 
	521, 544, 570, 580, 594, 607, 612, 626, 
	304, 313, 321, 346, 353, 378, 560, 569, 
	577, 602, 609, 634, 338, 351, 370, 521, 
	544, 570, 594, 607, 626, 304, 313, 321, 
	346, 353, 378, 560, 569, 577, 602, 609, 
	634, 324, 338, 351, 356, 370, 521, 544, 
	570, 580, 594, 607, 612, 626, 304, 313, 
	321, 346, 353, 378, 560, 569, 577, 602, 
	609, 634, 338, 351, 370, 521, 544, 570, 
	594, 607, 626, 304, 313, 321, 346, 353, 
	378, 560, 569, 577, 602, 609, 634, 335, 
	351, 367, 521, 544, 570, 591, 607, 623, 
	304, 313, 321, 346, 353, 378, 560, 569, 
	577, 602, 609, 634, 326, 334, 351, 358, 
	366, 521, 544, 570, 582, 590, 607, 614, 
	622, 304, 313, 321, 346, 353, 378, 560, 
	569, 577, 602, 609, 634, 326, 351, 358, 
	521, 544, 570, 582, 607, 614, 304, 313, 
	321, 346, 353, 378, 560, 569, 577, 602, 
	609, 634, 329, 332, 333, 335, 341, 351, 
	361, 364, 365, 367, 373, 521, 544, 570, 
	585, 588, 589, 591, 597, 607, 617, 620, 
	621, 623, 629, 304, 313, 321, 346, 353, 
	378, 560, 569, 577, 602, 609, 634, 338, 
	351, 370, 521, 544, 570, 594, 607, 626, 
	304, 313, 321, 346, 353, 378, 560, 569, 
	577, 602, 609, 634, 338, 351, 370, 521, 
	544, 570, 594, 607, 626, 304, 313, 321, 
	346, 353, 378, 560, 569, 577, 602, 609, 
	634, 335, 351, 367, 521, 544, 570, 591, 
	607, 623, 304, 313, 321, 346, 353, 378, 
	560, 569, 577, 602, 609, 634, 338, 351, 
	370, 521, 544, 570, 594, 607, 626, 304, 
	313, 321, 346, 353, 378, 560, 569, 577, 
	602, 609, 634, 340, 351, 372, 521, 544, 
	570, 596, 607, 628, 304, 313, 321, 346, 
	353, 378, 560, 569, 577, 602, 609, 634, 
	341, 351, 373, 521, 544, 570, 597, 607, 
	629, 304, 313, 321, 346, 353, 378, 560, 
	569, 577, 602, 609, 634, 304, 305, 306, 
	307, 308, 309, 310, 311, 351, 521, 544, 
	560, 561, 562, 563, 564, 565, 566, 567, 
	570, 607, 312, 313, 321, 346, 353, 378, 
	568, 569, 577, 602, 609, 634, 324, 351, 
	356, 521, 544, 570, 580, 607, 612, 304, 
	313, 321, 346, 353, 378, 560, 569, 577, 
	602, 609, 634, 341, 351, 373, 521, 544, 
	570, 597, 607, 629, 304, 313, 321, 346, 
	353, 378, 560, 569, 577, 602, 609, 634, 
	332, 351, 364, 521, 544, 570, 588, 607, 
	620, 304, 313, 321, 346, 353, 378, 560, 
	569, 577, 602, 609, 634, 325, 351, 357, 
	521, 544, 570, 581, 607, 613, 304, 313, 
	321, 346, 353, 378, 560, 569, 577, 602, 
	609, 634, 332, 351, 364, 521, 544, 570, 
	588, 607, 620, 304, 313, 321, 346, 353, 
	378, 560, 569, 577, 602, 609, 634, 323, 
	325, 335, 342, 346, 351, 355, 357, 367, 
	374, 378, 521, 544, 570, 579, 581, 591, 
	598, 602, 607, 611, 613, 623, 630, 634, 
	304, 313, 321, 345, 353, 377, 560, 569, 
	577, 601, 609, 633, 327, 344, 351, 359, 
	376, 521, 544, 570, 583, 600, 607, 615, 
	632, 304, 313, 321, 346, 353, 378, 560, 
	569, 577, 602, 609, 634, 340, 351, 372, 
	521, 544, 570, 596, 607, 628, 304, 313, 
	321, 346, 353, 378, 560, 569, 577, 602, 
	609, 634, 338, 351, 370, 521, 544, 570, 
	594, 607, 626, 304, 313, 321, 346, 353, 
	378, 560, 569, 577, 602, 609, 634, 325, 
	351, 357, 521, 544, 570, 581, 607, 613, 
	304, 313, 321, 346, 353, 378, 560, 569, 
	577, 602, 609, 634, 327, 351, 359, 521, 
	544, 570, 583, 607, 615, 304, 313, 321, 
	346, 353, 378, 560, 569, 577, 602, 609, 
	634, 336, 351, 368, 521, 544, 570, 592, 
	607, 624, 304, 313, 321, 346, 353, 378, 
	560, 569, 577, 602, 609, 634, 338, 340, 
	341, 351, 370, 372, 373, 521, 544, 570, 
	594, 596, 597, 607, 626, 628, 629, 304, 
	313, 321, 346, 353, 378, 560, 569, 577, 
	602, 609, 634, 327, 351, 359, 521, 544, 
	570, 583, 607, 615, 304, 313, 321, 346, 
	353, 378, 560, 569, 577, 602, 609, 634, 
	324, 329, 351, 356, 361, 521, 544, 570, 
	580, 585, 607, 612, 617, 304, 313, 321, 
	346, 353, 378, 560, 569, 577, 602, 609, 
	634, 333, 338, 351, 365, 370, 521, 544, 
	570, 589, 594, 607, 621, 626, 304, 313, 
	321, 346, 353, 378, 560, 569, 577, 602, 
	609, 634, 338, 351, 370, 521, 544, 570, 
	594, 607, 626, 304, 313, 321, 346, 353, 
	378, 560, 569, 577, 602, 609, 634, 333, 
	338, 351, 365, 370, 521, 544, 570, 589, 
	594, 607, 621, 626, 304, 313, 321, 346, 
	353, 378, 560, 569, 577, 602, 609, 634, 
	338, 351, 370, 521, 544, 570, 594, 607, 
	626, 304, 313, 321, 346, 353, 378, 560, 
	569, 577, 602, 609, 634, 340, 351, 372, 
	521, 544, 570, 596, 607, 628, 304, 313, 
	321, 346, 353, 378, 560, 569, 577, 602, 
	609, 634, 304, 324, 329, 351, 356, 361, 
	521, 544, 560, 570, 580, 585, 607, 612, 
	617, 305, 313, 321, 346, 353, 378, 561, 
	569, 577, 602, 609, 634, 334, 351, 366, 
	521, 544, 570, 590, 607, 622, 304, 313, 
	321, 346, 353, 378, 560, 569, 577, 602, 
	609, 634, 322, 351, 354, 521, 544, 570, 
	578, 607, 610, 304, 313, 321, 346, 353, 
	378, 560, 569, 577, 602, 609, 634, 325, 
	328, 329, 335, 341, 351, 357, 360, 361, 
	367, 373, 521, 544, 570, 581, 584, 585, 
	591, 597, 607, 613, 616, 617, 623, 629, 
	304, 313, 321, 346, 353, 378, 560, 569, 
	577, 602, 609, 634, 321, 351, 353, 521, 
	544, 570, 577, 607, 609, 304, 313, 322, 
	346, 354, 378, 560, 569, 578, 602, 610, 
	634, 339, 351, 371, 521, 544, 570, 595, 
	607, 627, 304, 313, 321, 346, 353, 378, 
	560, 569, 577, 602, 609, 634, 325, 351, 
	357, 521, 544, 570, 581, 607, 613, 304, 
	313, 321, 346, 353, 378, 560, 569, 577, 
	602, 609, 634, 344, 351, 376, 521, 544, 
	570, 600, 607, 632, 304, 313, 321, 346, 
	353, 378, 560, 569, 577, 602, 609, 634, 
	325, 351, 357, 521, 544, 570, 581, 607, 
	613, 304, 313, 321, 346, 353, 378, 560, 
	569, 577, 602, 609, 634, 332, 351, 364, 
	521, 544, 570, 588, 607, 620, 304, 313, 
	321, 346, 353, 378, 560, 569, 577, 602, 
	609, 634, 321, 324, 351, 353, 356, 521, 
	544, 570, 577, 580, 607, 609, 612, 304, 
	313, 322, 346, 354, 378, 560, 569, 578, 
	602, 610, 634, 324, 351, 356, 521, 544, 
	570, 580, 607, 612, 304, 313, 321, 346, 
	353, 378, 560, 569, 577, 602, 609, 634, 
	334, 351, 366, 521, 544, 570, 590, 607, 
	622, 304, 313, 321, 346, 353, 378, 560, 
	569, 577, 602, 609, 634, 336, 351, 368, 
	521, 544, 570, 592, 607, 624, 304, 313, 
	321, 346, 353, 378, 560, 569, 577, 602, 
	609, 634, 344, 351, 376, 521, 544, 570, 
	600, 607, 632, 304, 313, 321, 346, 353, 
	378, 560, 569, 577, 602, 609, 634, 322, 
	339, 351, 354, 371, 521, 544, 570, 578, 
	595, 607, 610, 627, 304, 313, 321, 346, 
	353, 378, 560, 569, 577, 602, 609, 634, 
	332, 351, 364, 521, 544, 570, 588, 607, 
	620, 304, 313, 321, 346, 353, 378, 560, 
	569, 577, 602, 609, 634, 329, 351, 361, 
	521, 544, 570, 585, 607, 617, 304, 313, 
	321, 346, 353, 378, 560, 569, 577, 602, 
	609, 634, 323, 351, 355, 521, 544, 570, 
	579, 607, 611, 304, 313, 321, 346, 353, 
	378, 560, 569, 577, 602, 609, 634, 328, 
	351, 360, 521, 544, 570, 584, 607, 616, 
	304, 313, 321, 346, 353, 378, 560, 569, 
	577, 602, 609, 634, 324, 325, 332, 338, 
	339, 351, 356, 357, 364, 370, 371, 521, 
	544, 570, 580, 581, 588, 594, 595, 607, 
	612, 613, 620, 626, 627, 304, 313, 321, 
	346, 353, 378, 560, 569, 577, 602, 609, 
	634, 333, 351, 365, 521, 544, 570, 589, 
	607, 621, 304, 313, 321, 346, 353, 378, 
	560, 569, 577, 602, 609, 634, 335, 351, 
	367, 521, 544, 570, 591, 607, 623, 304, 
	313, 321, 346, 353, 378, 560, 569, 577, 
	602, 609, 634, 324, 351, 356, 521, 544, 
	570, 580, 607, 612, 304, 313, 321, 346, 
	353, 378, 560, 569, 577, 602, 609, 634, 
	325, 351, 357, 521, 544, 570, 581, 607, 
	613, 304, 313, 321, 346, 353, 378, 560, 
	569, 577, 602, 609, 634, 339, 340, 351, 
	371, 372, 521, 544, 570, 595, 596, 607, 
	627, 628, 304, 313, 321, 346, 353, 378, 
	560, 569, 577, 602, 609, 634, 329, 334, 
	351, 361, 366, 521, 544, 570, 585, 590, 
	607, 617, 622, 304, 313, 321, 346, 353, 
	378, 560, 569, 577, 602, 609, 634, 321, 
	323, 324, 351, 353, 355, 356, 521, 544, 
	570, 577, 579, 580, 607, 609, 611, 612, 
	304, 313, 322, 346, 354, 378, 560, 569, 
	578, 602, 610, 634, 39, 351, 521, 544, 
	570, 607, 304, 313, 321, 346, 353, 378, 
	560, 569, 577, 602, 609, 634, 321, 351, 
	353, 521, 544, 570, 577, 607, 609, 304, 
	313, 322, 346, 354, 378, 560, 569, 578, 
	602, 610, 634, 39, 351, 521, 544, 570, 
	607, 304, 313, 321, 346, 353, 378, 560, 
	569, 577, 602, 609, 634, 321, 323, 324, 
	351, 353, 355, 356, 521, 544, 570, 577, 
	579, 580, 607, 609, 611, 612, 304, 313, 
	322, 346, 354, 378, 560, 569, 578, 602, 
	610, 634, 39, 351, 521, 544, 570, 607, 
	304, 313, 321, 346, 353, 378, 560, 569, 
	577, 602, 609, 634, 321, 351, 353, 521, 
	544, 570, 577, 607, 609, 304, 313, 322, 
	346, 354, 378, 560, 569, 578, 602, 610, 
	634, 39, 351, 521, 544, 570, 607, 304, 
	313, 321, 346, 353, 378, 560, 569, 577, 
	602, 609, 634, 340, 351, 372, 521, 544, 
	570, 596, 607, 628, 304, 313, 321, 346, 
	353, 378, 560, 569, 577, 602, 609, 634, 
	322, 323, 325, 332, 336, 338, 341, 343, 
	345, 351, 354, 355, 357, 364, 368, 370, 
	373, 375, 377, 521, 544, 570, 578, 579, 
	581, 588, 592, 594, 597, 599, 601, 607, 
	610, 611, 613, 620, 624, 626, 629, 631, 
	633, 304, 313, 321, 346, 353, 378, 560, 
	569, 577, 602, 609, 634, 323, 351, 355, 
	521, 544, 570, 579, 607, 611, 304, 313, 
	321, 346, 353, 378, 560, 569, 577, 602, 
	609, 634, 326, 351, 358, 521, 544, 570, 
	582, 607, 614, 304, 313, 321, 346, 353, 
	378, 560, 569, 577, 602, 609, 634, 39, 
	351, 521, 544, 570, 607, 304, 313, 321, 
	346, 353, 378, 560, 569, 577, 602, 609, 
	634, 323, 340, 351, 355, 372, 521, 544, 
	570, 579, 596, 607, 611, 628, 304, 313, 
	321, 346, 353, 378, 560, 569, 577, 602, 
	609, 634, 340, 351, 372, 521, 544, 570, 
	596, 607, 628, 304, 313, 321, 346, 353, 
	378, 560, 569, 577, 602, 609, 634, 329, 
	351, 361, 521, 544, 570, 585, 607, 617, 
	304, 313, 321, 346, 353, 378, 560, 569, 
	577, 602, 609, 634, 335, 351, 367, 521, 
	544, 570, 591, 607, 623, 304, 313, 321, 
	346, 353, 378, 560, 569, 577, 602, 609, 
	634, 334, 351, 366, 521, 544, 570, 590, 
	607, 622, 304, 313, 321, 346, 353, 378, 
	560, 569, 577, 602, 609, 634, 321, 341, 
	351, 353, 373, 521, 544, 570, 577, 597, 
	607, 609, 629, 304, 313, 322, 346, 354, 
	378, 560, 569, 578, 602, 610, 634, 325, 
	351, 357, 521, 544, 570, 581, 607, 613, 
	304, 313, 321, 346, 353, 378, 560, 569, 
	577, 602, 609, 634, 339, 351, 371, 521, 
	544, 570, 595, 607, 627, 304, 313, 321, 
	346, 353, 378, 560, 569, 577, 602, 609, 
	634, 338, 351, 370, 521, 544, 570, 594, 
	607, 626, 304, 313, 321, 346, 353, 378, 
	560, 569, 577, 602, 609, 634, 321, 329, 
	332, 336, 351, 353, 361, 364, 368, 521, 
	544, 570, 577, 585, 588, 592, 607, 609, 
	617, 620, 624, 304, 313, 322, 346, 354, 
	378, 560, 569, 578, 602, 610, 634, 321, 
	332, 351, 353, 364, 521, 544, 570, 577, 
	588, 607, 609, 620, 304, 313, 322, 346, 
	354, 378, 560, 569, 578, 602, 610, 634, 
	322, 338, 351, 354, 370, 521, 544, 570, 
	578, 594, 607, 610, 626, 304, 313, 321, 
	346, 353, 378, 560, 569, 577, 602, 609, 
	634, 325, 351, 357, 521, 544, 570, 581, 
	607, 613, 304, 313, 321, 346, 353, 378, 
	560, 569, 577, 602, 609, 634, 339, 351, 
	371, 521, 544, 570, 595, 607, 627, 304, 
	313, 321, 346, 353, 378, 560, 569, 577, 
	602, 609, 634, 321, 351, 353, 521, 544, 
	570, 577, 607, 609, 304, 313, 322, 346, 
	354, 378, 560, 569, 578, 602, 610, 634, 
	336, 351, 368, 521, 544, 570, 592, 607, 
	624, 304, 313, 321, 346, 353, 378, 560, 
	569, 577, 602, 609, 634, 334, 351, 366, 
	521, 544, 570, 590, 607, 622, 304, 313, 
	321, 346, 353, 378, 560, 569, 577, 602, 
	609, 634, 329, 351, 361, 521, 544, 570, 
	585, 607, 617, 304, 313, 321, 346, 353, 
	378, 560, 569, 577, 602, 609, 634, 322, 
	351, 354, 521, 544, 570, 578, 607, 610, 
	304, 313, 321, 346, 353, 378, 560, 569, 
	577, 602, 609, 634, 339, 351, 371, 521, 
	544, 570, 595, 607, 627, 304, 313, 321, 
	346, 353, 378, 560, 569, 577, 602, 609, 
	634, 323, 351, 355, 521, 544, 570, 579, 
	607, 611, 304, 313, 321, 346, 353, 378, 
	560, 569, 577, 602, 609, 634, 321, 351, 
	353, 521, 544, 570, 577, 607, 609, 304, 
	313, 322, 346, 354, 378, 560, 569, 578, 
	602, 610, 634, 332, 351, 364, 521, 544, 
	570, 588, 607, 620, 304, 313, 321, 346, 
	353, 378, 560, 569, 577, 602, 609, 634, 
	332, 351, 364, 521, 544, 570, 588, 607, 
	620, 304, 313, 321, 346, 353, 378, 560, 
	569, 577, 602, 609, 634, 325, 339, 351, 
	357, 371, 521, 544, 570, 581, 595, 607, 
	613, 627, 304, 313, 321, 346, 353, 378, 
	560, 569, 577, 602, 609, 634, 339, 351, 
	371, 521, 544, 570, 595, 607, 627, 304, 
	313, 321, 346, 353, 378, 560, 569, 577, 
	602, 609, 634, 340, 351, 372, 521, 544, 
	570, 596, 607, 628, 304, 313, 321, 346, 
	353, 378, 560, 569, 577, 602, 609, 634, 
	340, 351, 372, 521, 544, 570, 596, 607, 
	628, 304, 313, 321, 346, 353, 378, 560, 
	569, 577, 602, 609, 634, 329, 351, 361, 
	521, 544, 570, 585, 607, 617, 304, 313, 
	321, 346, 353, 378, 560, 569, 577, 602, 
	609, 634, 335, 351, 367, 521, 544, 570, 
	591, 607, 623, 304, 313, 321, 346, 353, 
	378, 560, 569, 577, 602, 609, 634, 333, 
	334, 351, 365, 366, 521, 544, 570, 589, 
	590, 607, 621, 622, 304, 313, 321, 346, 
	353, 378, 560, 569, 577, 602, 609, 634, 
	321, 339, 351, 353, 371, 521, 544, 570, 
	577, 595, 607, 609, 627, 304, 313, 322, 
	346, 354, 378, 560, 569, 578, 602, 610, 
	634, 324, 351, 356, 521, 544, 570, 580, 
	607, 612, 304, 313, 321, 346, 353, 378, 
	560, 569, 577, 602, 609, 634, 325, 351, 
	357, 521, 544, 570, 581, 607, 613, 304, 
	313, 321, 346, 353, 378, 560, 569, 577, 
	602, 609, 634, 326, 351, 358, 521, 544, 
	570, 582, 607, 614, 304, 313, 321, 346, 
	353, 378, 560, 569, 577, 602, 609, 634, 
	329, 351, 361, 521, 544, 570, 585, 607, 
	617, 304, 313, 321, 346, 353, 378, 560, 
	569, 577, 602, 609, 634, 334, 351, 366, 
	521, 544, 570, 590, 607, 622, 304, 313, 
	321, 346, 353, 378, 560, 569, 577, 602, 
	609, 634, 325, 351, 357, 521, 544, 570, 
	581, 607, 613, 304, 313, 321, 346, 353, 
	378, 560, 569, 577, 602, 609, 634, 324, 
	332, 335, 336, 338, 351, 356, 364, 367, 
	368, 370, 521, 544, 570, 580, 588, 591, 
	592, 594, 607, 612, 620, 623, 624, 626, 
	304, 313, 321, 346, 353, 378, 560, 569, 
	577, 602, 609, 634, 325, 351, 357, 521, 
	544, 570, 581, 607, 613, 304, 313, 321, 
	346, 353, 378, 560, 569, 577, 602, 609, 
	634, 326, 351, 358, 521, 544, 570, 582, 
	607, 614, 304, 313, 321, 346, 353, 378, 
	560, 569, 577, 602, 609, 634, 329, 351, 
	361, 521, 544, 570, 585, 607, 617, 304, 
	313, 321, 346, 353, 378, 560, 569, 577, 
	602, 609, 634, 322, 351, 354, 521, 544, 
	570, 578, 607, 610, 304, 313, 321, 346, 
	353, 378, 560, 569, 577, 602, 609, 634, 
	338, 351, 370, 521, 544, 570, 594, 607, 
	626, 304, 313, 321, 346, 353, 378, 560, 
	569, 577, 602, 609, 634, 323, 351, 355, 
	521, 544, 570, 579, 607, 611, 304, 313, 
	321, 346, 353, 378, 560, 569, 577, 602, 
	609, 634, 325, 351, 357, 521, 544, 570, 
	581, 607, 613, 304, 313, 321, 346, 353, 
	378, 560, 569, 577, 602, 609, 634, 326, 
	351, 358, 521, 544, 570, 582, 607, 614, 
	304, 313, 321, 346, 353, 378, 560, 569, 
	577, 602, 609, 634, 0
};
static const char _lexer_single_lengths[] = {
	0, 2, 3, 14, 2, 5, 5, 2, 
	5, 2, 5, 4, 5, 5, 2, 5, 
	2, 0, 8, 3, 3, 126, 1, 0, 
	1, 0, 1, 14, 1, 6, 4, 2, 
	2, 2, 0, 1, 3, 1, 2, 1, 
	13, 1, 2, 5, 2, 3, 3, 3, 
	3, 3, 3, 8, 2, 5, 3, 3, 
	3, 3, 3, 8, 3, 3, 1, 5, 
	3, 3, 3, 3, 2, 7, 3, 3, 
	3, 3, 3, 3, 12, 3, 10, 19, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	2, 10, 3, 3, 3, 3, 3, 3, 
	5, 3, 3, 3, 6, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 6, 
	3, 3, 2, 19, 3, 3, 5, 3, 
	3, 3, 3, 3, 3, 10, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 5, 
	5, 3, 3, 3, 3, 5, 5, 5, 
	12, 7, 7, 3, 3, 7, 5, 3, 
	3, 3, 3, 3, 3, 3, 3, 5, 
	3, 7, 5, 3, 5, 3, 3, 5, 
	3, 11, 3, 3, 3, 3, 3, 3, 
	9, 3, 3, 3, 3, 3, 11, 5, 
	3, 3, 3, 3, 3, 7, 3, 5, 
	5, 3, 5, 3, 3, 6, 3, 3, 
	11, 3, 3, 3, 3, 3, 3, 5, 
	3, 3, 3, 3, 5, 3, 3, 3, 
	3, 11, 3, 3, 3, 3, 5, 5, 
	7, 2, 3, 2, 7, 2, 3, 2, 
	3, 19, 3, 3, 2, 5, 3, 3, 
	3, 3, 5, 3, 3, 3, 9, 5, 
	5, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 5, 3, 3, 
	3, 3, 3, 5, 5, 3, 3, 3, 
	3, 3, 3, 11, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 1, 28, 5, 
	7, 13, 6, 9, 9, 9, 9, 9, 
	9, 18, 6, 13, 9, 9, 9, 9, 
	9, 18, 9, 9, 5, 13, 9, 9, 
	9, 9, 6, 17, 9, 9, 9, 9, 
	9, 9, 26, 9, 22, 41, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 6, 22, 
	9, 9, 9, 9, 9, 9, 13, 9, 
	9, 9, 14, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 14, 9, 9, 
	6, 41, 9, 9, 13, 9, 9, 9, 
	9, 9, 9, 23, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 13, 13, 9, 
	9, 9, 9, 13, 13, 13, 26, 17, 
	17, 9, 9, 17, 13, 9, 9, 9, 
	9, 9, 9, 9, 9, 13, 9, 17, 
	13, 9, 13, 9, 9, 13, 9, 25, 
	9, 9, 9, 9, 9, 9, 21, 9, 
	9, 9, 9, 9, 25, 13, 9, 9, 
	9, 9, 9, 17, 9, 13, 13, 9, 
	13, 9, 9, 15, 9, 9, 25, 9, 
	9, 9, 9, 9, 9, 13, 9, 9, 
	9, 9, 13, 9, 9, 9, 9, 25, 
	9, 9, 9, 9, 13, 13, 17, 6, 
	9, 6, 17, 6, 9, 6, 9, 41, 
	9, 9, 6, 13, 9, 9, 9, 9, 
	13, 9, 9, 9, 21, 13, 13, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 13, 9, 9, 9, 9, 
	9, 13, 13, 9, 9, 9, 9, 9, 
	9, 25, 9, 9, 9, 9, 9, 9, 
	9, 9
};
static const char _lexer_range_lengths[] = {
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	3, 3, 0, 2, 0, 6, 0, 3, 
	1, 1, 0, 0, 0, 4, 4, 3, 
	3, 4, 3, 0, 0, 0, 0, 0, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 2, 3, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6
};
static const short _lexer_index_offsets[] = {
	0, 0, 3, 7, 22, 25, 31, 37, 
	40, 46, 49, 55, 60, 66, 72, 75, 
	81, 87, 91, 100, 106, 110, 243, 245, 
	249, 252, 254, 256, 271, 273, 284, 293, 
	299, 305, 312, 316, 318, 322, 324, 327, 
	329, 346, 351, 357, 366, 372, 379, 386, 
	393, 400, 407, 414, 426, 432, 441, 448, 
	455, 462, 469, 476, 488, 495, 502, 507, 
	516, 523, 530, 537, 544, 550, 561, 568, 
	575, 582, 589, 596, 603, 619, 626, 640, 
	663, 670, 677, 684, 691, 698, 705, 712, 
	719, 726, 733, 740, 747, 754, 761, 768, 
	775, 781, 795, 802, 809, 816, 823, 830, 
	837, 846, 853, 860, 867, 877, 884, 891, 
	898, 905, 912, 919, 926, 933, 940, 947, 
	957, 964, 971, 977, 1000, 1007, 1014, 1023, 
	1030, 1037, 1044, 1051, 1058, 1065, 1079, 1086, 
	1093, 1100, 1107, 1114, 1121, 1128, 1135, 1142, 
	1151, 1160, 1167, 1174, 1181, 1188, 1197, 1206, 
	1215, 1231, 1242, 1253, 1260, 1267, 1278, 1287, 
	1294, 1301, 1308, 1315, 1322, 1329, 1336, 1343, 
	1352, 1359, 1370, 1379, 1386, 1395, 1402, 1409, 
	1418, 1425, 1440, 1447, 1454, 1461, 1468, 1475, 
	1482, 1495, 1502, 1509, 1516, 1523, 1530, 1545, 
	1554, 1561, 1568, 1575, 1582, 1589, 1600, 1607, 
	1616, 1625, 1632, 1641, 1648, 1655, 1665, 1672, 
	1679, 1694, 1701, 1708, 1715, 1722, 1729, 1736, 
	1745, 1752, 1759, 1766, 1773, 1782, 1789, 1796, 
	1803, 1810, 1825, 1832, 1839, 1846, 1853, 1862, 
	1871, 1882, 1888, 1895, 1901, 1912, 1918, 1925, 
	1931, 1938, 1961, 1968, 1975, 1981, 1990, 1997, 
	2004, 2011, 2018, 2027, 2034, 2041, 2048, 2061, 
	2070, 2079, 2086, 2093, 2100, 2107, 2114, 2121, 
	2128, 2135, 2142, 2149, 2156, 2163, 2172, 2179, 
	2186, 2193, 2200, 2207, 2216, 2225, 2232, 2239, 
	2246, 2253, 2260, 2267, 2282, 2289, 2296, 2303, 
	2310, 2317, 2324, 2331, 2338, 2344, 2349, 2384, 
	2396, 2410, 2430, 2443, 2459, 2475, 2491, 2507, 
	2523, 2539, 2564, 2577, 2597, 2613, 2629, 2645, 
	2661, 2677, 2702, 2718, 2734, 2746, 2766, 2782, 
	2798, 2814, 2830, 2843, 2867, 2883, 2899, 2915, 
	2931, 2947, 2963, 2996, 3012, 3041, 3089, 3105, 
	3121, 3137, 3153, 3169, 3185, 3201, 3217, 3233, 
	3249, 3265, 3281, 3297, 3313, 3329, 3345, 3358, 
	3387, 3403, 3419, 3435, 3451, 3467, 3483, 3503, 
	3519, 3535, 3551, 3572, 3588, 3604, 3620, 3636, 
	3652, 3668, 3684, 3700, 3716, 3732, 3753, 3769, 
	3785, 3798, 3846, 3862, 3878, 3898, 3914, 3930, 
	3946, 3962, 3978, 3994, 4024, 4040, 4056, 4072, 
	4088, 4104, 4120, 4136, 4152, 4168, 4188, 4208, 
	4224, 4240, 4256, 4272, 4292, 4312, 4332, 4365, 
	4389, 4413, 4429, 4445, 4469, 4489, 4505, 4521, 
	4537, 4553, 4569, 4585, 4601, 4617, 4637, 4653, 
	4677, 4697, 4713, 4733, 4749, 4765, 4785, 4801, 
	4833, 4849, 4865, 4881, 4897, 4913, 4929, 4957, 
	4973, 4989, 5005, 5021, 5037, 5069, 5089, 5105, 
	5121, 5137, 5153, 5169, 5193, 5209, 5229, 5249, 
	5265, 5285, 5301, 5317, 5339, 5355, 5371, 5403, 
	5419, 5435, 5451, 5467, 5483, 5499, 5519, 5535, 
	5551, 5567, 5583, 5603, 5619, 5635, 5651, 5667, 
	5699, 5715, 5731, 5747, 5763, 5783, 5803, 5827, 
	5840, 5856, 5869, 5893, 5906, 5922, 5935, 5951, 
	5999, 6015, 6031, 6044, 6064, 6080, 6096, 6112, 
	6128, 6148, 6164, 6180, 6196, 6224, 6244, 6264, 
	6280, 6296, 6312, 6328, 6344, 6360, 6376, 6392, 
	6408, 6424, 6440, 6456, 6476, 6492, 6508, 6524, 
	6540, 6556, 6576, 6596, 6612, 6628, 6644, 6660, 
	6676, 6692, 6724, 6740, 6756, 6772, 6788, 6804, 
	6820, 6836
};
static const short _lexer_indicies[] = {
	1, 1, 0, 2, 1, 1, 0, 4, 
	4, 5, 6, 7, 8, 9, 10, 5, 
	6, 7, 8, 9, 10, 3, 11, 11, 
	3, 11, 11, 12, 12, 12, 3, 6, 
	6, 13, 13, 13, 3, 14, 14, 3, 
	14, 14, 15, 15, 15, 3, 16, 16, 
	3, 16, 16, 17, 17, 17, 3, 18, 
	19, 18, 19, 3, 18, 18, 20, 20, 
	20, 3, 19, 19, 21, 21, 21, 3, 
	22, 22, 3, 22, 22, 23, 23, 23, 
	3, 25, 25, 24, 24, 24, 0, 27, 
	27, 27, 26, 29, 30, 31, 32, 29, 
	30, 31, 32, 28, 34, 34, 35, 35, 
	35, 33, 36, 36, 37, 0, 39, 40, 
	41, 42, 43, 44, 45, 46, 47, 48, 
	49, 50, 51, 52, 53, 55, 56, 58, 
	59, 60, 61, 62, 63, 64, 65, 66, 
	67, 68, 66, 69, 70, 71, 72, 38, 
	73, 74, 75, 76, 77, 78, 79, 80, 
	81, 82, 83, 85, 86, 87, 88, 89, 
	90, 91, 92, 93, 94, 95, 96, 84, 
	74, 75, 76, 77, 78, 79, 80, 81, 
	82, 83, 85, 86, 87, 88, 89, 90, 
	91, 92, 93, 94, 95, 96, 97, 98, 
	99, 100, 101, 102, 103, 104, 105, 106, 
	107, 109, 110, 111, 112, 113, 114, 115, 
	116, 117, 118, 119, 120, 108, 98, 99, 
	100, 101, 102, 103, 104, 105, 106, 107, 
	109, 110, 111, 112, 113, 114, 115, 116, 
	117, 118, 119, 120, 38, 57, 84, 84, 
	108, 108, 54, 122, 121, 123, 123, 123, 
	0, 124, 125, 0, 125, 126, 128, 127, 
	4, 4, 5, 6, 7, 8, 9, 10, 
	5, 6, 7, 8, 9, 10, 129, 131, 
	130, 133, 25, 134, 133, 25, 134, 56, 
	57, 24, 24, 132, 135, 25, 135, 25, 
	56, 57, 24, 24, 132, 25, 25, 57, 
	24, 24, 132, 25, 25, 24, 24, 24, 
	136, 25, 25, 137, 24, 24, 24, 0, 
	27, 27, 27, 138, 139, 59, 141, 142, 
	143, 140, 145, 144, 147, 148, 146, 150, 
	149, 152, 153, 154, 155, 156, 157, 158, 
	84, 154, 155, 156, 157, 158, 84, 84, 
	84, 151, 84, 84, 84, 84, 0, 160, 
	84, 84, 84, 84, 159, 161, 162, 84, 
	161, 162, 84, 84, 84, 159, 164, 84, 
	84, 84, 84, 163, 165, 84, 165, 84, 
	84, 84, 159, 166, 84, 166, 84, 84, 
	84, 159, 167, 84, 167, 84, 84, 84, 
	159, 168, 84, 168, 84, 84, 84, 159, 
	169, 84, 169, 84, 84, 84, 159, 170, 
	84, 170, 84, 84, 84, 159, 172, 173, 
	174, 175, 84, 173, 174, 175, 84, 84, 
	84, 171, 177, 84, 84, 84, 84, 176, 
	178, 179, 84, 178, 179, 84, 84, 84, 
	159, 180, 84, 180, 84, 84, 84, 159, 
	181, 84, 181, 84, 84, 84, 159, 182, 
	84, 182, 84, 84, 84, 159, 183, 84, 
	183, 84, 84, 84, 159, 184, 84, 184, 
	84, 84, 84, 159, 186, 187, 188, 189, 
	190, 187, 188, 189, 84, 84, 84, 185, 
	191, 84, 191, 84, 84, 84, 159, 192, 
	84, 192, 84, 84, 84, 159, 194, 84, 
	84, 84, 193, 195, 196, 84, 195, 196, 
	84, 84, 84, 159, 197, 84, 197, 84, 
	84, 84, 159, 198, 84, 198, 84, 84, 
	84, 159, 199, 84, 199, 84, 84, 84, 
	159, 200, 84, 200, 84, 84, 84, 159, 
	202, 84, 84, 84, 84, 201, 204, 205, 
	206, 84, 204, 205, 206, 84, 84, 84, 
	203, 208, 84, 208, 84, 84, 84, 207, 
	210, 84, 210, 84, 84, 84, 209, 211, 
	84, 211, 84, 84, 84, 159, 212, 84, 
	212, 84, 84, 84, 159, 213, 84, 213, 
	84, 84, 84, 159, 214, 84, 214, 84, 
	84, 84, 159, 216, 217, 218, 219, 220, 
	221, 84, 217, 218, 219, 220, 221, 84, 
	84, 84, 215, 222, 84, 222, 84, 84, 
	84, 159, 224, 225, 226, 227, 228, 84, 
	225, 226, 227, 228, 84, 84, 84, 223, 
	229, 230, 231, 232, 233, 234, 235, 236, 
	237, 84, 229, 230, 231, 232, 233, 234, 
	235, 236, 237, 84, 84, 84, 159, 238, 
	84, 238, 84, 84, 84, 159, 239, 84, 
	239, 84, 84, 84, 159, 240, 84, 240, 
	84, 84, 84, 159, 241, 84, 241, 84, 
	84, 84, 159, 242, 84, 242, 84, 84, 
	84, 159, 243, 84, 243, 84, 84, 84, 
	159, 244, 84, 244, 84, 84, 84, 159, 
	245, 84, 245, 84, 84, 84, 159, 246, 
	84, 246, 84, 84, 84, 159, 247, 84, 
	247, 84, 84, 84, 159, 248, 84, 248, 
	84, 84, 84, 159, 249, 84, 249, 84, 
	84, 84, 159, 250, 84, 250, 84, 84, 
	84, 159, 251, 84, 251, 84, 84, 84, 
	159, 252, 84, 252, 84, 84, 84, 159, 
	253, 84, 253, 84, 84, 84, 159, 254, 
	84, 84, 84, 84, 159, 256, 257, 258, 
	259, 260, 84, 257, 258, 259, 260, 84, 
	84, 84, 255, 262, 84, 262, 84, 84, 
	84, 261, 263, 84, 263, 84, 84, 84, 
	159, 264, 84, 264, 84, 84, 84, 159, 
	265, 84, 265, 84, 84, 84, 159, 266, 
	84, 266, 84, 84, 84, 159, 267, 84, 
	267, 84, 84, 84, 159, 269, 270, 84, 
	269, 270, 84, 84, 84, 268, 271, 84, 
	271, 84, 84, 84, 159, 272, 84, 272, 
	84, 84, 84, 159, 273, 84, 273, 84, 
	84, 84, 159, 275, 276, 277, 84, 276, 
	277, 84, 84, 84, 274, 278, 84, 278, 
	84, 84, 84, 159, 279, 84, 279, 84, 
	84, 84, 159, 281, 84, 281, 84, 84, 
	84, 280, 282, 84, 282, 84, 84, 84, 
	159, 283, 84, 283, 84, 84, 84, 159, 
	284, 84, 284, 84, 84, 84, 159, 285, 
	84, 285, 84, 84, 84, 159, 286, 84, 
	286, 84, 84, 84, 159, 287, 84, 287, 
	84, 84, 84, 159, 288, 84, 288, 84, 
	84, 84, 159, 290, 291, 292, 84, 291, 
	292, 84, 84, 84, 289, 293, 84, 293, 
	84, 84, 84, 159, 294, 84, 294, 84, 
	84, 84, 159, 296, 84, 84, 84, 84, 
	295, 298, 299, 300, 301, 302, 303, 304, 
	305, 306, 84, 298, 299, 300, 301, 302, 
	303, 304, 305, 306, 84, 84, 84, 297, 
	307, 84, 307, 84, 84, 84, 159, 308, 
	84, 308, 84, 84, 84, 159, 310, 311, 
	84, 310, 311, 84, 84, 84, 309, 312, 
	84, 312, 84, 84, 84, 159, 313, 84, 
	313, 84, 84, 84, 159, 314, 84, 314, 
	84, 84, 84, 159, 315, 84, 315, 84, 
	84, 84, 159, 316, 84, 316, 84, 84, 
	84, 159, 317, 84, 317, 84, 84, 84, 
	159, 319, 320, 321, 322, 323, 84, 320, 
	321, 322, 323, 84, 84, 84, 318, 325, 
	84, 325, 84, 84, 84, 324, 326, 84, 
	326, 84, 84, 84, 159, 327, 84, 327, 
	84, 84, 84, 159, 328, 84, 328, 84, 
	84, 84, 159, 330, 84, 330, 84, 84, 
	84, 329, 332, 84, 332, 84, 84, 84, 
	331, 333, 84, 333, 84, 84, 84, 159, 
	334, 84, 334, 84, 84, 84, 159, 335, 
	84, 335, 84, 84, 84, 159, 336, 337, 
	84, 336, 337, 84, 84, 84, 159, 339, 
	340, 84, 339, 340, 84, 84, 84, 338, 
	341, 84, 341, 84, 84, 84, 159, 342, 
	84, 342, 84, 84, 84, 159, 343, 84, 
	343, 84, 84, 84, 159, 344, 84, 344, 
	84, 84, 84, 159, 346, 347, 84, 346, 
	347, 84, 84, 84, 345, 349, 350, 84, 
	349, 350, 84, 84, 84, 348, 351, 352, 
	84, 351, 352, 84, 84, 84, 159, 354, 
	355, 356, 357, 358, 359, 84, 355, 356, 
	357, 358, 359, 84, 84, 84, 353, 361, 
	362, 363, 84, 361, 362, 363, 84, 84, 
	84, 360, 365, 366, 367, 84, 365, 366, 
	367, 84, 84, 84, 364, 369, 84, 369, 
	84, 84, 84, 368, 370, 84, 370, 84, 
	84, 84, 159, 372, 373, 374, 84, 372, 
	373, 374, 84, 84, 84, 371, 376, 377, 
	84, 376, 377, 84, 84, 84, 375, 378, 
	84, 378, 84, 84, 84, 159, 379, 84, 
	379, 84, 84, 84, 159, 380, 84, 380, 
	84, 84, 84, 159, 381, 84, 381, 84, 
	84, 84, 159, 382, 84, 382, 84, 84, 
	84, 159, 384, 84, 384, 84, 84, 84, 
	383, 385, 84, 385, 84, 84, 84, 159, 
	386, 84, 386, 84, 84, 84, 159, 387, 
	388, 84, 387, 388, 84, 84, 84, 159, 
	389, 84, 389, 84, 84, 84, 159, 390, 
	391, 392, 84, 390, 391, 392, 84, 84, 
	84, 159, 393, 394, 84, 393, 394, 84, 
	84, 84, 159, 395, 84, 395, 84, 84, 
	84, 159, 396, 397, 84, 396, 397, 84, 
	84, 84, 159, 398, 84, 398, 84, 84, 
	84, 159, 399, 84, 399, 84, 84, 84, 
	159, 400, 401, 84, 400, 401, 84, 84, 
	84, 159, 402, 84, 402, 84, 84, 84, 
	159, 404, 405, 406, 407, 408, 84, 404, 
	405, 406, 407, 408, 84, 84, 84, 403, 
	409, 84, 409, 84, 84, 84, 159, 410, 
	84, 410, 84, 84, 84, 159, 411, 84, 
	411, 84, 84, 84, 159, 412, 84, 412, 
	84, 84, 84, 159, 413, 84, 413, 84, 
	84, 84, 159, 414, 84, 414, 84, 84, 
	84, 159, 416, 417, 418, 419, 420, 421, 
	422, 423, 84, 84, 84, 84, 415, 424, 
	84, 424, 84, 84, 84, 159, 425, 84, 
	425, 84, 84, 84, 159, 426, 84, 426, 
	84, 84, 84, 159, 427, 84, 427, 84, 
	84, 84, 159, 428, 84, 428, 84, 84, 
	84, 159, 429, 430, 431, 432, 433, 84, 
	429, 430, 431, 432, 433, 84, 84, 84, 
	159, 434, 435, 84, 434, 435, 84, 84, 
	84, 159, 436, 84, 436, 84, 84, 84, 
	159, 437, 84, 437, 84, 84, 84, 159, 
	438, 84, 438, 84, 84, 84, 159, 439, 
	84, 439, 84, 84, 84, 159, 440, 84, 
	440, 84, 84, 84, 159, 441, 442, 443, 
	84, 441, 442, 443, 84, 84, 84, 159, 
	445, 84, 445, 84, 84, 84, 444, 446, 
	447, 84, 446, 447, 84, 84, 84, 159, 
	448, 449, 84, 448, 449, 84, 84, 84, 
	159, 451, 84, 451, 84, 84, 84, 450, 
	452, 453, 84, 452, 453, 84, 84, 84, 
	159, 455, 84, 455, 84, 84, 84, 454, 
	456, 84, 456, 84, 84, 84, 159, 458, 
	459, 460, 84, 459, 460, 84, 84, 84, 
	457, 462, 84, 462, 84, 84, 84, 461, 
	463, 84, 463, 84, 84, 84, 159, 465, 
	466, 467, 468, 469, 84, 465, 466, 467, 
	468, 469, 84, 84, 84, 464, 470, 84, 
	470, 84, 84, 84, 159, 471, 84, 471, 
	84, 84, 84, 159, 472, 84, 472, 84, 
	84, 84, 159, 473, 84, 473, 84, 84, 
	84, 159, 474, 84, 474, 84, 84, 84, 
	159, 475, 84, 475, 84, 84, 84, 159, 
	476, 477, 84, 476, 477, 84, 84, 84, 
	159, 478, 84, 478, 84, 84, 84, 159, 
	479, 84, 479, 84, 84, 84, 159, 481, 
	84, 481, 84, 84, 84, 480, 483, 84, 
	483, 84, 84, 84, 482, 484, 485, 84, 
	484, 485, 84, 84, 84, 159, 486, 84, 
	486, 84, 84, 84, 159, 487, 84, 487, 
	84, 84, 84, 159, 488, 84, 488, 84, 
	84, 84, 159, 489, 84, 489, 84, 84, 
	84, 159, 491, 492, 493, 494, 495, 84, 
	491, 492, 493, 494, 495, 84, 84, 84, 
	490, 496, 84, 496, 84, 84, 84, 159, 
	497, 84, 497, 84, 84, 84, 159, 498, 
	84, 498, 84, 84, 84, 159, 499, 84, 
	499, 84, 84, 84, 159, 500, 501, 84, 
	500, 501, 84, 84, 84, 159, 503, 504, 
	84, 503, 504, 84, 84, 84, 502, 506, 
	507, 508, 84, 506, 507, 508, 84, 84, 
	84, 505, 510, 84, 84, 84, 84, 509, 
	512, 84, 512, 84, 84, 84, 511, 514, 
	84, 84, 84, 84, 513, 516, 517, 518, 
	84, 516, 517, 518, 84, 84, 84, 515, 
	520, 84, 84, 84, 84, 519, 522, 84, 
	522, 84, 84, 84, 521, 524, 84, 84, 
	84, 84, 523, 525, 84, 525, 84, 84, 
	84, 159, 526, 527, 528, 529, 530, 531, 
	532, 533, 534, 84, 526, 527, 528, 529, 
	530, 531, 532, 533, 534, 84, 84, 84, 
	159, 535, 84, 535, 84, 84, 84, 159, 
	536, 84, 536, 84, 84, 84, 159, 538, 
	84, 84, 84, 84, 537, 539, 540, 84, 
	539, 540, 84, 84, 84, 159, 541, 84, 
	541, 84, 84, 84, 159, 542, 84, 542, 
	84, 84, 84, 159, 543, 84, 543, 84, 
	84, 84, 159, 544, 84, 544, 84, 84, 
	84, 159, 546, 547, 84, 546, 547, 84, 
	84, 84, 545, 548, 84, 548, 84, 84, 
	84, 159, 549, 84, 549, 84, 84, 84, 
	159, 550, 84, 550, 84, 84, 84, 159, 
	551, 552, 553, 554, 84, 551, 552, 553, 
	554, 84, 84, 84, 159, 555, 556, 84, 
	555, 556, 84, 84, 84, 159, 558, 559, 
	84, 558, 559, 84, 84, 84, 557, 560, 
	84, 560, 84, 84, 84, 159, 561, 84, 
	561, 84, 84, 84, 159, 562, 84, 562, 
	84, 84, 84, 159, 563, 84, 563, 84, 
	84, 84, 159, 565, 84, 565, 84, 84, 
	84, 564, 566, 84, 566, 84, 84, 84, 
	159, 567, 84, 567, 84, 84, 84, 159, 
	568, 84, 568, 84, 84, 84, 159, 569, 
	84, 569, 84, 84, 84, 159, 570, 84, 
	570, 84, 84, 84, 159, 571, 84, 571, 
	84, 84, 84, 159, 572, 84, 572, 84, 
	84, 84, 159, 573, 574, 84, 573, 574, 
	84, 84, 84, 159, 575, 84, 575, 84, 
	84, 84, 159, 576, 84, 576, 84, 84, 
	84, 159, 577, 84, 577, 84, 84, 84, 
	159, 579, 84, 579, 84, 84, 84, 578, 
	580, 84, 580, 84, 84, 84, 159, 581, 
	582, 84, 581, 582, 84, 84, 84, 159, 
	583, 584, 84, 583, 584, 84, 84, 84, 
	159, 585, 84, 585, 84, 84, 84, 159, 
	586, 84, 586, 84, 84, 84, 159, 587, 
	84, 587, 84, 84, 84, 159, 588, 84, 
	588, 84, 84, 84, 159, 589, 84, 589, 
	84, 84, 84, 159, 590, 84, 590, 84, 
	84, 84, 159, 591, 592, 593, 594, 595, 
	84, 591, 592, 593, 594, 595, 84, 84, 
	84, 159, 596, 84, 596, 84, 84, 84, 
	159, 597, 84, 597, 84, 84, 84, 159, 
	598, 84, 598, 84, 84, 84, 159, 599, 
	84, 599, 84, 84, 84, 159, 600, 84, 
	600, 84, 84, 84, 159, 601, 84, 601, 
	84, 84, 84, 159, 602, 84, 602, 84, 
	84, 84, 159, 603, 84, 603, 84, 84, 
	84, 159, 34, 34, 35, 35, 35, 604, 
	35, 35, 35, 35, 605, 152, 153, 154, 
	155, 156, 157, 158, 84, 154, 155, 156, 
	157, 158, 36, 36, 606, 37, 607, 608, 
	609, 610, 611, 108, 607, 608, 609, 610, 
	611, 84, 84, 84, 108, 108, 108, 151, 
	84, 36, 36, 37, 108, 84, 84, 84, 
	108, 108, 108, 0, 160, 84, 36, 36, 
	612, 37, 108, 84, 84, 84, 108, 108, 
	108, 159, 161, 162, 84, 161, 162, 36, 
	36, 37, 613, 614, 108, 613, 614, 84, 
	84, 84, 108, 108, 108, 159, 164, 84, 
	36, 36, 37, 108, 84, 84, 84, 108, 
	108, 108, 163, 165, 84, 165, 36, 36, 
	37, 615, 108, 615, 84, 84, 84, 108, 
	108, 108, 159, 166, 84, 166, 36, 36, 
	37, 616, 108, 616, 84, 84, 84, 108, 
	108, 108, 159, 167, 84, 167, 36, 36, 
	37, 617, 108, 617, 84, 84, 84, 108, 
	108, 108, 159, 168, 84, 168, 36, 36, 
	37, 618, 108, 618, 84, 84, 84, 108, 
	108, 108, 159, 169, 84, 169, 36, 36, 
	37, 619, 108, 619, 84, 84, 84, 108, 
	108, 108, 159, 170, 84, 170, 36, 36, 
	37, 620, 108, 620, 84, 84, 84, 108, 
	108, 108, 159, 172, 173, 174, 175, 84, 
	173, 174, 175, 36, 36, 37, 621, 622, 
	623, 108, 621, 622, 623, 84, 84, 84, 
	108, 108, 108, 171, 177, 84, 36, 36, 
	37, 108, 84, 84, 84, 108, 108, 108, 
	176, 178, 179, 84, 178, 179, 36, 36, 
	37, 624, 625, 108, 624, 625, 84, 84, 
	84, 108, 108, 108, 159, 180, 84, 180, 
	36, 36, 37, 626, 108, 626, 84, 84, 
	84, 108, 108, 108, 159, 181, 84, 181, 
	36, 36, 37, 627, 108, 627, 84, 84, 
	84, 108, 108, 108, 159, 182, 84, 182, 
	36, 36, 37, 628, 108, 628, 84, 84, 
	84, 108, 108, 108, 159, 183, 84, 183, 
	36, 36, 37, 629, 108, 629, 84, 84, 
	84, 108, 108, 108, 159, 184, 84, 184, 
	36, 36, 37, 630, 108, 630, 84, 84, 
	84, 108, 108, 108, 159, 186, 187, 188, 
	189, 190, 187, 188, 189, 36, 36, 37, 
	631, 632, 633, 634, 631, 632, 633, 84, 
	84, 84, 108, 108, 108, 185, 191, 84, 
	191, 36, 36, 37, 635, 108, 635, 84, 
	84, 84, 108, 108, 108, 159, 192, 84, 
	192, 36, 36, 37, 636, 108, 636, 84, 
	84, 84, 108, 108, 108, 159, 194, 36, 
	36, 37, 637, 84, 84, 84, 108, 108, 
	108, 193, 195, 196, 84, 195, 196, 36, 
	36, 37, 638, 639, 108, 638, 639, 84, 
	84, 84, 108, 108, 108, 159, 197, 84, 
	197, 36, 36, 37, 640, 108, 640, 84, 
	84, 84, 108, 108, 108, 159, 198, 84, 
	198, 36, 36, 37, 641, 108, 641, 84, 
	84, 84, 108, 108, 108, 159, 199, 84, 
	199, 36, 36, 37, 642, 108, 642, 84, 
	84, 84, 108, 108, 108, 159, 200, 84, 
	200, 36, 36, 37, 643, 108, 643, 84, 
	84, 84, 108, 108, 108, 159, 202, 84, 
	36, 36, 37, 108, 84, 84, 84, 108, 
	108, 108, 201, 204, 205, 206, 84, 204, 
	205, 206, 36, 36, 37, 644, 645, 646, 
	108, 644, 645, 646, 84, 84, 84, 108, 
	108, 108, 203, 208, 84, 208, 36, 36, 
	37, 647, 108, 647, 84, 84, 84, 108, 
	108, 108, 207, 210, 84, 210, 36, 36, 
	37, 648, 108, 648, 84, 84, 84, 108, 
	108, 108, 209, 211, 84, 211, 36, 36, 
	37, 649, 108, 649, 84, 84, 84, 108, 
	108, 108, 159, 212, 84, 212, 36, 36, 
	37, 650, 108, 650, 84, 84, 84, 108, 
	108, 108, 159, 213, 84, 213, 36, 36, 
	37, 651, 108, 651, 84, 84, 84, 108, 
	108, 108, 159, 214, 84, 214, 36, 36, 
	37, 652, 108, 652, 84, 84, 84, 108, 
	108, 108, 159, 216, 217, 218, 219, 220, 
	221, 84, 217, 218, 219, 220, 221, 36, 
	36, 37, 653, 654, 655, 656, 657, 108, 
	653, 654, 655, 656, 657, 84, 84, 84, 
	108, 108, 108, 215, 222, 84, 222, 36, 
	36, 37, 658, 108, 658, 84, 84, 84, 
	108, 108, 108, 159, 224, 225, 226, 227, 
	228, 84, 225, 226, 227, 228, 36, 36, 
	37, 659, 660, 661, 662, 108, 659, 660, 
	661, 662, 84, 84, 84, 108, 108, 108, 
	223, 229, 230, 231, 232, 233, 234, 235, 
	236, 237, 84, 229, 230, 231, 232, 233, 
	234, 235, 236, 237, 36, 36, 37, 663, 
	664, 665, 666, 667, 668, 669, 670, 671, 
	108, 663, 664, 665, 666, 667, 668, 669, 
	670, 671, 84, 84, 84, 108, 108, 108, 
	159, 238, 84, 238, 36, 36, 37, 672, 
	108, 672, 84, 84, 84, 108, 108, 108, 
	159, 239, 84, 239, 36, 36, 37, 673, 
	108, 673, 84, 84, 84, 108, 108, 108, 
	159, 240, 84, 240, 36, 36, 37, 674, 
	108, 674, 84, 84, 84, 108, 108, 108, 
	159, 241, 84, 241, 36, 36, 37, 675, 
	108, 675, 84, 84, 84, 108, 108, 108, 
	159, 242, 84, 242, 36, 36, 37, 676, 
	108, 676, 84, 84, 84, 108, 108, 108, 
	159, 243, 84, 243, 36, 36, 37, 677, 
	108, 677, 84, 84, 84, 108, 108, 108, 
	159, 244, 84, 244, 36, 36, 37, 678, 
	108, 678, 84, 84, 84, 108, 108, 108, 
	159, 245, 84, 245, 36, 36, 37, 679, 
	108, 679, 84, 84, 84, 108, 108, 108, 
	159, 246, 84, 246, 36, 36, 37, 680, 
	108, 680, 84, 84, 84, 108, 108, 108, 
	159, 247, 84, 247, 36, 36, 37, 681, 
	108, 681, 84, 84, 84, 108, 108, 108, 
	159, 248, 84, 248, 36, 36, 37, 682, 
	108, 682, 84, 84, 84, 108, 108, 108, 
	159, 249, 84, 249, 36, 36, 37, 683, 
	108, 683, 84, 84, 84, 108, 108, 108, 
	159, 250, 84, 250, 36, 36, 37, 684, 
	108, 684, 84, 84, 84, 108, 108, 108, 
	159, 251, 84, 251, 36, 36, 37, 685, 
	108, 685, 84, 84, 84, 108, 108, 108, 
	159, 252, 84, 252, 36, 36, 37, 686, 
	108, 686, 84, 84, 84, 108, 108, 108, 
	159, 253, 84, 253, 36, 36, 37, 687, 
	108, 687, 84, 84, 84, 108, 108, 108, 
	159, 254, 84, 36, 36, 37, 108, 84, 
	84, 84, 108, 108, 108, 159, 256, 257, 
	258, 259, 260, 84, 257, 258, 259, 260, 
	36, 36, 37, 688, 689, 690, 691, 108, 
	688, 689, 690, 691, 84, 84, 84, 108, 
	108, 108, 255, 262, 84, 262, 36, 36, 
	37, 692, 108, 692, 84, 84, 84, 108, 
	108, 108, 261, 263, 84, 263, 36, 36, 
	37, 693, 108, 693, 84, 84, 84, 108, 
	108, 108, 159, 264, 84, 264, 36, 36, 
	37, 694, 108, 694, 84, 84, 84, 108, 
	108, 108, 159, 265, 84, 265, 36, 36, 
	37, 695, 108, 695, 84, 84, 84, 108, 
	108, 108, 159, 266, 84, 266, 36, 36, 
	37, 696, 108, 696, 84, 84, 84, 108, 
	108, 108, 159, 267, 84, 267, 36, 36, 
	37, 697, 108, 697, 84, 84, 84, 108, 
	108, 108, 159, 269, 270, 84, 269, 270, 
	36, 36, 37, 698, 699, 108, 698, 699, 
	84, 84, 84, 108, 108, 108, 268, 271, 
	84, 271, 36, 36, 37, 700, 108, 700, 
	84, 84, 84, 108, 108, 108, 159, 272, 
	84, 272, 36, 36, 37, 701, 108, 701, 
	84, 84, 84, 108, 108, 108, 159, 273, 
	84, 273, 36, 36, 37, 702, 108, 702, 
	84, 84, 84, 108, 108, 108, 159, 275, 
	276, 277, 84, 276, 277, 36, 36, 37, 
	703, 704, 108, 703, 704, 84, 84, 84, 
	108, 108, 108, 274, 278, 84, 278, 36, 
	36, 37, 705, 108, 705, 84, 84, 84, 
	108, 108, 108, 159, 279, 84, 279, 36, 
	36, 37, 706, 108, 706, 84, 84, 84, 
	108, 108, 108, 159, 281, 84, 281, 36, 
	36, 37, 707, 108, 707, 84, 84, 84, 
	108, 108, 108, 280, 282, 84, 282, 36, 
	36, 37, 708, 108, 708, 84, 84, 84, 
	108, 108, 108, 159, 283, 84, 283, 36, 
	36, 37, 709, 108, 709, 84, 84, 84, 
	108, 108, 108, 159, 284, 84, 284, 36, 
	36, 37, 710, 108, 710, 84, 84, 84, 
	108, 108, 108, 159, 285, 84, 285, 36, 
	36, 37, 711, 108, 711, 84, 84, 84, 
	108, 108, 108, 159, 286, 84, 286, 36, 
	36, 37, 712, 108, 712, 84, 84, 84, 
	108, 108, 108, 159, 287, 84, 287, 36, 
	36, 37, 713, 108, 713, 84, 84, 84, 
	108, 108, 108, 159, 288, 84, 288, 36, 
	36, 37, 714, 108, 714, 84, 84, 84, 
	108, 108, 108, 159, 290, 291, 292, 84, 
	291, 292, 36, 36, 37, 715, 716, 108, 
	715, 716, 84, 84, 84, 108, 108, 108, 
	289, 293, 84, 293, 36, 36, 37, 717, 
	108, 717, 84, 84, 84, 108, 108, 108, 
	159, 294, 84, 294, 36, 36, 37, 718, 
	108, 718, 84, 84, 84, 108, 108, 108, 
	159, 296, 84, 36, 36, 37, 108, 84, 
	84, 84, 108, 108, 108, 295, 298, 299, 
	300, 301, 302, 303, 304, 305, 306, 84, 
	298, 299, 300, 301, 302, 303, 304, 305, 
	306, 36, 36, 37, 719, 720, 721, 722, 
	723, 724, 725, 726, 727, 108, 719, 720, 
	721, 722, 723, 724, 725, 726, 727, 84, 
	84, 84, 108, 108, 108, 297, 307, 84, 
	307, 36, 36, 37, 728, 108, 728, 84, 
	84, 84, 108, 108, 108, 159, 308, 84, 
	308, 36, 36, 37, 729, 108, 729, 84, 
	84, 84, 108, 108, 108, 159, 310, 311, 
	84, 310, 311, 36, 36, 37, 730, 731, 
	108, 730, 731, 84, 84, 84, 108, 108, 
	108, 309, 312, 84, 312, 36, 36, 37, 
	732, 108, 732, 84, 84, 84, 108, 108, 
	108, 159, 313, 84, 313, 36, 36, 37, 
	733, 108, 733, 84, 84, 84, 108, 108, 
	108, 159, 314, 84, 314, 36, 36, 37, 
	734, 108, 734, 84, 84, 84, 108, 108, 
	108, 159, 315, 84, 315, 36, 36, 37, 
	735, 108, 735, 84, 84, 84, 108, 108, 
	108, 159, 316, 84, 316, 36, 36, 37, 
	736, 108, 736, 84, 84, 84, 108, 108, 
	108, 159, 317, 84, 317, 36, 36, 37, 
	737, 108, 737, 84, 84, 84, 108, 108, 
	108, 159, 319, 320, 321, 322, 323, 84, 
	320, 321, 322, 323, 36, 36, 738, 37, 
	739, 740, 741, 742, 108, 739, 740, 741, 
	742, 84, 84, 84, 108, 108, 108, 318, 
	325, 84, 325, 36, 36, 37, 743, 108, 
	743, 84, 84, 84, 108, 108, 108, 324, 
	326, 84, 326, 36, 36, 37, 744, 108, 
	744, 84, 84, 84, 108, 108, 108, 159, 
	327, 84, 327, 36, 36, 37, 745, 108, 
	745, 84, 84, 84, 108, 108, 108, 159, 
	328, 84, 328, 36, 36, 37, 746, 108, 
	746, 84, 84, 84, 108, 108, 108, 159, 
	330, 84, 330, 36, 36, 37, 747, 108, 
	747, 84, 84, 84, 108, 108, 108, 329, 
	332, 84, 332, 36, 36, 37, 748, 108, 
	748, 84, 84, 84, 108, 108, 108, 331, 
	333, 84, 333, 36, 36, 37, 749, 108, 
	749, 84, 84, 84, 108, 108, 108, 159, 
	334, 84, 334, 36, 36, 37, 750, 108, 
	750, 84, 84, 84, 108, 108, 108, 159, 
	335, 84, 335, 36, 36, 37, 751, 108, 
	751, 84, 84, 84, 108, 108, 108, 159, 
	336, 337, 84, 336, 337, 36, 36, 37, 
	752, 753, 108, 752, 753, 84, 84, 84, 
	108, 108, 108, 159, 339, 340, 84, 339, 
	340, 36, 36, 37, 754, 755, 108, 754, 
	755, 84, 84, 84, 108, 108, 108, 338, 
	341, 84, 341, 36, 36, 37, 756, 108, 
	756, 84, 84, 84, 108, 108, 108, 159, 
	342, 84, 342, 36, 36, 37, 757, 108, 
	757, 84, 84, 84, 108, 108, 108, 159, 
	343, 84, 343, 36, 36, 37, 758, 108, 
	758, 84, 84, 84, 108, 108, 108, 159, 
	344, 84, 344, 36, 36, 37, 759, 108, 
	759, 84, 84, 84, 108, 108, 108, 159, 
	346, 347, 84, 346, 347, 36, 36, 37, 
	760, 761, 108, 760, 761, 84, 84, 84, 
	108, 108, 108, 345, 349, 350, 84, 349, 
	350, 36, 36, 37, 762, 763, 108, 762, 
	763, 84, 84, 84, 108, 108, 108, 348, 
	351, 352, 84, 351, 352, 36, 36, 37, 
	764, 765, 108, 764, 765, 84, 84, 84, 
	108, 108, 108, 159, 354, 355, 356, 357, 
	358, 359, 84, 355, 356, 357, 358, 359, 
	36, 36, 37, 766, 767, 768, 769, 770, 
	108, 766, 767, 768, 769, 770, 84, 84, 
	84, 108, 108, 108, 353, 361, 362, 363, 
	84, 361, 362, 363, 36, 36, 37, 771, 
	772, 773, 108, 771, 772, 773, 84, 84, 
	84, 108, 108, 108, 360, 365, 366, 367, 
	84, 365, 366, 367, 36, 36, 37, 774, 
	775, 776, 108, 774, 775, 776, 84, 84, 
	84, 108, 108, 108, 364, 369, 84, 369, 
	36, 36, 37, 777, 108, 777, 84, 84, 
	84, 108, 108, 108, 368, 370, 84, 370, 
	36, 36, 37, 778, 108, 778, 84, 84, 
	84, 108, 108, 108, 159, 372, 373, 374, 
	84, 372, 373, 374, 36, 36, 37, 779, 
	780, 781, 108, 779, 780, 781, 84, 84, 
	84, 108, 108, 108, 371, 376, 377, 84, 
	376, 377, 36, 36, 37, 782, 783, 108, 
	782, 783, 84, 84, 84, 108, 108, 108, 
	375, 378, 84, 378, 36, 36, 37, 784, 
	108, 784, 84, 84, 84, 108, 108, 108, 
	159, 379, 84, 379, 36, 36, 37, 785, 
	108, 785, 84, 84, 84, 108, 108, 108, 
	159, 380, 84, 380, 36, 36, 37, 786, 
	108, 786, 84, 84, 84, 108, 108, 108, 
	159, 381, 84, 381, 36, 36, 37, 787, 
	108, 787, 84, 84, 84, 108, 108, 108, 
	159, 382, 84, 382, 36, 36, 37, 788, 
	108, 788, 84, 84, 84, 108, 108, 108, 
	159, 384, 84, 384, 36, 36, 37, 789, 
	108, 789, 84, 84, 84, 108, 108, 108, 
	383, 385, 84, 385, 36, 36, 37, 790, 
	108, 790, 84, 84, 84, 108, 108, 108, 
	159, 386, 84, 386, 36, 36, 37, 791, 
	108, 791, 84, 84, 84, 108, 108, 108, 
	159, 387, 388, 84, 387, 388, 36, 36, 
	37, 792, 793, 108, 792, 793, 84, 84, 
	84, 108, 108, 108, 159, 389, 84, 389, 
	36, 36, 37, 794, 108, 794, 84, 84, 
	84, 108, 108, 108, 159, 390, 391, 392, 
	84, 390, 391, 392, 36, 36, 37, 795, 
	796, 797, 108, 795, 796, 797, 84, 84, 
	84, 108, 108, 108, 159, 393, 394, 84, 
	393, 394, 36, 36, 37, 798, 799, 108, 
	798, 799, 84, 84, 84, 108, 108, 108, 
	159, 395, 84, 395, 36, 36, 37, 800, 
	108, 800, 84, 84, 84, 108, 108, 108, 
	159, 396, 397, 84, 396, 397, 36, 36, 
	37, 801, 802, 108, 801, 802, 84, 84, 
	84, 108, 108, 108, 159, 398, 84, 398, 
	36, 36, 37, 803, 108, 803, 84, 84, 
	84, 108, 108, 108, 159, 399, 84, 399, 
	36, 36, 37, 804, 108, 804, 84, 84, 
	84, 108, 108, 108, 159, 400, 401, 84, 
	400, 401, 36, 36, 37, 805, 806, 108, 
	805, 806, 84, 84, 84, 108, 108, 108, 
	159, 402, 84, 402, 36, 36, 37, 807, 
	108, 807, 84, 84, 84, 108, 108, 108, 
	159, 404, 405, 406, 407, 408, 84, 404, 
	405, 406, 407, 408, 36, 36, 37, 808, 
	809, 810, 811, 812, 108, 808, 809, 810, 
	811, 812, 84, 84, 84, 108, 108, 108, 
	403, 409, 84, 409, 36, 36, 37, 813, 
	108, 813, 84, 84, 84, 108, 108, 108, 
	159, 410, 84, 410, 36, 36, 37, 814, 
	108, 814, 84, 84, 84, 108, 108, 108, 
	159, 411, 84, 411, 36, 36, 37, 815, 
	108, 815, 84, 84, 84, 108, 108, 108, 
	159, 412, 84, 412, 36, 36, 37, 816, 
	108, 816, 84, 84, 84, 108, 108, 108, 
	159, 413, 84, 413, 36, 36, 37, 817, 
	108, 817, 84, 84, 84, 108, 108, 108, 
	159, 414, 84, 414, 36, 36, 37, 818, 
	108, 818, 84, 84, 84, 108, 108, 108, 
	159, 416, 417, 418, 419, 420, 421, 422, 
	423, 84, 36, 36, 819, 820, 821, 822, 
	823, 824, 825, 826, 37, 108, 84, 84, 
	84, 108, 108, 108, 415, 424, 84, 424, 
	36, 36, 37, 827, 108, 827, 84, 84, 
	84, 108, 108, 108, 159, 425, 84, 425, 
	36, 36, 37, 828, 108, 828, 84, 84, 
	84, 108, 108, 108, 159, 426, 84, 426, 
	36, 36, 37, 829, 108, 829, 84, 84, 
	84, 108, 108, 108, 159, 427, 84, 427, 
	36, 36, 37, 830, 108, 830, 84, 84, 
	84, 108, 108, 108, 159, 428, 84, 428, 
	36, 36, 37, 831, 108, 831, 84, 84, 
	84, 108, 108, 108, 159, 429, 430, 431, 
	432, 433, 84, 429, 430, 431, 432, 433, 
	36, 36, 37, 832, 833, 834, 835, 836, 
	108, 832, 833, 834, 835, 836, 84, 84, 
	84, 108, 108, 108, 159, 434, 435, 84, 
	434, 435, 36, 36, 37, 837, 838, 108, 
	837, 838, 84, 84, 84, 108, 108, 108, 
	159, 436, 84, 436, 36, 36, 37, 839, 
	108, 839, 84, 84, 84, 108, 108, 108, 
	159, 437, 84, 437, 36, 36, 37, 840, 
	108, 840, 84, 84, 84, 108, 108, 108, 
	159, 438, 84, 438, 36, 36, 37, 841, 
	108, 841, 84, 84, 84, 108, 108, 108, 
	159, 439, 84, 439, 36, 36, 37, 842, 
	108, 842, 84, 84, 84, 108, 108, 108, 
	159, 440, 84, 440, 36, 36, 37, 843, 
	108, 843, 84, 84, 84, 108, 108, 108, 
	159, 441, 442, 443, 84, 441, 442, 443, 
	36, 36, 37, 844, 845, 846, 108, 844, 
	845, 846, 84, 84, 84, 108, 108, 108, 
	159, 445, 84, 445, 36, 36, 37, 847, 
	108, 847, 84, 84, 84, 108, 108, 108, 
	444, 446, 447, 84, 446, 447, 36, 36, 
	37, 848, 849, 108, 848, 849, 84, 84, 
	84, 108, 108, 108, 159, 448, 449, 84, 
	448, 449, 36, 36, 37, 850, 851, 108, 
	850, 851, 84, 84, 84, 108, 108, 108, 
	159, 451, 84, 451, 36, 36, 37, 852, 
	108, 852, 84, 84, 84, 108, 108, 108, 
	450, 452, 453, 84, 452, 453, 36, 36, 
	37, 853, 854, 108, 853, 854, 84, 84, 
	84, 108, 108, 108, 159, 455, 84, 455, 
	36, 36, 37, 855, 108, 855, 84, 84, 
	84, 108, 108, 108, 454, 456, 84, 456, 
	36, 36, 37, 856, 108, 856, 84, 84, 
	84, 108, 108, 108, 159, 458, 459, 460, 
	84, 459, 460, 36, 36, 857, 37, 858, 
	859, 108, 858, 859, 84, 84, 84, 108, 
	108, 108, 457, 462, 84, 462, 36, 36, 
	37, 860, 108, 860, 84, 84, 84, 108, 
	108, 108, 461, 463, 84, 463, 36, 36, 
	37, 861, 108, 861, 84, 84, 84, 108, 
	108, 108, 159, 465, 466, 467, 468, 469, 
	84, 465, 466, 467, 468, 469, 36, 36, 
	37, 862, 863, 864, 865, 866, 108, 862, 
	863, 864, 865, 866, 84, 84, 84, 108, 
	108, 108, 464, 470, 84, 470, 36, 36, 
	37, 867, 108, 867, 84, 84, 84, 108, 
	108, 108, 159, 471, 84, 471, 36, 36, 
	37, 868, 108, 868, 84, 84, 84, 108, 
	108, 108, 159, 472, 84, 472, 36, 36, 
	37, 869, 108, 869, 84, 84, 84, 108, 
	108, 108, 159, 473, 84, 473, 36, 36, 
	37, 870, 108, 870, 84, 84, 84, 108, 
	108, 108, 159, 474, 84, 474, 36, 36, 
	37, 871, 108, 871, 84, 84, 84, 108, 
	108, 108, 159, 475, 84, 475, 36, 36, 
	37, 872, 108, 872, 84, 84, 84, 108, 
	108, 108, 159, 476, 477, 84, 476, 477, 
	36, 36, 37, 873, 874, 108, 873, 874, 
	84, 84, 84, 108, 108, 108, 159, 478, 
	84, 478, 36, 36, 37, 875, 108, 875, 
	84, 84, 84, 108, 108, 108, 159, 479, 
	84, 479, 36, 36, 37, 876, 108, 876, 
	84, 84, 84, 108, 108, 108, 159, 481, 
	84, 481, 36, 36, 37, 877, 108, 877, 
	84, 84, 84, 108, 108, 108, 480, 483, 
	84, 483, 36, 36, 37, 878, 108, 878, 
	84, 84, 84, 108, 108, 108, 482, 484, 
	485, 84, 484, 485, 36, 36, 37, 879, 
	880, 108, 879, 880, 84, 84, 84, 108, 
	108, 108, 159, 486, 84, 486, 36, 36, 
	37, 881, 108, 881, 84, 84, 84, 108, 
	108, 108, 159, 487, 84, 487, 36, 36, 
	37, 882, 108, 882, 84, 84, 84, 108, 
	108, 108, 159, 488, 84, 488, 36, 36, 
	37, 883, 108, 883, 84, 84, 84, 108, 
	108, 108, 159, 489, 84, 489, 36, 36, 
	37, 884, 108, 884, 84, 84, 84, 108, 
	108, 108, 159, 491, 492, 493, 494, 495, 
	84, 491, 492, 493, 494, 495, 36, 36, 
	37, 885, 886, 887, 888, 889, 108, 885, 
	886, 887, 888, 889, 84, 84, 84, 108, 
	108, 108, 490, 496, 84, 496, 36, 36, 
	37, 890, 108, 890, 84, 84, 84, 108, 
	108, 108, 159, 497, 84, 497, 36, 36, 
	37, 891, 108, 891, 84, 84, 84, 108, 
	108, 108, 159, 498, 84, 498, 36, 36, 
	37, 892, 108, 892, 84, 84, 84, 108, 
	108, 108, 159, 499, 84, 499, 36, 36, 
	37, 893, 108, 893, 84, 84, 84, 108, 
	108, 108, 159, 500, 501, 84, 500, 501, 
	36, 36, 37, 894, 895, 108, 894, 895, 
	84, 84, 84, 108, 108, 108, 159, 503, 
	504, 84, 503, 504, 36, 36, 37, 896, 
	897, 108, 896, 897, 84, 84, 84, 108, 
	108, 108, 502, 506, 507, 508, 84, 506, 
	507, 508, 36, 36, 37, 898, 899, 900, 
	108, 898, 899, 900, 84, 84, 84, 108, 
	108, 108, 505, 510, 84, 36, 36, 37, 
	108, 84, 84, 84, 108, 108, 108, 509, 
	512, 84, 512, 36, 36, 37, 901, 108, 
	901, 84, 84, 84, 108, 108, 108, 511, 
	514, 84, 36, 36, 37, 108, 84, 84, 
	84, 108, 108, 108, 513, 516, 517, 518, 
	84, 516, 517, 518, 36, 36, 37, 902, 
	903, 904, 108, 902, 903, 904, 84, 84, 
	84, 108, 108, 108, 515, 520, 84, 36, 
	36, 37, 108, 84, 84, 84, 108, 108, 
	108, 519, 522, 84, 522, 36, 36, 37, 
	905, 108, 905, 84, 84, 84, 108, 108, 
	108, 521, 524, 84, 36, 36, 37, 108, 
	84, 84, 84, 108, 108, 108, 523, 525, 
	84, 525, 36, 36, 37, 906, 108, 906, 
	84, 84, 84, 108, 108, 108, 159, 526, 
	527, 528, 529, 530, 531, 532, 533, 534, 
	84, 526, 527, 528, 529, 530, 531, 532, 
	533, 534, 36, 36, 37, 907, 908, 909, 
	910, 911, 912, 913, 914, 915, 108, 907, 
	908, 909, 910, 911, 912, 913, 914, 915, 
	84, 84, 84, 108, 108, 108, 159, 535, 
	84, 535, 36, 36, 37, 916, 108, 916, 
	84, 84, 84, 108, 108, 108, 159, 536, 
	84, 536, 36, 36, 37, 917, 108, 917, 
	84, 84, 84, 108, 108, 108, 159, 538, 
	84, 36, 36, 37, 108, 84, 84, 84, 
	108, 108, 108, 537, 539, 540, 84, 539, 
	540, 36, 36, 37, 918, 919, 108, 918, 
	919, 84, 84, 84, 108, 108, 108, 159, 
	541, 84, 541, 36, 36, 37, 920, 108, 
	920, 84, 84, 84, 108, 108, 108, 159, 
	542, 84, 542, 36, 36, 37, 921, 108, 
	921, 84, 84, 84, 108, 108, 108, 159, 
	543, 84, 543, 36, 36, 37, 922, 108, 
	922, 84, 84, 84, 108, 108, 108, 159, 
	544, 84, 544, 36, 36, 37, 923, 108, 
	923, 84, 84, 84, 108, 108, 108, 159, 
	546, 547, 84, 546, 547, 36, 36, 37, 
	924, 925, 108, 924, 925, 84, 84, 84, 
	108, 108, 108, 545, 548, 84, 548, 36, 
	36, 37, 926, 108, 926, 84, 84, 84, 
	108, 108, 108, 159, 549, 84, 549, 36, 
	36, 37, 927, 108, 927, 84, 84, 84, 
	108, 108, 108, 159, 550, 84, 550, 36, 
	36, 37, 928, 108, 928, 84, 84, 84, 
	108, 108, 108, 159, 551, 552, 553, 554, 
	84, 551, 552, 553, 554, 36, 36, 37, 
	929, 930, 931, 932, 108, 929, 930, 931, 
	932, 84, 84, 84, 108, 108, 108, 159, 
	555, 556, 84, 555, 556, 36, 36, 37, 
	933, 934, 108, 933, 934, 84, 84, 84, 
	108, 108, 108, 159, 558, 559, 84, 558, 
	559, 36, 36, 37, 935, 936, 108, 935, 
	936, 84, 84, 84, 108, 108, 108, 557, 
	560, 84, 560, 36, 36, 37, 937, 108, 
	937, 84, 84, 84, 108, 108, 108, 159, 
	561, 84, 561, 36, 36, 37, 938, 108, 
	938, 84, 84, 84, 108, 108, 108, 159, 
	562, 84, 562, 36, 36, 37, 939, 108, 
	939, 84, 84, 84, 108, 108, 108, 159, 
	563, 84, 563, 36, 36, 37, 940, 108, 
	940, 84, 84, 84, 108, 108, 108, 159, 
	565, 84, 565, 36, 36, 37, 941, 108, 
	941, 84, 84, 84, 108, 108, 108, 564, 
	566, 84, 566, 36, 36, 37, 942, 108, 
	942, 84, 84, 84, 108, 108, 108, 159, 
	567, 84, 567, 36, 36, 37, 943, 108, 
	943, 84, 84, 84, 108, 108, 108, 159, 
	568, 84, 568, 36, 36, 37, 944, 108, 
	944, 84, 84, 84, 108, 108, 108, 159, 
	569, 84, 569, 36, 36, 37, 945, 108, 
	945, 84, 84, 84, 108, 108, 108, 159, 
	570, 84, 570, 36, 36, 37, 946, 108, 
	946, 84, 84, 84, 108, 108, 108, 159, 
	571, 84, 571, 36, 36, 37, 947, 108, 
	947, 84, 84, 84, 108, 108, 108, 159, 
	572, 84, 572, 36, 36, 37, 948, 108, 
	948, 84, 84, 84, 108, 108, 108, 159, 
	573, 574, 84, 573, 574, 36, 36, 37, 
	949, 950, 108, 949, 950, 84, 84, 84, 
	108, 108, 108, 159, 575, 84, 575, 36, 
	36, 37, 951, 108, 951, 84, 84, 84, 
	108, 108, 108, 159, 576, 84, 576, 36, 
	36, 37, 952, 108, 952, 84, 84, 84, 
	108, 108, 108, 159, 577, 84, 577, 36, 
	36, 37, 953, 108, 953, 84, 84, 84, 
	108, 108, 108, 159, 579, 84, 579, 36, 
	36, 37, 954, 108, 954, 84, 84, 84, 
	108, 108, 108, 578, 580, 84, 580, 36, 
	36, 37, 955, 108, 955, 84, 84, 84, 
	108, 108, 108, 159, 581, 582, 84, 581, 
	582, 36, 36, 37, 956, 957, 108, 956, 
	957, 84, 84, 84, 108, 108, 108, 159, 
	583, 584, 84, 583, 584, 36, 36, 37, 
	958, 959, 108, 958, 959, 84, 84, 84, 
	108, 108, 108, 159, 585, 84, 585, 36, 
	36, 37, 960, 108, 960, 84, 84, 84, 
	108, 108, 108, 159, 586, 84, 586, 36, 
	36, 37, 961, 108, 961, 84, 84, 84, 
	108, 108, 108, 159, 587, 84, 587, 36, 
	36, 37, 962, 108, 962, 84, 84, 84, 
	108, 108, 108, 159, 588, 84, 588, 36, 
	36, 37, 963, 108, 963, 84, 84, 84, 
	108, 108, 108, 159, 589, 84, 589, 36, 
	36, 37, 964, 108, 964, 84, 84, 84, 
	108, 108, 108, 159, 590, 84, 590, 36, 
	36, 37, 965, 108, 965, 84, 84, 84, 
	108, 108, 108, 159, 591, 592, 593, 594, 
	595, 84, 591, 592, 593, 594, 595, 36, 
	36, 37, 966, 967, 968, 969, 970, 108, 
	966, 967, 968, 969, 970, 84, 84, 84, 
	108, 108, 108, 159, 596, 84, 596, 36, 
	36, 37, 971, 108, 971, 84, 84, 84, 
	108, 108, 108, 159, 597, 84, 597, 36, 
	36, 37, 972, 108, 972, 84, 84, 84, 
	108, 108, 108, 159, 598, 84, 598, 36, 
	36, 37, 973, 108, 973, 84, 84, 84, 
	108, 108, 108, 159, 599, 84, 599, 36, 
	36, 37, 974, 108, 974, 84, 84, 84, 
	108, 108, 108, 159, 600, 84, 600, 36, 
	36, 37, 975, 108, 975, 84, 84, 84, 
	108, 108, 108, 159, 601, 84, 601, 36, 
	36, 37, 976, 108, 976, 84, 84, 84, 
	108, 108, 108, 159, 602, 84, 602, 36, 
	36, 37, 977, 108, 977, 84, 84, 84, 
	108, 108, 108, 159, 603, 84, 603, 36, 
	36, 37, 978, 108, 978, 84, 84, 84, 
	108, 108, 108, 159, 0
};
static const short _lexer_trans_targs[] = {
	21, 2, 21, 21, 3, 4, 6, 7, 
	9, 11, 14, 5, 21, 21, 8, 21, 
	10, 21, 12, 13, 21, 21, 15, 21, 
	16, 21, 21, 34, 21, 21, 21, 21, 
	21, 21, 19, 293, 20, 21, 21, 21, 
	22, 21, 21, 23, 24, 26, 21, 27, 
	21, 28, 21, 21, 21, 21, 0, 29, 
	30, 31, 21, 35, 36, 37, 38, 21, 
	24, 21, 21, 21, 21, 21, 39, 21, 
	21, 21, 40, 51, 59, 76, 97, 108, 
	114, 119, 123, 151, 41, 152, 177, 190, 
	197, 208, 225, 241, 269, 275, 41, 283, 
	41, 292, 294, 305, 313, 330, 351, 362, 
	368, 373, 377, 405, 295, 406, 431, 444, 
	451, 462, 479, 495, 523, 529, 295, 537, 
	295, 21, 21, 23, 1, 25, 21, 21, 
	21, 21, 21, 21, 21, 33, 17, 32, 
	21, 33, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 42, 43, 44, 45, 47, 48, 21, 
	41, 41, 41, 21, 21, 46, 41, 41, 
	49, 50, 41, 21, 21, 52, 53, 57, 
	21, 21, 54, 41, 55, 56, 41, 58, 
	41, 21, 21, 60, 67, 69, 72, 61, 
	62, 21, 63, 64, 65, 41, 66, 41, 
	68, 21, 21, 21, 70, 71, 41, 21, 
	41, 21, 41, 73, 74, 75, 41, 21, 
	21, 77, 78, 41, 94, 96, 41, 21, 
	21, 41, 79, 89, 90, 41, 41, 80, 
	84, 41, 41, 41, 86, 41, 81, 82, 
	83, 41, 85, 41, 87, 88, 41, 41, 
	91, 92, 93, 41, 95, 41, 18, 21, 
	21, 98, 99, 101, 104, 21, 41, 100, 
	41, 102, 103, 41, 21, 105, 41, 106, 
	107, 41, 21, 21, 109, 113, 110, 111, 
	21, 112, 41, 41, 115, 116, 117, 118, 
	41, 21, 21, 120, 122, 121, 41, 21, 
	21, 21, 124, 126, 132, 41, 133, 143, 
	144, 149, 150, 125, 41, 21, 127, 129, 
	128, 41, 130, 131, 41, 41, 21, 41, 
	134, 138, 139, 140, 21, 135, 136, 137, 
	41, 21, 41, 21, 41, 141, 142, 41, 
	41, 41, 21, 145, 147, 146, 41, 148, 
	41, 21, 41, 41, 21, 41, 41, 41, 
	41, 21, 21, 153, 167, 41, 169, 41, 
	21, 154, 157, 164, 21, 155, 156, 41, 
	21, 41, 41, 21, 158, 163, 41, 21, 
	159, 41, 160, 161, 162, 41, 41, 21, 
	165, 166, 41, 41, 168, 41, 170, 172, 
	174, 171, 41, 41, 173, 41, 41, 175, 
	176, 41, 41, 21, 178, 182, 183, 185, 
	189, 179, 180, 181, 41, 41, 184, 21, 
	41, 41, 41, 41, 41, 41, 41, 41, 
	186, 187, 188, 41, 41, 41, 191, 196, 
	41, 41, 41, 192, 193, 194, 195, 41, 
	41, 198, 199, 204, 21, 41, 200, 202, 
	201, 41, 21, 41, 203, 41, 21, 41, 
	205, 21, 41, 41, 206, 21, 207, 41, 
	21, 41, 209, 212, 218, 220, 210, 211, 
	41, 213, 214, 215, 216, 217, 41, 41, 
	21, 219, 21, 41, 221, 224, 222, 223, 
	41, 41, 21, 226, 230, 232, 236, 240, 
	227, 228, 229, 41, 41, 231, 21, 41, 
	41, 21, 233, 234, 41, 21, 21, 21, 
	235, 21, 21, 21, 237, 238, 41, 21, 
	21, 21, 239, 21, 21, 41, 242, 243, 
	245, 254, 41, 255, 256, 259, 264, 41, 
	244, 21, 21, 246, 250, 247, 248, 249, 
	41, 21, 251, 252, 41, 253, 41, 41, 
	41, 41, 41, 41, 41, 21, 41, 257, 
	258, 41, 260, 261, 21, 262, 263, 41, 
	265, 266, 267, 268, 41, 270, 272, 271, 
	41, 273, 21, 274, 41, 276, 277, 41, 
	41, 278, 279, 280, 281, 282, 41, 284, 
	286, 288, 289, 290, 285, 41, 287, 41, 
	41, 41, 291, 41, 21, 21, 296, 297, 
	298, 299, 301, 302, 295, 295, 295, 300, 
	295, 295, 303, 304, 295, 306, 307, 311, 
	308, 295, 309, 310, 295, 312, 295, 314, 
	321, 323, 326, 315, 316, 317, 318, 319, 
	295, 320, 295, 322, 324, 325, 295, 295, 
	295, 327, 328, 329, 295, 331, 332, 295, 
	348, 350, 295, 295, 333, 343, 344, 295, 
	295, 334, 338, 295, 295, 295, 340, 295, 
	335, 336, 337, 295, 339, 295, 341, 342, 
	295, 295, 345, 346, 347, 295, 349, 295, 
	352, 353, 355, 358, 295, 354, 295, 356, 
	357, 295, 359, 295, 360, 361, 295, 363, 
	367, 364, 365, 366, 295, 295, 369, 370, 
	371, 372, 295, 374, 376, 375, 295, 378, 
	380, 386, 295, 387, 397, 398, 403, 404, 
	379, 295, 381, 383, 382, 295, 384, 385, 
	295, 295, 295, 388, 392, 393, 394, 389, 
	390, 391, 295, 295, 295, 395, 396, 295, 
	295, 295, 399, 401, 400, 295, 402, 295, 
	295, 295, 295, 295, 295, 295, 407, 421, 
	295, 423, 295, 408, 411, 418, 409, 410, 
	295, 295, 295, 412, 417, 295, 413, 295, 
	414, 415, 416, 295, 295, 419, 420, 295, 
	295, 422, 295, 424, 426, 428, 425, 295, 
	295, 427, 295, 295, 429, 430, 295, 295, 
	432, 436, 437, 439, 443, 433, 434, 435, 
	295, 295, 438, 295, 295, 295, 295, 295, 
	295, 295, 295, 440, 441, 442, 295, 295, 
	295, 445, 450, 295, 295, 295, 446, 447, 
	448, 449, 295, 295, 452, 453, 458, 295, 
	454, 456, 455, 295, 295, 457, 295, 295, 
	459, 295, 295, 460, 461, 295, 295, 463, 
	466, 472, 474, 464, 465, 295, 467, 468, 
	469, 470, 471, 295, 295, 473, 295, 475, 
	478, 476, 477, 295, 295, 480, 484, 486, 
	490, 494, 481, 482, 483, 295, 295, 485, 
	295, 295, 487, 488, 295, 489, 491, 492, 
	295, 493, 295, 496, 497, 499, 508, 295, 
	509, 510, 513, 518, 295, 498, 500, 504, 
	501, 502, 503, 295, 505, 506, 295, 507, 
	295, 295, 295, 295, 295, 295, 295, 295, 
	511, 512, 295, 514, 515, 516, 517, 295, 
	519, 520, 521, 522, 295, 524, 526, 525, 
	295, 527, 528, 295, 530, 531, 295, 295, 
	532, 533, 534, 535, 536, 295, 538, 540, 
	542, 543, 544, 539, 295, 541, 295, 295, 
	295, 545, 295
};
static const short _lexer_trans_actions[] = {
	291, 0, 123, 283, 0, 0, 0, 0, 
	0, 0, 0, 0, 83, 95, 0, 85, 
	0, 91, 0, 0, 87, 89, 0, 93, 
	0, 121, 289, 0, 287, 97, 101, 103, 
	99, 285, 0, 0, 0, 119, 117, 7, 
	0, 127, 9, 923, 296, 0, 125, 5, 
	13, 0, 15, 17, 19, 23, 0, 911, 
	911, 911, 25, 0, 0, 0, 0, 41, 
	923, 43, 129, 45, 47, 51, 0, 55, 
	57, 21, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 908, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 332, 0, 
	302, 5, 362, 335, 308, 338, 341, 365, 
	908, 344, 368, 908, 908, 353, 320, 908, 
	908, 317, 374, 908, 908, 908, 332, 908, 
	302, 131, 33, 914, 0, 0, 281, 133, 
	11, 135, 137, 49, 275, 917, 0, 917, 
	279, 920, 277, 269, 141, 27, 29, 31, 
	143, 35, 145, 39, 37, 147, 53, 167, 
	71, 0, 0, 0, 0, 0, 0, 271, 
	410, 515, 518, 185, 81, 0, 833, 521, 
	0, 0, 293, 157, 59, 0, 0, 0, 
	175, 75, 0, 524, 0, 0, 416, 0, 
	836, 149, 61, 0, 0, 0, 0, 0, 
	0, 193, 0, 0, 0, 896, 0, 899, 
	0, 195, 105, 197, 0, 0, 548, 199, 
	539, 201, 545, 0, 0, 0, 419, 159, 
	63, 0, 0, 557, 0, 5, 551, 177, 
	77, 554, 0, 0, 0, 422, 425, 0, 
	0, 434, 437, 440, 0, 446, 0, 0, 
	0, 428, 0, 431, 0, 0, 443, 413, 
	0, 0, 0, 449, 0, 560, 0, 161, 
	65, 0, 0, 0, 0, 203, 377, 0, 
	452, 0, 0, 455, 205, 0, 569, 0, 
	0, 458, 169, 73, 0, 0, 0, 0, 
	257, 0, 752, 902, 0, 0, 0, 0, 
	461, 163, 67, 0, 0, 0, 572, 179, 
	79, 171, 0, 0, 0, 575, 0, 0, 
	0, 0, 0, 0, 839, 191, 0, 0, 
	0, 467, 0, 0, 470, 371, 207, 803, 
	0, 0, 0, 0, 209, 0, 0, 0, 
	473, 211, 587, 213, 593, 0, 0, 905, 
	842, 845, 187, 0, 0, 0, 848, 0, 
	851, 181, 347, 356, 183, 350, 359, 596, 
	599, 165, 69, 0, 0, 326, 0, 323, 
	215, 0, 0, 0, 217, 0, 0, 737, 
	219, 740, 854, 221, 0, 0, 731, 223, 
	0, 734, 0, 0, 0, 743, 857, 267, 
	0, 0, 746, 476, 0, 479, 0, 0, 
	0, 0, 863, 869, 0, 866, 872, 0, 
	0, 485, 482, 155, 0, 0, 0, 0, 
	0, 0, 0, 0, 755, 806, 0, 259, 
	779, 782, 785, 788, 791, 794, 797, 800, 
	0, 0, 0, 488, 875, 305, 0, 0, 
	329, 299, 617, 0, 0, 0, 0, 761, 
	620, 0, 0, 0, 225, 491, 0, 0, 
	0, 626, 261, 812, 0, 629, 263, 818, 
	0, 227, 821, 635, 0, 229, 0, 728, 
	153, 314, 0, 0, 0, 0, 0, 0, 
	494, 0, 0, 0, 0, 0, 767, 764, 
	151, 0, 231, 758, 0, 0, 0, 0, 
	497, 644, 173, 0, 0, 0, 0, 0, 
	0, 0, 0, 878, 647, 0, 233, 653, 
	656, 235, 0, 0, 671, 237, 107, 239, 
	0, 241, 109, 243, 0, 0, 686, 245, 
	111, 247, 0, 249, 113, 689, 0, 0, 
	0, 0, 398, 0, 0, 0, 0, 692, 
	0, 251, 115, 0, 0, 0, 0, 0, 
	500, 253, 0, 0, 770, 0, 881, 701, 
	707, 704, 824, 710, 713, 189, 716, 0, 
	0, 884, 0, 0, 255, 0, 0, 722, 
	0, 0, 0, 0, 887, 0, 0, 0, 
	773, 0, 265, 0, 830, 0, 0, 890, 
	893, 0, 0, 0, 0, 0, 503, 0, 
	0, 0, 0, 0, 0, 506, 0, 509, 
	719, 407, 0, 512, 139, 273, 908, 908, 
	395, 908, 908, 908, 410, 515, 518, 908, 
	833, 521, 908, 908, 293, 380, 908, 908, 
	908, 524, 908, 908, 416, 908, 836, 908, 
	908, 533, 908, 908, 527, 908, 908, 908, 
	896, 908, 899, 530, 536, 542, 548, 539, 
	545, 908, 908, 908, 419, 908, 383, 557, 
	908, 908, 551, 554, 908, 908, 908, 422, 
	425, 908, 908, 434, 437, 440, 908, 446, 
	908, 908, 908, 428, 908, 431, 908, 908, 
	443, 413, 908, 908, 908, 449, 908, 560, 
	563, 908, 908, 566, 377, 908, 452, 908, 
	908, 455, 908, 569, 908, 908, 458, 908, 
	908, 908, 749, 908, 752, 902, 908, 908, 
	908, 908, 461, 908, 386, 908, 572, 908, 
	464, 908, 575, 578, 908, 401, 389, 392, 
	908, 839, 908, 908, 908, 467, 908, 908, 
	470, 371, 803, 581, 584, 590, 908, 908, 
	908, 908, 473, 587, 593, 908, 908, 905, 
	842, 845, 908, 908, 908, 848, 908, 851, 
	347, 356, 350, 359, 596, 599, 602, 908, 
	326, 908, 323, 605, 611, 860, 608, 908, 
	737, 740, 854, 614, 908, 731, 908, 734, 
	908, 908, 908, 743, 857, 908, 908, 746, 
	476, 908, 479, 908, 908, 908, 908, 863, 
	869, 908, 866, 872, 908, 908, 485, 482, 
	908, 908, 908, 908, 908, 908, 908, 908, 
	755, 806, 776, 779, 782, 785, 788, 791, 
	794, 797, 800, 908, 908, 908, 488, 875, 
	305, 908, 908, 329, 299, 617, 908, 908, 
	908, 908, 761, 620, 623, 908, 908, 491, 
	908, 908, 809, 626, 812, 815, 629, 818, 
	632, 821, 635, 638, 908, 728, 314, 908, 
	908, 311, 908, 908, 908, 494, 908, 908, 
	908, 908, 908, 767, 764, 641, 758, 908, 
	908, 908, 908, 497, 644, 908, 908, 659, 
	674, 908, 908, 908, 908, 878, 647, 650, 
	653, 656, 662, 665, 671, 668, 677, 680, 
	686, 683, 689, 908, 908, 908, 908, 398, 
	908, 404, 908, 908, 692, 695, 908, 698, 
	908, 908, 908, 500, 908, 908, 770, 908, 
	881, 701, 707, 704, 824, 710, 713, 716, 
	908, 908, 884, 908, 725, 908, 908, 722, 
	908, 908, 908, 908, 887, 908, 908, 908, 
	773, 827, 908, 830, 908, 908, 890, 893, 
	908, 908, 908, 908, 908, 503, 908, 908, 
	908, 908, 908, 908, 506, 908, 509, 719, 
	407, 908, 512
};
static const short _lexer_to_state_actions[] = {
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 1, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0
};
static const short _lexer_from_state_actions[] = {
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 3, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0
};
static const short _lexer_eof_trans[] = {
	0, 1, 1, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	1, 27, 29, 34, 1, 0, 122, 1, 
	1, 127, 128, 130, 131, 133, 133, 133, 
	137, 1, 139, 140, 141, 145, 147, 150, 
	152, 1, 160, 160, 164, 160, 160, 160, 
	160, 160, 160, 172, 177, 160, 160, 160, 
	160, 160, 160, 186, 160, 160, 194, 160, 
	160, 160, 160, 160, 202, 204, 208, 210, 
	160, 160, 160, 160, 216, 160, 224, 160, 
	160, 160, 160, 160, 160, 160, 160, 160, 
	160, 160, 160, 160, 160, 160, 160, 160, 
	160, 256, 262, 160, 160, 160, 160, 160, 
	269, 160, 160, 160, 275, 160, 160, 281, 
	160, 160, 160, 160, 160, 160, 160, 290, 
	160, 160, 296, 298, 160, 160, 310, 160, 
	160, 160, 160, 160, 160, 319, 325, 160, 
	160, 160, 330, 332, 160, 160, 160, 160, 
	339, 160, 160, 160, 160, 346, 349, 160, 
	354, 361, 365, 369, 160, 372, 376, 160, 
	160, 160, 160, 160, 384, 160, 160, 160, 
	160, 160, 160, 160, 160, 160, 160, 160, 
	160, 404, 160, 160, 160, 160, 160, 160, 
	416, 160, 160, 160, 160, 160, 160, 160, 
	160, 160, 160, 160, 160, 160, 445, 160, 
	160, 451, 160, 455, 160, 458, 462, 160, 
	465, 160, 160, 160, 160, 160, 160, 160, 
	160, 160, 481, 483, 160, 160, 160, 160, 
	160, 491, 160, 160, 160, 160, 160, 503, 
	506, 510, 512, 514, 516, 520, 522, 524, 
	160, 160, 160, 160, 538, 160, 160, 160, 
	160, 160, 546, 160, 160, 160, 160, 160, 
	558, 160, 160, 160, 160, 565, 160, 160, 
	160, 160, 160, 160, 160, 160, 160, 160, 
	160, 579, 160, 160, 160, 160, 160, 160, 
	160, 160, 160, 160, 160, 160, 160, 160, 
	160, 160, 160, 160, 605, 606, 152, 1, 
	160, 160, 164, 160, 160, 160, 160, 160, 
	160, 172, 177, 160, 160, 160, 160, 160, 
	160, 186, 160, 160, 194, 160, 160, 160, 
	160, 160, 202, 204, 208, 210, 160, 160, 
	160, 160, 216, 160, 224, 160, 160, 160, 
	160, 160, 160, 160, 160, 160, 160, 160, 
	160, 160, 160, 160, 160, 160, 160, 256, 
	262, 160, 160, 160, 160, 160, 269, 160, 
	160, 160, 275, 160, 160, 281, 160, 160, 
	160, 160, 160, 160, 160, 290, 160, 160, 
	296, 298, 160, 160, 310, 160, 160, 160, 
	160, 160, 160, 319, 325, 160, 160, 160, 
	330, 332, 160, 160, 160, 160, 339, 160, 
	160, 160, 160, 346, 349, 160, 354, 361, 
	365, 369, 160, 372, 376, 160, 160, 160, 
	160, 160, 384, 160, 160, 160, 160, 160, 
	160, 160, 160, 160, 160, 160, 160, 404, 
	160, 160, 160, 160, 160, 160, 416, 160, 
	160, 160, 160, 160, 160, 160, 160, 160, 
	160, 160, 160, 160, 445, 160, 160, 451, 
	160, 455, 160, 458, 462, 160, 465, 160, 
	160, 160, 160, 160, 160, 160, 160, 160, 
	481, 483, 160, 160, 160, 160, 160, 491, 
	160, 160, 160, 160, 160, 503, 506, 510, 
	512, 514, 516, 520, 522, 524, 160, 160, 
	160, 160, 538, 160, 160, 160, 160, 160, 
	546, 160, 160, 160, 160, 160, 558, 160, 
	160, 160, 160, 565, 160, 160, 160, 160, 
	160, 160, 160, 160, 160, 160, 160, 579, 
	160, 160, 160, 160, 160, 160, 160, 160, 
	160, 160, 160, 160, 160, 160, 160, 160, 
	160, 160
};
static const int lexer_start = 21;
static const int lexer_error = 0;
static const int lexer_en_main = 21;
static void set_scan_buf( char *text, Bool _at_bol )
{
 str_set( input_buf, text );
 p = str_data(input_buf);
 at_bol = _at_bol;
 pe = str_data(input_buf) + str_len(input_buf);
 eof = pe;
	{
	cs = lexer_start;
	ts = 0;
	te = 0;
	act = 0;
	}
}
static tokid_t _scan_get( void )
{
	{
	int _klen;
	unsigned int _trans;
	short _widec;
	const short *_acts;
	unsigned int _nacts;
	const short *_keys;
	if ( p == pe )
		goto _test_eof;
	if ( cs == 0 )
		goto _out;
_resume:
	_acts = _lexer_actions + _lexer_from_state_actions[cs];
	_nacts = (unsigned int) *_acts++;
	while ( _nacts-- > 0 ) {
		switch ( *_acts++ ) {
	case 1:
	{ts = p;}
	break;
		}
	}
	_widec = (*p);
	_klen = _lexer_cond_lengths[cs];
	_keys = _lexer_cond_keys + (_lexer_cond_offsets[cs]*2);
	if ( _klen > 0 ) {
		const short *_lower = _keys;
		const short *_mid;
		const short *_upper = _keys + (_klen<<1) - 2;
		while (1) {
			if ( _upper < _lower )
				break;
			_mid = _lower + (((_upper-_lower) >> 1) & ~1);
			if ( _widec < _mid[0] )
				_upper = _mid - 2;
			else if ( _widec > _mid[1] )
				_lower = _mid + 2;
			else {
				switch ( _lexer_cond_spaces[_lexer_cond_offsets[cs] + ((_mid - _keys)>>1)] ) {
	case 0: {
		_widec = (short)(128 + ((*p) - -128));
		if ( 
 at_bol  ) _widec += 256;
		break;
	}
				}
				break;
			}
		}
	}
	_keys = _lexer_trans_keys + _lexer_key_offsets[cs];
	_trans = _lexer_index_offsets[cs];
	_klen = _lexer_single_lengths[cs];
	if ( _klen > 0 ) {
		const short *_lower = _keys;
		const short *_mid;
		const short *_upper = _keys + _klen - 1;
		while (1) {
			if ( _upper < _lower )
				break;
			_mid = _lower + ((_upper-_lower) >> 1);
			if ( _widec < *_mid )
				_upper = _mid - 1;
			else if ( _widec > *_mid )
				_lower = _mid + 1;
			else {
				_trans += (unsigned int)(_mid - _keys);
				goto _match;
			}
		}
		_keys += _klen;
		_trans += _klen;
	}
	_klen = _lexer_range_lengths[cs];
	if ( _klen > 0 ) {
		const short *_lower = _keys;
		const short *_mid;
		const short *_upper = _keys + (_klen<<1) - 2;
		while (1) {
			if ( _upper < _lower )
				break;
			_mid = _lower + (((_upper-_lower) >> 1) & ~1);
			if ( _widec < _mid[0] )
				_upper = _mid - 2;
			else if ( _widec > _mid[1] )
				_lower = _mid + 2;
			else {
				_trans += (unsigned int)((_mid - _keys)>>1);
				goto _match;
			}
		}
		_trans += _klen;
	}
_match:
	_trans = _lexer_indicies[_trans];
_eof_trans:
	cs = _lexer_trans_targs[_trans];
	if ( _lexer_trans_actions[_trans] == 0 )
		goto _again;
	_acts = _lexer_actions + _lexer_trans_actions[_trans];
	_nacts = (unsigned int) *_acts++;
	while ( _nacts-- > 0 )
	{
		switch ( *_acts++ )
		{
	case 2:
	{te = p+1;}
	break;
	case 3:
	{act = 1;}
	break;
	case 4:
	{act = 5;}
	break;
	case 5:
	{act = 37;}
	break;
	case 6:
	{act = 38;}
	break;
	case 7:
	{act = 39;}
	break;
	case 8:
	{act = 40;}
	break;
	case 9:
	{act = 41;}
	break;
	case 10:
	{act = 42;}
	break;
	case 11:
	{act = 43;}
	break;
	case 12:
	{act = 44;}
	break;
	case 13:
	{act = 45;}
	break;
	case 14:
	{act = 46;}
	break;
	case 15:
	{act = 47;}
	break;
	case 16:
	{act = 48;}
	break;
	case 17:
	{act = 49;}
	break;
	case 18:
	{act = 50;}
	break;
	case 19:
	{act = 51;}
	break;
	case 20:
	{act = 52;}
	break;
	case 21:
	{act = 53;}
	break;
	case 22:
	{act = 54;}
	break;
	case 23:
	{act = 55;}
	break;
	case 24:
	{act = 56;}
	break;
	case 25:
	{act = 57;}
	break;
	case 26:
	{act = 58;}
	break;
	case 27:
	{act = 59;}
	break;
	case 28:
	{act = 60;}
	break;
	case 29:
	{act = 61;}
	break;
	case 30:
	{act = 62;}
	break;
	case 31:
	{act = 63;}
	break;
	case 32:
	{act = 64;}
	break;
	case 33:
	{act = 65;}
	break;
	case 34:
	{act = 66;}
	break;
	case 35:
	{act = 67;}
	break;
	case 36:
	{act = 68;}
	break;
	case 37:
	{act = 69;}
	break;
	case 38:
	{act = 70;}
	break;
	case 39:
	{act = 71;}
	break;
	case 40:
	{act = 72;}
	break;
	case 41:
	{act = 73;}
	break;
	case 42:
	{act = 93;}
	break;
	case 43:
	{act = 94;}
	break;
	case 44:
	{act = 95;}
	break;
	case 45:
	{act = 96;}
	break;
	case 46:
	{act = 97;}
	break;
	case 47:
	{act = 98;}
	break;
	case 48:
	{act = 99;}
	break;
	case 49:
	{act = 100;}
	break;
	case 50:
	{act = 101;}
	break;
	case 51:
	{act = 102;}
	break;
	case 52:
	{act = 103;}
	break;
	case 53:
	{act = 104;}
	break;
	case 54:
	{act = 105;}
	break;
	case 55:
	{act = 106;}
	break;
	case 56:
	{act = 107;}
	break;
	case 57:
	{act = 108;}
	break;
	case 58:
	{act = 109;}
	break;
	case 59:
	{act = 110;}
	break;
	case 60:
	{act = 111;}
	break;
	case 61:
	{act = 112;}
	break;
	case 62:
	{act = 113;}
	break;
	case 63:
	{act = 114;}
	break;
	case 64:
	{act = 115;}
	break;
	case 65:
	{act = 116;}
	break;
	case 66:
	{act = 117;}
	break;
	case 67:
	{act = 118;}
	break;
	case 68:
	{act = 119;}
	break;
	case 69:
	{act = 120;}
	break;
	case 70:
	{act = 121;}
	break;
	case 71:
	{act = 122;}
	break;
	case 72:
	{act = 123;}
	break;
	case 73:
	{act = 124;}
	break;
	case 74:
	{act = 125;}
	break;
	case 75:
	{act = 126;}
	break;
	case 76:
	{act = 127;}
	break;
	case 77:
	{act = 132;}
	break;
	case 78:
	{act = 133;}
	break;
	case 79:
	{act = 134;}
	break;
	case 80:
	{act = 135;}
	break;
	case 81:
	{act = 136;}
	break;
	case 82:
	{act = 137;}
	break;
	case 83:
	{act = 139;}
	break;
	case 84:
	{act = 140;}
	break;
	case 85:
	{act = 141;}
	break;
	case 86:
	{act = 142;}
	break;
	case 87:
	{act = 143;}
	break;
	case 88:
	{act = 144;}
	break;
	case 89:
	{act = 145;}
	break;
	case 90:
	{act = 146;}
	break;
	case 91:
	{act = 147;}
	break;
	case 92:
	{act = 148;}
	break;
	case 93:
	{act = 149;}
	break;
	case 94:
	{act = 150;}
	break;
	case 95:
	{act = 151;}
	break;
	case 96:
	{act = 152;}
	break;
	case 97:
	{act = 153;}
	break;
	case 98:
	{act = 154;}
	break;
	case 99:
	{act = 155;}
	break;
	case 100:
	{act = 156;}
	break;
	case 101:
	{act = 157;}
	break;
	case 102:
	{act = 158;}
	break;
	case 103:
	{act = 159;}
	break;
	case 104:
	{act = 160;}
	break;
	case 105:
	{act = 161;}
	break;
	case 106:
	{act = 162;}
	break;
	case 107:
	{act = 163;}
	break;
	case 108:
	{act = 164;}
	break;
	case 109:
	{act = 165;}
	break;
	case 110:
	{act = 166;}
	break;
	case 111:
	{act = 167;}
	break;
	case 112:
	{act = 168;}
	break;
	case 113:
	{act = 169;}
	break;
	case 114:
	{act = 170;}
	break;
	case 115:
	{act = 171;}
	break;
	case 116:
	{act = 172;}
	break;
	case 117:
	{act = 173;}
	break;
	case 118:
	{act = 174;}
	break;
	case 119:
	{act = 175;}
	break;
	case 120:
	{act = 176;}
	break;
	case 121:
	{act = 177;}
	break;
	case 122:
	{act = 178;}
	break;
	case 123:
	{act = 179;}
	break;
	case 124:
	{act = 180;}
	break;
	case 125:
	{act = 181;}
	break;
	case 126:
	{act = 182;}
	break;
	case 127:
	{act = 184;}
	break;
	case 128:
	{act = 185;}
	break;
	case 129:
	{act = 187;}
	break;
	case 130:
	{act = 188;}
	break;
	case 131:
	{act = 189;}
	break;
	case 132:
	{act = 191;}
	break;
	case 133:
	{act = 192;}
	break;
	case 134:
	{act = 194;}
	break;
	case 135:
	{act = 195;}
	break;
	case 136:
	{act = 196;}
	break;
	case 137:
	{act = 197;}
	break;
	case 138:
	{act = 199;}
	break;
	case 139:
	{act = 200;}
	break;
	case 140:
	{act = 201;}
	break;
	case 141:
	{act = 202;}
	break;
	case 142:
	{act = 203;}
	break;
	case 143:
	{act = 204;}
	break;
	case 144:
	{act = 205;}
	break;
	case 145:
	{act = 206;}
	break;
	case 146:
	{act = 207;}
	break;
	case 147:
	{act = 208;}
	break;
	case 148:
	{act = 209;}
	break;
	case 149:
	{act = 210;}
	break;
	case 150:
	{act = 211;}
	break;
	case 151:
	{act = 212;}
	break;
	case 152:
	{act = 213;}
	break;
	case 153:
	{act = 214;}
	break;
	case 154:
	{act = 215;}
	break;
	case 155:
	{act = 216;}
	break;
	case 156:
	{act = 217;}
	break;
	case 157:
	{act = 218;}
	break;
	case 158:
	{act = 219;}
	break;
	case 159:
	{act = 220;}
	break;
	case 160:
	{act = 221;}
	break;
	case 161:
	{act = 222;}
	break;
	case 162:
	{act = 223;}
	break;
	case 163:
	{act = 224;}
	break;
	case 164:
	{act = 225;}
	break;
	case 165:
	{act = 226;}
	break;
	case 166:
	{act = 227;}
	break;
	case 167:
	{act = 228;}
	break;
	case 168:
	{act = 229;}
	break;
	case 169:
	{act = 230;}
	break;
	case 170:
	{act = 231;}
	break;
	case 171:
	{act = 232;}
	break;
	case 172:
	{act = 233;}
	break;
	case 173:
	{act = 234;}
	break;
	case 174:
	{act = 235;}
	break;
	case 175:
	{act = 236;}
	break;
	case 176:
	{act = 237;}
	break;
	case 177:
	{act = 238;}
	break;
	case 178:
	{act = 239;}
	break;
	case 179:
	{act = 240;}
	break;
	case 180:
	{act = 241;}
	break;
	case 181:
	{act = 242;}
	break;
	case 182:
	{act = 243;}
	break;
	case 183:
	{act = 244;}
	break;
	case 184:
	{act = 245;}
	break;
	case 185:
	{act = 246;}
	break;
	case 186:
	{act = 247;}
	break;
	case 187:
	{act = 248;}
	break;
	case 188:
	{act = 249;}
	break;
	case 189:
	{act = 250;}
	break;
	case 190:
	{act = 251;}
	break;
	case 191:
	{act = 252;}
	break;
	case 192:
	{act = 253;}
	break;
	case 193:
	{act = 254;}
	break;
	case 194:
	{act = 255;}
	break;
	case 195:
	{act = 256;}
	break;
	case 196:
	{act = 257;}
	break;
	case 197:
	{act = 258;}
	break;
	case 198:
	{act = 259;}
	break;
	case 199:
	{act = 260;}
	break;
	case 200:
	{act = 261;}
	break;
	case 201:
	{act = 262;}
	break;
	case 202:
	{act = 263;}
	break;
	case 203:
	{act = 264;}
	break;
	case 204:
	{act = 265;}
	break;
	case 205:
	{act = 266;}
	break;
	case 206:
	{act = 267;}
	break;
	case 207:
	{act = 268;}
	break;
	case 208:
	{act = 271;}
	break;
	case 209:
	{act = 273;}
	break;
	case 210:
	{act = 275;}
	break;
	case 211:
	{act = 277;}
	break;
	case 212:
	{act = 279;}
	break;
	case 213:
	{act = 283;}
	break;
	case 214:
	{te = p+1;{
	sym.tok = TK_NEWLINE;
	;
	{p++; goto _out; }
}}
	break;
	case 215:
	{te = p+1;{
	sym.tok = TK_CONST_EXPR;
	;
	{p++; goto _out; }
}}
	break;
	case 216:
	{te = p+1;{
	sym.tok = TK_LOG_AND;
	;
	{p++; goto _out; }
}}
	break;
	case 217:
	{te = p+1;{
	sym.tok = TK_RPAREN;
	;
	{p++; goto _out; }
}}
	break;
	case 218:
	{te = p+1;{
	sym.tok = TK_PLUS;
	;
	{p++; goto _out; }
}}
	break;
	case 219:
	{te = p+1;{
	sym.tok = TK_COMMA;
	;
	{p++; goto _out; }
}}
	break;
	case 220:
	{te = p+1;{
	sym.tok = TK_MINUS;
	;
	{p++; goto _out; }
}}
	break;
	case 221:
	{te = p+1;{
	sym.tok = TK_DOT;
	;
	{p++; goto _out; }
}}
	break;
	case 222:
	{te = p+1;{
	sym.tok = TK_DIVIDE;
	;
	{p++; goto _out; }
}}
	break;
	case 223:
	{te = p+1;{
	sym.tok = TK_COLON;
	;
	{p++; goto _out; }
}}
	break;
	case 224:
	{te = p+1;{
	sym.tok = TK_LEFT_SHIFT;
	;
	{p++; goto _out; }
}}
	break;
	case 225:
	{te = p+1;{
	sym.tok = TK_LESS_EQ;
	;
	{p++; goto _out; }
}}
	break;
	case 226:
	{te = p+1;{
	sym.tok = TK_NOT_EQ;
	;
	{p++; goto _out; }
}}
	break;
	case 227:
	{te = p+1;{
	sym.tok = TK_NOT_EQ;
	;
	{p++; goto _out; }
}}
	break;
	case 228:
	{te = p+1;{
	sym.tok = TK_EQUAL;
	;
	{p++; goto _out; }
}}
	break;
	case 229:
	{te = p+1;{
	sym.tok = TK_RIGHT_SHIFT;
	;
	{p++; goto _out; }
}}
	break;
	case 230:
	{te = p+1;{
	sym.tok = TK_GREATER_EQ;
	;
	{p++; goto _out; }
}}
	break;
	case 231:
	{te = p+1;{
	sym.tok = TK_QUESTION;
	;
	{p++; goto _out; }
}}
	break;
	case 232:
	{te = p+1;{
	sym.tok = TK_LSQUARE;
	;
	{p++; goto _out; }
}}
	break;
	case 233:
	{te = p+1;{
	sym.tok = TK_RSQUARE;
	;
	{p++; goto _out; }
}}
	break;
	case 234:
	{te = p+1;{
	sym.tok = TK_BIN_XOR;
	;
	{p++; goto _out; }
}}
	break;
	case 235:
	{te = p+1;{
	sym.tok = TK_POWER;
	;
	{p++; goto _out; }
}}
	break;
	case 236:
	{te = p+1;{
	sym.tok = TK_LCURLY;
	;
	{p++; goto _out; }
}}
	break;
	case 237:
	{te = p+1;{
	sym.tok = TK_LOG_OR;
	;
	{p++; goto _out; }
}}
	break;
	case 238:
	{te = p+1;{
	sym.tok = TK_RCURLY;
	;
	{p++; goto _out; }
}}
	break;
	case 239:
	{te = p+1;{
	sym.tok = TK_BIN_NOT;
	;
	{p++; goto _out; }
}}
	break;
	case 240:
	{te = p+1;{
	sym.tok = TK_B1;
	;
	{p++; goto _out; }
}}
	break;
	case 241:
	{te = p+1;{
	sym.tok = TK_C1;
	;
	{p++; goto _out; }
}}
	break;
	case 242:
	{te = p+1;{
	sym.tok = TK_D1;
	;
	{p++; goto _out; }
}}
	break;
	case 243:
	{te = p+1;{
	sym.tok = TK_E1;
	;
	{p++; goto _out; }
}}
	break;
	case 244:
	{te = p+1;{
	sym.tok = TK_H1;
	;
	{p++; goto _out; }
}}
	break;
	case 245:
	{te = p+1;{
	sym.tok = TK_L1;
	;
	{p++; goto _out; }
}}
	break;
	case 246:
	{te = p+1;{
	sym.tok = TK_A1;
	;
	{p++; goto _out; }
}}
	break;
	case 247:
	{te = p+1;{
	sym.tok = TK_F1;
	;
	{p++; goto _out; }
}}
	break;
	case 248:
	{te = p+1;{
	sym.tok = TK_BC1;
	;
	{p++; goto _out; }
}}
	break;
	case 249:
	{te = p+1;{
	sym.tok = TK_DE1;
	;
	{p++; goto _out; }
}}
	break;
	case 250:
	{te = p+1;{
	sym.tok = TK_HL1;
	;
	{p++; goto _out; }
}}
	break;
	case 251:
	{te = p+1;{
	sym.tok = TK_AF1;
	;
	{p++; goto _out; }
}}
	break;
	case 252:
	{te = p+1;{
	sym.tok = TK_IND_BC;
	p--; te--;
	{p++; goto _out; }
}}
	break;
	case 253:
	{te = p+1;{
	sym.tok = TK_IND_DE;
	p--; te--;
	{p++; goto _out; }
}}
	break;
	case 254:
	{te = p+1;{
	sym.tok = TK_IND_IX;
	p--; te--;
	{p++; goto _out; }
}}
	break;
	case 255:
	{te = p+1;{
	sym.tok = TK_IND_IY;
	p--; te--;
	{p++; goto _out; }
}}
	break;
	case 256:
	{te = p+1;{
	sym.tok = TK_IND_HL;
	p--; te--;
	{p++; goto _out; }
}}
	break;
	case 257:
	{te = p+1;{
	sym.tok = TK_IND_SP;
	p--; te--;
	{p++; goto _out; }
}}
	break;
	case 258:
	{te = p+1;{
	sym.tok = TK_IND_C;
	p--; te--;
	{p++; goto _out; }
}}
	break;
	case 259:
	{te = p+1;{
	sym.tok = TK_DS_B;
	;
	{p++; goto _out; }
}}
	break;
	case 260:
	{te = p+1;{
	sym.tok = TK_DS_W;
	;
	{p++; goto _out; }
}}
	break;
	case 261:
	{te = p+1;{
	sym.tok = TK_DS_P;
	;
	{p++; goto _out; }
}}
	break;
	case 262:
	{te = p+1;{
	sym.tok = TK_DS_Q;
	;
	{p++; goto _out; }
}}
	break;
	case 263:
	{te = p+1;{
	if (expect_opcode) {
		sym.tok = TK_CCF1;
		sym.tok_opcode = TK_CCF1;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_CCF1;
	}
	{p++; goto _out; }
}}
	break;
	case 264:
	{te = p+1;{
	if (expect_opcode) {
		sym.tok = TK_RLA1;
		sym.tok_opcode = TK_RLA1;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_RLA1;
	}
	{p++; goto _out; }
}}
	break;
	case 265:
	{te = p+1;{
	if (expect_opcode) {
		sym.tok = TK_RLCA1;
		sym.tok_opcode = TK_RLCA1;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_RLCA1;
	}
	{p++; goto _out; }
}}
	break;
	case 266:
	{te = p+1;{
	if (expect_opcode) {
		sym.tok = TK_RRA1;
		sym.tok_opcode = TK_RRA1;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_RRA1;
	}
	{p++; goto _out; }
}}
	break;
	case 267:
	{te = p+1;{
	if (expect_opcode) {
		sym.tok = TK_RRCA1;
		sym.tok_opcode = TK_RRCA1;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_RRCA1;
	}
	{p++; goto _out; }
}}
	break;
	case 268:
	{te = p+1;{
	if (expect_opcode) {
		sym.tok = TK_SCF1;
		sym.tok_opcode = TK_SCF1;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_SCF1;
	}
	{p++; goto _out; }
}}
	break;
	case 269:
	{te = p+1;}
	break;
	case 270:
	{te = p+1;{
  while ( ts[ 0] == '.' || isspace(ts[ 0]) ) ts++;
  while ( te[-1] == ':' || isspace(te[-1]) ) te--;
  sym.tok = TK_LABEL;
  {p++; goto _out; }
 }}
	break;
	case 271:
	{te = p+1;{
  sym.tok = TK_NUMBER;
  sym.number = scan_num( ts, te - ts - 1, 16 );
  ts = te = p;
  {p++; goto _out; }
 }}
	break;
	case 272:
	{te = p+1;{
  sym.tok = TK_NUMBER;
  sym.number = scan_num( ts + 2, te - ts - 3, 2 );
  ts = te = p;
  {p++; goto _out; }
 }}
	break;
	case 273:
	{te = p+1;{
  sym.tok = TK_NUMBER;
  sym.number = 0;
  if ( get_sym_string() )
  {
   STR_DEFINE(string, STR_SIZE);
   str_set_bytes(string, ts, te-ts);
   str_compress_escapes(string);
   if (str_len(string) == 1)
    sym.number = str_data(string)[0];
   else
    error_invalid_squoted_string();
   STR_DELETE(string);
  }
  else
  {
   error_invalid_squoted_string();
  }
  ts = te = p;
  {p++; goto _out; }
 }}
	break;
	case 274:
	{te = p+1;{
  sym.tok = TK_STRING;
  if ( ! get_sym_string() )
   error_unclosed_string();
  {p++; goto _out; }
 }}
	break;
	case 275:
	{te = p+1;{
  sym.tok = TK_NIL;
  skip_to_newline();
  ts = te = p;
  {p++; goto _out; }
 }}
	break;
	case 276:
	{te = p;p--;{
	sym.tok = TK_LOG_NOT;
	;
	{p++; goto _out; }
}}
	break;
	case 277:
	{te = p;p--;{
	sym.tok = TK_BIN_AND;
	;
	{p++; goto _out; }
}}
	break;
	case 278:
	{te = p;p--;{
	sym.tok = TK_LPAREN;
	;
	{p++; goto _out; }
}}
	break;
	case 279:
	{te = p;p--;{
	sym.tok = TK_MULTIPLY;
	;
	{p++; goto _out; }
}}
	break;
	case 280:
	{te = p;p--;{
	sym.tok = TK_DOT;
	;
	{p++; goto _out; }
}}
	break;
	case 281:
	{te = p;p--;{
	sym.tok = TK_LESS;
	;
	{p++; goto _out; }
}}
	break;
	case 282:
	{te = p;p--;{
	sym.tok = TK_EQUAL;
	;
	{p++; goto _out; }
}}
	break;
	case 283:
	{te = p;p--;{
	sym.tok = TK_GREATER;
	;
	{p++; goto _out; }
}}
	break;
	case 284:
	{te = p;p--;{
	sym.tok = TK_BIN_OR;
	;
	{p++; goto _out; }
}}
	break;
	case 285:
	{te = p;p--;{
	sym.tok = TK_C;
	;
	{p++; goto _out; }
}}
	break;
	case 286:
	{te = p;p--;{
	sym.tok = TK_PO;
	;
	{p++; goto _out; }
}}
	break;
	case 287:
	{te = p;p--;{
	sym.tok = TK_P;
	;
	{p++; goto _out; }
}}
	break;
	case 288:
	{te = p;p--;{
	sym.tok = TK_M;
	;
	{p++; goto _out; }
}}
	break;
	case 289:
	{te = p;p--;{
	sym.tok = TK_B;
	;
	{p++; goto _out; }
}}
	break;
	case 290:
	{te = p;p--;{
	sym.tok = TK_D;
	;
	{p++; goto _out; }
}}
	break;
	case 291:
	{te = p;p--;{
	sym.tok = TK_E;
	;
	{p++; goto _out; }
}}
	break;
	case 292:
	{te = p;p--;{
	sym.tok = TK_H;
	;
	{p++; goto _out; }
}}
	break;
	case 293:
	{te = p;p--;{
	sym.tok = TK_L;
	;
	{p++; goto _out; }
}}
	break;
	case 294:
	{te = p;p--;{
	sym.tok = TK_A;
	;
	{p++; goto _out; }
}}
	break;
	case 295:
	{te = p;p--;{
	sym.tok = TK_F;
	;
	{p++; goto _out; }
}}
	break;
	case 296:
	{te = p;p--;{
	sym.tok = TK_I;
	;
	{p++; goto _out; }
}}
	break;
	case 297:
	{te = p;p--;{
	sym.tok = TK_R;
	;
	{p++; goto _out; }
}}
	break;
	case 298:
	{te = p;p--;{
	sym.tok = TK_BC;
	;
	{p++; goto _out; }
}}
	break;
	case 299:
	{te = p;p--;{
	sym.tok = TK_DE;
	;
	{p++; goto _out; }
}}
	break;
	case 300:
	{te = p;p--;{
	sym.tok = TK_HL;
	;
	{p++; goto _out; }
}}
	break;
	case 301:
	{te = p;p--;{
	sym.tok = TK_IX;
	;
	{p++; goto _out; }
}}
	break;
	case 302:
	{te = p;p--;{
	sym.tok = TK_IY;
	;
	{p++; goto _out; }
}}
	break;
	case 303:
	{te = p;p--;{
	sym.tok = TK_AF;
	;
	{p++; goto _out; }
}}
	break;
	case 304:
	{te = p;p--;{
	sym.tok = TK_IP;
	;
	{p++; goto _out; }
}}
	break;
	case 305:
	{te = p;p--;{
	sym.tok = TK_SU;
	;
	{p++; goto _out; }
}}
	break;
	case 306:
	{te = p;p--;{
	if (expect_opcode) {
		sym.tok = TK_IF;
		sym.tok_opcode = TK_IF;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_IF;
	}
	{p++; goto _out; }
}}
	break;
	case 307:
	{te = p;p--;{
	if (expect_opcode) {
		sym.tok = TK_CALL;
		sym.tok_opcode = TK_CALL;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_CALL;
	}
	{p++; goto _out; }
}}
	break;
	case 308:
	{te = p;p--;{
	if (expect_opcode) {
		sym.tok = TK_CCF;
		sym.tok_opcode = TK_CCF;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_CCF;
	}
	{p++; goto _out; }
}}
	break;
	case 309:
	{te = p;p--;{
	if (expect_opcode) {
		sym.tok = TK_CP;
		sym.tok_opcode = TK_CP;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_CP;
	}
	{p++; goto _out; }
}}
	break;
	case 310:
	{te = p;p--;{
	if (expect_opcode) {
		sym.tok = TK_CPD;
		sym.tok_opcode = TK_CPD;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_CPD;
	}
	{p++; goto _out; }
}}
	break;
	case 311:
	{te = p;p--;{
	if (expect_opcode) {
		sym.tok = TK_CPI;
		sym.tok_opcode = TK_CPI;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_CPI;
	}
	{p++; goto _out; }
}}
	break;
	case 312:
	{te = p;p--;{
	if (expect_opcode) {
		sym.tok = TK_EI;
		sym.tok_opcode = TK_EI;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_EI;
	}
	{p++; goto _out; }
}}
	break;
	case 313:
	{te = p;p--;{
	if (expect_opcode) {
		sym.tok = TK_EX;
		sym.tok_opcode = TK_EX;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_EX;
	}
	{p++; goto _out; }
}}
	break;
	case 314:
	{te = p;p--;{
	if (expect_opcode) {
		sym.tok = TK_IN;
		sym.tok_opcode = TK_IN;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_IN;
	}
	{p++; goto _out; }
}}
	break;
	case 315:
	{te = p;p--;{
	if (expect_opcode) {
		sym.tok = TK_INC;
		sym.tok_opcode = TK_INC;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_INC;
	}
	{p++; goto _out; }
}}
	break;
	case 316:
	{te = p;p--;{
	if (expect_opcode) {
		sym.tok = TK_IND;
		sym.tok_opcode = TK_IND;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_IND;
	}
	{p++; goto _out; }
}}
	break;
	case 317:
	{te = p;p--;{
	if (expect_opcode) {
		sym.tok = TK_INI;
		sym.tok_opcode = TK_INI;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_INI;
	}
	{p++; goto _out; }
}}
	break;
	case 318:
	{te = p;p--;{
	if (expect_opcode) {
		sym.tok = TK_LD;
		sym.tok_opcode = TK_LD;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_LD;
	}
	{p++; goto _out; }
}}
	break;
	case 319:
	{te = p;p--;{
	if (expect_opcode) {
		sym.tok = TK_LDD;
		sym.tok_opcode = TK_LDD;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_LDD;
	}
	{p++; goto _out; }
}}
	break;
	case 320:
	{te = p;p--;{
	if (expect_opcode) {
		sym.tok = TK_LDDR;
		sym.tok_opcode = TK_LDDR;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_LDDR;
	}
	{p++; goto _out; }
}}
	break;
	case 321:
	{te = p;p--;{
	if (expect_opcode) {
		sym.tok = TK_LDI;
		sym.tok_opcode = TK_LDI;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_LDI;
	}
	{p++; goto _out; }
}}
	break;
	case 322:
	{te = p;p--;{
	if (expect_opcode) {
		sym.tok = TK_LDIR;
		sym.tok_opcode = TK_LDIR;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_LDIR;
	}
	{p++; goto _out; }
}}
	break;
	case 323:
	{te = p;p--;{
	if (expect_opcode) {
		sym.tok = TK_OR;
		sym.tok_opcode = TK_OR;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_OR;
	}
	{p++; goto _out; }
}}
	break;
	case 324:
	{te = p;p--;{
	if (expect_opcode) {
		sym.tok = TK_OUT;
		sym.tok_opcode = TK_OUT;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_OUT;
	}
	{p++; goto _out; }
}}
	break;
	case 325:
	{te = p;p--;{
	if (expect_opcode) {
		sym.tok = TK_OUTI;
		sym.tok_opcode = TK_OUTI;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_OUTI;
	}
	{p++; goto _out; }
}}
	break;
	case 326:
	{te = p;p--;{
	if (expect_opcode) {
		sym.tok = TK_POP;
		sym.tok_opcode = TK_POP;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_POP;
	}
	{p++; goto _out; }
}}
	break;
	case 327:
	{te = p;p--;{
	if (expect_opcode) {
		sym.tok = TK_RET;
		sym.tok_opcode = TK_RET;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_RET;
	}
	{p++; goto _out; }
}}
	break;
	case 328:
	{te = p;p--;{
	if (expect_opcode) {
		sym.tok = TK_RL;
		sym.tok_opcode = TK_RL;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_RL;
	}
	{p++; goto _out; }
}}
	break;
	case 329:
	{te = p;p--;{
	if (expect_opcode) {
		sym.tok = TK_RLA;
		sym.tok_opcode = TK_RLA;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_RLA;
	}
	{p++; goto _out; }
}}
	break;
	case 330:
	{te = p;p--;{
	if (expect_opcode) {
		sym.tok = TK_RLC;
		sym.tok_opcode = TK_RLC;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_RLC;
	}
	{p++; goto _out; }
}}
	break;
	case 331:
	{te = p;p--;{
	if (expect_opcode) {
		sym.tok = TK_RLCA;
		sym.tok_opcode = TK_RLCA;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_RLCA;
	}
	{p++; goto _out; }
}}
	break;
	case 332:
	{te = p;p--;{
	if (expect_opcode) {
		sym.tok = TK_RR;
		sym.tok_opcode = TK_RR;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_RR;
	}
	{p++; goto _out; }
}}
	break;
	case 333:
	{te = p;p--;{
	if (expect_opcode) {
		sym.tok = TK_RRA;
		sym.tok_opcode = TK_RRA;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_RRA;
	}
	{p++; goto _out; }
}}
	break;
	case 334:
	{te = p;p--;{
	if (expect_opcode) {
		sym.tok = TK_RRC;
		sym.tok_opcode = TK_RRC;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_RRC;
	}
	{p++; goto _out; }
}}
	break;
	case 335:
	{te = p;p--;{
	if (expect_opcode) {
		sym.tok = TK_RRCA;
		sym.tok_opcode = TK_RRCA;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_RRCA;
	}
	{p++; goto _out; }
}}
	break;
	case 336:
	{te = p;p--;{
	if (expect_opcode) {
		sym.tok = TK_SCF;
		sym.tok_opcode = TK_SCF;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_SCF;
	}
	{p++; goto _out; }
}}
	break;
	case 337:
	{te = p;p--;{
	if (expect_opcode) {
		sym.tok = TK_SET;
		sym.tok_opcode = TK_SET;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_SET;
	}
	{p++; goto _out; }
}}
	break;
	case 338:
	{te = p;p--;{
	if (expect_opcode) {
		sym.tok = TK_SWAP;
		sym.tok_opcode = TK_SWAP;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_SWAP;
	}
	{p++; goto _out; }
}}
	break;
	case 339:
	{te = p;p--;{
	if (expect_opcode) {
		sym.tok = TK_FILL;
		sym.tok_opcode = TK_FILL;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_FILL;
	}
	{p++; goto _out; }
}}
	break;
	case 340:
	{te = p;p--;{
	if (expect_opcode) {
		sym.tok = TK_MMU;
		sym.tok_opcode = TK_MMU;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_MMU;
	}
	{p++; goto _out; }
}}
	break;
	case 341:
	{te = p;p--;{
	if (expect_opcode) {
		sym.tok = TK_OTDM;
		sym.tok_opcode = TK_OTDM;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_OTDM;
	}
	{p++; goto _out; }
}}
	break;
	case 342:
	{te = p;p--;{
	if (expect_opcode) {
		sym.tok = TK_OTIM;
		sym.tok_opcode = TK_OTIM;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_OTIM;
	}
	{p++; goto _out; }
}}
	break;
	case 343:
	{te = p;p--;{
	if (expect_opcode) {
		sym.tok = TK_TST;
		sym.tok_opcode = TK_TST;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_TST;
	}
	{p++; goto _out; }
}}
	break;
	case 344:
	{te = p;p--;{
	if (expect_opcode) {
		sym.tok = TK_LDP;
		sym.tok_opcode = TK_LDP;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_LDP;
	}
	{p++; goto _out; }
}}
	break;
	case 345:
	{te = p;p--;}
	break;
	case 346:
	{te = p;p--;{
  sym.tok = TK_NAME;
  {p++; goto _out; }
 }}
	break;
	case 347:
	{te = p;p--;{
  while ( ts[ 0] == '.' || isspace(ts[ 0]) ) ts++;
  while ( te[-1] == ':' || isspace(te[-1]) ) te--;
  sym.tok = TK_LABEL;
  {p++; goto _out; }
 }}
	break;
	case 348:
	{te = p;p--;{
  sym.tok = TK_NUMBER;
  sym.number = scan_num( ts, te - ts, 10 );
  ts = te = p;
  {p++; goto _out; }
 }}
	break;
	case 349:
	{te = p;p--;{
  sym.tok = TK_NUMBER;
  sym.number = scan_num( ts + 2, te - ts - 2, 16 );
  ts = te = p;
  {p++; goto _out; }
 }}
	break;
	case 350:
	{te = p;p--;{
  sym.tok = TK_NUMBER;
  sym.number = scan_num( ts, te - ts - 1, 2 );
  ts = te = p;
  {p++; goto _out; }
 }}
	break;
	case 351:
	{te = p;p--;{
  sym.tok = TK_NUMBER;
  sym.number = scan_num( ts + 1, te - ts - 1, 2 );
  ts = te = p;
  {p++; goto _out; }
 }}
	break;
	case 352:
	{{p = ((te))-1;}{
	sym.tok = TK_LPAREN;
	;
	{p++; goto _out; }
}}
	break;
	case 353:
	{{p = ((te))-1;}{
	sym.tok = TK_DOT;
	;
	{p++; goto _out; }
}}
	break;
	case 354:
	{{p = ((te))-1;}{
  sym.tok = TK_NAME;
  {p++; goto _out; }
 }}
	break;
	case 355:
	{{p = ((te))-1;}{
  sym.tok = TK_NUMBER;
  sym.number = scan_num( ts, te - ts, 10 );
  ts = te = p;
  {p++; goto _out; }
 }}
	break;
	case 356:
	{	switch( act ) {
	case 1:
	{{p = ((te))-1;}
	sym.tok = TK_ASMPC;
	;
	{p++; goto _out; }
}
	break;
	case 5:
	{{p = ((te))-1;}
	sym.tok = TK_MOD;
	;
	{p++; goto _out; }
}
	break;
	case 37:
	{{p = ((te))-1;}
	sym.tok = TK_NZ;
	;
	{p++; goto _out; }
}
	break;
	case 38:
	{{p = ((te))-1;}
	sym.tok = TK_Z;
	;
	{p++; goto _out; }
}
	break;
	case 39:
	{{p = ((te))-1;}
	sym.tok = TK_NC;
	;
	{p++; goto _out; }
}
	break;
	case 40:
	{{p = ((te))-1;}
	sym.tok = TK_C;
	;
	{p++; goto _out; }
}
	break;
	case 41:
	{{p = ((te))-1;}
	sym.tok = TK_PO;
	;
	{p++; goto _out; }
}
	break;
	case 42:
	{{p = ((te))-1;}
	sym.tok = TK_PE;
	;
	{p++; goto _out; }
}
	break;
	case 43:
	{{p = ((te))-1;}
	sym.tok = TK_P;
	;
	{p++; goto _out; }
}
	break;
	case 44:
	{{p = ((te))-1;}
	sym.tok = TK_M;
	;
	{p++; goto _out; }
}
	break;
	case 45:
	{{p = ((te))-1;}
	sym.tok = TK_LZ;
	;
	{p++; goto _out; }
}
	break;
	case 46:
	{{p = ((te))-1;}
	sym.tok = TK_LO;
	;
	{p++; goto _out; }
}
	break;
	case 47:
	{{p = ((te))-1;}
	sym.tok = TK_NV;
	;
	{p++; goto _out; }
}
	break;
	case 48:
	{{p = ((te))-1;}
	sym.tok = TK_V;
	;
	{p++; goto _out; }
}
	break;
	case 49:
	{{p = ((te))-1;}
	sym.tok = TK_B;
	;
	{p++; goto _out; }
}
	break;
	case 50:
	{{p = ((te))-1;}
	sym.tok = TK_D;
	;
	{p++; goto _out; }
}
	break;
	case 51:
	{{p = ((te))-1;}
	sym.tok = TK_E;
	;
	{p++; goto _out; }
}
	break;
	case 52:
	{{p = ((te))-1;}
	sym.tok = TK_H;
	;
	{p++; goto _out; }
}
	break;
	case 53:
	{{p = ((te))-1;}
	sym.tok = TK_IXH;
	;
	{p++; goto _out; }
}
	break;
	case 54:
	{{p = ((te))-1;}
	sym.tok = TK_IYH;
	;
	{p++; goto _out; }
}
	break;
	case 55:
	{{p = ((te))-1;}
	sym.tok = TK_L;
	;
	{p++; goto _out; }
}
	break;
	case 56:
	{{p = ((te))-1;}
	sym.tok = TK_IXL;
	;
	{p++; goto _out; }
}
	break;
	case 57:
	{{p = ((te))-1;}
	sym.tok = TK_IYL;
	;
	{p++; goto _out; }
}
	break;
	case 58:
	{{p = ((te))-1;}
	sym.tok = TK_A;
	;
	{p++; goto _out; }
}
	break;
	case 59:
	{{p = ((te))-1;}
	sym.tok = TK_F;
	;
	{p++; goto _out; }
}
	break;
	case 60:
	{{p = ((te))-1;}
	sym.tok = TK_I;
	;
	{p++; goto _out; }
}
	break;
	case 61:
	{{p = ((te))-1;}
	sym.tok = TK_IIR;
	;
	{p++; goto _out; }
}
	break;
	case 62:
	{{p = ((te))-1;}
	sym.tok = TK_R;
	;
	{p++; goto _out; }
}
	break;
	case 63:
	{{p = ((te))-1;}
	sym.tok = TK_EIR;
	;
	{p++; goto _out; }
}
	break;
	case 64:
	{{p = ((te))-1;}
	sym.tok = TK_BC;
	;
	{p++; goto _out; }
}
	break;
	case 65:
	{{p = ((te))-1;}
	sym.tok = TK_DE;
	;
	{p++; goto _out; }
}
	break;
	case 66:
	{{p = ((te))-1;}
	sym.tok = TK_HL;
	;
	{p++; goto _out; }
}
	break;
	case 67:
	{{p = ((te))-1;}
	sym.tok = TK_IX;
	;
	{p++; goto _out; }
}
	break;
	case 68:
	{{p = ((te))-1;}
	sym.tok = TK_IY;
	;
	{p++; goto _out; }
}
	break;
	case 69:
	{{p = ((te))-1;}
	sym.tok = TK_AF;
	;
	{p++; goto _out; }
}
	break;
	case 70:
	{{p = ((te))-1;}
	sym.tok = TK_SP;
	;
	{p++; goto _out; }
}
	break;
	case 71:
	{{p = ((te))-1;}
	sym.tok = TK_IP;
	;
	{p++; goto _out; }
}
	break;
	case 72:
	{{p = ((te))-1;}
	sym.tok = TK_SU;
	;
	{p++; goto _out; }
}
	break;
	case 73:
	{{p = ((te))-1;}
	sym.tok = TK_XPC;
	;
	{p++; goto _out; }
}
	break;
	case 93:
	{{p = ((te))-1;}
	sym.tok = TK_A32;
	;
	{p++; goto _out; }
}
	break;
	case 94:
	{{p = ((te))-1;}
	sym.tok = TK_DEHL;
	;
	{p++; goto _out; }
}
	break;
	case 95:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_BINARY;
		sym.tok_opcode = TK_BINARY;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_BINARY;
	}
	{p++; goto _out; }
}
	break;
	case 96:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_C_LINE;
		sym.tok_opcode = TK_C_LINE;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_C_LINE;
	}
	{p++; goto _out; }
}
	break;
	case 97:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_DEFB;
		sym.tok_opcode = TK_DEFB;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_DEFB;
	}
	{p++; goto _out; }
}
	break;
	case 98:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_DEFC;
		sym.tok_opcode = TK_DEFC;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_DEFC;
	}
	{p++; goto _out; }
}
	break;
	case 99:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_DEFGROUP;
		sym.tok_opcode = TK_DEFGROUP;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_DEFGROUP;
	}
	{p++; goto _out; }
}
	break;
	case 100:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_DEFINE;
		sym.tok_opcode = TK_DEFINE;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_DEFINE;
	}
	{p++; goto _out; }
}
	break;
	case 101:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_DEFM;
		sym.tok_opcode = TK_DEFM;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_DEFM;
	}
	{p++; goto _out; }
}
	break;
	case 102:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_DEFQ;
		sym.tok_opcode = TK_DEFQ;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_DEFQ;
	}
	{p++; goto _out; }
}
	break;
	case 103:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_DEFS;
		sym.tok_opcode = TK_DEFS;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_DEFS;
	}
	{p++; goto _out; }
}
	break;
	case 104:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_DEFVARS;
		sym.tok_opcode = TK_DEFVARS;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_DEFVARS;
	}
	{p++; goto _out; }
}
	break;
	case 105:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_DEFW;
		sym.tok_opcode = TK_DEFW;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_DEFW;
	}
	{p++; goto _out; }
}
	break;
	case 106:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_DEPHASE;
		sym.tok_opcode = TK_DEPHASE;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_DEPHASE;
	}
	{p++; goto _out; }
}
	break;
	case 107:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_ELSE;
		sym.tok_opcode = TK_ELSE;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_ELSE;
	}
	{p++; goto _out; }
}
	break;
	case 108:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_ENDIF;
		sym.tok_opcode = TK_ENDIF;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_ENDIF;
	}
	{p++; goto _out; }
}
	break;
	case 109:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_EXTERN;
		sym.tok_opcode = TK_EXTERN;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_EXTERN;
	}
	{p++; goto _out; }
}
	break;
	case 110:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_GLOBAL;
		sym.tok_opcode = TK_GLOBAL;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_GLOBAL;
	}
	{p++; goto _out; }
}
	break;
	case 111:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_IF;
		sym.tok_opcode = TK_IF;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_IF;
	}
	{p++; goto _out; }
}
	break;
	case 112:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_IFDEF;
		sym.tok_opcode = TK_IFDEF;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_IFDEF;
	}
	{p++; goto _out; }
}
	break;
	case 113:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_IFNDEF;
		sym.tok_opcode = TK_IFNDEF;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_IFNDEF;
	}
	{p++; goto _out; }
}
	break;
	case 114:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_INCLUDE;
		sym.tok_opcode = TK_INCLUDE;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_INCLUDE;
	}
	{p++; goto _out; }
}
	break;
	case 115:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_LIB;
		sym.tok_opcode = TK_LIB;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_LIB;
	}
	{p++; goto _out; }
}
	break;
	case 116:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_LINE;
		sym.tok_opcode = TK_LINE;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_LINE;
	}
	{p++; goto _out; }
}
	break;
	case 117:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_LSTOFF;
		sym.tok_opcode = TK_LSTOFF;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_LSTOFF;
	}
	{p++; goto _out; }
}
	break;
	case 118:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_LSTON;
		sym.tok_opcode = TK_LSTON;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_LSTON;
	}
	{p++; goto _out; }
}
	break;
	case 119:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_MODULE;
		sym.tok_opcode = TK_MODULE;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_MODULE;
	}
	{p++; goto _out; }
}
	break;
	case 120:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_ORG;
		sym.tok_opcode = TK_ORG;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_ORG;
	}
	{p++; goto _out; }
}
	break;
	case 121:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_PHASE;
		sym.tok_opcode = TK_PHASE;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_PHASE;
	}
	{p++; goto _out; }
}
	break;
	case 122:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_PUBLIC;
		sym.tok_opcode = TK_PUBLIC;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_PUBLIC;
	}
	{p++; goto _out; }
}
	break;
	case 123:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_SECTION;
		sym.tok_opcode = TK_SECTION;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_SECTION;
	}
	{p++; goto _out; }
}
	break;
	case 124:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_UNDEFINE;
		sym.tok_opcode = TK_UNDEFINE;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_UNDEFINE;
	}
	{p++; goto _out; }
}
	break;
	case 125:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_XDEF;
		sym.tok_opcode = TK_XDEF;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_XDEF;
	}
	{p++; goto _out; }
}
	break;
	case 126:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_XLIB;
		sym.tok_opcode = TK_XLIB;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_XLIB;
	}
	{p++; goto _out; }
}
	break;
	case 127:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_XREF;
		sym.tok_opcode = TK_XREF;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_XREF;
	}
	{p++; goto _out; }
}
	break;
	case 132:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_ADC;
		sym.tok_opcode = TK_ADC;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_ADC;
	}
	{p++; goto _out; }
}
	break;
	case 133:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_ADD;
		sym.tok_opcode = TK_ADD;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_ADD;
	}
	{p++; goto _out; }
}
	break;
	case 134:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_AND;
		sym.tok_opcode = TK_AND;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_AND;
	}
	{p++; goto _out; }
}
	break;
	case 135:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_BIT;
		sym.tok_opcode = TK_BIT;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_BIT;
	}
	{p++; goto _out; }
}
	break;
	case 136:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_CALL;
		sym.tok_opcode = TK_CALL;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_CALL;
	}
	{p++; goto _out; }
}
	break;
	case 137:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_CCF;
		sym.tok_opcode = TK_CCF;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_CCF;
	}
	{p++; goto _out; }
}
	break;
	case 139:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_CP;
		sym.tok_opcode = TK_CP;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_CP;
	}
	{p++; goto _out; }
}
	break;
	case 140:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_CPD;
		sym.tok_opcode = TK_CPD;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_CPD;
	}
	{p++; goto _out; }
}
	break;
	case 141:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_CPDR;
		sym.tok_opcode = TK_CPDR;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_CPDR;
	}
	{p++; goto _out; }
}
	break;
	case 142:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_CPI;
		sym.tok_opcode = TK_CPI;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_CPI;
	}
	{p++; goto _out; }
}
	break;
	case 143:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_CPIR;
		sym.tok_opcode = TK_CPIR;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_CPIR;
	}
	{p++; goto _out; }
}
	break;
	case 144:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_CPL;
		sym.tok_opcode = TK_CPL;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_CPL;
	}
	{p++; goto _out; }
}
	break;
	case 145:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_DAA;
		sym.tok_opcode = TK_DAA;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_DAA;
	}
	{p++; goto _out; }
}
	break;
	case 146:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_DEC;
		sym.tok_opcode = TK_DEC;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_DEC;
	}
	{p++; goto _out; }
}
	break;
	case 147:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_DI;
		sym.tok_opcode = TK_DI;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_DI;
	}
	{p++; goto _out; }
}
	break;
	case 148:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_DJNZ;
		sym.tok_opcode = TK_DJNZ;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_DJNZ;
	}
	{p++; goto _out; }
}
	break;
	case 149:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_EI;
		sym.tok_opcode = TK_EI;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_EI;
	}
	{p++; goto _out; }
}
	break;
	case 150:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_EX;
		sym.tok_opcode = TK_EX;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_EX;
	}
	{p++; goto _out; }
}
	break;
	case 151:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_EXX;
		sym.tok_opcode = TK_EXX;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_EXX;
	}
	{p++; goto _out; }
}
	break;
	case 152:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_HALT;
		sym.tok_opcode = TK_HALT;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_HALT;
	}
	{p++; goto _out; }
}
	break;
	case 153:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_IM;
		sym.tok_opcode = TK_IM;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_IM;
	}
	{p++; goto _out; }
}
	break;
	case 154:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_IN;
		sym.tok_opcode = TK_IN;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_IN;
	}
	{p++; goto _out; }
}
	break;
	case 155:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_INC;
		sym.tok_opcode = TK_INC;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_INC;
	}
	{p++; goto _out; }
}
	break;
	case 156:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_IND;
		sym.tok_opcode = TK_IND;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_IND;
	}
	{p++; goto _out; }
}
	break;
	case 157:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_INDR;
		sym.tok_opcode = TK_INDR;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_INDR;
	}
	{p++; goto _out; }
}
	break;
	case 158:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_INI;
		sym.tok_opcode = TK_INI;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_INI;
	}
	{p++; goto _out; }
}
	break;
	case 159:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_INIR;
		sym.tok_opcode = TK_INIR;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_INIR;
	}
	{p++; goto _out; }
}
	break;
	case 160:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_JP;
		sym.tok_opcode = TK_JP;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_JP;
	}
	{p++; goto _out; }
}
	break;
	case 161:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_JR;
		sym.tok_opcode = TK_JR;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_JR;
	}
	{p++; goto _out; }
}
	break;
	case 162:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_LD;
		sym.tok_opcode = TK_LD;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_LD;
	}
	{p++; goto _out; }
}
	break;
	case 163:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_LDD;
		sym.tok_opcode = TK_LDD;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_LDD;
	}
	{p++; goto _out; }
}
	break;
	case 164:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_LDDR;
		sym.tok_opcode = TK_LDDR;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_LDDR;
	}
	{p++; goto _out; }
}
	break;
	case 165:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_LDI;
		sym.tok_opcode = TK_LDI;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_LDI;
	}
	{p++; goto _out; }
}
	break;
	case 166:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_LDIR;
		sym.tok_opcode = TK_LDIR;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_LDIR;
	}
	{p++; goto _out; }
}
	break;
	case 167:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_NEG;
		sym.tok_opcode = TK_NEG;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_NEG;
	}
	{p++; goto _out; }
}
	break;
	case 168:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_NOP;
		sym.tok_opcode = TK_NOP;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_NOP;
	}
	{p++; goto _out; }
}
	break;
	case 169:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_OR;
		sym.tok_opcode = TK_OR;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_OR;
	}
	{p++; goto _out; }
}
	break;
	case 170:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_OTDR;
		sym.tok_opcode = TK_OTDR;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_OTDR;
	}
	{p++; goto _out; }
}
	break;
	case 171:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_OTIR;
		sym.tok_opcode = TK_OTIR;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_OTIR;
	}
	{p++; goto _out; }
}
	break;
	case 172:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_OUT;
		sym.tok_opcode = TK_OUT;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_OUT;
	}
	{p++; goto _out; }
}
	break;
	case 173:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_OUTD;
		sym.tok_opcode = TK_OUTD;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_OUTD;
	}
	{p++; goto _out; }
}
	break;
	case 174:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_OUTI;
		sym.tok_opcode = TK_OUTI;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_OUTI;
	}
	{p++; goto _out; }
}
	break;
	case 175:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_POP;
		sym.tok_opcode = TK_POP;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_POP;
	}
	{p++; goto _out; }
}
	break;
	case 176:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_PUSH;
		sym.tok_opcode = TK_PUSH;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_PUSH;
	}
	{p++; goto _out; }
}
	break;
	case 177:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_RES;
		sym.tok_opcode = TK_RES;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_RES;
	}
	{p++; goto _out; }
}
	break;
	case 178:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_RET;
		sym.tok_opcode = TK_RET;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_RET;
	}
	{p++; goto _out; }
}
	break;
	case 179:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_RETI;
		sym.tok_opcode = TK_RETI;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_RETI;
	}
	{p++; goto _out; }
}
	break;
	case 180:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_RETN;
		sym.tok_opcode = TK_RETN;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_RETN;
	}
	{p++; goto _out; }
}
	break;
	case 181:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_RL;
		sym.tok_opcode = TK_RL;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_RL;
	}
	{p++; goto _out; }
}
	break;
	case 182:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_RLA;
		sym.tok_opcode = TK_RLA;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_RLA;
	}
	{p++; goto _out; }
}
	break;
	case 184:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_RLC;
		sym.tok_opcode = TK_RLC;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_RLC;
	}
	{p++; goto _out; }
}
	break;
	case 185:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_RLCA;
		sym.tok_opcode = TK_RLCA;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_RLCA;
	}
	{p++; goto _out; }
}
	break;
	case 187:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_RLD;
		sym.tok_opcode = TK_RLD;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_RLD;
	}
	{p++; goto _out; }
}
	break;
	case 188:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_RR;
		sym.tok_opcode = TK_RR;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_RR;
	}
	{p++; goto _out; }
}
	break;
	case 189:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_RRA;
		sym.tok_opcode = TK_RRA;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_RRA;
	}
	{p++; goto _out; }
}
	break;
	case 191:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_RRC;
		sym.tok_opcode = TK_RRC;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_RRC;
	}
	{p++; goto _out; }
}
	break;
	case 192:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_RRCA;
		sym.tok_opcode = TK_RRCA;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_RRCA;
	}
	{p++; goto _out; }
}
	break;
	case 194:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_RRD;
		sym.tok_opcode = TK_RRD;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_RRD;
	}
	{p++; goto _out; }
}
	break;
	case 195:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_RST;
		sym.tok_opcode = TK_RST;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_RST;
	}
	{p++; goto _out; }
}
	break;
	case 196:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_SBC;
		sym.tok_opcode = TK_SBC;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_SBC;
	}
	{p++; goto _out; }
}
	break;
	case 197:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_SCF;
		sym.tok_opcode = TK_SCF;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_SCF;
	}
	{p++; goto _out; }
}
	break;
	case 199:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_SET;
		sym.tok_opcode = TK_SET;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_SET;
	}
	{p++; goto _out; }
}
	break;
	case 200:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_SLA;
		sym.tok_opcode = TK_SLA;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_SLA;
	}
	{p++; goto _out; }
}
	break;
	case 201:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_SLL;
		sym.tok_opcode = TK_SLL;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_SLL;
	}
	{p++; goto _out; }
}
	break;
	case 202:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_SLI;
		sym.tok_opcode = TK_SLI;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_SLI;
	}
	{p++; goto _out; }
}
	break;
	case 203:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_SRA;
		sym.tok_opcode = TK_SRA;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_SRA;
	}
	{p++; goto _out; }
}
	break;
	case 204:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_SRL;
		sym.tok_opcode = TK_SRL;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_SRL;
	}
	{p++; goto _out; }
}
	break;
	case 205:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_SUB;
		sym.tok_opcode = TK_SUB;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_SUB;
	}
	{p++; goto _out; }
}
	break;
	case 206:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_XOR;
		sym.tok_opcode = TK_XOR;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_XOR;
	}
	{p++; goto _out; }
}
	break;
	case 207:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_SWAPNIB;
		sym.tok_opcode = TK_SWAPNIB;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_SWAPNIB;
	}
	{p++; goto _out; }
}
	break;
	case 208:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_SWAP;
		sym.tok_opcode = TK_SWAP;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_SWAP;
	}
	{p++; goto _out; }
}
	break;
	case 209:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_OUTINB;
		sym.tok_opcode = TK_OUTINB;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_OUTINB;
	}
	{p++; goto _out; }
}
	break;
	case 210:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_LDIX;
		sym.tok_opcode = TK_LDIX;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_LDIX;
	}
	{p++; goto _out; }
}
	break;
	case 211:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_LDIRX;
		sym.tok_opcode = TK_LDIRX;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_LDIRX;
	}
	{p++; goto _out; }
}
	break;
	case 212:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_LDDX;
		sym.tok_opcode = TK_LDDX;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_LDDX;
	}
	{p++; goto _out; }
}
	break;
	case 213:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_LDDRX;
		sym.tok_opcode = TK_LDDRX;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_LDDRX;
	}
	{p++; goto _out; }
}
	break;
	case 214:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_LDIRSCALE;
		sym.tok_opcode = TK_LDIRSCALE;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_LDIRSCALE;
	}
	{p++; goto _out; }
}
	break;
	case 215:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_LDPIRX;
		sym.tok_opcode = TK_LDPIRX;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_LDPIRX;
	}
	{p++; goto _out; }
}
	break;
	case 216:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_FILL;
		sym.tok_opcode = TK_FILL;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_FILL;
	}
	{p++; goto _out; }
}
	break;
	case 217:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_FILLDE;
		sym.tok_opcode = TK_FILLDE;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_FILLDE;
	}
	{p++; goto _out; }
}
	break;
	case 218:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_MIRROR;
		sym.tok_opcode = TK_MIRROR;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_MIRROR;
	}
	{p++; goto _out; }
}
	break;
	case 219:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_POPX;
		sym.tok_opcode = TK_POPX;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_POPX;
	}
	{p++; goto _out; }
}
	break;
	case 220:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_NEXTREG;
		sym.tok_opcode = TK_NEXTREG;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_NEXTREG;
	}
	{p++; goto _out; }
}
	break;
	case 221:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_PIXELDN;
		sym.tok_opcode = TK_PIXELDN;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_PIXELDN;
	}
	{p++; goto _out; }
}
	break;
	case 222:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_PIXELAD;
		sym.tok_opcode = TK_PIXELAD;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_PIXELAD;
	}
	{p++; goto _out; }
}
	break;
	case 223:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_SETAE;
		sym.tok_opcode = TK_SETAE;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_SETAE;
	}
	{p++; goto _out; }
}
	break;
	case 224:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_TEST;
		sym.tok_opcode = TK_TEST;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_TEST;
	}
	{p++; goto _out; }
}
	break;
	case 225:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_MMU;
		sym.tok_opcode = TK_MMU;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_MMU;
	}
	{p++; goto _out; }
}
	break;
	case 226:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_MMU0;
		sym.tok_opcode = TK_MMU0;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_MMU0;
	}
	{p++; goto _out; }
}
	break;
	case 227:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_MMU1;
		sym.tok_opcode = TK_MMU1;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_MMU1;
	}
	{p++; goto _out; }
}
	break;
	case 228:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_MMU2;
		sym.tok_opcode = TK_MMU2;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_MMU2;
	}
	{p++; goto _out; }
}
	break;
	case 229:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_MMU3;
		sym.tok_opcode = TK_MMU3;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_MMU3;
	}
	{p++; goto _out; }
}
	break;
	case 230:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_MMU4;
		sym.tok_opcode = TK_MMU4;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_MMU4;
	}
	{p++; goto _out; }
}
	break;
	case 231:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_MMU5;
		sym.tok_opcode = TK_MMU5;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_MMU5;
	}
	{p++; goto _out; }
}
	break;
	case 232:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_MMU6;
		sym.tok_opcode = TK_MMU6;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_MMU6;
	}
	{p++; goto _out; }
}
	break;
	case 233:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_MMU7;
		sym.tok_opcode = TK_MMU7;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_MMU7;
	}
	{p++; goto _out; }
}
	break;
	case 234:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_IN0;
		sym.tok_opcode = TK_IN0;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_IN0;
	}
	{p++; goto _out; }
}
	break;
	case 235:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_MLT;
		sym.tok_opcode = TK_MLT;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_MLT;
	}
	{p++; goto _out; }
}
	break;
	case 236:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_OTDM;
		sym.tok_opcode = TK_OTDM;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_OTDM;
	}
	{p++; goto _out; }
}
	break;
	case 237:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_OTDMR;
		sym.tok_opcode = TK_OTDMR;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_OTDMR;
	}
	{p++; goto _out; }
}
	break;
	case 238:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_OTIM;
		sym.tok_opcode = TK_OTIM;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_OTIM;
	}
	{p++; goto _out; }
}
	break;
	case 239:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_OTIMR;
		sym.tok_opcode = TK_OTIMR;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_OTIMR;
	}
	{p++; goto _out; }
}
	break;
	case 240:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_OUT0;
		sym.tok_opcode = TK_OUT0;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_OUT0;
	}
	{p++; goto _out; }
}
	break;
	case 241:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_SLP;
		sym.tok_opcode = TK_SLP;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_SLP;
	}
	{p++; goto _out; }
}
	break;
	case 242:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_TST;
		sym.tok_opcode = TK_TST;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_TST;
	}
	{p++; goto _out; }
}
	break;
	case 243:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_TSTIO;
		sym.tok_opcode = TK_TSTIO;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_TSTIO;
	}
	{p++; goto _out; }
}
	break;
	case 244:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_ALTD;
		sym.tok_opcode = TK_ALTD;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_ALTD;
	}
	{p++; goto _out; }
}
	break;
	case 245:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_BOOL;
		sym.tok_opcode = TK_BOOL;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_BOOL;
	}
	{p++; goto _out; }
}
	break;
	case 246:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_IDET;
		sym.tok_opcode = TK_IDET;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_IDET;
	}
	{p++; goto _out; }
}
	break;
	case 247:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_IOE;
		sym.tok_opcode = TK_IOE;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_IOE;
	}
	{p++; goto _out; }
}
	break;
	case 248:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_IOI;
		sym.tok_opcode = TK_IOI;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_IOI;
	}
	{p++; goto _out; }
}
	break;
	case 249:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_IPRES;
		sym.tok_opcode = TK_IPRES;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_IPRES;
	}
	{p++; goto _out; }
}
	break;
	case 250:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_IPSET;
		sym.tok_opcode = TK_IPSET;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_IPSET;
	}
	{p++; goto _out; }
}
	break;
	case 251:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_LDDSR;
		sym.tok_opcode = TK_LDDSR;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_LDDSR;
	}
	{p++; goto _out; }
}
	break;
	case 252:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_LDISR;
		sym.tok_opcode = TK_LDISR;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_LDISR;
	}
	{p++; goto _out; }
}
	break;
	case 253:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_LDP;
		sym.tok_opcode = TK_LDP;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_LDP;
	}
	{p++; goto _out; }
}
	break;
	case 254:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_LSDR;
		sym.tok_opcode = TK_LSDR;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_LSDR;
	}
	{p++; goto _out; }
}
	break;
	case 255:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_LSIR;
		sym.tok_opcode = TK_LSIR;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_LSIR;
	}
	{p++; goto _out; }
}
	break;
	case 256:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_LSDDR;
		sym.tok_opcode = TK_LSDDR;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_LSDDR;
	}
	{p++; goto _out; }
}
	break;
	case 257:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_LSIDR;
		sym.tok_opcode = TK_LSIDR;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_LSIDR;
	}
	{p++; goto _out; }
}
	break;
	case 258:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_MUL;
		sym.tok_opcode = TK_MUL;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_MUL;
	}
	{p++; goto _out; }
}
	break;
	case 259:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_RDMODE;
		sym.tok_opcode = TK_RDMODE;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_RDMODE;
	}
	{p++; goto _out; }
}
	break;
	case 260:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_SETUSR;
		sym.tok_opcode = TK_SETUSR;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_SETUSR;
	}
	{p++; goto _out; }
}
	break;
	case 261:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_SURES;
		sym.tok_opcode = TK_SURES;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_SURES;
	}
	{p++; goto _out; }
}
	break;
	case 262:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_SYSCALL;
		sym.tok_opcode = TK_SYSCALL;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_SYSCALL;
	}
	{p++; goto _out; }
}
	break;
	case 263:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_UMA;
		sym.tok_opcode = TK_UMA;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_UMA;
	}
	{p++; goto _out; }
}
	break;
	case 264:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_UMS;
		sym.tok_opcode = TK_UMS;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_UMS;
	}
	{p++; goto _out; }
}
	break;
	case 265:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_CALL_OZ;
		sym.tok_opcode = TK_CALL_OZ;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_CALL_OZ;
	}
	{p++; goto _out; }
}
	break;
	case 266:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_CALL_PKG;
		sym.tok_opcode = TK_CALL_PKG;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_CALL_PKG;
	}
	{p++; goto _out; }
}
	break;
	case 267:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_FPP;
		sym.tok_opcode = TK_FPP;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_FPP;
	}
	{p++; goto _out; }
}
	break;
	case 268:
	{{p = ((te))-1;}
	if (expect_opcode) {
		sym.tok = TK_INVOKE;
		sym.tok_opcode = TK_INVOKE;
		expect_opcode = FALSE;
	}
	else {
		sym.tok = TK_NAME;
		sym.tok_opcode = TK_INVOKE;
	}
	{p++; goto _out; }
}
	break;
	case 271:
	{{p = ((te))-1;}
  sym.tok = TK_NAME;
  {p++; goto _out; }
 }
	break;
	case 273:
	{{p = ((te))-1;}
  sym.tok = TK_NUMBER;
  sym.number = scan_num( ts, te - ts, 10 );
  ts = te = p;
  {p++; goto _out; }
 }
	break;
	case 275:
	{{p = ((te))-1;}
  sym.tok = TK_NUMBER;
  sym.number = scan_num( ts + 1, te - ts - 1, 16 );
  ts = te = p;
  {p++; goto _out; }
 }
	break;
	case 277:
	{{p = ((te))-1;}
  sym.tok = TK_NUMBER;
  sym.number = scan_num( ts, te - ts - 1, 2 );
  ts = te = p;
  {p++; goto _out; }
 }
	break;
	case 279:
	{{p = ((te))-1;}
  sym.tok = TK_NUMBER;
  sym.number = scan_num( ts + 2, te - ts - 2, 2 );
  ts = te = p;
  {p++; goto _out; }
 }
	break;
	case 283:
	{{p = ((te))-1;}
  sym.tok = TK_NIL;
  skip_to_newline();
  ts = te = p;
  {p++; goto _out; }
 }
	break;
	}
	}
	break;
		}
	}
_again:
	_acts = _lexer_actions + _lexer_to_state_actions[cs];
	_nacts = (unsigned int) *_acts++;
	while ( _nacts-- > 0 ) {
		switch ( *_acts++ ) {
	case 0:
	{ts = 0;}
	break;
		}
	}
	if ( cs == 0 )
		goto _out;
	if ( ++p != pe )
		goto _resume;
	_test_eof: {}
	if ( p == eof )
	{
	if ( _lexer_eof_trans[cs] > 0 ) {
		_trans = _lexer_eof_trans[cs] - 1;
		goto _eof_trans;
	}
	}
	_out: {}
	}
 return sym.tok;
}
