#!/usr/bin/perl

#     ZZZZZZZZZZZZZZZZZZZZ    8888888888888       00000000000
#   ZZZZZZZZZZZZZZZZZZZZ    88888888888888888    0000000000000
#                ZZZZZ      888           888  0000         0000
#              ZZZZZ        88888888888888888  0000         0000
#            ZZZZZ            8888888888888    0000         0000       AAAAAA         SSSSSSSSSSS   MMMM       MMMM
#          ZZZZZ            88888888888888888  0000         0000      AAAAAAAA      SSSS            MMMMMM   MMMMMM
#        ZZZZZ              8888         8888  0000         0000     AAAA  AAAA     SSSSSSSSSSS     MMMMMMMMMMMMMMM
#      ZZZZZ                8888         8888  0000         0000    AAAAAAAAAAAA      SSSSSSSSSSS   MMMM MMMMM MMMM
#    ZZZZZZZZZZZZZZZZZZZZZ  88888888888888888    0000000000000     AAAA      AAAA           SSSSS   MMMM       MMMM
#  ZZZZZZZZZZZZZZZZZZZZZ      8888888888888       00000000000     AAAA        AAAA  SSSSSSSSSSS     MMMM       MMMM
#
# Copyright (C) Paulo Custodio, 2011-2013
#
# Test scan.l

use Modern::Perl;
use Test::More;
use File::Path qw(make_path remove_tree);
require 't/test_utils.pl';

my $objs = "scan.o class.o dynstr.o errors.o strutil.o file.o init_obj.o init_obj_file.o safestr.o srcfile.o";
ok ! system "make parse.h";

SKIP: {
    diag "scan not tested, eol-handling not OK, not used";
    skip "scan not tested, eol-handling not OK, not used", 1;

# build list of case TOKEN: return "TOKEN" from parse.h
my @token_case;
for (read_file("parse.h")) {
	if (/enum yytokentype/ .. /\};/) {
		if (/^\s*([A-Z0-9_]+)\s*=\s*\d+/) {
			my $case = $1;
			next if $case =~ /^(?:NUMBER|STRING|NAME)$/;
			push @token_case, "\t\tcase $case: return \"$case\";\n";
		}
	}
}

my $init = <<'END_INIT'; $init =~ s/<TOKEN_CASE>/@token_case/;
#include "parse.h"

#define MAX_LINE	21000		/* we need 20000 for a very big token */

#define ERROR return __LINE__

char *decode_token (int token, YYSTYPE *yylval)
{
	static char token_str[MAX_LINE];
	
	switch (token) {
		case 0:			return "NULL";
		case '\n':		return "'\\n'";
		case NUMBER: 	sprintf(token_str, "NUMBER %ld", yylval->lval); 
						return token_str;
		case STRING: 	sprintf(token_str, "STRING '%s'", yylval->sval); 
						g_free0(yylval->sval);
						return token_str;
		case NAME:	 	sprintf(token_str, "NAME %s", yylval->sval); 
						g_free0(yylval->sval);
						return token_str;
<TOKEN_CASE>
		default:
			if (token >= 32 && token < 127)
				sprintf(token_str, "'%c'", token);
			else
				sprintf(token_str, "token(%d)", token);
			return token_str;
	}
}

int next_token (void)
{
	int token;
	char *token_str;
	YYSTYPE yylval;
	
	token     = yylex(&yylval);
	token_str = decode_token(token, &yylval);
	
	warn( "Token: %s(%d) %s\n", 
		  scan_filename() ? scan_filename() : "", 
		  scan_line_nr(), 
		  token_str );
	
	return token;
}

void n_tokens (int n)
{
	int token;
	
	while ( n != 0 ) 
	{
		n--;
		token = next_token();
		if ( token == 0)
		{
			next_token();	/* get second null */
			break;
		}
	}
}

int clinemode = 0;
int listing = 1;

size_t
get_PC( void ) { return 0; }

void
list_start_line( size_t address, char *source_file, int source_line_nr, char *line ) 
{
	static char buffer[MAX_LINE];
	strcpy(buffer, line);
	g_strchomp(buffer);
	fprintf( stderr, "List:%s:%d:%s\n", source_file, source_line_nr, buffer );
}

END_INIT

# create directories and files
make_path(qw( x1 x2 x3 ));
write_file('f0',    {binmode => ':raw'}, "F0 1\r\rF0 3\n\nF0 5\r\n\nF0 7\r\n\rF0 9\n\r\rF0 11\n\r\nF0 13");
write_file('x1/f0', {binmode => ':raw'}, "DUMMY NOT READ");
write_file('x1/f1', {binmode => ':raw'}, "F1 1\r\nF1 2\r\nF1 3\r");
write_file('x2/f1', {binmode => ':raw'}, "DUMMY NOT READ");

write_file('x2/f2', {binmode => ':raw'}, <<'END');
; sigle-character tokens
! # $ % & ( ) * + , - . / : < = > ? @ [ \ ] ^ ` { | } ~ 

; multiple-character tokens
== <> != <= >= || && << >> ** 

; names
_Abc_123 Abc_123 123_Abc_
Abc_123	af' bc'de'af'

; labels
.abc  . def : ghi
 abc: . def : ghi
.abc: . def : ghi

; numbers - decimal
0 2147483647 2147483648

; numbers - binary
  0000b   0011b    1111111111111111111111111111111b
 @0000   @0011    @1111111111111111111111111111111
 %0000   %0011    %1111111111111111111111111111111
0b0000  0b0011   0b1111111111111111111111111111111
@'----' @'--##'  @'###############################'
%'----' %'--##'  %'###############################'
@"----" @"--##"  @"###############################"
%"----" %"--##"  %"###############################"

; numbers - hexadecimal
  0h 0ah 0FH   7FFFFFFFh
 $0   $a  $F  $7FFFFFFF 
 #0   #a  #F  #7FFFFFFF
0x0  0xa 0xF 0x7FFFFFFF

; strings - single-quote
'''a''"'';';comment
'unclosed

; strings - double-quotes
"""a""'"";";comment
"unclosed

END

write_file('x3/f2', {binmode => ':raw'}, "DUMMY NOT READ");

# very long tokens, bigger than lex input buffer (16K)
write_file('x2/f3', {binmode => ':raw'}, 
			"ld a," . '0' x 20000 . "1\n" .
			"ld b," . '0' x 20000 . "1\n");

# test yy_input
t_compile_module($init, <<'END', $objs);
	int yy_input( char *buffer, size_t size );
	FILE *fp;
	int read, i, j;
	char buffer[16];
	
	for ( i = 1 ; 1 ; i++ )
	{
		sprintf( buffer, "test%d.asm", i );
		fp = fopen( buffer, "rb" );
		if ( fp == NULL )
			return 0;
		fclose( fp );
			
		warn("Read file %s:\n", buffer );
		scan_file( buffer );
		
		while ( (read = yy_input( buffer, sizeof(buffer))) > 0 )
		{
			for ( j = 0; j < read ; j++ )
			{
				if ( buffer[j] > ' ' )
					warn("%c", buffer[j] );
				else
					warn("<%02X>", buffer[j] );
			}
			warn("\n");
		}
		n_tokens( -1 );
		
	}
	return 0;

END

write_file(asm1_file(), {binmode => ':raw'}, "");
write_file(asm2_file(), {binmode => ':raw'}, "A\nB\rC\r\nD\n\rE");
write_file(asm3_file(), {binmode => ':raw'}, "A\nB\rC\r\nD\n\rE\n");
write_file(asm4_file(), {binmode => ':raw'}, "A\nB\rC\r\nD\n\rE\r");
write_file(asm5_file(), {binmode => ':raw'}, "A\nB\rC\r\nD\n\rE\r\n");
write_file(asm6_file(), {binmode => ':raw'}, "A\nB\rC\r\nD\n\rE\n\r");
write_file(asm7_file(), {binmode => ':raw'}, "0123456789abcd");
write_file(asm8_file(), {binmode => ':raw'}, "0123456789\n0123456789abcd");
write_file(asm9_file(), {binmode => ':raw'}, "0123456789abcde");
write_file(asm10_file(), {binmode => ':raw'}, "0123456789abcdef");
write_file(asm11_file(), {binmode => ':raw'}, "ld a," . '0' x 20 ."1 \n".
                                              "ld b," . '0' x 20 ."1 \n");

t_run_module([asm1_file()], <<'OUT', <<'END', 0); 
GLib Memory statistics (successful operations):
 blocks of | allocated  | freed      | allocated  | freed      | n_bytes   
  n_bytes  | n_times by | n_times by | n_times by | n_times by | remaining 
           | malloc()   | free()     | realloc()  | realloc()  |           
===========|============|============|============|============|===========
         4 |          1 |          0 |          0 |          1 |         +0
        12 |         11 |         11 |          0 |          0 |         +0
        20 |          1 |          1 |          0 |          0 |         +0
        28 |          1 |          1 |          0 |          0 |         +0
        32 |          1 |          1 |          0 |          0 |         +0
        36 |          0 |          1 |          1 |          0 |         +0
        40 |         13 |         13 |          0 |          0 |         +0
        44 |          1 |          1 |          0 |          0 |         +0
        48 |         22 |         22 |          0 |          0 |         +0
        96 |          2 |          2 |          0 |          0 |         +0
       252 |          3 |          0 |          0 |          0 |       +756
       256 |          0 |         11 |         11 |          0 |         +0
       384 |          2 |          2 |          0 |          0 |         +0
      1016 |          1 |          0 |          0 |          0 |      +1016
      1024 |          1 |          1 |          0 |          0 |         +0
   >  4096 |         11 |         11 |          0 |          0 |        ***
GLib Memory statistics (failing operations):
 --- none ---
Total bytes: allocated=188690, zero-initialized=184794 (97.94%), freed=186918 (99.06%), remaining=1772
OUT
Read file test1.asm:
Token: (0) NULL
Token: (0) NULL
Read file test2.asm:
<1E>A<0A><1E>B<0A><1E>C<0A><1E>D<0A><1E>E<0A>
Token: (0) NULL
Token: (0) NULL
Read file test3.asm:
<1E>A<0A><1E>B<0A><1E>C<0A><1E>D<0A><1E>E<0A>
Token: (0) NULL
Token: (0) NULL
Read file test4.asm:
<1E>A<0A><1E>B<0A><1E>C<0A><1E>D<0A><1E>E<0A>
Token: (0) NULL
Token: (0) NULL
Read file test5.asm:
<1E>A<0A><1E>B<0A><1E>C<0A><1E>D<0A><1E>E<0A>
Token: (0) NULL
Token: (0) NULL
Read file test6.asm:
<1E>A<0A><1E>B<0A><1E>C<0A><1E>D<0A><1E>E<0A>
Token: (0) NULL
Token: (0) NULL
Read file test7.asm:
<1E>0123456789abcd<0A>
Token: (0) NULL
Token: (0) NULL
Read file test8.asm:
<1E>0123456789<0A><1E>012
3456789abcd<0A>
Token: (0) NULL
Token: (0) NULL
Read file test9.asm:
<1E>0123456789abcde
<0A>
Token: (0) NULL
Token: (0) NULL
Read file test10.asm:
<1E>0123456789abcde
f<0A>
Token: (0) NULL
Token: (0) NULL
Read file test11.asm:
<1E>ld<20>a,0000000000
00000000001<20><0A><1E>ld
<20>b,0000000000000
00000001<20><0A>
Token: (0) NULL
Token: (0) NULL
END


# tests without error catching
t_compile_module($init, <<'END', $objs);
	
	add_source_file_path("x1");
	add_source_file_path("x2");
	add_source_file_path("x3");
	
	warn("Test: Read before start\n");
	n_tokens( -1 );

	warn("Test: read f0\n");
	scan_file("f0");
	n_tokens( -1 );
	
	warn("Test: read f0 as text\n");
	scan_text("F0 1\r\rF0 3\n\nF0 5\r\n\nF0 7\r\n\rF0 9\n\r\rF0 11\n\r\nF0 13");
	n_tokens( -1 );
	
	warn("Test: read f1\n");
	scan_file("f1");
	n_tokens( -1 );
	
	warn("Test: push text once\n");
	scan_text(" \f \n \t \r 1 2 3 a b c \n ");
	n_tokens( -1 );
	
	warn("Test: push text twice\n");
	scan_text(" \f \n \t \r 1 2 3 a b c \n ");
	scan_text("defc c=2;hello\ndefc d=3;hello world\r\n");
	n_tokens( -1 );

	warn("Test: push text in middle of reading\n");
	scan_text(" \f \n \t \r 1 2 3 a b c \n ");
	n_tokens( 4 );

	scan_text("defc c=2;hello\ndefc d=3;hello world\r\n");
	n_tokens( -1 );

	warn("Test: open text file\n");
	scan_file("f0");
	n_tokens( 7 );
	
	scan_text("defc c=2;hello\ndefc d=3;hello world\r\n");
	n_tokens( 13 );
	
	scan_file("f1");
	n_tokens(1);
	n_tokens( -1 );

	scan_file("f2");
	n_tokens( -1 );

	scan_file("f3");
	n_tokens( -1 );

	return 0;
END

t_run_module([], <<'OUT', <<'END', 0);
GLib Memory statistics (successful operations):
 blocks of | allocated  | freed      | allocated  | freed      | n_bytes   
  n_bytes  | n_times by | n_times by | n_times by | n_times by | remaining 
           | malloc()   | free()     | realloc()  | realloc()  |           
===========|============|============|============|============|===========
         2 |         19 |         19 |          0 |          0 |         +0
         3 |         37 |         37 |          0 |          0 |         +0
         4 |         17 |         16 |          0 |          1 |         +0
         5 |          8 |          8 |          0 |          0 |         +0
         6 |          1 |          1 |          0 |          0 |         +0
         8 |          2 |          2 |          0 |          0 |         +0
         9 |          1 |          4 |          3 |          0 |         +0
        12 |         20 |         13 |          0 |          7 |         +0
        14 |          0 |          3 |          3 |          0 |         +0
        15 |          2 |          0 |          0 |          2 |         +0
        16 |          0 |          2 |          2 |          0 |         +0
        20 |          1 |          1 |          0 |          0 |         +0
        24 |          7 |          7 |          4 |          4 |         +0
        28 |          1 |          1 |          0 |          0 |         +0
        30 |          0 |          0 |          2 |          2 |         +0
        32 |          1 |          1 |          0 |          0 |         +0
        35 |          0 |          1 |          1 |          0 |         +0
        36 |          0 |          1 |          1 |          0 |         +0
        40 |         16 |         16 |          0 |          0 |         +0
        44 |         10 |          3 |          0 |          7 |         +0
        48 |         33 |         33 |          1 |          1 |         +0
        88 |          0 |          7 |          7 |          0 |         +0
        96 |          1 |          1 |          0 |          0 |         +0
       252 |          3 |          0 |          0 |          0 |       +756
       256 |          0 |         12 |         13 |          1 |         +0
       384 |          1 |          1 |          0 |          0 |         +0
       512 |          0 |          0 |          1 |          1 |         +0
       768 |          0 |          0 |          1 |          1 |         +0
      1016 |          1 |          0 |          0 |          0 |      +1016
      1024 |          1 |          1 |          1 |          1 |         +0
      1280 |          0 |          0 |          1 |          1 |         +0
      1536 |          0 |          0 |          1 |          1 |         +0
      1792 |          0 |          0 |          1 |          1 |         +0
      2048 |          0 |          0 |          1 |          1 |         +0
      2304 |          0 |          0 |          1 |          1 |         +0
      2560 |          0 |          0 |          1 |          1 |         +0
      2816 |          0 |          0 |          1 |          1 |         +0
      3072 |          0 |          0 |          1 |          1 |         +0
      3328 |          0 |          0 |          1 |          1 |         +0
      3584 |          0 |          0 |          1 |          1 |         +0
      3840 |          0 |          0 |          1 |          1 |         +0
   >  4096 |          6 |          7 |         65 |         64 |        ***
GLib Memory statistics (failing operations):
 --- none ---
Total bytes: allocated=950856, zero-initialized=103084 (10.84%), freed=949084 (99.81%), remaining=1772
OUT
Test: Read before start
Token: (0) NULL
Token: (0) NULL
Test: read f0
List:f0:1:F0 1
Token: f0(1) NAME F0
Token: f0(1) NUMBER 1
Token: f0(1) '\n'
List:f0:2:
Token: f0(2) '\n'
List:f0:3:F0 3
Token: f0(3) NAME F0
Token: f0(3) NUMBER 3
Token: f0(3) '\n'
List:f0:4:
Token: f0(4) '\n'
List:f0:5:F0 5
Token: f0(5) NAME F0
Token: f0(5) NUMBER 5
Token: f0(5) '\n'
List:f0:6:
Token: f0(6) '\n'
List:f0:7:F0 7
Token: f0(7) NAME F0
Token: f0(7) NUMBER 7
Token: f0(7) '\n'
List:f0:8:
Token: f0(8) '\n'
List:f0:9:F0 9
Token: f0(9) NAME F0
Token: f0(9) NUMBER 9
Token: f0(9) '\n'
List:f0:10:
Token: f0(10) '\n'
List:f0:11:F0 11
Token: f0(11) NAME F0
Token: f0(11) NUMBER 11
Token: f0(11) '\n'
List:f0:12:
Token: f0(12) '\n'
List:f0:13:F0 13
Token: f0(13) NAME F0
Token: f0(13) NUMBER 13
Token: f0(13) '\n'
Token: (0) NULL
Token: (0) NULL
Test: read f0 as text
Token: (0) NAME F0
Token: (0) NUMBER 1
Token: (0) '\n'
Token: (0) '\n'
Token: (0) NAME F0
Token: (0) NUMBER 3
Token: (0) '\n'
Token: (0) '\n'
Token: (0) NAME F0
Token: (0) NUMBER 5
Token: (0) '\n'
Token: (0) '\n'
Token: (0) NAME F0
Token: (0) NUMBER 7
Token: (0) '\n'
Token: (0) '\n'
Token: (0) NAME F0
Token: (0) NUMBER 9
Token: (0) '\n'
Token: (0) '\n'
Token: (0) NAME F0
Token: (0) NUMBER 11
Token: (0) '\n'
Token: (0) '\n'
Token: (0) NAME F0
Token: (0) NUMBER 13
Token: (0) NULL
Token: (0) NULL
Test: read f1
List:x1/f1:1:F1 1
Token: x1/f1(1) NAME F1
Token: x1/f1(1) NUMBER 1
Token: x1/f1(1) '\n'
List:x1/f1:2:F1 2
Token: x1/f1(2) NAME F1
Token: x1/f1(2) NUMBER 2
Token: x1/f1(2) '\n'
List:x1/f1:3:F1 3
Token: x1/f1(3) NAME F1
Token: x1/f1(3) NUMBER 3
Token: x1/f1(3) '\n'
Token: (0) NULL
Token: (0) NULL
Test: push text once
Token: (0) '\n'
Token: (0) '\n'
Token: (0) NUMBER 1
Token: (0) NUMBER 2
Token: (0) NUMBER 3
Token: (0) NAME A
Token: (0) NAME B
Token: (0) NAME C
Token: (0) '\n'
Token: (0) NULL
Token: (0) NULL
Test: push text twice
Token: (0) NAME DEFC
Token: (0) NAME C
Token: (0) '='
Token: (0) NUMBER 2
Token: (0) '\n'
Token: (0) NAME DEFC
Token: (0) NAME D
Token: (0) '='
Token: (0) NUMBER 3
Token: (0) '\n'
Token: (0) '\n'
Token: (0) '\n'
Token: (0) NUMBER 1
Token: (0) NUMBER 2
Token: (0) NUMBER 3
Token: (0) NAME A
Token: (0) NAME B
Token: (0) NAME C
Token: (0) '\n'
Token: (0) NULL
Token: (0) NULL
Test: push text in middle of reading
Token: (0) '\n'
Token: (0) '\n'
Token: (0) NUMBER 1
Token: (0) NUMBER 2
Token: (0) NAME DEFC
Token: (0) NAME C
Token: (0) '='
Token: (0) NUMBER 2
Token: (0) '\n'
Token: (0) NAME DEFC
Token: (0) NAME D
Token: (0) '='
Token: (0) NUMBER 3
Token: (0) '\n'
Token: (0) NUMBER 3
Token: (0) NAME A
Token: (0) NAME B
Token: (0) NAME C
Token: (0) '\n'
Token: (0) NULL
Token: (0) NULL
Test: open text file
List:f0:1:F0 1
Token: f0(1) NAME F0
Token: f0(1) NUMBER 1
Token: f0(1) '\n'
List:f0:2:
Token: f0(2) '\n'
List:f0:3:F0 3
Token: f0(3) NAME F0
Token: f0(3) NUMBER 3
Token: f0(3) '\n'
Token: f0(3) NAME DEFC
Token: f0(3) NAME C
Token: f0(3) '='
Token: f0(3) NUMBER 2
Token: f0(3) '\n'
Token: f0(3) NAME DEFC
Token: f0(3) NAME D
Token: f0(3) '='
Token: f0(3) NUMBER 3
Token: f0(3) '\n'
List:f0:4:
Token: f0(4) '\n'
List:f0:5:F0 5
Token: f0(5) NAME F0
Token: f0(5) NUMBER 5
List:x1/f1:1:F1 1
Token: x1/f1(1) NAME F1
Token: x1/f1(1) NUMBER 1
Token: x1/f1(1) '\n'
List:x1/f1:2:F1 2
Token: x1/f1(2) NAME F1
Token: x1/f1(2) NUMBER 2
Token: x1/f1(2) '\n'
List:x1/f1:3:F1 3
Token: x1/f1(3) NAME F1
Token: x1/f1(3) NUMBER 3
Token: x1/f1(3) '\n'
Token: f0(5) '\n'
List:f0:6:
Token: f0(6) '\n'
List:f0:7:F0 7
Token: f0(7) NAME F0
Token: f0(7) NUMBER 7
Token: f0(7) '\n'
List:f0:8:
Token: f0(8) '\n'
List:f0:9:F0 9
Token: f0(9) NAME F0
Token: f0(9) NUMBER 9
Token: f0(9) '\n'
List:f0:10:
Token: f0(10) '\n'
List:f0:11:F0 11
Token: f0(11) NAME F0
Token: f0(11) NUMBER 11
Token: f0(11) '\n'
List:f0:12:
Token: f0(12) '\n'
List:f0:13:F0 13
Token: f0(13) NAME F0
Token: f0(13) NUMBER 13
Token: f0(13) '\n'
Token: (0) NULL
Token: (0) NULL
List:x2/f2:1:; sigle-character tokens
Token: x2/f2(1) '\n'
List:x2/f2:2:! # $ % & ( ) * + , - . / : < = > ? @ [ \ ] ^ ` { | } ~
Token: x2/f2(2) '!'
Token: x2/f2(2) '#'
Token: x2/f2(2) '$'
Token: x2/f2(2) '%'
Token: x2/f2(2) '&'
Token: x2/f2(2) '('
Token: x2/f2(2) ')'
Token: x2/f2(2) '*'
Token: x2/f2(2) '+'
Token: x2/f2(2) ','
Token: x2/f2(2) '-'
Token: x2/f2(2) '.'
Token: x2/f2(2) '/'
Token: x2/f2(2) ':'
Token: x2/f2(2) '<'
Token: x2/f2(2) '='
Token: x2/f2(2) '>'
Token: x2/f2(2) '?'
Token: x2/f2(2) '@'
Token: x2/f2(2) '['
Token: x2/f2(2) '\'
Token: x2/f2(2) ']'
Token: x2/f2(2) '^'
Token: x2/f2(2) '`'
Token: x2/f2(2) '{'
Token: x2/f2(2) '|'
Token: x2/f2(2) '}'
Token: x2/f2(2) '~'
Token: x2/f2(2) '\n'
List:x2/f2:3:
Token: x2/f2(3) '\n'
List:x2/f2:4:; multiple-character tokens
Token: x2/f2(4) '\n'
List:x2/f2:5:== <> != <= >= || && << >> **
Token: x2/f2(5) EQUAL_EQUAL
Token: x2/f2(5) LESS_GREATER
Token: x2/f2(5) NOT_EQUAL
Token: x2/f2(5) LESS_EQUAL
Token: x2/f2(5) GREATER_EQUAL
Token: x2/f2(5) DBL_VBAR
Token: x2/f2(5) DBL_AMPERSAND
Token: x2/f2(5) DBL_LESS
Token: x2/f2(5) DBL_GREATER
Token: x2/f2(5) DBL_ASTERISK
Token: x2/f2(5) '\n'
List:x2/f2:6:
Token: x2/f2(6) '\n'
List:x2/f2:7:; names
Token: x2/f2(7) '\n'
List:x2/f2:8:_Abc_123 Abc_123 123_Abc_
Token: x2/f2(8) NAME _ABC_123
Token: x2/f2(8) NAME ABC_123
Token: x2/f2(8) NUMBER 123
Token: x2/f2(8) NAME _ABC_
Token: x2/f2(8) '\n'
List:x2/f2:9:Abc_123	af' bc'de'af'
Token: x2/f2(9) NAME ABC_123
Token: x2/f2(9) NAME AF
Token: x2/f2(9) STRING ' bc'
Token: x2/f2(9) NAME DE
Token: x2/f2(9) STRING 'af'
Token: x2/f2(9) '\n'
List:x2/f2:10:
Token: x2/f2(10) '\n'
List:x2/f2:11:; labels
Token: x2/f2(11) '\n'
List:x2/f2:12:.abc  . def : ghi
Token: x2/f2(12) NAME ABC
Token: x2/f2(12) '.'
Token: x2/f2(12) NAME DEF
Token: x2/f2(12) ':'
Token: x2/f2(12) NAME GHI
Token: x2/f2(12) '\n'
List:x2/f2:13: abc: . def : ghi
Token: x2/f2(13) NAME ABC
Token: x2/f2(13) '.'
Token: x2/f2(13) NAME DEF
Token: x2/f2(13) ':'
Token: x2/f2(13) NAME GHI
Token: x2/f2(13) '\n'
List:x2/f2:14:.abc: . def : ghi
Token: x2/f2(14) NAME ABC
Token: x2/f2(14) ':'
Token: x2/f2(14) '.'
Token: x2/f2(14) NAME DEF
Token: x2/f2(14) ':'
Token: x2/f2(14) NAME GHI
Token: x2/f2(14) '\n'
List:x2/f2:15:
Token: x2/f2(15) '\n'
List:x2/f2:16:; numbers - decimal
Token: x2/f2(16) '\n'
List:x2/f2:17:0 2147483647 2147483648
Token: x2/f2(17) NUMBER 0
Token: x2/f2(17) NUMBER 2147483647
Warning at file 'x2/f2' line 17: integer '-2147483648' out of range
Token: x2/f2(17) NUMBER -2147483648
Token: x2/f2(17) '\n'
List:x2/f2:18:
Token: x2/f2(18) '\n'
List:x2/f2:19:; numbers - binary
Token: x2/f2(19) '\n'
List:x2/f2:20:  0000b   0011b    1111111111111111111111111111111b
Token: x2/f2(20) NUMBER 0
Token: x2/f2(20) NUMBER 3
Token: x2/f2(20) NUMBER 2147483647
Token: x2/f2(20) '\n'
List:x2/f2:21: @0000   @0011    @1111111111111111111111111111111
Token: x2/f2(21) NUMBER 0
Token: x2/f2(21) NUMBER 3
Token: x2/f2(21) NUMBER 2147483647
Token: x2/f2(21) '\n'
List:x2/f2:22: %0000   %0011    %1111111111111111111111111111111
Token: x2/f2(22) NUMBER 0
Token: x2/f2(22) NUMBER 3
Token: x2/f2(22) NUMBER 2147483647
Token: x2/f2(22) '\n'
List:x2/f2:23:0b0000  0b0011   0b1111111111111111111111111111111
Token: x2/f2(23) NUMBER 0
Token: x2/f2(23) NUMBER 3
Token: x2/f2(23) NUMBER 2147483647
Token: x2/f2(23) '\n'
List:x2/f2:24:@'----' @'--##'  @'###############################'
Token: x2/f2(24) NUMBER 0
Token: x2/f2(24) NUMBER 3
Token: x2/f2(24) NUMBER 2147483647
Token: x2/f2(24) '\n'
List:x2/f2:25:%'----' %'--##'  %'###############################'
Token: x2/f2(25) NUMBER 0
Token: x2/f2(25) NUMBER 3
Token: x2/f2(25) NUMBER 2147483647
Token: x2/f2(25) '\n'
List:x2/f2:26:@"----" @"--##"  @"###############################"
Token: x2/f2(26) NUMBER 0
Token: x2/f2(26) NUMBER 3
Token: x2/f2(26) NUMBER 2147483647
Token: x2/f2(26) '\n'
List:x2/f2:27:%"----" %"--##"  %"###############################"
Token: x2/f2(27) NUMBER 0
Token: x2/f2(27) NUMBER 3
Token: x2/f2(27) NUMBER 2147483647
Token: x2/f2(27) '\n'
List:x2/f2:28:
Token: x2/f2(28) '\n'
List:x2/f2:29:; numbers - hexadecimal
Token: x2/f2(29) '\n'
List:x2/f2:30:  0h 0ah 0FH   7FFFFFFFh
Token: x2/f2(30) NUMBER 0
Token: x2/f2(30) NUMBER 10
Token: x2/f2(30) NUMBER 15
Token: x2/f2(30) NUMBER 2147483647
Token: x2/f2(30) '\n'
List:x2/f2:31: $0   $a  $F  $7FFFFFFF
Token: x2/f2(31) NUMBER 0
Token: x2/f2(31) NUMBER 10
Token: x2/f2(31) NUMBER 15
Token: x2/f2(31) NUMBER 2147483647
Token: x2/f2(31) '\n'
List:x2/f2:32: #0   #a  #F  #7FFFFFFF
Token: x2/f2(32) NUMBER 0
Token: x2/f2(32) NUMBER 10
Token: x2/f2(32) NUMBER 15
Token: x2/f2(32) NUMBER 2147483647
Token: x2/f2(32) '\n'
List:x2/f2:33:0x0  0xa 0xF 0x7FFFFFFF
Token: x2/f2(33) NUMBER 0
Token: x2/f2(33) NUMBER 10
Token: x2/f2(33) NUMBER 15
Token: x2/f2(33) NUMBER 2147483647
Token: x2/f2(33) '\n'
List:x2/f2:34:
Token: x2/f2(34) '\n'
List:x2/f2:35:; strings - single-quote
Token: x2/f2(35) '\n'
List:x2/f2:36:'''a''"'';';comment
Token: x2/f2(36) STRING ''
Token: x2/f2(36) STRING 'a'
Token: x2/f2(36) STRING '"'
Token: x2/f2(36) STRING ';'
Token: x2/f2(36) '\n'
List:x2/f2:37:'unclosed
Error at file 'x2/f2' line 37: unclosed string
Token: x2/f2(37) '\n'
List:x2/f2:38:
Token: x2/f2(38) '\n'
List:x2/f2:39:; strings - double-quotes
Token: x2/f2(39) '\n'
List:x2/f2:40:"""a""'"";";comment
Token: x2/f2(40) STRING ''
Token: x2/f2(40) STRING 'a'
Token: x2/f2(40) STRING '''
Token: x2/f2(40) STRING ';'
Token: x2/f2(40) '\n'
List:x2/f2:41:"unclosed
Error at file 'x2/f2' line 41: unclosed string
Token: x2/f2(41) '\n'
List:x2/f2:42:
Token: x2/f2(42) '\n'
Token: (0) NULL
Token: (0) NULL
List:x2/f3:1:ld a,
Token: x2/f3(1) NAME LD
Token: x2/f3(1) NAME A
Token: x2/f3(1) ','
Token: x2/f3(1) NUMBER 1
Token: x2/f3(1) '\n'
List:x2/f3:2:ld b
Token: x2/f3(2) NAME LD
Token: x2/f3(2) NAME B
Token: x2/f3(2) ','
Token: x2/f3(2) NUMBER 1
Token: x2/f3(2) '\n'
Token: (0) NULL
Token: (0) NULL
END


# test circular includes
t_compile_module($init, <<'END', $objs);
	int ret = 1;

    TRY
    {
		warn("Test: open text file\n");
		scan_file("f0");
		n_tokens( 7 );
		
		warn("Test: open text file again\n");
		scan_file("f0");
		
	}
    CATCH ( FatalErrorException )
    {
        ret = 0;		/* ok */
    }
	FINALLY {}
	ETRY;
	
	return ret;
END

t_run_module([], <<'OUT', <<'END', 0);
GLib Memory statistics (successful operations):
 blocks of | allocated  | freed      | allocated  | freed      | n_bytes   
  n_bytes  | n_times by | n_times by | n_times by | n_times by | remaining 
           | malloc()   | free()     | realloc()  | realloc()  |           
===========|============|============|============|============|===========
         3 |          2 |          2 |          0 |          0 |         +0
         4 |          1 |          1 |          0 |          0 |         +0
         8 |          0 |          1 |          1 |          0 |         +0
        11 |          0 |          1 |          1 |          0 |         +0
        12 |          3 |          1 |          0 |          2 |         +0
        20 |          1 |          1 |          0 |          0 |         +0
        21 |          1 |          0 |          0 |          1 |         +0
        24 |          3 |          3 |          0 |          0 |         +0
        28 |          1 |          1 |          0 |          0 |         +0
        32 |          1 |          1 |          0 |          0 |         +0
        37 |          0 |          1 |          1 |          0 |         +0
        40 |          3 |          3 |          0 |          0 |         +0
        42 |          0 |          0 |          1 |          1 |         +0
        44 |          4 |          1 |          0 |          3 |         +0
        48 |          2 |          2 |          0 |          0 |         +0
        88 |          0 |          3 |          3 |          0 |         +0
        96 |          1 |          1 |          0 |          0 |         +0
       252 |          3 |          0 |          0 |          0 |       +756
       256 |          0 |          1 |          1 |          0 |         +0
       384 |          1 |          1 |          0 |          0 |         +0
      1016 |          1 |          0 |          0 |          0 |      +1016
      1024 |          1 |          1 |          0 |          0 |         +0
   >  4096 |          1 |          1 |          0 |          0 |        ***
GLib Memory statistics (failing operations):
 --- none ---
Total bytes: allocated=20891, zero-initialized=18974 (90.82%), freed=19119 (91.52%), remaining=1772
OUT
Test: open text file
List:f0:1:F0 1
Token: f0(1) NAME F0
Token: f0(1) NUMBER 1
Token: f0(1) '\n'
List:f0:2:
Token: f0(2) '\n'
List:f0:3:F0 3
Token: f0(3) NAME F0
Token: f0(3) NUMBER 3
Token: f0(3) '\n'
Test: open text file again
Error at file 'f0' line 3: cannot include file 'f0' recursively
END


# test open file error
t_compile_module($init, <<'END', $objs);
	int ret = 1;

    TRY
    {
		warn("Test: open text file\n");
		scan_file("f0");
		n_tokens( 7 );
		
		warn("Test: open fails\n");
		scan_file("f1");
		
	}
    CATCH ( FatalErrorException )
    {
        ret = 0;		/* ok */
    }
	FINALLY {}
	ETRY;
	
	return ret;
END

t_run_module([], <<'OUT', <<'END', 0);
GLib Memory statistics (successful operations):
 blocks of | allocated  | freed      | allocated  | freed      | n_bytes   
  n_bytes  | n_times by | n_times by | n_times by | n_times by | remaining 
           | malloc()   | free()     | realloc()  | realloc()  |           
===========|============|============|============|============|===========
         3 |          2 |          2 |          0 |          0 |         +0
         4 |          1 |          1 |          0 |          0 |         +0
         8 |          0 |          1 |          1 |          0 |         +0
        11 |          0 |          1 |          1 |          0 |         +0
        12 |          3 |          1 |          0 |          2 |         +0
        18 |          1 |          0 |          0 |          1 |         +0
        20 |          1 |          1 |          0 |          0 |         +0
        22 |          0 |          1 |          1 |          0 |         +0
        24 |          3 |          3 |          0 |          0 |         +0
        28 |          1 |          1 |          0 |          0 |         +0
        32 |          1 |          1 |          0 |          0 |         +0
        36 |          0 |          0 |          1 |          1 |         +0
        40 |          3 |          3 |          0 |          0 |         +0
        44 |          4 |          1 |          0 |          3 |         +0
        48 |          2 |          2 |          0 |          0 |         +0
        88 |          0 |          3 |          3 |          0 |         +0
        96 |          1 |          1 |          0 |          0 |         +0
       252 |          3 |          0 |          0 |          0 |       +756
       256 |          0 |          1 |          1 |          0 |         +0
       384 |          1 |          1 |          0 |          0 |         +0
      1016 |          1 |          0 |          0 |          0 |      +1016
      1024 |          1 |          1 |          0 |          0 |         +0
   >  4096 |          1 |          1 |          0 |          0 |        ***
GLib Memory statistics (failing operations):
 --- none ---
Total bytes: allocated=20867, zero-initialized=18974 (90.93%), freed=19095 (91.51%), remaining=1772
OUT
Test: open text file
List:f0:1:F0 1
Token: f0(1) NAME F0
Token: f0(1) NUMBER 1
Token: f0(1) '\n'
List:f0:2:
Token: f0(2) '\n'
List:f0:3:F0 3
Token: f0(3) NAME F0
Token: f0(3) NUMBER 3
Token: f0(3) '\n'
Test: open fails
Error at file 'f0' line 3: cannot read file 'f1'
END

}

# delete directories and files
remove_tree(qw( x1 x2 x3 ));
unlink_testfiles('f0');
done_testing;


__END__
# $Header: /home/dom/z88dk-git/cvs/z88dk/src/z80asm/t/Attic/whitebox-scan.t,v 1.16 2013-09-24 00:05:36 pauloscustodio Exp $
# $Log: whitebox-scan.t,v $
# Revision 1.16  2013-09-24 00:05:36  pauloscustodio
# Replaced chomp by g_strchomp; tolower by g_ascii_tolower;
# toupper by g_ascii_toupper; stricompare by g_ascii_strcasecmp.
# Removed normalize_eol.
#
# Revision 1.15  2013/09/23 23:14:10  pauloscustodio
# Renamed SzList to StringList, simplified interface by assuming that
# list lives in memory util program ends; it is used for directory searches
# only. Moved interface to strutil.c, removed strlist.c.
#
# Revision 1.14  2013/09/22 21:04:22  pauloscustodio
# New File and FileStack objects
#
# Revision 1.13  2013/09/09 00:20:45  pauloscustodio
# Add default set of modules to t_compile_module:
# -DMEMALLOC_DEBUG memalloc.c die.o except.o strpool.o
#
# Revision 1.12  2013/09/08 08:29:21  pauloscustodio
# Replaced xmalloc et al with g_malloc0 et al.
#
# Revision 1.11  2013/09/08 00:43:59  pauloscustodio
# New error module with one error function per error, no need for the error
# constants. Allows compiler to type-check error message arguments.
# Included the errors module in the init() mechanism, no need to call
# error initialization from main(). Moved all error-testing scripts to
# one file errors.t.
#
# Revision 1.10  2013/09/01 17:28:48  pauloscustodio
# Change in test output due to memalloc change.
#
# Revision 1.9  2013/09/01 11:52:55  pauloscustodio
# Setup memalloc on init.c.
# Setup GLib memory allocation functions to use memalloc functions.
#
# Revision 1.8  2013/09/01 00:18:30  pauloscustodio
# - Replaced e4c exception mechanism by a much simpler one based on a few
#   macros. The former did not allow an exit(1) to be called within a
#   try-catch block.
#
# Revision 1.7  2013/05/12 19:20:34  pauloscustodio
# warnings
#
# Revision 1.6  2013/05/01 19:03:46  pauloscustodio
# Simplified scanner and adapted to be used with a BISON generated parser.
# Removed balanced struct checking and token ring.
# Removed start condition to list assembly lines, as it was difficult to keep in sync across included
# files; inserted an RS char in the input before each line to trigger listing.
# Allow ".NAME" and "NAME:" to return a NAME token, so that ".LD" is recognized as a label and not the LD assembly statement.
# Added Integer out of range warning to number scanning routine.
# Allow input lines to be any size, as long as memory can be allocated.
# Created a skeleton BISON parser.
#
# Revision 1.5  2013/04/14 20:47:27  pauloscustodio
# TOK_LABEL for a label definition, i.e. ".NAME" or "NAME:", with no spaces between symbols
# colon to separate assembly statements in a line needs spaces.
#
# Revision 1.4  2013/04/14 18:17:00  pauloscustodio
# Split scanner in several modules, allow token look-ahead to simplify
# parser.
#
# Revision 1.3  2013/04/09 20:56:51  pauloscustodio
# TOK_LABEL removed - identifying a label as XXX: has to be a parsing action in order to
# distinguish a label from a continuation statement, e.g.
# LABEL: ld a,VALUE : inc a ; LABEL is label, VALUE is name
#
# Revision 1.2  2013/03/31 18:28:30  pauloscustodio
# New TOK_LABEL for a label definition, i.e. ". NAME" or "NAME :"
#
# Revision 1.1  2013/03/29 23:53:08  pauloscustodio
# Added GNU Flex-based scanner. Not yet integrated into assembler.
