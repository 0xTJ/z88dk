/* generated by make_init.pl memalloc.h strpool.h errors.h file.h options.h codearea.h */

#pragma once
#define main user_main

/* includes */
#include "memalloc.h"   			/* before any other include */

#include "memalloc.h"

#include "strpool.h"

#include "errors.h"

#include "file.h"

#include "options.h"

#include "codearea.h"

#include <glib.h>

/* data types */
typedef int BOOL;

typedef struct File File;

typedef struct FileStack FileStack;

typedef struct Opts Opts;


/* global data */
extern GSList *object_register;		/* all registered objects for cleanup at end */
#define OBJREG_STORE_ADDR(data)	(((char *)(data))  - sizeof(void*))
#define OBJREG_DATA_ADDR(store)	(((char *)(store)) + sizeof(void*))

/* declare functions */
extern void xatexit(void (*fini)(void));
extern void register_object(void *object);
extern void unregister_object(void *object);


/* File: create, destroy, set/clear autodelete */
extern File * new_File (  char * filename,  char * mode );
extern void delete_File ( File *self );
extern void delete0_File ( File **pself );
extern void autodelete_File ( File *self, BOOL autodelete );

/* FileStack: create, destroy, set/clear autodelete */
extern FileStack * new_FileStack ( void );
extern void delete_FileStack ( FileStack *self );
extern void delete0_FileStack ( FileStack **pself );
extern void autodelete_FileStack ( FileStack *self, BOOL autodelete );

/* Opts: create, destroy, set/clear autodelete */
extern Opts * new_Opts ( void );
extern void delete_Opts ( Opts *self );
extern void delete0_Opts ( Opts **pself );
extern void autodelete_Opts ( Opts *self, BOOL autodelete );